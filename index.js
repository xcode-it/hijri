"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.__toESM = exports.__toCommonJS = exports.__require = exports.__export = exports.__esm = exports.__commonJS = void 0;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = function (x) {
  return typeof require !== 'undefined' ? require : typeof Proxy !== 'undefined' ? new Proxy(x, {
    get: function get(a, b) {
      return (typeof require !== 'undefined' ? require : a)[b];
    }
  }) : x;
}(function (x) {
  if (typeof require !== 'undefined') return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
exports.__require = __require;
var __esm = function __esm(fn, res) {
  return function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
};
exports.__esm = __esm;
var __commonJS = function __commonJS(cb, mod) {
  return function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
      exports: {}
    }).exports, mod), mod.exports;
  };
};
exports.__commonJS = __commonJS;
var __export = function __export(target, all) {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
exports.__export = __export;
var __copyProps = function __copyProps(to, from, except, desc) {
  if (from && _typeof(from) === 'object' || typeof from === 'function') {
    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),
      _step;
    try {
      var _loop = function _loop() {
        var key = _step.value;
        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
          get: function get() {
            return from[key];
          },
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
      };
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return to;
};
var __toESM = function __toESM(mod, isNodeMode, target) {
  return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, 'default', {
    value: mod,
    enumerable: true
  }) : target, mod);
};
exports.__toESM = __toESM;
var __toCommonJS = function __toCommonJS(mod) {
  return __copyProps(__defProp({}, '__esModule', {
    value: true
  }), mod);
};
exports.__toCommonJS = __toCommonJS;
var require_moment = __commonJS({
  'node_modules/moment/moment.js': function node_modulesMomentMomentJs(exports, module) {
    ;
    (function (global, factory) {
      _typeof(exports) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
    })(exports, function () {
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }
      function map(arr, fn) {
        var res = [],
          i,
          arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function some(fun) {
          var t = Object(this),
            len = t.length >>> 0,
            i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m),
            parsedParts = some.call(flags.parsedDateParts, function (i) {
              return i != null;
            }),
            isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [],
        updateInProgress = false;
      function copyConfig(to2, from2) {
        var i,
          prop,
          val,
          momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [],
              arg,
              i,
              key,
              argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = '';
              if (_typeof(arguments[i]) === 'object') {
                arg += '\n[' + i + '] ';
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ': ' + arguments[0][key] + ', ';
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this['_' + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
          prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function keys(obj) {
          var i,
            res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign2 = number >= 0;
        return (sign2 ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === 'string') {
          func = function func() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token2);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens),
          i,
          length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function (mom) {
          var output = '',
            i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
          if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
            return tok.slice(1);
          }
          return tok;
        }).join('');
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = 'Invalid date';
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }
      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? 'future' : 'past'];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
          normalizedProp,
          prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [],
          u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({
              unit: u,
              priority: priorities[u]
            });
          }
        }
        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
          value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (_typeof(units) === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units),
            i,
            prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/,
        match2 = /\d\d/,
        match3 = /\d{3}/,
        match4 = /\d{4}/,
        match6 = /[+-]?\d{6}/,
        match1to2 = /\d\d?/,
        match3to4 = /\d\d\d\d?/,
        match5to6 = /\d\d\d\d\d\d?/,
        match1to3 = /\d{1,3}/,
        match1to4 = /\d{1,4}/,
        match1to6 = /[+-]?\d{1,6}/,
        matchUnsigned = /\d+/,
        matchSigned = /[+-]?\d+/,
        matchOffset = /Z|[+-]\d\d:?\d\d/gi,
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function (isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i,
          func = callback,
          tokenLen;
        if (typeof token2 === 'string') {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function func(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i = 0; i < tokenLen; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function (input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function indexOf(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });
      addFormatToken('MMM', 0, 0, function (format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken('MMMM', 0, 0, function (format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias('month', 'M');
      addUnitPriority('month', 8);
      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(['MMM', 'MMMM'], function (input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? 'format' : 'standalone'][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? 'format' : 'standalone'][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i,
          ii,
          mom,
          llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }
          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          if (strict && format2 === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, 'Month');
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }
      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
      });
      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });
      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
      addUnitAlias('year', 'y');
      addUnitPriority('year', 1);
      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet('FullYear', true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy,
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
          weekOffset = firstWeekOffset(year, dow, doy),
          dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
          resYear,
          resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
          week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
          resWeek,
          resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
          weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W');
      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5);
      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      }
      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken('ddd', 0, 0, function (format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken('dddd', 0, 0, function (format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');
      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E');
      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11);
      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== 'string') {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === 'number') {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === 'string') {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i,
          ii,
          mom,
          llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }
          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          if (strict && format2 === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [],
          shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom,
          minp,
          shortp,
          longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ''));
          shortp = regexEscape(this.weekdaysShort(mom, ''));
          longp = regexEscape(this.weekdays(mom, ''));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem('a', true);
      meridiem('A', false);
      addUnitAlias('hour', 'h');
      addUnitPriority('hour', 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('k', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        getSetHour = makeGetSet('Hours', true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {},
        localeFamilies = {},
        globalLocale;
      function commonPrefix(arr1, arr2) {
        var i,
          minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      }
      function chooseLocale(names) {
        var i = 0,
          j,
          next,
          locale2,
          split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join('-'));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return name.match('^[^/\\\\]*$') != null;
      }
      function loadLocale(name) {
        var oldLocale = null,
          aliasedRequire;
        if (locales[name] === void 0 && typeof module !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = __require;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              console.warn('Locale ' + key + ' not found. Did you forget to load it?');
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2,
            parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name: name,
                  config: config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2,
            tmpLocale,
            parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow,
          a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]],
        isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60
        };
      function configFromISO(config) {
        var i,
          l,
          string = config._i,
          match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
          allowTime,
          dateFormat,
          timeFormat,
          tzFormat,
          isoDatesLen = isoDates.length,
          isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10),
            m = hm % 100,
            h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
          parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      });
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i,
          date,
          input = [],
          currentDate,
          expectedWeekday,
          yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function () {};
      hooks.RFC_2822 = function () {};
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = '' + config._i,
          i,
          parsedInput,
          tokens2,
          token2,
          skipped,
          stringLength = string.length,
          totalParsedInputLength = 0,
          era,
          tokenLen;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i = 0; i < tokenLen; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig,
          bestMoment,
          scoreToBeat,
          i,
          currentScore,
          validFormatFound,
          bestFormatIsValid = false,
          configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i),
          dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, 'd');
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i,
          format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === '') {
          return createInvalid({
            nullInput: true
          });
        }
        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid();
          }
        }),
        prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid();
          }
        });
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      }
      var now = function now() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
      function isDurationValid(m) {
        var key,
          unitHasDecimal = false,
          i,
          orderLen = ordering.length;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
          years2 = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months2 = normalizedInput.month || 0,
          weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0,
          days2 = normalizedInput.day || 0,
          hours2 = normalizedInput.hour || 0,
          minutes2 = normalizedInput.minute || 0,
          seconds2 = normalizedInput.second || 0,
          milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function () {
          var offset2 = this.utcOffset(),
            sign2 = '+';
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = '-';
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset('Z', ':');
      offset('ZZ', '');
      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
          chunk,
          parts,
          minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === '+' ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function () {};
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0,
          localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {},
          other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input,
          match = null,
          sign2,
          ret,
          diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (_typeof(duration) === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(',', '.'));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds,
          days2 = absRound(duration._days),
          months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, 'Month') + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, 'Date', get(mom, 'Date') + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');
      function isString(input) {
        return typeof input === 'string' || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
          i,
          property,
          propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
          dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function (item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
          i,
          property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, 'days', true);
        return diff2 < -6 ? 'sameElse' : diff2 < -1 ? 'lastWeek' : diff2 < 0 ? 'lastDay' : diff2 < 1 ? 'sameDay' : diff2 < 2 ? 'nextDay' : diff2 < 7 ? 'nextWeek' : 'sameElse';
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(),
          sod = cloneWithOffset(now2, this).startOf('day'),
          format2 = hooks.calendarFormat(this, sod) || 'sameElse',
          output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2),
          localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
          inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;
          case 'month':
            output = monthDiff(this, that);
            break;
          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;
          case 'second':
            output = (this - that) / 1e3;
            break;
          case 'minute':
            output = (this - that) / 6e4;
            break;
          case 'hour':
            output = (this - that) / 36e5;
            break;
          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break;
          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2,
          adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true,
          m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace('Z', formatMoment(m, 'Z'));
          }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
          zone = '',
          prefix,
          year,
          datetime,
          suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === 'millisecond' || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;
          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === 'millisecond' || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken('N', 0, 0, 'eraAbbr');
      addFormatToken('NN', 0, 0, 'eraAbbr');
      addFormatToken('NNN', 0, 0, 'eraAbbr');
      addFormatToken('NNNN', 0, 0, 'eraName');
      addFormatToken('NNNNN', 0, 0, 'eraNarrow');
      addFormatToken('y', ['y', 1], 'yo', 'eraYear');
      addFormatToken('y', ['yy', 2], 0, 'eraYear');
      addFormatToken('y', ['yyy', 3], 0, 'eraYear');
      addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
      addRegexToken('N', matchEraAbbr);
      addRegexToken('NN', matchEraAbbr);
      addRegexToken('NNN', matchEraAbbr);
      addRegexToken('NNNN', matchEraName);
      addRegexToken('NNNNN', matchEraNarrow);
      addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken('y', matchUnsigned);
      addRegexToken('yy', matchUnsigned);
      addRegexToken('yyy', matchUnsigned);
      addRegexToken('yyyy', matchUnsigned);
      addRegexToken('yo', matchEraYearOrdinal);
      addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
      addParseToken(['yo'], function (input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i,
          l,
          date,
          eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (_typeof(eras[i].since)) {
            case 'string':
              date = hooks(eras[i].since).startOf('day');
              eras[i].since = date.valueOf();
              break;
          }
          switch (_typeof(eras[i].until)) {
            case 'undefined':
              eras[i].until = Infinity;
              break;
            case 'string':
              date = hooks(eras[i].until).startOf('day').valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i,
          l,
          eras = this.eras(),
          name,
          abbr,
          narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case 'N':
              case 'NN':
              case 'NNN':
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case 'NNNN':
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case 'NNNNN':
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return '';
      }
      function getEraNarrow() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return '';
      }
      function getEraAbbr() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return '';
      }
      function getEraYear() {
        var i,
          l,
          dir,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [],
          namePieces = [],
          narrowPieces = [],
          mixedPieces = [],
          i,
          l,
          eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));
          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
      }
      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');
      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG');
      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1);
      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(['gg', 'GG'], function (input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
          date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken('Q', 0, 'Qo', 'quarter');
      addUnitAlias('quarter', 'Q');
      addUnitPriority('quarter', 7);
      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken('D', ['DD', 2], 'Do', 'date');
      addUnitAlias('date', 'D');
      addUnitPriority('date', 9);
      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet('Date', true);
      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
      addUnitAlias('dayOfYear', 'DDD');
      addUnitPriority('dayOfYear', 4);
      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      }
      addFormatToken('m', ['mm', 2], 0, 'minute');
      addUnitAlias('minute', 'm');
      addUnitPriority('minute', 14);
      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE);
      var getSetMinute = makeGetSet('Minutes', false);
      addFormatToken('s', ['ss', 2], 0, 'second');
      addUnitAlias('second', 's');
      addUnitPriority('second', 15);
      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND);
      var getSetSecond = makeGetSet('Seconds', false);
      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1e6;
      });
      addUnitAlias('millisecond', 'ms');
      addUnitPriority('millisecond', 16);
      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token, getSetMillisecond;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1e3);
      }
      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet('Milliseconds', false);
      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');
      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }
      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== 'undefined' && Symbol["for"] != null) {
        proto[Symbol["for"]('nodejs.util.inspect.custom')] = function () {
          return 'Moment<' + this.format() + '>';
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(),
          utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || '';
        if (index != null) {
          return get$1(format2, index, field, 'month');
        }
        var i,
          out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, 'month');
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || '';
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || '';
        }
        var locale2 = getLocale(),
          shift = localeSorted ? locale2._week.dow : 0,
          i,
          out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, 'day');
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, 'day');
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, 'months');
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, 'monthsShort');
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, 'weekdays');
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, 'weekdaysShort');
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, 'weekdaysMin');
      }
      getSetGlobalLocale('en', {
        eras: [{
          since: '0001-01-01',
          until: Infinity,
          offset: 1,
          name: 'Anno Domini',
          narrow: 'AD',
          abbr: 'AD'
        }, {
          since: '0000-12-31',
          until: -Infinity,
          offset: 1,
          name: 'Before Christ',
          narrow: 'BC',
          abbr: 'BC'
        }],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function ordinal(number) {
          var b = number % 10,
            output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      });
      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds,
          days2 = this._days,
          months2 = this._months,
          data = this._data,
          seconds2,
          minutes2,
          hours2,
          years2,
          monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2,
          months2,
          milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'quarter' || units === 'year') {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case 'month':
              return months2;
            case 'quarter':
              return months2 / 3;
            case 'year':
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case 'week':
              return days2 / 7 + milliseconds2 / 6048e5;
            case 'day':
              return days2 + milliseconds2 / 864e5;
            case 'hour':
              return days2 * 24 + milliseconds2 / 36e5;
            case 'minute':
              return days2 * 1440 + milliseconds2 / 6e4;
            case 'second':
              return days2 * 86400 + milliseconds2 / 1e3;
            case 'millisecond':
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }
      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round,
        thresholds = {
          ss: 44,
          s: 45,
          m: 45,
          h: 22,
          d: 26,
          w: null,
          M: 11
        };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(),
          seconds2 = round(duration.as('s')),
          minutes2 = round(duration.as('m')),
          hours2 = round(duration.as('h')),
          days2 = round(duration.as('d')),
          months2 = round(duration.as('M')),
          weeks2 = round(duration.as('w')),
          years2 = round(duration.as('y')),
          a = seconds2 <= thresholds2.ss && ['s', seconds2] || seconds2 < thresholds2.s && ['ss', seconds2] || minutes2 <= 1 && ['m'] || minutes2 < thresholds2.m && ['mm', minutes2] || hours2 <= 1 && ['h'] || hours2 < thresholds2.h && ['hh', hours2] || days2 <= 1 && ['d'] || days2 < thresholds2.d && ['dd', days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ['w'] || weeks2 < thresholds2.w && ['ww', weeks2];
        }
        a = a || months2 <= 1 && ['M'] || months2 < thresholds2.M && ['MM', months2] || years2 <= 1 && ['y'] || ['yy', years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false,
          th = thresholds,
          locale2,
          output;
        if (_typeof(argWithSuffix) === 'object') {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
          withSuffix = argWithSuffix;
        }
        if (_typeof(argThresholds) === 'object') {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3,
          days2 = abs$1(this._days),
          months2 = abs$1(this._months),
          minutes2,
          hours2,
          years2,
          s,
          total = this.asSeconds(),
          totalSign,
          ymSign,
          daysSign,
          hmsSign;
        if (!total) {
          return 'P0D';
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, '') : '';
        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (years2 ? ymSign + years2 + 'Y' : '') + (months2 ? ymSign + months2 + 'M' : '') + (days2 ? daysSign + days2 + 'D' : '') + (hours2 || minutes2 || seconds2 ? 'T' : '') + (hours2 ? hmsSign + hours2 + 'H' : '') + (minutes2 ? hmsSign + minutes2 + 'M' : '') + (seconds2 ? hmsSign + s + 'S' : '');
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang;
      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');
      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = '2.29.4';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        DATE: 'YYYY-MM-DD',
        TIME: 'HH:mm',
        TIME_SECONDS: 'HH:mm:ss',
        TIME_MS: 'HH:mm:ss.SSS',
        WEEK: 'GGGG-[W]WW',
        MONTH: 'YYYY-MM'
      };
      return hooks;
    });
  }
});
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}
function isObject(input) {
  return input != null && Object.prototype.toString.call(input) === '[object Object]';
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input) {
  return input === void 0;
}
function isNumber(input) {
  return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}
function isDate(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}
function map(arr, fn) {
  var res = [],
    i,
    arrLen = arr.length;
  for (i = 0; i < arrLen; ++i) {
    res.push(fn(arr[i], i));
  }
  return res;
}
function extend(a, b) {
  for (var i in b) {
    if (hasOwnProp(b, i)) {
      a[i] = b[i];
    }
  }
  if (hasOwnProp(b, 'toString')) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, 'valueOf')) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
function isValid(m) {
  if (m._isValid == null) {
    var flags = getParsingFlags(m),
      parsedParts = some.call(flags.parsedDateParts, function (i) {
        return i != null;
      }),
      isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
    if (Object.isFrozen == null || !Object.isFrozen(m)) {
      m._isValid = isNowValid;
    } else {
      return isNowValid;
    }
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
function copyConfig(to2, from2) {
  var i,
    prop,
    val,
    momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i = 0; i < momentPropertiesLen; i++) {
      prop = momentProperties[i];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
    console.warn('Deprecation warning: ' + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend(function () {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [],
        arg,
        i,
        key,
        argLen = arguments.length;
      for (i = 0; i < argLen; i++) {
        arg = '';
        if (_typeof(arguments[i]) === 'object') {
          arg += '\n[' + i + '] ';
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ': ' + arguments[0][key] + ', ';
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i];
        }
        args.push(arg);
      }
      warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
function deprecateSimple(name, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name, msg);
  }
  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}
function isFunction(input) {
  return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}
function set(config) {
  var prop, i;
  for (i in config) {
    if (hasOwnProp(config, i)) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this['_' + i] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig),
    prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar['sameElse'];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number, targetLength, forceSign) {
  var absNumber = '' + Math.abs(number),
    zerosToFill = targetLength - absNumber.length,
    sign2 = number >= 0;
  return (sign2 ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === 'string') {
    func = function func() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function () {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function () {
      return this.localeData().ordinal(func.apply(this, arguments), token2);
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, '');
  }
  return input.replace(/\\/g, '');
}
function makeFormatFunction(format2) {
  var array = format2.match(formattingTokens),
    i,
    length;
  for (i = 0, length = array.length; i < length; i++) {
    if (formatTokenFunctions[array[i]]) {
      array[i] = formatTokenFunctions[array[i]];
    } else {
      array[i] = removeFormattingTokens(array[i]);
    }
  }
  return function (mom) {
    var output = '',
      i2;
    for (i2 = 0; i2 < length; i2++) {
      output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
    localFormattingTokens.lastIndex = 0;
    i -= 1;
  }
  return format2;
}
function longDateFormat(key) {
  var format2 = this._longDateFormat[key],
    formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function (tok) {
    if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
      return tok.slice(1);
    }
    return tok;
  }).join('');
  return this._longDateFormat[key];
}
function invalidDate() {
  return this._invalidDate;
}
function ordinal(number) {
  return this._ordinal.replace('%d', number);
}
function relativeTime(number, withoutSuffix, string, isFuture) {
  var output = this._relativeTime[string];
  return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? 'future' : 'past'];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
function addUnitAlias(unit, shorthand) {
  var lowerCase = unit.toLowerCase();
  aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}
function normalizeUnits(units) {
  return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {},
    normalizedProp,
    prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
function addUnitPriority(unit, priority) {
  priorities[unit] = priority;
}
function getPrioritizedUnits(unitsObj) {
  var units = [],
    u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({
        unit: u,
        priority: priorities[u]
      });
    }
  }
  units.sort(function (a, b) {
    return a.priority - b.priority;
  });
  return units;
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function absFloor(number) {
  if (number < 0) {
    return Math.ceil(number) || 0;
  } else {
    return Math.floor(number);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion,
    value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
function makeGetSet(unit, keepTime) {
  return function (value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}
function set$1(mom, unit, value) {
  if (mom.isValid() && !isNaN(value)) {
    if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
      value = toInt(value);
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
    } else {
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
  }
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (_typeof(units) === 'object') {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units),
      i,
      prioritizedLen = prioritized.length;
    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction(regex) ? regex : function (isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
    return p1 || p2 || p3 || p4;
  }));
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function addParseToken(token2, callback) {
  var i,
    func = callback,
    tokenLen;
  if (typeof token2 === 'string') {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function func(input, array) {
      array[callback] = toInt(input);
    };
  }
  tokenLen = token2.length;
  for (i = 0; i < tokenLen; i++) {
    tokens[token2[i]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function (input, array, config, token3) {
    config._w = config._w || {};
    callback(input, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config._a, config, token2);
  }
}
function mod(n, x) {
  return (n % x + x) % x;
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months['standalone'];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? 'format' : 'standalone'][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? 'format' : 'standalone'][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i,
    ii,
    mom,
    llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i = 0; i < 12; ++i) {
      mom = createUTC([2e3, i]);
      this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
      this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === 'MMM') {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === 'MMM') {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    if (strict && !this._longMonthsParse[i]) {
      this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
      this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
    }
    if (!strict && !this._monthsParse[i]) {
      regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
      this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
    }
    if (strict && format2 === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
      return i;
    } else if (strict && format2 === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
      return i;
    } else if (!strict && this._monthsParse[i].test(monthName)) {
      return i;
    }
  }
}
function setMonth(mom, value) {
  var dayOfMonth;
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === 'string') {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
  mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, 'Month');
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, '_monthsRegex')) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, '_monthsShortRegex')) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, '_monthsRegex')) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, '_monthsRegex')) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [],
    longPieces = [],
    mixedPieces = [],
    i,
    mom;
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    shortPieces.push(this.monthsShort(mom, ''));
    longPieces.push(this.months(mom, ''));
    mixedPieces.push(this.months(mom, ''));
    mixedPieces.push(this.monthsShort(mom, ''));
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  for (i = 0; i < 12; i++) {
    shortPieces[i] = regexEscape(shortPieces[i]);
    longPieces[i] = regexEscape(longPieces[i]);
  }
  for (i = 0; i < 24; i++) {
    mixedPieces[i] = regexEscape(mixedPieces[i]);
  }
  this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
  this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function createDate(y, m, d, h, M, s, ms) {
  var date;
  if (y < 100 && y >= 0) {
    date = new Date(y + 400, m, d, h, M, s, ms);
    if (isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
  } else {
    date = new Date(y, m, d, h, M, s, ms);
  }
  return date;
}
function createUTCDate(y) {
  var date, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date = new Date(Date.UTC.apply(null, args));
    if (isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
  } else {
    date = new Date(Date.UTC.apply(null, arguments));
  }
  return date;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy,
    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7,
    weekOffset = firstWeekOffset(year, dow, doy),
    dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
    resYear,
    resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy),
    week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
    resWeek,
    resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy),
    weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, 'd');
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, 'd');
}
function parseWeekday(input, locale2) {
  if (typeof input !== 'string') {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === 'number') {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === 'string') {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? 'format' : 'standalone'];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i,
    ii,
    mom,
    llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i = 0; i < 7; ++i) {
      mom = createUTC([2e3, 1]).day(i);
      this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
      this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
      this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === 'dddd') {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === 'ddd') {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === 'dddd') {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === 'ddd') {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    if (strict && !this._fullWeekdaysParse[i]) {
      this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
      this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
      this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
    }
    if (!this._weekdaysParse[i]) {
      regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
      this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
    }
    if (strict && format2 === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
      return i;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, 'd');
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, 'd');
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, '_weekdaysRegex')) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, '_weekdaysRegex')) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, '_weekdaysRegex')) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, '_weekdaysShortRegex')) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, '_weekdaysRegex')) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, '_weekdaysMinRegex')) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [],
    shortPieces = [],
    longPieces = [],
    mixedPieces = [],
    i,
    mom,
    minp,
    shortp,
    longp;
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    minp = regexEscape(this.weekdaysMin(mom, ''));
    shortp = regexEscape(this.weekdaysShort(mom, ''));
    longp = regexEscape(this.weekdays(mom, ''));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
  this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
  this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function () {
    return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
  });
}
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
function localeIsPM(input) {
  return (input + '').toLowerCase().charAt(0) === 'p';
}
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? 'pm' : 'PM';
  } else {
    return isLower ? 'am' : 'AM';
  }
}
function commonPrefix(arr1, arr2) {
  var i,
    minl = Math.min(arr1.length, arr2.length);
  for (i = 0; i < minl; i += 1) {
    if (arr1[i] !== arr2[i]) {
      return i;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace('_', '-') : key;
}
function chooseLocale(names) {
  var i = 0,
    j,
    next,
    locale2,
    split;
  while (i < names.length) {
    split = normalizeLocale(names[i]).split('-');
    j = split.length;
    next = normalizeLocale(names[i + 1]);
    next = next ? next.split('-') : null;
    while (j > 0) {
      locale2 = loadLocale(split.slice(0, j).join('-'));
      if (locale2) {
        return locale2;
      }
      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
        break;
      }
      j--;
    }
    i++;
  }
  return globalLocale;
}
function isLocaleNameSane(name) {
  return name.match('^[^/\\\\]*$') != null;
}
function loadLocale(name) {
  var oldLocale = null,
    aliasedRequire;
  if (locales[name] === void 0 && typeof module !== 'undefined' && module && module.exports && isLocaleNameSane(name)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = __require;
      aliasedRequire('./locale/' + name);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name] = null;
    }
  }
  return locales[name];
}
function getSetGlobalLocale(key, values) {
  var data;
  if (key) {
    if (isUndefined(values)) {
      data = getLocale(key);
    } else {
      data = defineLocale(key, values);
    }
    if (data) {
      globalLocale = data;
    } else {
      if (typeof console !== 'undefined' && console.warn) {
        console.warn('Locale ' + key + ' not found. Did you forget to load it?');
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name, config) {
  if (config !== null) {
    var locale2,
      parentConfig = baseConfig;
    config.abbr = name;
    if (locales[name] != null) {
      deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
      parentConfig = locales[name]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name: name,
            config: config
          });
          return null;
        }
      }
    }
    locales[name] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name]) {
      localeFamilies[name].forEach(function (x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name);
    return locales[name];
  } else {
    delete locales[name];
    return null;
  }
}
function updateLocale(name, config) {
  if (config != null) {
    var locale2,
      tmpLocale,
      parentConfig = baseConfig;
    if (locales[name] != null && locales[name].parentLocale != null) {
      locales[name].set(mergeConfigs(locales[name]._config, config));
    } else {
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name];
      locales[name] = locale2;
    }
    getSetGlobalLocale(name);
  } else {
    if (locales[name] != null) {
      if (locales[name].parentLocale != null) {
        locales[name] = locales[name].parentLocale;
        if (name === getSetGlobalLocale()) {
          getSetGlobalLocale(name);
        }
      } else if (locales[name] != null) {
        delete locales[name];
      }
    }
  }
  return locales[name];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow,
    a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
function configFromISO(config) {
  var i,
    l,
    string = config._i,
    match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
    allowTime,
    dateFormat,
    timeFormat,
    tzFormat,
    isoDatesLen = isoDates.length,
    isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i = 0, l = isoDatesLen; i < l; i++) {
      if (isoDates[i][1].exec(match[1])) {
        dateFormat = isoDates[i][0];
        allowTime = isoDates[i][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i = 0, l = isoTimesLen; i < l; i++) {
        if (isoTimes[i][1].exec(match[3])) {
          timeFormat = (match[2] || ' ') + isoTimes[i][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = 'Z';
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
      weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10),
      m = hm % 100,
      h = (hm - m) / 100;
    return h * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)),
    parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i,
    date,
    input = [],
    currentDate,
    expectedWeekday,
    yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date.getUTCMonth();
    config._a[DATE] = date.getUTCDate();
  }
  for (i = 0; i < 3 && config._a[i] == null; ++i) {
    config._a[i] = input[i] = currentDate[i];
  }
  for (; i < 7; i++) {
    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string = '' + config._i,
    i,
    parsedInput,
    tokens2,
    token2,
    skipped,
    stringLength = string.length,
    totalParsedInputLength = 0,
    era,
    tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i = 0; i < tokenLen; i++) {
    token2 = tokens2[i];
    parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string.substr(0, string.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string.length > 0) {
    getParsingFlags(config).unusedInput.push(string);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig,
    bestMoment,
    scoreToBeat,
    i,
    currentScore,
    validFormatFound,
    bestFormatIsValid = false,
    configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = new Date(NaN);
    return;
  }
  for (i = 0; i < configfLen; i++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i = normalizeObjectUnits(config._i),
    dayOrDate = i.day === void 0 ? i.date : i.day;
  config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
    return obj && parseInt(obj, 10);
  });
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, 'd');
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input = config._i,
    format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input === null || format2 === void 0 && input === '') {
    return createInvalid({
      nullInput: true
    });
  }
  if (typeof input === 'string') {
    config._i = input = config._locale.preparse(input);
  }
  if (isMoment(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate(input)) {
    config._d = input;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input = config._i;
  if (isUndefined(input)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input)) {
    config._d = new Date(input.valueOf());
  } else if (typeof input === 'string') {
    configFromString(config);
  } else if (isArray(input)) {
    config._a = map(input.slice(0), function (obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input)) {
    configFromObject(config);
  } else if (isNumber(input)) {
    config._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    input = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, false);
}
function pickBy(fn, moments) {
  var res, i;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i = 1; i < moments.length; ++i) {
    if (!moments[i].isValid() || moments[i][fn](res)) {
      res = moments[i];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy('isBefore', args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy('isAfter', args);
}
function isDurationValid(m) {
  var key,
    unitHasDecimal = false,
    i,
    orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i = 0; i < orderLen; ++i) {
    if (m[ordering[i]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration) {
  var normalizedInput = normalizeObjectUnits(duration),
    years2 = normalizedInput.year || 0,
    quarters = normalizedInput.quarter || 0,
    months2 = normalizedInput.month || 0,
    weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0,
    days2 = normalizedInput.day || 0,
    hours2 = normalizedInput.hour || 0,
    minutes2 = normalizedInput.minute || 0,
    seconds2 = normalizedInput.second || 0,
    milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number) {
  if (number < 0) {
    return Math.round(-1 * number) * -1;
  } else {
    return Math.round(number);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length),
    lengthDiff = Math.abs(array1.length - array2.length),
    diffs = 0,
    i;
  for (i = 0; i < len; i++) {
    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset(token2, separator) {
  addFormatToken(token2, 0, 0, function () {
    var offset2 = this.utcOffset(),
      sign2 = '+';
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = '-';
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
function offsetFromString(matcher, string) {
  var matches = (string || '').match(matcher),
    chunk,
    parts,
    minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === '+' ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0,
    localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === 'string') {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, 'm');
    }
    if (offset2 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(this, createDuration(input - offset2, 'm'), 1, false);
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== 'string') {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), 'm');
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === 'string') {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {},
    other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
function createDuration(input, key) {
  var duration = input,
    match = null,
    sign2,
    ret,
    diffRes;
  if (isDuration(input)) {
    duration = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber(input) || !isNaN(+input)) {
    duration = {};
    if (key) {
      duration[key] = +input;
    } else {
      duration.milliseconds = +input;
    }
  } else if (match = aspNetRegex.exec(input)) {
    sign2 = match[1] === '-' ? -1 : 1;
    duration = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
    };
  } else if (match = isoRegex.exec(input)) {
    sign2 = match[1] === '-' ? -1 : 1;
    duration = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration == null) {
    duration = {};
  } else if (_typeof(duration) === 'object' && ('from' in duration || 'to' in duration)) {
    diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
    duration = {};
    duration.ms = diffRes.milliseconds;
    duration.M = diffRes.months;
  }
  ret = new Duration(duration);
  if (isDuration(input) && hasOwnProp(input, '_locale')) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, '_isValid')) {
    ret._isValid = input._isValid;
  }
  return ret;
}
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(',', '.'));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, 'M').isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, 'M');
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return {
      milliseconds: 0,
      months: 0
    };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name) {
  return function (val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
  var milliseconds2 = duration._milliseconds,
    days2 = absRound(duration._days),
    months2 = absRound(duration._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, 'Month') + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, 'Date', get(mom, 'Date') + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
function isString(input) {
  return typeof input === 'string' || input instanceof String;
}
function isMomentInput(input) {
  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input),
    propertyTest = false,
    properties = ['years', 'year', 'y', 'months', 'month', 'M', 'days', 'day', 'd', 'dates', 'date', 'D', 'hours', 'hour', 'h', 'minutes', 'minute', 'm', 'seconds', 'second', 's', 'milliseconds', 'millisecond', 'ms'],
    i,
    property,
    propertyLen = properties.length;
  for (i = 0; i < propertyLen; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray(input),
    dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function (item) {
      return !isNumber(item) && isString(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input),
    propertyTest = false,
    properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
    i,
    property;
  for (i = 0; i < properties.length; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, 'days', true);
  return diff2 < -6 ? 'sameElse' : diff2 < -1 ? 'lastWeek' : diff2 < 0 ? 'lastDay' : diff2 < 1 ? 'sameDay' : diff2 < 2 ? 'nextDay' : diff2 < 7 ? 'nextWeek' : 'sameElse';
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(),
    sod = cloneWithOffset(now2, this).startOf('day'),
    format2 = hooks.calendarFormat(this, sod) || 'sameElse',
    output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || 'millisecond';
  if (units === 'millisecond') {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || 'millisecond';
  if (units === 'millisecond') {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2),
    localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || '()';
  return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input),
    inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || 'millisecond';
  if (units === 'millisecond') {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case 'year':
      output = monthDiff(this, that) / 12;
      break;
    case 'month':
      output = monthDiff(this, that);
      break;
    case 'quarter':
      output = monthDiff(this, that) / 3;
      break;
    case 'second':
      output = (this - that) / 1e3;
      break;
    case 'minute':
      output = (this - that) / 6e4;
      break;
    case 'hour':
      output = (this - that) / 36e5;
      break;
    case 'day':
      output = (this - that - zoneDelta) / 864e5;
      break;
    case 'week':
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
    anchor = a.clone().add(wholeMonthDiff, 'months'),
    anchor2,
    adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
function toString() {
  return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true,
    m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace('Z', formatMoment(m, 'Z'));
    }
  }
  return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
}
function inspect() {
  if (!this.isValid()) {
    return 'moment.invalid(/* ' + this._i + ' */)';
  }
  var func = 'moment',
    zone = '',
    prefix,
    year,
    datetime,
    suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
    zone = 'Z';
  }
  prefix = '[' + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
  datetime = '-MM-DD[T]HH:mm:ss.SSS';
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({
      to: this,
      from: time
    }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({
      from: this,
      to: time
    }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
function localeData() {
  return this._locale;
}
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === 'millisecond' || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case 'year':
      time = startOfDate(this.year(), 0, 1);
      break;
    case 'quarter':
      time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
      break;
    case 'month':
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case 'week':
      time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
      break;
    case 'isoWeek':
      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
      break;
    case 'day':
    case 'date':
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case 'hour':
      time = this._d.valueOf();
      time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
      break;
    case 'minute':
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case 'second':
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === 'millisecond' || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case 'year':
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case 'quarter':
      time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
      break;
    case 'month':
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case 'week':
      time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
      break;
    case 'isoWeek':
      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
      break;
    case 'day':
    case 'date':
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case 'hour':
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
      break;
    case 'minute':
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case 'second':
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
function localeEras(m, format2) {
  var i,
    l,
    date,
    eras = this._eras || getLocale('en')._eras;
  for (i = 0, l = eras.length; i < l; ++i) {
    switch (_typeof(eras[i].since)) {
      case 'string':
        date = hooks(eras[i].since).startOf('day');
        eras[i].since = date.valueOf();
        break;
    }
    switch (_typeof(eras[i].until)) {
      case 'undefined':
        eras[i].until = Infinity;
        break;
      case 'string':
        date = hooks(eras[i].until).startOf('day').valueOf();
        eras[i].until = date.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i,
    l,
    eras = this.eras(),
    name,
    abbr,
    narrow;
  eraName = eraName.toUpperCase();
  for (i = 0, l = eras.length; i < l; ++i) {
    name = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case 'N':
        case 'NN':
        case 'NNN':
          if (abbr === eraName) {
            return eras[i];
          }
          break;
        case 'NNNN':
          if (name === eraName) {
            return eras[i];
          }
          break;
        case 'NNNNN':
          if (narrow === eraName) {
            return eras[i];
          }
          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i,
    l,
    val,
    eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf('day').valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }
  return '';
}
function getEraNarrow() {
  var i,
    l,
    val,
    eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf('day').valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }
  return '';
}
function getEraAbbr() {
  var i,
    l,
    val,
    eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf('day').valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }
  return '';
}
function getEraYear() {
  var i,
    l,
    dir,
    val,
    eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? 1 : -1;
    val = this.clone().startOf('day').valueOf();
    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, '_erasNameRegex')) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, '_erasAbbrRegex')) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, '_erasNarrowRegex')) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [],
    namePieces = [],
    narrowPieces = [],
    mixedPieces = [],
    i,
    l,
    eras = this.eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    namePieces.push(regexEscape(eras[i].name));
    abbrPieces.push(regexEscape(eras[i].abbr));
    narrowPieces.push(regexEscape(eras[i].narrow));
    mixedPieces.push(regexEscape(eras[i].name));
    mixedPieces.push(regexEscape(eras[i].abbr));
    mixedPieces.push(regexEscape(eras[i].narrow));
  }
  this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
  this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
  this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
  this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
}
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
    date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date.getUTCFullYear());
  this.month(date.getUTCMonth());
  this.date(date.getUTCDate());
  return this;
}
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
function getSetDayOfYear(input) {
  var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
}
function parseMs(input, array) {
  array[MILLISECOND] = toInt(('0.' + input) * 1e3);
}
function getZoneAbbr() {
  return this._isUTC ? 'UTC' : '';
}
function getZoneName() {
  return this._isUTC ? 'Coordinated Universal Time' : '';
}
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string) {
  return string;
}
function get$1(format2, index, field, setter) {
  var locale2 = getLocale(),
    utc = createUTC().set(setter, index);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index, field) {
  if (isNumber(format2)) {
    index = format2;
    format2 = void 0;
  }
  format2 = format2 || '';
  if (index != null) {
    return get$1(format2, index, field, 'month');
  }
  var i,
    out = [];
  for (i = 0; i < 12; i++) {
    out[i] = get$1(format2, i, field, 'month');
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index, field) {
  if (typeof localeSorted === 'boolean') {
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || '';
  } else {
    format2 = localeSorted;
    index = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || '';
  }
  var locale2 = getLocale(),
    shift = localeSorted ? locale2._week.dow : 0,
    i,
    out = [];
  if (index != null) {
    return get$1(format2, (index + shift) % 7, field, 'day');
  }
  for (i = 0; i < 7; i++) {
    out[i] = get$1(format2, (i + shift) % 7, field, 'day');
  }
  return out;
}
function listMonths(format2, index) {
  return listMonthsImpl(format2, index, 'months');
}
function listMonthsShort(format2, index) {
  return listMonthsImpl(format2, index, 'monthsShort');
}
function listWeekdays(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, 'weekdays');
}
function listWeekdaysShort(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, 'weekdaysShort');
}
function listWeekdaysMin(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, 'weekdaysMin');
}
function abs() {
  var data = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data.milliseconds = mathAbs(data.milliseconds);
  data.seconds = mathAbs(data.seconds);
  data.minutes = mathAbs(data.minutes);
  data.hours = mathAbs(data.hours);
  data.months = mathAbs(data.months);
  data.years = mathAbs(data.years);
  return this;
}
function addSubtract$1(duration, input, value, direction) {
  var other = createDuration(input, value);
  duration._milliseconds += direction * other._milliseconds;
  duration._days += direction * other._days;
  duration._months += direction * other._months;
  return duration._bubble();
}
function add$1(input, value) {
  return addSubtract$1(this, input, value, 1);
}
function subtract$1(input, value) {
  return addSubtract$1(this, input, value, -1);
}
function absCeil(number) {
  if (number < 0) {
    return Math.floor(number);
  } else {
    return Math.ceil(number);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds,
    days2 = this._days,
    months2 = this._months,
    data = this._data,
    seconds2,
    minutes2,
    hours2,
    years2,
    monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data.days = days2;
  data.months = months2;
  data.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2,
    months2,
    milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === 'month' || units === 'quarter' || units === 'year') {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case 'month':
        return months2;
      case 'quarter':
        return months2 / 3;
      case 'year':
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case 'week':
        return days2 / 7 + milliseconds2 / 6048e5;
      case 'day':
        return days2 + milliseconds2 / 864e5;
      case 'hour':
        return days2 * 24 + milliseconds2 / 36e5;
      case 'minute':
        return days2 * 1440 + milliseconds2 / 6e4;
      case 'second':
        return days2 * 86400 + milliseconds2 / 1e3;
      case 'millisecond':
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error('Unknown unit ' + units);
    }
  }
}
function valueOf$1() {
  if (!this.isValid()) {
    return NaN;
  }
  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
}
function makeAs(alias) {
  return function () {
    return this.as(alias);
  };
}
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + 's']() : NaN;
}
function makeGetter(name) {
  return function () {
    return this.isValid() ? this._data[name] : NaN;
  };
}
function weeks() {
  return absFloor(this.days() / 7);
}
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration = createDuration(posNegDuration).abs(),
    seconds2 = round(duration.as('s')),
    minutes2 = round(duration.as('m')),
    hours2 = round(duration.as('h')),
    days2 = round(duration.as('d')),
    months2 = round(duration.as('M')),
    weeks2 = round(duration.as('w')),
    years2 = round(duration.as('y')),
    a = seconds2 <= thresholds2.ss && ['s', seconds2] || seconds2 < thresholds2.s && ['ss', seconds2] || minutes2 <= 1 && ['m'] || minutes2 < thresholds2.m && ['mm', minutes2] || hours2 <= 1 && ['h'] || hours2 < thresholds2.h && ['hh', hours2] || days2 <= 1 && ['d'] || days2 < thresholds2.d && ['dd', days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ['w'] || weeks2 < thresholds2.w && ['ww', weeks2];
  }
  a = a || months2 <= 1 && ['M'] || months2 < thresholds2.M && ['MM', months2] || years2 <= 1 && ['y'] || ['yy', years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === 'function') {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === 's') {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false,
    th = thresholds,
    locale2,
    output;
  if (_typeof(argWithSuffix) === 'object') {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === 'boolean') {
    withSuffix = argWithSuffix;
  }
  if (_typeof(argThresholds) === 'object') {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3,
    days2 = abs$1(this._days),
    months2 = abs$1(this._months),
    minutes2,
    hours2,
    years2,
    s,
    total = this.asSeconds(),
    totalSign,
    ymSign,
    daysSign,
    hmsSign;
  if (!total) {
    return 'P0D';
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, '') : '';
  totalSign = total < 0 ? '-' : '';
  ymSign = sign(this._months) !== sign(total) ? '-' : '';
  daysSign = sign(this._days) !== sign(total) ? '-' : '';
  hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
  return totalSign + 'P' + (years2 ? ymSign + years2 + 'Y' : '') + (months2 ? ymSign + months2 + 'M' : '') + (days2 ? daysSign + days2 + 'D' : '') + (hours2 || minutes2 || seconds2 ? 'T' : '') + (hours2 ? hmsSign + hours2 + 'H' : '') + (minutes2 ? hmsSign + minutes2 + 'M' : '') + (seconds2 ? hmsSign + s + 'S' : '');
}
var hookCallback, some, momentProperties, updateInProgress, deprecations, keys, defaultCalendar, formattingTokens, localFormattingTokens, formatFunctions, formatTokenFunctions, defaultLongDateFormat, defaultInvalidDate, defaultOrdinal, defaultDayOfMonthOrdinalParse, defaultRelativeTime, aliases, priorities, match1, match2, match3, match4, match6, match1to2, match3to4, match5to6, match1to3, match1to4, match1to6, matchUnsigned, matchSigned, matchOffset, matchShortOffset, matchTimestamp, matchWord, regexes, tokens, YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND, WEEK, WEEKDAY, indexOf, defaultLocaleMonths, defaultLocaleMonthsShort, MONTHS_IN_FORMAT, defaultMonthsShortRegex, defaultMonthsRegex, getSetYear, defaultLocaleWeek, defaultLocaleWeekdays, defaultLocaleWeekdaysShort, defaultLocaleWeekdaysMin, defaultWeekdaysRegex, defaultWeekdaysShortRegex, defaultWeekdaysMinRegex, defaultLocaleMeridiemParse, getSetHour, baseConfig, locales, localeFamilies, globalLocale, extendedIsoRegex, basicIsoRegex, tzRegex, isoDates, isoTimes, aspNetJsonRegex, rfc2822, obsOffsets, prototypeMin, prototypeMax, now, ordering, chunkOffset, aspNetRegex, isoRegex, add, subtract, lang, MS_PER_SECOND, MS_PER_MINUTE, MS_PER_HOUR, MS_PER_400_YEARS, getSetDayOfMonth, getSetMinute, getSetSecond, token, getSetMillisecond, proto, proto$1, mathAbs, asMilliseconds, asSeconds, asMinutes, asHours, asDays, asWeeks, asMonths, asQuarters, asYears, milliseconds, seconds, minutes, hours, days, months, years, round, thresholds, abs$1, proto$2, require_moment;
var init_moment = __esm({
  'node_modules/moment/dist/moment.js': function node_modulesMomentDistMomentJs() {
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function some(fun) {
        var t = Object(this),
          len = t.length >>> 0,
          i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    momentProperties = hooks.momentProperties = [];
    updateInProgress = false;
    deprecations = {};
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    if (Object.keys) {
      keys = Object.keys;
    } else {
      keys = function keys(obj) {
        var i,
          res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    };
    formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    formatFunctions = {};
    formatTokenFunctions = {};
    defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    defaultInvalidDate = 'Invalid date';
    defaultOrdinal = '%d';
    defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      ss: '%d seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      w: 'a week',
      ww: '%d weeks',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    };
    aliases = {};
    priorities = {};
    match1 = /\d/;
    match2 = /\d\d/;
    match3 = /\d{3}/;
    match4 = /\d{4}/;
    match6 = /[+-]?\d{6}/;
    match1to2 = /\d\d?/;
    match3to4 = /\d\d\d\d?/;
    match5to6 = /\d\d\d\d\d\d?/;
    match1to3 = /\d{1,3}/;
    match1to4 = /\d{1,4}/;
    match1to6 = /[+-]?\d{1,6}/;
    matchUnsigned = /\d+/;
    matchSigned = /[+-]?\d+/;
    matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
    regexes = {};
    tokens = {};
    YEAR = 0;
    MONTH = 1;
    DATE = 2;
    HOUR = 3;
    MINUTE = 4;
    SECOND = 5;
    MILLISECOND = 6;
    WEEK = 7;
    WEEKDAY = 8;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function indexOf(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    addFormatToken('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken('MMMM', 0, 0, function (format2) {
      return this.localeData().months(this, format2);
    });
    addUnitAlias('month', 'M');
    addUnitPriority('month', 8);
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(['M', 'MM'], function (input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(['MMM', 'MMMM'], function (input, array, config, token2) {
      var month = config._locale.monthsParse(input, token2, config._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });
    defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    defaultMonthsShortRegex = matchWord;
    defaultMonthsRegex = matchWord;
    addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });
    addFormatToken(0, ['YY', 2], 0, function () {
      return this.year() % 100;
    });
    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
    addUnitAlias('year', 'y');
    addUnitPriority('year', 1);
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    getSetYear = makeGetSet('FullYear', true);
    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token2) {
      week[token2.substr(0, 1)] = toInt(input);
    });
    defaultLocaleWeek = {
      dow: 0,
      doy: 6
    };
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken('ddd', 0, 0, function (format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken('dddd', 0, 0, function (format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token2) {
      var weekday = config._locale.weekdaysParse(input, token2, config._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token2) {
      week[token2] = toInt(input);
    });
    defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    defaultWeekdaysRegex = matchWord;
    defaultWeekdaysShortRegex = matchWord;
    defaultWeekdaysMinRegex = matchWord;
    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);
    addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    addUnitPriority('hour', 13);
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
        pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
        pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    getSetHour = makeGetSet('Hours', true);
    baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    locales = {};
    localeFamilies = {};
    extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/], ['YYYYMM', /\d{6}/, false], ['YYYY', /\d{4}/, false]];
    isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
    aspNetJsonRegex = /^\/?Date\((-?\d+)/i;
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
    obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    hooks.ISO_8601 = function () {};
    hooks.RFC_2822 = function () {};
    prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
      var other = createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other < this ? this : other;
      } else {
        return createInvalid();
      }
    });
    prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
      var other = createLocal.apply(null, arguments);
      if (this.isValid() && other.isValid()) {
        return other > this ? this : other;
      } else {
        return createInvalid();
      }
    });
    now = function now() {
      return Date.now ? Date.now() : +new Date();
    };
    ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
    });
    chunkOffset = /([\+\-]|\d\d)/gi;
    hooks.updateOffset = function () {};
    aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/;
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    add = createAdder(1, 'add');
    subtract = createAdder(-1, 'subtract');
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
      if (key === void 0) {
        return this.localeData();
      } else {
        return this.locale(key);
      }
    });
    MS_PER_SECOND = 1e3;
    MS_PER_MINUTE = 60 * MS_PER_SECOND;
    MS_PER_HOUR = 60 * MS_PER_MINUTE;
    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);
    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token2) {
      var era = config._locale.erasParse(input, token2, config._strict);
      if (era) {
        getParsingFlags(config).era = era;
      } else {
        getParsingFlags(config).invalidEra = input;
      }
    });
    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);
    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token2) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
        match = input.match(config._locale._eraYearOrdinalRegex);
      }
      if (config._locale.eraYearOrdinalParse) {
        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    addFormatToken(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
    });
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token2) {
      week[token2.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken(['gg', 'GG'], function (input, week, config, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    addFormatToken('Q', 0, 'Qo', 'quarter');
    addUnitAlias('quarter', 'Q');
    addUnitPriority('quarter', 7);
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    addFormatToken('D', ['DD', 2], 'Do', 'date');
    addUnitAlias('date', 'D');
    addUnitPriority('date', 9);
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addUnitPriority('dayOfYear', 4);
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
      config._dayOfYear = toInt(input);
    });
    addFormatToken('m', ['mm', 2], 0, 'minute');
    addUnitAlias('minute', 'm');
    addUnitPriority('minute', 14);
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);
    getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', ['ss', 2], 0, 'second');
    addUnitAlias('second', 's');
    addUnitPriority('second', 15);
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);
    getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ['SS', 2], 0, function () {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
      return this.millisecond() * 1e6;
    });
    addUnitAlias('millisecond', 'ms');
    addUnitPriority('millisecond', 16);
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol["for"] != null) {
      proto[Symbol["for"]('nodejs.util.inspect.custom')] = function () {
        return 'Moment<' + this.format() + '>';
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    getSetGlobalLocale('en', {
      eras: [{
        since: '0001-01-01',
        until: Infinity,
        offset: 1,
        name: 'Anno Domini',
        narrow: 'AD',
        abbr: 'AD'
      }, {
        since: '0000-12-31',
        until: -Infinity,
        offset: 1,
        name: 'Before Christ',
        narrow: 'BC',
        abbr: 'BC'
      }],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function ordinal(number) {
        var b = number % 10,
          output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
        return number + output;
      }
    });
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    mathAbs = Math.abs;
    asMilliseconds = makeAs('ms');
    asSeconds = makeAs('s');
    asMinutes = makeAs('m');
    asHours = makeAs('h');
    asDays = makeAs('d');
    asWeeks = makeAs('w');
    asMonths = makeAs('M');
    asQuarters = makeAs('Q');
    asYears = makeAs('y');
    milliseconds = makeGetter('milliseconds');
    seconds = makeGetter('seconds');
    minutes = makeGetter('minutes');
    hours = makeGetter('hours');
    days = makeGetter('days');
    months = makeGetter('months');
    years = makeGetter('years');
    round = Math.round;
    thresholds = {
      ss: 44,
      s: 45,
      m: 45,
      h: 22,
      d: 26,
      w: null,
      M: 11
    };
    abs$1 = Math.abs;
    proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input));
    });
    hooks.version = '2.29.4';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
      DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
      DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
      DATE: 'YYYY-MM-DD',
      TIME: 'HH:mm',
      TIME_SECONDS: 'HH:mm:ss',
      TIME_MS: 'HH:mm:ss.SSS',
      WEEK: 'GGGG-[W]WW',
      MONTH: 'YYYY-MM'
    };
    require_moment = hooks;
  }
});
var moment_exports = {};
__export(moment_exports, {
  "default": function _default() {
    return moment_exports;
  }
});
var require_moment_hijri = __commonJS({
  '.': function _(exports, module2) {
    ;
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        define(['moment'], function (moment) {
          root.moment = factory(moment);
          return root.moment;
        });
      } else if (_typeof(exports) === 'object') {
        module2.exports = factory((require_moment(), __toCommonJS(moment_exports)));
      } else {
        root.moment = factory(root.moment);
      }
    })(exports, function (moment) {
      if (moment == null) {
        throw new Error('Cannot find moment');
      }
      var moment = require_moment(moment);
      var ummalqura = {
        ummalquraData: [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167, 29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759, 29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348, 30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939, 30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530, 31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120, 32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711, 32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302, 33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893, 33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483, 34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074, 35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665, 35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254, 36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845, 36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436, 37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027, 38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617, 38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208, 39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798, 39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389, 40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980, 41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570, 41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161, 42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751, 42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342, 43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932, 43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523, 44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114, 45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704, 45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295, 46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885, 46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476, 47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066, 48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657, 48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248, 49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838, 49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429, 50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019, 51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611, 51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200, 52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792, 52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383, 53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973, 54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564, 54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154, 55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745, 55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335, 56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926, 56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517, 57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107, 58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698, 58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288, 59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879, 59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469, 60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061, 61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651, 61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242, 62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832, 62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423, 63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014, 64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603, 64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195, 65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785, 65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376, 66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967, 66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557, 67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68e3, 68030, 68060, 68089, 68119, 68148, 68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738, 68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330, 69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919, 69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510, 70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101, 71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691, 71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282, 72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872, 72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464, 73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053, 74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645, 74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235, 75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826, 75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416, 76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007, 77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598, 77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188, 78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779, 78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369, 79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960, 79990]
      };
      var formattingTokens2 = /(\[[^\[]*\])|(\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,
        localFormattingTokens2 = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        parseTokenOneOrTwoDigits = /\d\d?/,
        parseTokenOneToThreeDigits = /\d{1,3}/,
        parseTokenThreeDigits = /\d{3}/,
        parseTokenFourDigits = /\d{1,4}/,
        parseTokenSixDigits = /[+\-]?\d{1,6}/,
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.?)|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/i,
        parseTokenT = /T/i,
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/,
        unitAliases = {
          hd: 'idate',
          hm: 'imonth',
          hy: 'iyear'
        },
        formatFunctions2 = {},
        ordinalizeTokens = 'DDD w M D'.split(' '),
        paddedTokens = 'M D w'.split(' '),
        formatTokenFunctions2 = {
          iM: function iM() {
            return this.iMonth() + 1;
          },
          iMMM: function iMMM(format2) {
            return this.localeData().iMonthsShort(this, format2);
          },
          iMMMM: function iMMMM(format2) {
            return this.localeData().iMonths(this, format2);
          },
          iD: function iD() {
            return this.iDate();
          },
          iDDD: function iDDD() {
            return this.iDayOfYear();
          },
          iw: function iw() {
            return this.iWeek();
          },
          iYY: function iYY() {
            return leftZeroFill(this.iYear() % 100, 2);
          },
          iYYYY: function iYYYY() {
            return leftZeroFill(this.iYear(), 4);
          },
          iYYYYY: function iYYYYY() {
            return leftZeroFill(this.iYear(), 5);
          },
          igg: function igg() {
            return leftZeroFill(this.iWeekYear() % 100, 2);
          },
          igggg: function igggg() {
            return this.iWeekYear();
          },
          iggggg: function iggggg() {
            return leftZeroFill(this.iWeekYear(), 5);
          }
        },
        i;
      function padToken(func, count) {
        return function (a) {
          return leftZeroFill(func.call(this, a), count);
        };
      }
      function ordinalizeToken(func, period) {
        return function (a) {
          return this.localeData().ordinal(func.call(this, a), period);
        };
      }
      while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions2['i' + i + 'o'] = ordinalizeToken(formatTokenFunctions2['i' + i], i);
      }
      while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions2['i' + i + i] = padToken(formatTokenFunctions2['i' + i], 2);
      }
      formatTokenFunctions2.iDDDD = padToken(formatTokenFunctions2.iDDD, 3);
      function extend(a, b) {
        var key;
        for (key in b) if (b.hasOwnProperty(key)) a[key] = b[key];
        return a;
      }
      function leftZeroFill(number, targetLength) {
        var output = number + '';
        while (output.length < targetLength) output = '0' + output;
        return output;
      }
      function isArray2(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
      }
      function normalizeUnits2(units) {
        return units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1') : units;
      }
      function setDate(moment, year, month, date) {
        var utc = moment._isUTC ? 'UTC' : '';
        moment._d['set' + utc + 'FullYear'](year);
        moment._d['set' + utc + 'Month'](month);
        moment._d['set' + utc + 'Date'](date);
      }
      function objectCreate(parent) {
        function F() {}
        F.prototype = parent;
        return new F();
      }
      function getPrototypeOf(object) {
        if (Object.getPrototypeOf) return Object.getPrototypeOf(object);else if (''.__proto__) return object.__proto__;else return object.constructor.prototype;
      }
      extend(getPrototypeOf(moment.localeData()), {
        _iMonths: ['Muharram', 'Safar', "Rabi' al-Awwal", "Rabi' al-Thani", 'Jumada al-Ula', 'Jumada al-Alkhirah', 'Rajab', "Sha'ban", 'Ramadhan', 'Shawwal', "Thul-Qi'dah", 'Thul-Hijjah'],
        iMonths: function iMonths(m) {
          return this._iMonths[m.iMonth()];
        },
        _iMonthsShort: ['Muh', 'Saf', 'Rab-I', 'Rab-II', 'Jum-I', 'Jum-II', 'Raj', 'Sha', 'Ram', 'Shw', 'Dhu-Q', 'Dhu-H'],
        iMonthsShort: function iMonthsShort(m) {
          return this._iMonthsShort[m.iMonth()];
        },
        iMonthsParse: function iMonthsParse(monthName) {
          var i2, mom, regex;
          if (!this._iMonthsParse) this._iMonthsParse = [];
          for (i2 = 0; i2 < 12; i2 += 1) {
            if (!this._iMonthsParse[i2]) {
              mom = hMoment([2e3, (2 + i2) % 12, 25]);
              regex = '^' + this.iMonths(mom, '') + '$|^' + this.iMonthsShort(mom, '') + '$';
              this._iMonthsParse[i2] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (this._iMonthsParse[i2].test(monthName)) return i2;
          }
        }
      });
      var iMonthNames = {
        iMonths: 'محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأولى_جمادى الآخرة_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_'),
        iMonthsShort: 'محرم_صفر_ربيع ١_ربيع ٢_جمادى ١_جمادى ٢_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_')
      };
      if (typeof moment.updateLocale === 'function') {
        moment.updateLocale('ar-sa', iMonthNames);
      } else {
        var oldLocale = moment.locale();
        moment.defineLocale('ar-sa', iMonthNames);
        moment.locale(oldLocale);
      }
      function makeFormatFunction2(format2) {
        var array = format2.match(formattingTokens2),
          length = array.length,
          i2;
        for (i2 = 0; i2 < length; i2 += 1) if (formatTokenFunctions2[array[i2]]) array[i2] = formatTokenFunctions2[array[i2]];
        return function (mom) {
          var output = '';
          for (i2 = 0; i2 < length; i2 += 1) output += array[i2] instanceof Function ? '[' + array[i2].call(mom, format2) + ']' : array[i2];
          return output;
        };
      }
      function getParseRegexForToken2(token2, config) {
        switch (token2) {
          case 'iDDDD':
            return parseTokenThreeDigits;
          case 'iYYYY':
            return parseTokenFourDigits;
          case 'iYYYYY':
            return parseTokenSixDigits;
          case 'iDDD':
            return parseTokenOneToThreeDigits;
          case 'iMMM':
          case 'iMMMM':
            return parseTokenWord;
          case 'iMM':
          case 'iDD':
          case 'iYY':
          case 'iM':
          case 'iD':
            return parseTokenOneOrTwoDigits;
          case 'DDDD':
            return parseTokenThreeDigits;
          case 'YYYY':
            return parseTokenFourDigits;
          case 'YYYYY':
            return parseTokenSixDigits;
          case 'S':
          case 'SS':
          case 'SSS':
          case 'DDD':
            return parseTokenOneToThreeDigits;
          case 'MMM':
          case 'MMMM':
          case 'dd':
          case 'ddd':
          case 'dddd':
            return parseTokenWord;
          case 'a':
          case 'A':
            return moment.localeData(config._l)._meridiemParse;
          case 'X':
            return parseTokenTimestampMs;
          case 'Z':
          case 'ZZ':
            return parseTokenTimezone;
          case 'T':
            return parseTokenT;
          case 'MM':
          case 'DD':
          case 'YY':
          case 'HH':
          case 'hh':
          case 'mm':
          case 'ss':
          case 'M':
          case 'D':
          case 'd':
          case 'H':
          case 'h':
          case 'm':
          case 's':
            return parseTokenOneOrTwoDigits;
          default:
            return new RegExp(token2.replace('\\', ''));
        }
      }
      function addTimeToArrayFromToken2(token2, input, config) {
        var a,
          datePartArray = config._a;
        switch (token2) {
          case 'iM':
          case 'iMM':
            datePartArray[1] = input == null ? 0 : ~~input - 1;
            break;
          case 'iMMM':
          case 'iMMMM':
            a = moment.localeData(config._l).iMonthsParse(input);
            if (a != null) datePartArray[1] = a;else config._isValid = false;
            break;
          case 'iD':
          case 'iDD':
          case 'iDDD':
          case 'iDDDD':
            if (input != null) datePartArray[2] = ~~input;
            break;
          case 'iYY':
            datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);
            break;
          case 'iYYYY':
          case 'iYYYYY':
            datePartArray[0] = ~~input;
        }
        if (input == null) config._isValid = false;
      }
      function dateFromArray(config) {
        var g,
          h,
          hy = config._a[0],
          hm = config._a[1],
          hd = config._a[2];
        if (hy == null && hm == null && hd == null) return [0, 0, 1];
        hy = hy || 0;
        hm = hm || 0;
        hd = hd || 1;
        if (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm)) config._isValid = false;
        g = toGregorian(hy, hm, hd);
        h = toHijri(g.gy, g.gm, g.gd);
        config._hDiff = 0;
        if (~~h.hy !== hy) config._hDiff += 1;
        if (~~h.hm !== hm) config._hDiff += 1;
        if (~~h.hd !== hd) config._hDiff += 1;
        return [g.gy, g.gm, g.gd];
      }
      function makeDateFromStringAndFormat(config) {
        var tokens2 = config._f.match(formattingTokens2),
          string = config._i,
          len = tokens2.length,
          i2,
          token2,
          parsedInput;
        config._a = [];
        for (i2 = 0; i2 < len; i2 += 1) {
          token2 = tokens2[i2];
          parsedInput = (getParseRegexForToken2(token2, config).exec(string) || [])[0];
          if (parsedInput) string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          if (formatTokenFunctions2[token2]) addTimeToArrayFromToken2(token2, parsedInput, config);
        }
        if (string) config._il = string;
        return dateFromArray(config);
      }
      function makeDateFromStringAndArray(config, utc) {
        var len = config._f.length,
          i2,
          format2,
          tempMoment,
          bestMoment,
          currentScore,
          scoreToBeat;
        if (len === 0) {
          return makeMoment(new Date(NaN));
        }
        for (i2 = 0; i2 < len; i2 += 1) {
          format2 = config._f[i2];
          currentScore = 0;
          tempMoment = makeMoment(config._i, format2, config._l, utc);
          if (!tempMoment.isValid()) continue;
          currentScore += tempMoment._hDiff;
          if (tempMoment._il) currentScore += tempMoment._il.length;
          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempMoment;
          }
        }
        return bestMoment;
      }
      function removeParsedTokens(config) {
        var string = config._i,
          input = '',
          format2 = '',
          array = config._f.match(formattingTokens2),
          len = array.length,
          i2,
          match,
          parsed;
        for (i2 = 0; i2 < len; i2 += 1) {
          match = array[i2];
          parsed = (getParseRegexForToken2(match, config).exec(string) || [])[0];
          if (parsed) string = string.slice(string.indexOf(parsed) + parsed.length);
          if (!(formatTokenFunctions2[match] instanceof Function)) {
            format2 += match;
            if (parsed) input += parsed;
          }
        }
        config._i = input;
        config._f = format2;
      }
      function iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
          daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
          adjustedMoment;
        if (daysToDayOfWeek > end) {
          daysToDayOfWeek -= 7;
        }
        if (daysToDayOfWeek < end - 7) {
          daysToDayOfWeek += 7;
        }
        adjustedMoment = hMoment(mom).add(daysToDayOfWeek, 'd');
        return {
          week: Math.ceil(adjustedMoment.iDayOfYear() / 7),
          year: adjustedMoment.iYear()
        };
      }
      function makeMoment(input, format2, lang2, utc) {
        var config = {
            _i: input,
            _f: format2,
            _l: lang2
          },
          date,
          m,
          hm;
        if (format2) {
          if (isArray2(format2)) {
            return makeDateFromStringAndArray(config, utc);
          } else {
            date = makeDateFromStringAndFormat(config);
            removeParsedTokens(config);
            format2 = 'YYYY-MM-DD-' + config._f;
            input = leftZeroFill(date[0], 4) + '-' + leftZeroFill(date[1] + 1, 2) + '-' + leftZeroFill(date[2], 2) + '-' + config._i;
          }
        }
        if (utc) m = moment.utc(input, format2, lang2);else m = moment(input, format2, lang2);
        if (config._isValid === false) m._isValid = false;
        m._hDiff = config._hDiff || 0;
        hm = objectCreate(hMoment.fn);
        extend(hm, m);
        return hm;
      }
      function hMoment(input, format2, lang2) {
        return makeMoment(input, format2, lang2, false);
      }
      extend(hMoment, moment);
      hMoment.fn = objectCreate(moment.fn);
      hMoment.utc = function (input, format2, lang2) {
        return makeMoment(input, format2, lang2, true);
      };
      hMoment.fn.format = function (format2) {
        var i2,
          replace,
          me = this;
        if (format2) {
          i2 = 5;
          replace = function replace(input) {
            return me.localeData().longDateFormat(input) || input;
          };
          while (i2 > 0 && localFormattingTokens2.test(format2)) {
            i2 -= 1;
            format2 = format2.replace(localFormattingTokens2, replace);
          }
          if (!formatFunctions2[format2]) {
            formatFunctions2[format2] = makeFormatFunction2(format2);
          }
          format2 = formatFunctions2[format2](this);
        }
        return moment.fn.format.call(this, format2);
      };
      hMoment.fn.iYear = function (input) {
        var lastDay, h, g;
        if (typeof input === 'number') {
          h = toHijri(this.year(), this.month(), this.date());
          lastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm));
          g = toGregorian(input, h.hm, lastDay);
          setDate(this, g.gy, g.gm, g.gd);
          if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {
            setDate(this, g.gy, g.gm, g.gd);
          }
          moment.updateOffset(this);
          return this;
        } else {
          return toHijri(this.year(), this.month(), this.date()).hy;
        }
      };
      hMoment.fn.iMonth = function (input) {
        var lastDay, h, g;
        if (input != null) {
          if (typeof input === 'string') {
            input = this.localeData().iMonthsParse(input);
            if (input >= 0) {
              input -= 1;
            } else {
              return this;
            }
          }
          h = toHijri(this.year(), this.month(), this.date());
          lastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input));
          this.iYear(h.hy + div(input, 12));
          input = mod2(input, 12);
          if (input < 0) {
            input += 12;
            this.iYear(this.iYear() - 1);
          }
          g = toGregorian(this.iYear(), input, lastDay);
          setDate(this, g.gy, g.gm, g.gd);
          if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {
            setDate(this, g.gy, g.gm, g.gd);
          }
          moment.updateOffset(this);
          return this;
        } else {
          return toHijri(this.year(), this.month(), this.date()).hm;
        }
      };
      hMoment.fn.iDate = function (input) {
        var h, g;
        if (typeof input === 'number') {
          h = toHijri(this.year(), this.month(), this.date());
          g = toGregorian(h.hy, h.hm, input);
          setDate(this, g.gy, g.gm, g.gd);
          if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {
            setDate(this, g.gy, g.gm, g.gd);
          }
          moment.updateOffset(this);
          return this;
        } else {
          return toHijri(this.year(), this.month(), this.date()).hd;
        }
      };
      hMoment.fn.iDayOfYear = function (input) {
        var dayOfYear = Math.round((hMoment(this).startOf('day') - hMoment(this).startOf('iYear')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      };
      hMoment.fn.iDaysInMonth = function () {
        return parseInt(hMoment(this).endOf('iMonth').format('iDD'));
      };
      hMoment.fn.iWeek = function (input) {
        var week = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      };
      hMoment.fn.iWeekYear = function (input) {
        var year = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add(input - year, 'y');
      };
      hMoment.fn.add = function (val, units) {
        var temp;
        if (units !== null && !isNaN(+units)) {
          temp = val;
          val = units;
          units = temp;
        }
        units = normalizeUnits2(units);
        if (units === 'iyear') {
          this.iYear(this.iYear() + val);
        } else if (units === 'imonth') {
          this.iMonth(this.iMonth() + val);
        } else if (units === 'idate') {
          this.iDate(this.iDate() + val);
        } else {
          moment.fn.add.call(this, val, units);
        }
        return this;
      };
      hMoment.fn.subtract = function (val, units) {
        var temp;
        if (units !== null && !isNaN(+units)) {
          temp = val;
          val = units;
          units = temp;
        }
        units = normalizeUnits2(units);
        if (units === 'iyear') {
          this.iYear(this.iYear() - val);
        } else if (units === 'imonth') {
          this.iMonth(this.iMonth() - val);
        } else if (units === 'idate') {
          this.iDate(this.iDate() - val);
        } else {
          moment.fn.subtract.call(this, val, units);
        }
        return this;
      };
      hMoment.fn.startOf = function (units) {
        units = normalizeUnits2(units);
        if (units === 'iyear' || units === 'imonth') {
          if (units === 'iyear') {
            this.iMonth(0);
          }
          this.iDate(1);
          this.hours(0);
          this.minutes(0);
          this.seconds(0);
          this.milliseconds(0);
          return this;
        } else {
          return moment.fn.startOf.call(this, units);
        }
      };
      hMoment.fn.endOf = function (units) {
        units = normalizeUnits2(units);
        if (units === void 0 || units === 'milisecond') {
          return this;
        }
        return this.startOf(units).add(1, units === 'isoweek' ? 'week' : units).subtract(1, 'milliseconds');
      };
      hMoment.fn.clone = function () {
        return hMoment(this);
      };
      hMoment.fn.iYears = hMoment.fn.iYear;
      hMoment.fn.iMonths = hMoment.fn.iMonth;
      hMoment.fn.iDates = hMoment.fn.iDate;
      hMoment.fn.iWeeks = hMoment.fn.iWeek;
      hMoment.iDaysInMonth = function (year, month) {
        var i2 = getNewMoonMJDNIndex(year, month + 1),
          daysInMonth2 = ummalqura.ummalquraData[i2] - ummalqura.ummalquraData[i2 - 1];
        return daysInMonth2;
      };
      function toHijri(gy, gm, gd) {
        var h = d2h(g2d(gy, gm + 1, gd));
        h.hm -= 1;
        return h;
      }
      function toGregorian(hy, hm, hd) {
        var g = d2g(h2d(hy, hm + 1, hd));
        g.gm -= 1;
        return g;
      }
      hMoment.iConvert = {
        toHijri: toHijri,
        toGregorian: toGregorian
      };
      return hMoment;
      function div(a, b) {
        return ~~(a / b);
      }
      function mod2(a, b) {
        return a - ~~(a / b) * b;
      }
      function h2d(hy, hm, hd) {
        var i2 = getNewMoonMJDNIndex(hy, hm),
          mjdn = hd + ummalqura.ummalquraData[i2 - 1] - 1,
          jdn = mjdn + 24e5;
        return jdn;
      }
      function d2h(jdn) {
        var mjdn = jdn - 24e5,
          i2 = getNewMoonMJDNIndexByJDN(mjdn),
          totalMonths = i2 + 16260,
          cYears = Math.floor((totalMonths - 1) / 12),
          hy = cYears + 1,
          hm = totalMonths - 12 * cYears,
          hd = mjdn - ummalqura.ummalquraData[i2 - 1] + 1;
        return {
          hy: hy,
          hm: hm,
          hd: hd
        };
      }
      function g2d(gy, gm, gd) {
        var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod2(gm + 9, 12) + 2, 5) + gd - 34840408;
        d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
        return d;
      }
      function d2g(jdn) {
        var j, i2, gd, gm, gy;
        j = 4 * jdn + 139361631;
        j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
        i2 = div(mod2(j, 1461), 4) * 5 + 308;
        gd = div(mod2(i2, 153), 5) + 1;
        gm = mod2(div(i2, 153), 12) + 1;
        gy = div(j, 1461) - 100100 + div(8 - gm, 6);
        return {
          gy: gy,
          gm: gm,
          gd: gd
        };
      }
      function getNewMoonMJDNIndex(hy, hm) {
        var cYears = hy - 1,
          totalMonths = cYears * 12 + 1 + (hm - 1),
          i2 = totalMonths - 16260;
        return i2;
      }
      function getNewMoonMJDNIndexByJDN(mjdn) {
        for (var i2 = 0; i2 < ummalqura.ummalquraData.length; i2 = i2 + 1) {
          if (ummalqura.ummalquraData[i2] > mjdn) return i2;
        }
      }
    });
  }
});
var _default2 = require_moment_hijri();
exports["default"] = _default2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX3JlcXVpcmUiLCJ4IiwicmVxdWlyZSIsIlByb3h5IiwiZ2V0IiwiYSIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsIkVycm9yIiwiZXhwb3J0cyIsIl9fZXNtIiwiZm4iLCJyZXMiLCJfX2luaXQiLCJfX2NvbW1vbkpTIiwiY2IiLCJtb2QiLCJfX3JlcXVpcmUyIiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsIl90eXBlb2YiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwIiwiX2xvb3AiLCJrZXkiLCJ2YWx1ZSIsImNhbGwiLCJzIiwibiIsImRvbmUiLCJlcnIiLCJlIiwiZiIsIl9fdG9FU00iLCJpc05vZGVNb2RlIiwiX19lc01vZHVsZSIsIl9fdG9Db21tb25KUyIsInJlcXVpcmVfbW9tZW50Iiwibm9kZV9tb2R1bGVzTW9tZW50TW9tZW50SnMiLCJtb2R1bGUiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwibW9tZW50IiwiaG9va0NhbGxiYWNrIiwiaG9va3MiLCJzZXRIb29rQ2FsbGJhY2siLCJjYWxsYmFjayIsImlzQXJyYXkiLCJpbnB1dCIsIkFycmF5IiwidG9TdHJpbmciLCJpc09iamVjdCIsImhhc093blByb3AiLCJpc09iamVjdEVtcHR5Iiwib2JqIiwibGVuZ3RoIiwiayIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJEYXRlIiwibWFwIiwiYXJyIiwiaSIsImFyckxlbiIsInB1c2giLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwiZm9ybWF0MiIsImxvY2FsZTIiLCJzdHJpY3QiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZGVmYXVsdFBhcnNpbmdGbGFncyIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJvdmVyZmxvdyIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkRXJhIiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsImVyYSIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImdldFBhcnNpbmdGbGFncyIsIm0iLCJfcGYiLCJzb21lIiwiZnVuIiwidCIsImxlbiIsImlzVmFsaWQiLCJfaXNWYWxpZCIsImZsYWdzIiwicGFyc2VkUGFydHMiLCJpc05vd1ZhbGlkIiwiaXNOYU4iLCJfZCIsImdldFRpbWUiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJiaWdIb3VyIiwiaXNGcm96ZW4iLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwibW9tZW50UHJvcGVydGllcyIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJjb3B5Q29uZmlnIiwidG8yIiwiZnJvbTIiLCJwcm9wIiwidmFsIiwibW9tZW50UHJvcGVydGllc0xlbiIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJNb21lbnQiLCJjb25maWciLCJ1cGRhdGVPZmZzZXQiLCJpc01vbWVudCIsIndhcm4iLCJtc2ciLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJjb25zb2xlIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiYXJncyIsImFyZyIsImFyZ0xlbiIsInNsaWNlIiwiam9pbiIsInN0YWNrIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwiaXNGdW5jdGlvbiIsIkZ1bmN0aW9uIiwic2V0IiwiX2NvbmZpZyIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsIlJlZ0V4cCIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwic291cmNlIiwiX29yZGluYWxQYXJzZSIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwia2V5cyIsImRlZmF1bHRDYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImNhbGVuZGFyIiwibW9tIiwibm93MiIsIm91dHB1dCIsIl9jYWxlbmRhciIsInplcm9GaWxsIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiTWF0aCIsImFicyIsInplcm9zVG9GaWxsIiwic2lnbjIiLCJwb3ciLCJtYXgiLCJzdWJzdHIiLCJmb3JtYXR0aW5nVG9rZW5zIiwibG9jYWxGb3JtYXR0aW5nVG9rZW5zIiwiZm9ybWF0RnVuY3Rpb25zIiwiZm9ybWF0VG9rZW5GdW5jdGlvbnMiLCJhZGRGb3JtYXRUb2tlbiIsInRva2VuMiIsInBhZGRlZCIsIm9yZGluYWwyIiwiZnVuYyIsImxvY2FsZURhdGEiLCJvcmRpbmFsIiwicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsIm1hdGNoIiwicmVwbGFjZSIsIm1ha2VGb3JtYXRGdW5jdGlvbiIsImFycmF5IiwiaTIiLCJmb3JtYXRNb21lbnQiLCJpbnZhbGlkRGF0ZSIsImV4cGFuZEZvcm1hdCIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvbmdEYXRlRm9ybWF0IiwibGFzdEluZGV4IiwidGVzdCIsImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsIl9sb25nRGF0ZUZvcm1hdCIsImZvcm1hdFVwcGVyIiwidG9VcHBlckNhc2UiLCJ0b2siLCJkZWZhdWx0SW52YWxpZERhdGUiLCJfaW52YWxpZERhdGUiLCJkZWZhdWx0T3JkaW5hbCIsImRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiX29yZGluYWwiLCJkZWZhdWx0UmVsYXRpdmVUaW1lIiwiZnV0dXJlIiwicGFzdCIsInNzIiwibW0iLCJoIiwiaGgiLCJkIiwiZGQiLCJ3Iiwid3ciLCJNIiwiTU0iLCJ5IiwieXkiLCJyZWxhdGl2ZVRpbWUiLCJ3aXRob3V0U3VmZml4Iiwic3RyaW5nIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImRpZmYyIiwiYWxpYXNlcyIsImFkZFVuaXRBbGlhcyIsInVuaXQiLCJzaG9ydGhhbmQiLCJsb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZElucHV0Iiwibm9ybWFsaXplZFByb3AiLCJwcmlvcml0aWVzIiwiYWRkVW5pdFByaW9yaXR5IiwicHJpb3JpdHkiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwidW5pdHNPYmoiLCJ1Iiwic29ydCIsImlzTGVhcFllYXIiLCJ5ZWFyIiwiYWJzRmxvb3IiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiaXNGaW5pdGUiLCJtYWtlR2V0U2V0Iiwia2VlcFRpbWUiLCJzZXQkMSIsIm1vbnRoIiwiZGF0ZSIsImRheXNJbk1vbnRoIiwic3RyaW5nR2V0Iiwic3RyaW5nU2V0IiwicHJpb3JpdGl6ZWQiLCJwcmlvcml0aXplZExlbiIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoVGltZXN0YW1wIiwibWF0Y2hXb3JkIiwicmVnZXhlcyIsImFkZFJlZ2V4VG9rZW4iLCJyZWdleCIsInN0cmljdFJlZ2V4IiwiaXNTdHJpY3QiLCJsb2NhbGVEYXRhMiIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsInVuZXNjYXBlRm9ybWF0IiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwidG9rZW5MZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsInRva2VuMyIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsImluZGV4T2YiLCJvIiwibW9kTW9udGgiLCJtb250aHNTaG9ydCIsIm1vbnRocyIsIm1vbnRoc1Nob3J0UmVnZXgiLCJtb250aHNSZWdleCIsIm1vbnRoc1BhcnNlIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsInNwbGl0IiwiZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IiwiTU9OVEhTX0lOX0ZPUk1BVCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwibG9jYWxlTW9udGhzIiwiX21vbnRocyIsImlzRm9ybWF0IiwibG9jYWxlTW9udGhzU2hvcnQiLCJfbW9udGhzU2hvcnQiLCJoYW5kbGVTdHJpY3RQYXJzZSIsIm1vbnRoTmFtZSIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJsb2NhbGVNb250aHNQYXJzZSIsIl9tb250aHNQYXJzZUV4YWN0Iiwic2V0TW9udGgiLCJkYXlPZk1vbnRoIiwibWluIiwiZ2V0U2V0TW9udGgiLCJnZXREYXlzSW5Nb250aCIsImNvbXB1dGVNb250aHNQYXJzZSIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsInBhcnNlVHdvRGlnaXRZZWFyIiwicGFyc2VJbnQiLCJkYXlzSW5ZZWFyIiwiZ2V0U2V0WWVhciIsImdldElzTGVhcFllYXIiLCJjcmVhdGVEYXRlIiwibXMiLCJnZXRGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwiY3JlYXRlVVRDRGF0ZSIsIlVUQyIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJmd2RsdyIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWsiLCJ3ZWVrZGF5IiwibG9jYWxXZWVrZGF5Iiwid2Vla09mZnNldCIsImRheU9mWWVhciIsInJlc1llYXIiLCJyZXNEYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJsb2NhbGVXZWVrIiwiX3dlZWsiLCJkZWZhdWx0TG9jYWxlV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZXZWVrIiwibG9jYWxlRmlyc3REYXlPZlllYXIiLCJnZXRTZXRXZWVrIiwiYWRkIiwiZ2V0U2V0SVNPV2VlayIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwicGFyc2VXZWVrZGF5IiwicGFyc2VJc29XZWVrZGF5Iiwic2hpZnRXZWVrZGF5cyIsIndzIiwiY29uY2F0IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImxvY2FsZVdlZWtkYXlzIiwiX3dlZWtkYXlzIiwiZGF5IiwibG9jYWxlV2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1Nob3J0IiwibG9jYWxlV2Vla2RheXNNaW4iLCJfd2Vla2RheXNNaW4iLCJoYW5kbGVTdHJpY3RQYXJzZSQxIiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZSIsIl9zaG9ydFdlZWtkYXlzUGFyc2UiLCJfbWluV2Vla2RheXNQYXJzZSIsImxvY2FsZVdlZWtkYXlzUGFyc2UiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiZ2V0U2V0RGF5T2ZXZWVrIiwiZ2V0RGF5IiwiZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIiwiZ2V0U2V0SVNPRGF5T2ZXZWVrIiwiY29tcHV0ZVdlZWtkYXlzUGFyc2UiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1JlZ2V4IiwiX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0UmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsIl93ZWVrZGF5c01pblJlZ2V4IiwibWluUGllY2VzIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwiaEZvcm1hdCIsImhvdXJzIiwia0Zvcm1hdCIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibG93ZXJjYXNlIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJsb2NhbGVJc1BNIiwiY2hhckF0IiwiZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UiLCJnZXRTZXRIb3VyIiwibG9jYWxlTWVyaWRpZW0iLCJob3VyczIiLCJtaW51dGVzMiIsImlzTG93ZXIiLCJiYXNlQ29uZmlnIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJnbG9iYWxMb2NhbGUiLCJjb21tb25QcmVmaXgiLCJhcnIxIiwiYXJyMiIsIm1pbmwiLCJub3JtYWxpemVMb2NhbGUiLCJjaG9vc2VMb2NhbGUiLCJuYW1lcyIsImoiLCJuZXh0IiwibG9hZExvY2FsZSIsImlzTG9jYWxlTmFtZVNhbmUiLCJvbGRMb2NhbGUiLCJhbGlhc2VkUmVxdWlyZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJmb3JFYWNoIiwidXBkYXRlTG9jYWxlIiwidG1wTG9jYWxlIiwibGlzdExvY2FsZXMiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsIm9ic09mZnNldHMiLCJVVCIsIkdNVCIsIkVEVCIsIkVTVCIsIkNEVCIsIkNTVCIsIk1EVCIsIk1TVCIsIlBEVCIsIlBTVCIsImNvbmZpZ0Zyb21JU08iLCJsIiwiZXhlYyIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lRm9ybWF0IiwidHpGb3JtYXQiLCJpc29EYXRlc0xlbiIsImlzb1RpbWVzTGVuIiwiY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCIsImV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MiLCJ5ZWFyU3RyIiwibW9udGhTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwicmVzdWx0IiwidW50cnVuY2F0ZVllYXIiLCJwcmVwcm9jZXNzUkZDMjgyMiIsImNoZWNrV2Vla2RheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsIndlZWtkYXlQcm92aWRlZCIsIndlZWtkYXlBY3R1YWwiLCJjYWxjdWxhdGVPZmZzZXQiLCJvYnNPZmZzZXQiLCJtaWxpdGFyeU9mZnNldCIsIm51bU9mZnNldCIsImhtIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwiY29uZmlnRnJvbVN0cmluZyIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiX3VzZVVUQyIsImRlZmF1bHRzIiwiYyIsImN1cnJlbnREYXRlQXJyYXkiLCJub3dWYWx1ZSIsIm5vdyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwiZGF5T2ZZZWFyRnJvbVdlZWtJbmZvIiwiX2RheU9mWWVhciIsIl9uZXh0RGF5Iiwid2Vla1llYXIiLCJ0ZW1wIiwid2Vla2RheU92ZXJmbG93IiwiY3VyV2VlayIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsImdnIiwiSVNPXzg2MDEiLCJSRkNfMjgyMiIsInRva2VuczIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsImVyYXNDb252ZXJ0WWVhciIsImhvdXIiLCJtZXJpZGllbTIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInZhbGlkRm9ybWF0Rm91bmQiLCJiZXN0Rm9ybWF0SXNWYWxpZCIsImNvbmZpZ2ZMZW4iLCJzY29yZSIsImNvbmZpZ0Zyb21PYmplY3QiLCJkYXlPckRhdGUiLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsImNyZWF0ZUZyb21Db25maWciLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJjb25maWdGcm9tSW5wdXQiLCJpc1VUQyIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiaXNEdXJhdGlvblZhbGlkIiwidW5pdEhhc0RlY2ltYWwiLCJvcmRlckxlbiIsInBhcnNlRmxvYXQiLCJpc1ZhbGlkJDEiLCJjcmVhdGVJbnZhbGlkJDEiLCJjcmVhdGVEdXJhdGlvbiIsIkR1cmF0aW9uIiwiZHVyYXRpb24iLCJ5ZWFyczIiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJtb250aHMyIiwid2Vla3MyIiwiaXNvV2VlayIsImRheXMyIiwic2Vjb25kczIiLCJtaWxsaXNlY29uZHMyIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX2RhdGEiLCJfYnViYmxlIiwiaXNEdXJhdGlvbiIsImFic1JvdW5kIiwicm91bmQiLCJjb21wYXJlQXJyYXlzIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJvZmZzZXQiLCJzZXBhcmF0b3IiLCJvZmZzZXQyIiwidXRjT2Zmc2V0Iiwib2Zmc2V0RnJvbVN0cmluZyIsImNodW5rT2Zmc2V0IiwibWF0Y2hlciIsIm1hdGNoZXMiLCJjaHVuayIsInBhcnRzIiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldFNldE9mZnNldCIsImtlZXBMb2NhbFRpbWUiLCJrZWVwTWludXRlcyIsImxvY2FsQWRqdXN0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJhZGRTdWJ0cmFjdCIsImdldFNldFpvbmUiLCJzZXRPZmZzZXRUb1VUQyIsInNldE9mZnNldFRvTG9jYWwiLCJzdWJ0cmFjdCIsInNldE9mZnNldFRvUGFyc2VkT2Zmc2V0IiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRGF5bGlnaHRTYXZpbmdUaW1lIiwiaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkIiwiX2lzRFNUU2hpZnRlZCIsInRvQXJyYXkiLCJpc0xvY2FsIiwiaXNVdGNPZmZzZXQiLCJpc1V0YyIsImFzcE5ldFJlZ2V4IiwiaXNvUmVnZXgiLCJyZXQiLCJkaWZmUmVzIiwibWlsbGlzZWNvbmRzIiwicGFyc2VJc28iLCJtb21lbnRzRGlmZmVyZW5jZSIsImludmFsaWQiLCJpbnAiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiYmFzZSIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwicGVyaW9kIiwiZHVyIiwidG1wIiwiaXNBZGRpbmciLCJpc1N0cmluZyIsIlN0cmluZyIsImlzTW9tZW50SW5wdXQiLCJpc051bWJlck9yU3RyaW5nQXJyYXkiLCJpc01vbWVudElucHV0T2JqZWN0Iiwib2JqZWN0VGVzdCIsInByb3BlcnR5VGVzdCIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eSIsInByb3BlcnR5TGVuIiwiYXJyYXlUZXN0IiwiZGF0YVR5cGVUZXN0IiwiZmlsdGVyIiwiaXRlbSIsImlzQ2FsZW5kYXJTcGVjIiwiZ2V0Q2FsZW5kYXJGb3JtYXQiLCJteU1vbWVudCIsImRpZmYiLCJjYWxlbmRhciQxIiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJmb3JtYXQiLCJsb2NhbElucHV0IiwiZW5kT2YiLCJpc0JldHdlZW4iLCJpbmNsdXNpdml0eSIsImxvY2FsRnJvbSIsImxvY2FsVG8iLCJpc1NhbWUiLCJpbnB1dE1zIiwiaXNTYW1lT3JBZnRlciIsImlzU2FtZU9yQmVmb3JlIiwiYXNGbG9hdCIsInRoYXQiLCJ6b25lRGVsdGEiLCJtb250aERpZmYiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsImFuY2hvcjIiLCJhZGp1c3QiLCJkZWZhdWx0Rm9ybWF0IiwiZGVmYXVsdEZvcm1hdFV0YyIsImxvY2FsZSIsInRvSVNPU3RyaW5nIiwia2VlcE9mZnNldCIsInRvRGF0ZSIsImluc3BlY3QiLCJ6b25lIiwicHJlZml4IiwiZGF0ZXRpbWUiLCJzdWZmaXgiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJodW1hbml6ZSIsImZyb21Ob3ciLCJ0b05vdyIsIm5ld0xvY2FsZURhdGEiLCJsYW5nIiwiTVNfUEVSX1NFQ09ORCIsIk1TX1BFUl9NSU5VVEUiLCJNU19QRVJfSE9VUiIsIk1TX1BFUl80MDBfWUVBUlMiLCJtb2QkMSIsImRpdmlkZW5kIiwiZGl2aXNvciIsImxvY2FsU3RhcnRPZkRhdGUiLCJ1dGNTdGFydE9mRGF0ZSIsInN0YXJ0T2ZEYXRlIiwiaXNvV2Vla2RheSIsInVuaXgiLCJ0b09iamVjdCIsInllYXJzIiwidG9KU09OIiwiaXNWYWxpZCQyIiwicGFyc2luZ0ZsYWdzIiwiaW52YWxpZEF0IiwiY3JlYXRpb25EYXRhIiwibWF0Y2hFcmFBYmJyIiwibWF0Y2hFcmFOYW1lIiwibWF0Y2hFcmFOYXJyb3ciLCJlcmFzUGFyc2UiLCJtYXRjaEVyYVllYXJPcmRpbmFsIiwiX2VyYVllYXJPcmRpbmFsUmVnZXgiLCJlcmFZZWFyT3JkaW5hbFBhcnNlIiwibG9jYWxlRXJhcyIsImVyYXMiLCJfZXJhcyIsInNpbmNlIiwidW50aWwiLCJJbmZpbml0eSIsImxvY2FsZUVyYXNQYXJzZSIsImVyYU5hbWUiLCJuYXJyb3ciLCJsb2NhbGVFcmFzQ29udmVydFllYXIiLCJkaXIiLCJnZXRFcmFOYW1lIiwiZ2V0RXJhTmFycm93IiwiZ2V0RXJhQWJiciIsImdldEVyYVllYXIiLCJlcmFzTmFtZVJlZ2V4IiwiY29tcHV0ZUVyYXNQYXJzZSIsIl9lcmFzTmFtZVJlZ2V4IiwiX2VyYXNSZWdleCIsImVyYXNBYmJyUmVnZXgiLCJfZXJhc0FiYnJSZWdleCIsImVyYXNOYXJyb3dSZWdleCIsIl9lcmFzTmFycm93UmVnZXgiLCJhYmJyUGllY2VzIiwibmFtZVBpZWNlcyIsIm5hcnJvd1BpZWNlcyIsImlzb1dlZWtZZWFyIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldHRlciIsImdldFNldFdlZWtZZWFyIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJnZXRTZXRJU09XZWVrWWVhciIsImdldElTT1dlZWtzSW5ZZWFyIiwiZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsImdldFdlZWtzSW5XZWVrWWVhciIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldERheU9mWWVhciIsImdldFNldE1pbnV0ZSIsImdldFNldFNlY29uZCIsInRva2VuIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJwYXJzZU1zIiwiZ2V0Wm9uZUFiYnIiLCJnZXRab25lTmFtZSIsInByb3RvIiwiU3ltYm9sIiwiZXJhTmFycm93IiwiZXJhQWJiciIsImVyYVllYXIiLCJ3ZWVrcyIsImlzb1dlZWtzIiwid2Vla3NJbldlZWtZZWFyIiwiaXNvV2Vla3NJblllYXIiLCJpc29XZWVrc0luSVNPV2Vla1llYXIiLCJkYXlzIiwicGFyc2Vab25lIiwiaXNEU1QiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJjcmVhdGVVbml4IiwiY3JlYXRlSW5ab25lIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwicHJvdG8kMSIsImZpcnN0RGF5T2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJnZXQkMSIsImluZGV4IiwiZmllbGQiLCJzZXR0ZXIiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJzaGlmdCIsImxpc3RNb250aHMiLCJsaXN0TW9udGhzU2hvcnQiLCJsaXN0V2Vla2RheXMiLCJsaXN0V2Vla2RheXNTaG9ydCIsImxpc3RXZWVrZGF5c01pbiIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhZGQkMSIsInN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiYnViYmxlIiwibW9udGhzRnJvbURheXMiLCJtb250aHNUb0RheXMiLCJkYXlzVG9Nb250aHMiLCJhcyIsInZhbHVlT2YkMSIsIm1ha2VBcyIsImFsaWFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNRdWFydGVycyIsImFzWWVhcnMiLCJjbG9uZSQxIiwiZ2V0JDIiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsInN1YnN0aXR1dGVUaW1lQWdvIiwicmVsYXRpdmVUaW1lJDEiLCJwb3NOZWdEdXJhdGlvbiIsInRocmVzaG9sZHMyIiwiZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwiZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJhcmdXaXRoU3VmZml4IiwiYXJnVGhyZXNob2xkcyIsIndpdGhTdWZmaXgiLCJ0aCIsImFzc2lnbiIsImFicyQxIiwic2lnbiIsInRvSVNPU3RyaW5nJDEiLCJ0b3RhbCIsInRvdGFsU2lnbiIsInltU2lnbiIsImRheXNTaWduIiwiaG1zU2lnbiIsInRvRml4ZWQiLCJwcm90byQyIiwidG9Jc29TdHJpbmciLCJ2ZXJzaW9uIiwicmVsYXRpdmVUaW1lUm91bmRpbmciLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJIVE1MNV9GTVQiLCJEQVRFVElNRV9MT0NBTCIsIkRBVEVUSU1FX0xPQ0FMX1NFQ09ORFMiLCJEQVRFVElNRV9MT0NBTF9NUyIsIlRJTUUiLCJUSU1FX1NFQ09ORFMiLCJUSU1FX01TIiwiaW5pdF9tb21lbnQiLCJub2RlX21vZHVsZXNNb21lbnREaXN0TW9tZW50SnMiLCJtb21lbnRfZXhwb3J0cyIsIl9kZWZhdWx0IiwicmVxdWlyZV9tb21lbnRfaGlqcmkiLCJfIiwibW9kdWxlMiIsInJvb3QiLCJ1bW1hbHF1cmEiLCJ1bW1hbHF1cmFEYXRhIiwiZm9ybWF0dGluZ1Rva2VuczIiLCJsb2NhbEZvcm1hdHRpbmdUb2tlbnMyIiwicGFyc2VUb2tlbk9uZU9yVHdvRGlnaXRzIiwicGFyc2VUb2tlbk9uZVRvVGhyZWVEaWdpdHMiLCJwYXJzZVRva2VuVGhyZWVEaWdpdHMiLCJwYXJzZVRva2VuRm91ckRpZ2l0cyIsInBhcnNlVG9rZW5TaXhEaWdpdHMiLCJwYXJzZVRva2VuV29yZCIsInBhcnNlVG9rZW5UaW1lem9uZSIsInBhcnNlVG9rZW5UIiwicGFyc2VUb2tlblRpbWVzdGFtcE1zIiwidW5pdEFsaWFzZXMiLCJoZCIsImh5IiwiZm9ybWF0RnVuY3Rpb25zMiIsIm9yZGluYWxpemVUb2tlbnMiLCJwYWRkZWRUb2tlbnMiLCJmb3JtYXRUb2tlbkZ1bmN0aW9uczIiLCJpTSIsImlNb250aCIsImlNTU0iLCJpTW9udGhzU2hvcnQiLCJpTU1NTSIsImlNb250aHMiLCJpRCIsImlEYXRlIiwiaURERCIsImlEYXlPZlllYXIiLCJpdyIsImlXZWVrIiwiaVlZIiwibGVmdFplcm9GaWxsIiwiaVllYXIiLCJpWVlZWSIsImlZWVlZWSIsImlnZyIsImlXZWVrWWVhciIsImlnZ2dnIiwiaWdnZ2dnIiwicGFkVG9rZW4iLCJjb3VudCIsIm9yZGluYWxpemVUb2tlbiIsInBvcCIsImlEREREIiwiaXNBcnJheTIiLCJub3JtYWxpemVVbml0czIiLCJzZXREYXRlIiwib2JqZWN0Q3JlYXRlIiwicGFyZW50IiwiRiIsIm9iamVjdCIsIl9fcHJvdG9fXyIsImNvbnN0cnVjdG9yIiwiX2lNb250aHMiLCJfaU1vbnRoc1Nob3J0IiwiaU1vbnRoc1BhcnNlIiwiX2lNb250aHNQYXJzZSIsImhNb21lbnQiLCJpTW9udGhOYW1lcyIsIm1ha2VGb3JtYXRGdW5jdGlvbjIiLCJnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4yIiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4yIiwiZGF0ZVBhcnRBcnJheSIsImRhdGVGcm9tQXJyYXkiLCJnIiwiaURheXNJbk1vbnRoIiwidG9HcmVnb3JpYW4iLCJ0b0hpanJpIiwiZ3kiLCJnbSIsImdkIiwiX2hEaWZmIiwibWFrZURhdGVGcm9tU3RyaW5nQW5kRm9ybWF0IiwiX2lsIiwibWFrZURhdGVGcm9tU3RyaW5nQW5kQXJyYXkiLCJ0ZW1wTW9tZW50IiwibWFrZU1vbWVudCIsInJlbW92ZVBhcnNlZFRva2VucyIsInBhcnNlZCIsImlXZWVrT2ZZZWFyIiwiZmlyc3REYXlPZldlZWtPZlllYXIiLCJlbmQiLCJkYXlzVG9EYXlPZldlZWsiLCJhZGp1c3RlZE1vbWVudCIsImxhbmcyIiwibWUiLCJkaXYiLCJtb2QyIiwiaVllYXJzIiwiaURhdGVzIiwiaVdlZWtzIiwiZ2V0TmV3TW9vbk1KRE5JbmRleCIsImRheXNJbk1vbnRoMiIsImQyaCIsImcyZCIsImQyZyIsImgyZCIsImlDb252ZXJ0IiwibWpkbiIsImpkbiIsImdldE5ld01vb25NSkROSW5kZXhCeUpETiIsInRvdGFsTW9udGhzIiwiY1llYXJzIiwiX2RlZmF1bHQyIl0sInNvdXJjZVJvb3QiOiJjb3JlIiwic291cmNlcyI6WyIuLi9oaWpyaS1zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaGlqcmkuanNcbi8vIGF1dGhvcjogQWhtZWQgU3VsYWltYW5pXG4vLyBUaGlzIGlzIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiBtb21lbnQtamFsYWFsaSBieSBCZWhyYW5nIE5vcnV6aSBOaXlhIGFuZCBleHRlbmRzIFN1aGFpbCBBbGtvd2FpbGVldCdzIHdvcmsgb24gbW9tZW50LWhpanJpLmpzIGxpYlxuLy8gbGljZW5zZTogTUlUXG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlXG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mXG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxudmFyIF9fcmVxdWlyZSA9IC8qIEBfX1BVUkVfXyAqLyAoKHgpID0+XG4gICAgdHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gcmVxdWlyZVxuICAgICAgICA6IHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBuZXcgUHJveHkoeCwge1xuICAgICAgICAgICAgICBnZXQ6IChhLCBiKSA9PiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnID8gcmVxdWlyZSA6IGEpW2JdXG4gICAgICAgICAgfSlcbiAgICAgICAgOiB4KShmdW5jdGlvbiAoeCkge1xuICAgIGlmICh0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiByZXF1aXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiBcIicgKyB4ICsgJ1wiIGlzIG5vdCBzdXBwb3J0ZWQnKVxufSlcbnZhciBfX2VzbSA9IChmbiwgcmVzKSA9PlxuICAgIGZ1bmN0aW9uIF9faW5pdCgpIHtcbiAgICAgICAgcmV0dXJuIGZuICYmIChyZXMgPSAoMCwgZm5bX19nZXRPd25Qcm9wTmFtZXMoZm4pWzBdXSkoKGZuID0gMCkpKSwgcmVzXG4gICAgfVxudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT5cbiAgICBmdW5jdGlvbiBfX3JlcXVpcmUyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgbW9kIHx8XG4gICAgICAgICAgICAgICAgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKFxuICAgICAgICAgICAgICAgICAgICAobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLFxuICAgICAgICAgICAgICAgICAgICBtb2RcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgbW9kLmV4cG9ydHNcbiAgICAgICAgKVxuICAgIH1cbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICAgIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgICAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pXG59XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICAgIGlmICgoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBmcm9tID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgICAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgICAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBmcm9tW2tleV0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB0b1xufVxudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+IChcbiAgICAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSksXG4gICAgX19jb3B5UHJvcHMoXG4gICAgICAgIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgICAgICAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgICAgICAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gICAgICAgIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZVxuICAgICAgICAgICAgPyBfX2RlZlByb3AodGFyZ2V0LCAnZGVmYXVsdCcsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KVxuICAgICAgICAgICAgOiB0YXJnZXQsXG4gICAgICAgIG1vZFxuICAgIClcbilcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PlxuICAgIF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpXG5cbmV4cG9ydCB7IF9fcmVxdWlyZSwgX19lc20sIF9fY29tbW9uSlMsIF9fZXhwb3J0LCBfX3RvRVNNLCBfX3RvQ29tbW9uSlMgfVxuXG4vLyBpbXBvcnQge1xuLy8gICAgIF9fY29tbW9uSlMsXG4vLyAgICAgX19lc20sXG4vLyAgICAgX19leHBvcnQsXG4vLyAgICAgX19yZXF1aXJlLFxuLy8gICAgIF9fdG9Db21tb25KU1xuLy8gICB9IGZyb20gXCIuL2NodW5rLVRGV0RLVkkzLmpzXCI7XG5cbi8vIG5vZGVfbW9kdWxlcy9tb21lbnQvZGlzdC9tb21lbnQuanNcblxudmFyIHJlcXVpcmVfbW9tZW50ID0gX19jb21tb25KUyh7XG4gICAgJ25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzJyhleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgICAgOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgICAgICAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICA/IChtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSlcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZFxuICAgICAgICAgICAgICAgID8gZGVmaW5lKGZhY3RvcnkpXG4gICAgICAgICAgICAgICAgOiAoZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKSlcbiAgICAgICAgfSkoZXhwb3J0cywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGhvb2tDYWxsYmFja1xuICAgICAgICAgICAgZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHxcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgYXJyTGVuID0gYXJyLmxlbmd0aFxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYVtpXSA9IGJbaV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlVVRDKGlucHV0LCBmb3JtYXQyLCBsb2NhbGUyLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDIsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZTIsXG4gICAgICAgICAgICAgICAgICAgIHN0cmljdCxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICkudXRjKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZW1wdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1bnVzZWRUb2tlbnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB1bnVzZWRJbnB1dDogW10sXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiAtMixcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlcjogMCxcbiAgICAgICAgICAgICAgICAgICAgbnVsbElucHV0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZEVyYTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZE1vbnRoOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkRm9ybWF0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckludmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNvOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgZXJhOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmZjMjgyMjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlNaXNtYXRjaDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICAgICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtLl9wZlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNvbWVcbiAgICAgICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICAgICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IHQubGVuZ3RoID4+PiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICAgICAgICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRXJhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKVxuICAgICAgICAgICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWRcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQoZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pXG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gKGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXSksXG4gICAgICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlXG4gICAgICAgICAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvMiwgZnJvbTIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgICAgICAgICBtb21lbnRQcm9wZXJ0aWVzTGVuID0gbW9tZW50UHJvcGVydGllcy5sZW5ndGhcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvMi5faXNBTW9tZW50T2JqZWN0ID0gZnJvbTIuX2lzQU1vbWVudE9iamVjdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9pKSkge1xuICAgICAgICAgICAgICAgICAgICB0bzIuX2kgPSBmcm9tMi5faVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9mKSkge1xuICAgICAgICAgICAgICAgICAgICB0bzIuX2YgPSBmcm9tMi5fZlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9sKSkge1xuICAgICAgICAgICAgICAgICAgICB0bzIuX2wgPSBmcm9tMi5fbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvMi5fc3RyaWN0ID0gZnJvbTIuX3N0cmljdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl90em0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvMi5fdHptID0gZnJvbTIuX3R6bVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9pc1VUQykpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8yLl9pc1VUQyA9IGZyb20yLl9pc1VUQ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvMi5fb2Zmc2V0ID0gZnJvbTIuX29mZnNldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9wZikpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8yLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tMilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tMi5fbG9jYWxlKSkge1xuICAgICAgICAgICAgICAgICAgICB0bzIuX2xvY2FsZSA9IGZyb20yLl9sb2NhbGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXNMZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBmcm9tMltwcm9wXVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8yW3Byb3BdID0gdmFsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvMlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKVxuICAgICAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZShOYU4pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNNb21lbnQob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8XG4gICAgICAgICAgICAgICAgICAgIChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm5cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWVcbiAgICAgICAgICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ0xlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGFyZ3VtZW50c1swXSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdW2tleV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuQXJndW1lbnRzOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcigpLnN0YWNrXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgfSwgZm4pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGVwcmVjYXRpb25zID0ge31cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgd2Fybihtc2cpXG4gICAgICAgICAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZVxuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbFxuICAgICAgICAgICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldChjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcCwgaVxuICAgICAgICAgICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoY29uZmlnLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgL1xcZHsxLDJ9Ly5zb3VyY2VcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksXG4gICAgICAgICAgICAgICAgICAgIHByb3BcbiAgICAgICAgICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBrZXlzXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0gT2JqZWN0LmtleXNcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBbXVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2FsZW5kYXIoa2V5LCBtb20sIG5vdzIpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXVxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdzIpIDogb3V0cHV0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBzaWduMiA9IG51bWJlciA+PSAwXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKHNpZ24yID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzdHIoMSkgK1xuICAgICAgICAgICAgICAgICAgICBhYnNOdW1iZXJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9XG4gICAgICAgICAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2csXG4gICAgICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID1cbiAgICAgICAgICAgICAgICAgICAgLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZyxcbiAgICAgICAgICAgICAgICBmb3JtYXRGdW5jdGlvbnMgPSB7fSxcbiAgICAgICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbih0b2tlbjIsIHBhZGRlZCwgb3JkaW5hbDIsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b2tlbjIpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW4yXSA9IGZ1bmNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkZWRbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGVkWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9yZGluYWwyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWwyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0Mikge1xuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IGZvcm1hdDIubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aFxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaTJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpMiA9IDA7IGkyIDwgbGVuZ3RoOyBpMisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpMl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBhcnJheVtpMl0uY2FsbChtb20sIGZvcm1hdDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhcnJheVtpMl1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdDIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcm1hdDIgPSBleHBhbmRGb3JtYXQoZm9ybWF0MiwgbS5sb2NhbGVEYXRhKCkpXG4gICAgICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdDJdID1cbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdDJdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQyKVxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0Ml0obSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQyLCBsb2NhbGUyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSA1XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGUyLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMFxuICAgICAgICAgICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0MikpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiA9IGZvcm1hdDIucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vuc1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwXG4gICAgICAgICAgICAgICAgICAgIGkgLT0gMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0MlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgICAgICBMOiAnTU0vREQvWVlZWScsXG4gICAgICAgICAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdDIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXVxuICAgICAgICAgICAgICAgIGlmIChmb3JtYXQyIHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0MlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXJcbiAgICAgICAgICAgICAgICAgICAgLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRvaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnREQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnZGRkZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2suc2xpY2UoMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2tcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJycpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJ1xuICAgICAgICAgICAgZnVuY3Rpb24gaW52YWxpZERhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnLFxuICAgICAgICAgICAgICAgIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9L1xuICAgICAgICAgICAgZnVuY3Rpb24gb3JkaW5hbChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgICAgICB3OiAnYSB3ZWVrJyxcbiAgICAgICAgICAgICAgICB3dzogJyVkIHdlZWtzJyxcbiAgICAgICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KVxuICAgICAgICAgICAgICAgICAgICA/IG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAgICAgICAgICAgICAgICAgIDogb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZjIsIG91dHB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtYXQyID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYyID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXVxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdDIpXG4gICAgICAgICAgICAgICAgICAgID8gZm9ybWF0MihvdXRwdXQpXG4gICAgICAgICAgICAgICAgICAgIDogZm9ybWF0Mi5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYWxpYXNlcyA9IHt9XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXModW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzZXNbc2hvcnRoYW5kXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXVxuICAgICAgICAgICAgICAgICAgICA6IHZvaWQgMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgICAgICAgICBwcm9wXG4gICAgICAgICAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHByaW9yaXRpZXMgPSB7fVxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVuaXRzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHVcbiAgICAgICAgICAgICAgICBmb3IgKHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AodW5pdHNPYmosIHUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0cy5wdXNoKHsgdW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV0gfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuaXRzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFic0Zsb29yKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDBcbiAgICAgICAgICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUdldFNldCh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldChtb20sIHVuaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tLmlzVmFsaWQoKVxuICAgICAgICAgICAgICAgICAgICA/IG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpXG4gICAgICAgICAgICAgICAgICAgIDogTmFOXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXQkMShtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbS5pc1ZhbGlkKCkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0ID09PSAnRnVsbFllYXInICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0xlYXBZZWFyKG1vbS55ZWFyKCkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBtb20ubW9udGgoKSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbW9tLmRhdGUoKSA9PT0gMjlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbS5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheXNJbk1vbnRoKHZhbHVlLCBtb20ubW9udGgoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ0dldCh1bml0cykge1xuICAgICAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzdHJpbmdTZXQodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cylcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdGl6ZWRMZW4gPSBwcmlvcml0aXplZC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHByaW9yaXRpemVkTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hdGNoMSA9IC9cXGQvLFxuICAgICAgICAgICAgICAgIG1hdGNoMiA9IC9cXGRcXGQvLFxuICAgICAgICAgICAgICAgIG1hdGNoMyA9IC9cXGR7M30vLFxuICAgICAgICAgICAgICAgIG1hdGNoNCA9IC9cXGR7NH0vLFxuICAgICAgICAgICAgICAgIG1hdGNoNiA9IC9bKy1dP1xcZHs2fS8sXG4gICAgICAgICAgICAgICAgbWF0Y2gxdG8yID0gL1xcZFxcZD8vLFxuICAgICAgICAgICAgICAgIG1hdGNoM3RvNCA9IC9cXGRcXGRcXGRcXGQ/LyxcbiAgICAgICAgICAgICAgICBtYXRjaDV0bzYgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy8sXG4gICAgICAgICAgICAgICAgbWF0Y2gxdG8zID0gL1xcZHsxLDN9LyxcbiAgICAgICAgICAgICAgICBtYXRjaDF0bzQgPSAvXFxkezEsNH0vLFxuICAgICAgICAgICAgICAgIG1hdGNoMXRvNiA9IC9bKy1dP1xcZHsxLDZ9LyxcbiAgICAgICAgICAgICAgICBtYXRjaFVuc2lnbmVkID0gL1xcZCsvLFxuICAgICAgICAgICAgICAgIG1hdGNoU2lnbmVkID0gL1srLV0/XFxkKy8sXG4gICAgICAgICAgICAgICAgbWF0Y2hPZmZzZXQgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2ksXG4gICAgICAgICAgICAgICAgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpLFxuICAgICAgICAgICAgICAgIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LyxcbiAgICAgICAgICAgICAgICBtYXRjaFdvcmQgPVxuICAgICAgICAgICAgICAgICAgICAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaSxcbiAgICAgICAgICAgICAgICByZWdleGVzXG4gICAgICAgICAgICByZWdleGVzID0ge31cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4odG9rZW4yLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgICAgICAgICByZWdleGVzW3Rva2VuMl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KVxuICAgICAgICAgICAgICAgICAgICA/IHJlZ2V4XG4gICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXggPyBzdHJpY3RSZWdleCA6IHJlZ2V4XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuMiwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuMikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4yKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW4yXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKFxuICAgICAgICAgICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnXFxcXCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRva2VucyA9IHt9XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuKHRva2VuMiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgZnVuYyA9IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbkxlblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbjIgPSBbdG9rZW4yXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2tlbkxlbiA9IHRva2VuMi5sZW5ndGhcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnNbdG9rZW4yW2ldXSA9IGZ1bmNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbih0b2tlbjIsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbjIsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuMylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4yLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuMikpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zW3Rva2VuMl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbjIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIFlFQVIgPSAwLFxuICAgICAgICAgICAgICAgIE1PTlRIID0gMSxcbiAgICAgICAgICAgICAgICBEQVRFID0gMixcbiAgICAgICAgICAgICAgICBIT1VSID0gMyxcbiAgICAgICAgICAgICAgICBNSU5VVEUgPSA0LFxuICAgICAgICAgICAgICAgIFNFQ09ORCA9IDUsXG4gICAgICAgICAgICAgICAgTUlMTElTRUNPTkQgPSA2LFxuICAgICAgICAgICAgICAgIFdFRUsgPSA3LFxuICAgICAgICAgICAgICAgIFdFRUtEQVkgPSA4XG4gICAgICAgICAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4T2ZcbiAgICAgICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICAgICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICAgICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5hTlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKVxuICAgICAgICAgICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kTW9udGggPT09IDFcbiAgICAgICAgICAgICAgICAgICAgPyBpc0xlYXBZZWFyKHllYXIpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDI5XG4gICAgICAgICAgICAgICAgICAgICAgICA6IDI4XG4gICAgICAgICAgICAgICAgICAgIDogMzEgLSAoKG1vZE1vbnRoICUgNykgJSAyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0Mikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdDIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJylcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdNTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMi5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMi5tb250aHNSZWdleChpc1N0cmljdClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oXG4gICAgICAgICAgICAgICAgWydNTU0nLCAnTU1NTSddLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX3N0cmljdFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzID1cbiAgICAgICAgICAgICAgICAgICAgJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID1cbiAgICAgICAgICAgICAgICAgICAgJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy8sXG4gICAgICAgICAgICAgICAgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgICAgICAgICAgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkXG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMobSwgZm9ybWF0Mikge1xuICAgICAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1xuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV1cbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgICAgICAgICBdW20ubW9udGgoKV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0KG0sIGZvcm1hdDIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0W1xuICAgICAgICAgICAgICAgICAgICAgICAgICBNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0MilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgICAgICAgICAgXVttLm1vbnRoKCldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdDIsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBpaSxcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW11cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMmUzLCBpXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdDIgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQyID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlKG1vbnRoTmFtZSwgZm9ybWF0Miwgc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGksIG1vbSwgcmVnZXhcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWN0XG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzJlMywgaV0pXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ14nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aHMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleC5yZXBsYWNlKCcuJywgJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiA9PT0gJ01NTU0nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiA9PT0gJ01NTScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICFzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRNb250aChtb20sIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRheU9mTW9udGhcbiAgICAgICAgICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb21cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgIG1vbS5kYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10oXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBkYXlPZk1vbnRoXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybiBtb21cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRSZWdleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNSZWdleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBtb21cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzJlMywgaV0pXG4gICAgICAgICAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSlcbiAgICAgICAgICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKVxuICAgICAgICAgICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKVxuICAgICAgICAgICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KVxuICAgICAgICAgICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpXG4gICAgICAgICAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSlcbiAgICAgICAgICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleFxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKClcbiAgICAgICAgICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gemVyb0ZpbGwoeSwgNCkgOiAnKycgKyB5XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgNF0sIDAsICd5ZWFyJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCA1XSwgMCwgJ3llYXInKVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKVxuICAgICAgICAgICAgYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKVxuICAgICAgICAgICAgYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSlcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCBtYXRjaFNpZ25lZClcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgbWF0Y2gxdG80LCBtYXRjaDQpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W1lFQVJdID1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXQubGVuZ3RoID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0b0ludChpbnB1dClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyZTMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSlcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGVcbiAgICAgICAgICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQsIGgsIE0sIHMsIG1zKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSh5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGUsIGFyZ3NcbiAgICAgICAgICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDBcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3MpKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgICAgICAgICAgZndkbHcgPVxuICAgICAgICAgICAgICAgICAgICAgICAgKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgN1xuICAgICAgICAgICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICByZXNZZWFyLFxuICAgICAgICAgICAgICAgICAgICByZXNEYXlPZlllYXJcbiAgICAgICAgICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxXG4gICAgICAgICAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxXG4gICAgICAgICAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcilcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNZZWFyID0geWVhclxuICAgICAgICAgICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICAgICAgICAgIHdlZWsgPVxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgICAgICAgICByZXNXZWVrLFxuICAgICAgICAgICAgICAgICAgICByZXNZZWFyXG4gICAgICAgICAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMVxuICAgICAgICAgICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KVxuICAgICAgICAgICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDFcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKVxuICAgICAgICAgICAgICAgICAgICByZXNXZWVrID0gd2Vla1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSlcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gN1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpXG4gICAgICAgICAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpXG4gICAgICAgICAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpXG4gICAgICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KVxuICAgICAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSlcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCBtYXRjaDF0bzIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignVycsIG1hdGNoMXRvMilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgICAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgICAgICAgICBbJ3cnLCAnd3cnLCAnVycsICdXVyddLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbjIpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla1t0b2tlbjIuc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsobW9tKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgICAgICAgICBkb3c6IDAsXG4gICAgICAgICAgICAgICAgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICAgICAgZG95OiA2XG4gICAgICAgICAgICAgICAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3lcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldFdlZWsoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcylcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2Vla1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5JylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdDIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0MilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdDIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5JylcbiAgICAgICAgICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKVxuICAgICAgICAgICAgYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKVxuICAgICAgICAgICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKVxuICAgICAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdkYXknLCAxMSlcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKVxuICAgICAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignZScsIG1hdGNoMXRvMilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCBtYXRjaDF0bzIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGUyLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTIud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMi53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICAgICAgICAgIFsnZGQnLCAnZGRkJywgJ2RkZGQnXSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4yLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9zdHJpY3RcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgICAgICAgICBbJ2QnLCAnZScsICdFJ10sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrW3Rva2VuMl0gPSB0b0ludChpbnB1dClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBsb2NhbGUyLndlZWtkYXlzUGFyc2UoaW5wdXQpXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMi53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgN1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzaGlmdFdlZWtkYXlzKHdzLCBuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPVxuICAgICAgICAgICAgICAgICAgICAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPVxuICAgICAgICAgICAgICAgICAgICAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkXG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyhtLCBmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdlZWtkYXlzID0gaXNBcnJheSh0aGlzLl93ZWVrZGF5cylcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1xuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0gIT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHdlZWtkYXlzLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgICAgICAgID8gd2Vla2RheXNbbS5kYXkoKV1cbiAgICAgICAgICAgICAgICAgICAgOiB3ZWVrZGF5c1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydChtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNTaG9ydFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4obSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdDIsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBpaSxcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW11cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyZTMsIDFdKS5kYXkoaSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0MiA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0MiA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdDIgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0MiA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlKHdlZWtkYXlOYW1lLCBmb3JtYXQyLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgbW9tLCByZWdleFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpY3RcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyZTMsIDFdKS5kYXkoaSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcXFwuPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXgucmVwbGFjZSgnLicsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDIgPT09ICdkZGRkJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQyID09PSAnZGRkJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiA9PT0gJ2RkJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAhc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayhpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgN1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgN1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNSZWdleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW5SZWdleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgIG1pbnAsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0cCxcbiAgICAgICAgICAgICAgICAgICAgbG9uZ3BcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMmUzLCAxXSkuZGF5KGkpXG4gICAgICAgICAgICAgICAgICAgIG1pbnAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpKVxuICAgICAgICAgICAgICAgICAgICBzaG9ydHAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykpXG4gICAgICAgICAgICAgICAgICAgIGxvbmdwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5cyhtb20sICcnKSlcbiAgICAgICAgICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucClcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApXG4gICAgICAgICAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncClcbiAgICAgICAgICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKVxuICAgICAgICAgICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cClcbiAgICAgICAgICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KVxuICAgICAgICAgICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KVxuICAgICAgICAgICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpXG4gICAgICAgICAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpXG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXhcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgICAgICAgICBoRm9ybWF0LmFwcGx5KHRoaXMpICtcbiAgICAgICAgICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3VycygpICtcbiAgICAgICAgICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1lcmlkaWVtKHRva2VuMiwgbG93ZXJjYXNlKSB7XG4gICAgICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4yLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWludXRlcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJjYXNlXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVyaWRpZW0oJ2EnLCB0cnVlKVxuICAgICAgICAgICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSlcbiAgICAgICAgICAgIGFkZFVuaXRBbGlhcygnaG91cicsICdoJylcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnaG91cicsIDEzKVxuICAgICAgICAgICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbShpc1N0cmljdCwgbG9jYWxlMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGUyLl9tZXJpZGllbVBhcnNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdhJywgbWF0Y2hNZXJpZGllbSlcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCBtYXRjaE1lcmlkaWVtKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignSCcsIG1hdGNoMXRvMilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCBtYXRjaDF0bzIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdrJywgbWF0Y2gxdG8yKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNilcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpXG4gICAgICAgICAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dClcbiAgICAgICAgICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KVxuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDJcbiAgICAgICAgICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKVxuICAgICAgICAgICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSlcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMlxuICAgICAgICAgICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKVxuICAgICAgICAgICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpXG4gICAgICAgICAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSlcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyXG4gICAgICAgICAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSlcbiAgICAgICAgICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyXG4gICAgICAgICAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpXG4gICAgICAgICAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSlcbiAgICAgICAgICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0oaW5wdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pLFxuICAgICAgICAgICAgICAgIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpXG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbShob3VyczIsIG1pbnV0ZXMyLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhvdXJzMiA+IDExKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSdcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICAgICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgICAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgICAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgICAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuICAgICAgICAgICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgICAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcbiAgICAgICAgICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxvY2FsZXMgPSB7fSxcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllcyA9IHt9LFxuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZVxuICAgICAgICAgICAgZnVuY3Rpb24gY29tbW9uUHJlZml4KGFycjEsIGFycjIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgbWlubCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aClcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWlubDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtaW5sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZTIsXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJylcbiAgICAgICAgICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSlcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlMiA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0Lmxlbmd0aCA+PSBqICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uUHJlZml4KHNwbGl0LCBuZXh0KSA+PSBqIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGotLVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0xvY2FsZU5hbWVTYW5lKG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZS5tYXRjaCgnXlteL1xcXFxcXFxcXSokJykgIT0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID09PSB2b2lkIDAgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlICYmXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzICYmXG4gICAgICAgICAgICAgICAgICAgIGlzTG9jYWxlTmFtZVNhbmUobmFtZSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJiclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUgPSBfX3JlcXVpcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBudWxsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZShrZXksIHZhbHVlcykge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhXG4gICAgICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0xvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbGUyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlIGFuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZ1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGUyID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlMi5fY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbGUyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wTG9jYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdLnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUNvbmZpZ3MobG9jYWxlc1tuYW1lXS5fY29uZmlnLCBjb25maWcpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcExvY2FsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGUyID0gbmV3IExvY2FsZShjb25maWcpXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGUyLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGUyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZ2V0U2V0R2xvYmFsTG9jYWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRMb2NhbGUoa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsZTJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlMiA9IGxvYWRMb2NhbGUoa2V5KVxuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBba2V5XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93KG0pIHtcbiAgICAgICAgICAgICAgICB2YXIgb3ZlcmZsb3csXG4gICAgICAgICAgICAgICAgICAgIGEgPSBtLl9hXG4gICAgICAgICAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhW01PTlRIXSA8IDAgfHwgYVtNT05USF0gPiAxMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gTU9OVEhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFbREFURV0gPCAxIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW0RBVEVdID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBEQVRFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW0hPVVJdIDwgMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtIT1VSXSA+IDI0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtNSU5VVEVdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbU0VDT05EXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSAhPT0gMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBIT1VSXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW01JTlVURV0gPCAwIHx8IGFbTUlOVVRFXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNSU5VVEVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFbU0VDT05EXSA8IDAgfHwgYVtTRUNPTkRdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFNFQ09ORFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNSUxMSVNFQ09ORFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTFcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvd1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgICAgICAgICBiYXNpY0lzb1JlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZHwpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgICAgICAgICB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vLFxuICAgICAgICAgICAgICAgIGlzb0RhdGVzID0gW1xuICAgICAgICAgICAgICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgICAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICAgICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICAgICAgICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICAgICAgICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgICAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgICAgICAgICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgICAgICAgICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgICAgICAgICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXSxcbiAgICAgICAgICAgICAgICAgICAgWydZWVlZTU0nLCAvXFxkezZ9LywgZmFsc2VdLFxuICAgICAgICAgICAgICAgICAgICBbJ1lZWVknLCAvXFxkezR9LywgZmFsc2VdXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpc29UaW1lcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICAgICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgICAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgICAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICAgICAgICAgICAgICBbJ0hIJywgL1xcZFxcZC9dXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKC0/XFxkKykvaSxcbiAgICAgICAgICAgICAgICByZmMyODIyID1cbiAgICAgICAgICAgICAgICAgICAgL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLyxcbiAgICAgICAgICAgICAgICBvYnNPZmZzZXRzID0ge1xuICAgICAgICAgICAgICAgICAgICBVVDogMCxcbiAgICAgICAgICAgICAgICAgICAgR01UOiAwLFxuICAgICAgICAgICAgICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgICAgICAgICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgICAgICAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICAgICAgICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgICAgICAgICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgICAgICAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICAgICAgICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgICAgICAgICAgICAgIFBTVDogLTggKiA2MFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPVxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICBpc29EYXRlc0xlbiA9IGlzb0RhdGVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaXNvVGltZXNMZW4gPSBpc29UaW1lcy5sZW5ndGhcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXNMZW47IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9mID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgICAgICAgICB5ZWFyU3RyLFxuICAgICAgICAgICAgICAgIG1vbnRoU3RyLFxuICAgICAgICAgICAgICAgIGRheVN0cixcbiAgICAgICAgICAgICAgICBob3VyU3RyLFxuICAgICAgICAgICAgICAgIG1pbnV0ZVN0cixcbiAgICAgICAgICAgICAgICBzZWNvbmRTdHJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKVxuICAgICAgICAgICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyZTMgKyB5ZWFyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHllYXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc1xuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwoW14oKV0qXFwpfFtcXG5cXHRdL2csICcgJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxzXFxzKiQvLCAnJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsyXVxuICAgICAgICAgICAgICAgICAgICAgICAgKS5nZXREYXkoKVxuICAgICAgICAgICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gaG0gJSAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gKGhtIC0gbSkgLyAxMDBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSByZmMyODIyLmV4ZWMocHJlcHJvY2Vzc1JGQzI4MjIoY29uZmlnLl9pKSksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZEFycmF5XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFs3XVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXlcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKVxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKVxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKVxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWRcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKVxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWRcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSBkaXNjb3VyYWdlZC4gUGxlYXNlIHJlZmVyIHRvIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9kID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKVxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENEYXRlKClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXREYXRlKClcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlLFxuICAgICAgICAgICAgICAgICAgICBleHBlY3RlZFdlZWtkYXksXG4gICAgICAgICAgICAgICAgICAgIHllYXJUb1VzZVxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX3cgJiZcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9PT0gMFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKVxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbaV0gPT0gbnVsbCA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkoXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlnLl9kLmdldFVUQ0RheSgpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlnLl9kLmdldERheSgpXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl93ICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciB3LFxuICAgICAgICAgICAgICAgICAgICB3ZWVrWWVhcixcbiAgICAgICAgICAgICAgICAgICAgd2VlayxcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheSxcbiAgICAgICAgICAgICAgICAgICAgZG93LFxuICAgICAgICAgICAgICAgICAgICBkb3ksXG4gICAgICAgICAgICAgICAgICAgIHRlbXAsXG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyxcbiAgICAgICAgICAgICAgICAgICAgY3VyV2Vla1xuICAgICAgICAgICAgICAgIHcgPSBjb25maWcuX3dcbiAgICAgICAgICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvdyA9IDFcbiAgICAgICAgICAgICAgICAgICAgZG95ID0gNFxuICAgICAgICAgICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgdy5HRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhclxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpXG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpXG4gICAgICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93XG4gICAgICAgICAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveVxuICAgICAgICAgICAgICAgICAgICBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSlcbiAgICAgICAgICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcilcbiAgICAgICAgICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKVxuICAgICAgICAgICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvd1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3dcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KVxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge31cbiAgICAgICAgICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge31cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25maWcuX2EgPSBbXVxuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuczIsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuMixcbiAgICAgICAgICAgICAgICAgICAgc2tpcHBlZCxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGVyYSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5MZW5cbiAgICAgICAgICAgICAgICB0b2tlbnMyID1cbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGluZ1Rva2Vuc1xuICAgICAgICAgICAgICAgICAgICApIHx8IFtdXG4gICAgICAgICAgICAgICAgdG9rZW5MZW4gPSB0b2tlbnMyLmxlbmd0aFxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuMiA9IHRva2VuczJbaV1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuMiwgY29uZmlnKVxuICAgICAgICAgICAgICAgICAgICApIHx8IFtdKVswXVxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbjJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuMilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuMiwgcGFyc2VkSW5wdXQsIGNvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuMilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID1cbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aFxuICAgICAgICAgICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB2b2lkIDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApXG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKFxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2xvY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdLFxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX21lcmlkaWVtXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGVyYSA9IGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYVxuICAgICAgICAgICAgICAgIGlmIChlcmEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhc0NvbnZlcnRZZWFyKFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJhLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZylcbiAgICAgICAgICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcChsb2NhbGUyLCBob3VyLCBtZXJpZGllbTIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNQbVxuICAgICAgICAgICAgICAgIGlmIChtZXJpZGllbTIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaG91clxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlMi5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMi5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0yKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlMi5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNQbSA9IGxvY2FsZTIuaXNQTShtZXJpZGllbTIpXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG91ciArPSAxMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG91ciA9IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaG91clxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBob3VyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50LFxuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjb3JlLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kLFxuICAgICAgICAgICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWdmTGVuID0gY29uZmlnLl9mLmxlbmd0aFxuICAgICAgICAgICAgICAgIGlmIChjb25maWdmTGVuID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZShOYU4pXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnZkxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDBcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV1cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjb3JlICs9XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwXG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJlc3RGb3JtYXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZEZvcm1hdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKSxcbiAgICAgICAgICAgICAgICAgICAgZGF5T3JEYXRlID0gaS5kYXkgPT09IHZvaWQgMCA/IGkuZGF0ZSA6IGkuZGF5XG4gICAgICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnllYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpLm1vbnRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5T3JEYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5ob3VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaS5taW51dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNlY29uZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkubWlsbGlzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSlcbiAgICAgICAgICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKVxuICAgICAgICAgICAgICAgICAgICByZXMuX25leHREYXkgPSB2b2lkIDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDIgPSBjb25maWcuX2ZcbiAgICAgICAgICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQyID09PSB2b2lkIDAgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7IG51bGxJbnB1dDogdHJ1ZSB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQyKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0Mikge1xuICAgICAgICAgICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2QgPSBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb25maWdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2lcbiAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZylcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZylcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0MiwgbG9jYWxlMiwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICAgICAgICAgIHZhciBjID0ge31cbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0MiA9PT0gdHJ1ZSB8fCBmb3JtYXQyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJpY3QgPSBmb3JtYXQyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDIgPSB2b2lkIDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZTIgPT09IHRydWUgfHwgbG9jYWxlMiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlMlxuICAgICAgICAgICAgICAgICAgICBsb2NhbGUyID0gdm9pZCAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSB2b2lkIDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVENcbiAgICAgICAgICAgICAgICBjLl9sID0gbG9jYWxlMlxuICAgICAgICAgICAgICAgIGMuX2kgPSBpbnB1dFxuICAgICAgICAgICAgICAgIGMuX2YgPSBmb3JtYXQyXG4gICAgICAgICAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsKGlucHV0LCBmb3JtYXQyLCBsb2NhbGUyLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0MiwgbG9jYWxlMiwgc3RyaWN0LCBmYWxzZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAgICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzLCBpXG4gICAgICAgICAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzWzBdXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWluKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWF4KCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9yZGVyaW5nID0gW1xuICAgICAgICAgICAgICAgICd5ZWFyJyxcbiAgICAgICAgICAgICAgICAncXVhcnRlcicsXG4gICAgICAgICAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgICAgICAgICAnd2VlaycsXG4gICAgICAgICAgICAgICAgJ2RheScsXG4gICAgICAgICAgICAgICAgJ2hvdXInLFxuICAgICAgICAgICAgICAgICdtaW51dGUnLFxuICAgICAgICAgICAgICAgICdzZWNvbmQnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZCdcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSxcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJMZW4gPSBvcmRlcmluZy5sZW5ndGhcbiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc093blByb3AobSwga2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmRlckxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBEdXJhdGlvbihkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIHllYXJzMiA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzMiA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgICAgICAgICB3ZWVrczIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgZGF5czIgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGhvdXJzMiA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMyID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRzMiA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzMiA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwXG4gICAgICAgICAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpXG4gICAgICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID1cbiAgICAgICAgICAgICAgICAgICAgK21pbGxpc2Vjb25kczIgK1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRzMiAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgICAgICAgICAgbWludXRlczIgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgICAgICAgICAgaG91cnMyICogMWUzICogNjAgKiA2MFxuICAgICAgICAgICAgICAgIHRoaXMuX2RheXMgPSArZGF5czIgKyB3ZWVrczIgKiA3XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRoczIgKyBxdWFydGVycyAqIDMgKyB5ZWFyczIgKiAxMlxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB7fVxuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpXG4gICAgICAgICAgICAgICAgdGhpcy5fYnViYmxlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhYnNSb3VuZChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmcysrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gb2Zmc2V0KHRva2VuMiwgc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4yLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQyID0gdGhpcy51dGNPZmZzZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24yID0gJysnXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQyIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0MiA9IC1vZmZzZXQyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduMiA9ICctJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduMiArXG4gICAgICAgICAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fihvZmZzZXQyIC8gNjApLCAyKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IgK1xuICAgICAgICAgICAgICAgICAgICAgICAgemVyb0ZpbGwofn5vZmZzZXQyICUgNjAsIDIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0KCdaJywgJzonKVxuICAgICAgICAgICAgb2Zmc2V0KCdaWicsICcnKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignWicsIG1hdGNoU2hvcnRPZmZzZXQpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWVcbiAgICAgICAgICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpXG4gICAgICAgICAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlciksXG4gICAgICAgICAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0cyxcbiAgICAgICAgICAgICAgICAgICAgbWludXRlczJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaHVuayA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXVxuICAgICAgICAgICAgICAgIHBhcnRzID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXVxuICAgICAgICAgICAgICAgIG1pbnV0ZXMyID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKVxuICAgICAgICAgICAgICAgIHJldHVybiBtaW51dGVzMiA9PT0gMFxuICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgOiBwYXJ0c1swXSA9PT0gJysnXG4gICAgICAgICAgICAgICAgICAgID8gbWludXRlczJcbiAgICAgICAgICAgICAgICAgICAgOiAtbWludXRlczJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzLCBkaWZmMlxuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKVxuICAgICAgICAgICAgICAgICAgICBkaWZmMiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGlucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmMilcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0KG0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge31cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0MiA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbEFkanVzdFxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldDIgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldDIsICdtJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldDIgOiBnZXREYXRlT2Zmc2V0KHRoaXMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZShpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMFxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGMgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJcbiAgICAgICAgICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpXG4gICAgICAgICAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYylcbiAgICAgICAgICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgICAgICAgICBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNMb2NhbCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNVdGMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwXG4gICAgICAgICAgICAgICAgICAgIDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhc3BOZXRSZWdleCA9XG4gICAgICAgICAgICAgICAgICAgIC9eKC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKyk6KFxcZCspKD86OihcXGQrKShcXC5cXGQqKT8pPyQvLFxuICAgICAgICAgICAgICAgIGlzb1JlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kL1xuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHNpZ24yLFxuICAgICAgICAgICAgICAgICAgICByZXQsXG4gICAgICAgICAgICAgICAgICAgIGRpZmZSZXNcbiAgICAgICAgICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtczogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQ6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgTTogaW5wdXQuX21vbnRoc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkgfHwgIWlzTmFOKCtpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSB7fVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gK2lucHV0XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSAraW5wdXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ24yID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMVxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiB0b0ludChtYXRjaFtEQVRFXSkgKiBzaWduMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGg6IHRvSW50KG1hdGNoW0hPVVJdKSAqIHNpZ24yLFxuICAgICAgICAgICAgICAgICAgICAgICAgbTogdG9JbnQobWF0Y2hbTUlOVVRFXSkgKiBzaWduMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHM6IHRvSW50KG1hdGNoW1NFQ09ORF0pICogc2lnbjIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtczogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMWUzKSkgKiBzaWduMlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgICAgICAgICBzaWduMiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDFcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbjIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTTogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduMiksXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbjIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG06IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduMiksXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbjIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSB7fVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0ge31cbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19pc1ZhbGlkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0Ll9pc1ZhbGlkID0gaW5wdXQuX2lzVmFsaWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGVcbiAgICAgICAgICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDFcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlSXNvKGlucCwgc2lnbjIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKVxuICAgICAgICAgICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0ge31cbiAgICAgICAgICAgICAgICByZXMubW9udGhzID1cbiAgICAgICAgICAgICAgICAgICAgb3RoZXIubW9udGgoKSAtXG4gICAgICAgICAgICAgICAgICAgIGJhc2UubW9udGgoKSArXG4gICAgICAgICAgICAgICAgICAgIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMlxuICAgICAgICAgICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgLS1yZXMubW9udGhzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzXG4gICAgICAgICAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBtaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMCB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKVxuICAgICAgICAgICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpXG4gICAgICAgICAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHVyLCB0bXBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKG51bWJlciwgcGVyaW9kKS4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gcGVyaW9kXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJpb2QgPSB0bXBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZClcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkU3VidHJhY3QobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgICAgIHZhciBtaWxsaXNlY29uZHMyID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICAgICAgZGF5czIgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoczIgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKVxuICAgICAgICAgICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0XG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoczIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRoczIgKiBpc0FkZGluZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRheXMyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5czIgKiBpc0FkZGluZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1pbGxpc2Vjb25kczIpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kczIgKiBpc0FkZGluZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzMiB8fCBtb250aHMyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhZGQgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyksXG4gICAgICAgICAgICAgICAgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0JylcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU3RyaW5nKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXQoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBpc01vbWVudChpbnB1dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgaXNEYXRlKGlucHV0KSB8fFxuICAgICAgICAgICAgICAgICAgICBpc1N0cmluZyhpbnB1dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgaXNOdW1iZXIoaW5wdXQpIHx8XG4gICAgICAgICAgICAgICAgICAgIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPT09IHZvaWQgMFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3llYXJzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd5ZWFyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdtb250aHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdNJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXlzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdEJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdob3VycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaG91cicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWludXRlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWludXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWNvbmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21zJ1xuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlMZW4gPSBwcm9wZXJ0aWVzLmxlbmd0aFxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0eUxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXVxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFycmF5VGVzdCA9IGlzQXJyYXkoaW5wdXQpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZVRlc3QgPSBmYWxzZVxuICAgICAgICAgICAgICAgIGlmIChhcnJheVRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXIoaXRlbSkgJiYgaXNTdHJpbmcoaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5VGVzdCAmJiBkYXRhVHlwZVRlc3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQ2FsZW5kYXJTcGVjKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdzYW1lRGF5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICduZXh0RGF5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdsYXN0RGF5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICduZXh0V2VlaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGFzdFdlZWsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NhbWVFbHNlJ1xuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXVxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdzIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZjIgPSBteU1vbWVudC5kaWZmKG5vdzIsICdkYXlzJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlmZjIgPCAtNlxuICAgICAgICAgICAgICAgICAgICA/ICdzYW1lRWxzZSdcbiAgICAgICAgICAgICAgICAgICAgOiBkaWZmMiA8IC0xXG4gICAgICAgICAgICAgICAgICAgID8gJ2xhc3RXZWVrJ1xuICAgICAgICAgICAgICAgICAgICA6IGRpZmYyIDwgMFxuICAgICAgICAgICAgICAgICAgICA/ICdsYXN0RGF5J1xuICAgICAgICAgICAgICAgICAgICA6IGRpZmYyIDwgMVxuICAgICAgICAgICAgICAgICAgICA/ICdzYW1lRGF5J1xuICAgICAgICAgICAgICAgICAgICA6IGRpZmYyIDwgMlxuICAgICAgICAgICAgICAgICAgICA/ICduZXh0RGF5J1xuICAgICAgICAgICAgICAgICAgICA6IGRpZmYyIDwgN1xuICAgICAgICAgICAgICAgICAgICA/ICduZXh0V2VlaydcbiAgICAgICAgICAgICAgICAgICAgOiAnc2FtZUVsc2UnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxlbmRhciQxKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0cyA9IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9tZW50SW5wdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0cyA9IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2FsZW5kYXJTcGVjKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHMgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSB2b2lkIDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbm93MiA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdzIsIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQyID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0cyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXQyXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZvcm1hdHNbZm9ybWF0Ml0uY2FsbCh0aGlzLCBub3cyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZm9ybWF0c1tmb3JtYXQyXSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKG5vdzIpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KVxuICAgICAgICAgICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJ1xuICAgICAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbElucHV0LnZhbHVlT2YoKSA8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0JlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpXG4gICAgICAgICAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnXG4gICAgICAgICAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsSW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0JldHdlZW4oZnJvbTIsIHRvMiwgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20yKSA/IGZyb20yIDogY3JlYXRlTG9jYWwoZnJvbTIpLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8yKSA/IHRvMiA6IGNyZWF0ZUxvY2FsKHRvMilcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxUby5pc1ZhbGlkKClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKGluY2x1c2l2aXR5WzBdID09PSAnKCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAgICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc1NhbWUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRNc1xuICAgICAgICAgICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJ1xuICAgICAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGlmZihpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCwgem9uZURlbHRhLCBvdXRwdXRcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOYU5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcylcbiAgICAgICAgICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOYU5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNFxuICAgICAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpXG4gICAgICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gM1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTNcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTVcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSB0aGlzIC0gdGhhdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1vbnRoRGlmZihhLCBiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEuZGF0ZSgpIDwgYi5kYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1tb250aERpZmYoYiwgYSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID1cbiAgICAgICAgICAgICAgICAgICAgICAgIChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICAgICAgICAgICAgYWRqdXN0XG4gICAgICAgICAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpXG4gICAgICAgICAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpXG4gICAgICAgICAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWidcbiAgICAgICAgICAgIGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSdcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKClcbiAgICAgICAgICAgICAgICAgICAgLmxvY2FsZSgnZW4nKVxuICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXNcbiAgICAgICAgICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0Y1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxZTNcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICAgICAgdXRjXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JyxcbiAgICAgICAgICAgICAgICAgICAgem9uZSA9ICcnLFxuICAgICAgICAgICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lLFxuICAgICAgICAgICAgICAgICAgICBzdWZmaXhcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ21vbWVudC51dGMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnbW9tZW50LnBhcnNlWm9uZSdcbiAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdaJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nXG4gICAgICAgICAgICAgICAgeWVhciA9XG4gICAgICAgICAgICAgICAgICAgIDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSA/ICdZWVlZJyA6ICdZWVlZWVknXG4gICAgICAgICAgICAgICAgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJ1xuICAgICAgICAgICAgICAgIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdChpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0Y1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBob29rcy5kZWZhdWx0Rm9ybWF0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZnJvbSh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyB0bzogdGhpcywgZnJvbTogdGltZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZnJvbU5vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdG8odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZnJvbTogdGhpcywgdG86IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxlKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdMb2NhbGVEYXRhXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxlRGF0YSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDFlMyxcbiAgICAgICAgICAgICAgICBNU19QRVJfTUlOVVRFID0gNjAgKiBNU19QRVJfU0VDT05ELFxuICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFLFxuICAgICAgICAgICAgICAgIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUlxuICAgICAgICAgICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChkaXZpZGVuZCAlIGRpdmlzb3IpICsgZGl2aXNvcikgJSBkaXZpc29yXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSU1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5LCBtLCBkKS52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB1dGNTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzdGFydE9mKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlXG4gICAgICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cylcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHVuaXRzID09PSB2b2lkIDAgfHxcbiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHxcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMuaXNWYWxpZCgpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGVcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5faXNVVENcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKVxuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBlbmRPZih1bml0cykge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZVxuICAgICAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB1bml0cyA9PT0gdm9pZCAwIHx8XG4gICAgICAgICAgICAgICAgICAgIHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8XG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmlzVmFsaWQoKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlXG4gICAgICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5faXNVVENcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9NSU5VVEUgLSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpXG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKHRoaXMuX29mZnNldCB8fCAwKSAqIDZlNFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdW5peCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDFlMylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvRGF0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICAgICAgICAgIHZhciBtID0gdGhpc1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIG0ueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICBtLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIG0uZGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICBtLmhvdXIoKSxcbiAgICAgICAgICAgICAgICAgICAgbS5taW51dGUoKSxcbiAgICAgICAgICAgICAgICAgICAgbS5zZWNvbmQoKSxcbiAgICAgICAgICAgICAgICAgICAgbS5taWxsaXNlY29uZCgpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQkMigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGludmFsaWRBdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3RcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignTicsIDAsIDAsICdlcmFBYmJyJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdOTicsIDAsIDAsICdlcmFBYmJyJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdOTk4nLCAwLCAwLCAnZXJhQWJicicpXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignTk5OTicsIDAsIDAsICdlcmFOYW1lJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OTicsIDAsIDAsICdlcmFOYXJyb3cnKVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3knLCAxXSwgJ3lvJywgJ2VyYVllYXInKVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5JywgMl0sIDAsICdlcmFZZWFyJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXknLCAzXSwgMCwgJ2VyYVllYXInKVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eXknLCA0XSwgMCwgJ2VyYVllYXInKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignTicsIG1hdGNoRXJhQWJicilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ05OJywgbWF0Y2hFcmFBYmJyKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignTk5OJywgbWF0Y2hFcmFBYmJyKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignTk5OTicsIG1hdGNoRXJhTmFtZSlcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ05OTk5OJywgbWF0Y2hFcmFOYXJyb3cpXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKFxuICAgICAgICAgICAgICAgIFsnTicsICdOTicsICdOTk4nLCAnTk5OTicsICdOTk5OTiddLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcmEgPSBjb25maWcuX2xvY2FsZS5lcmFzUGFyc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fc3RyaWN0XG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhID0gZXJhXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRXJhID0gaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3knLCBtYXRjaFVuc2lnbmVkKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbigneXknLCBtYXRjaFVuc2lnbmVkKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbigneXl5JywgbWF0Y2hVbnNpZ25lZClcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eXknLCBtYXRjaFVuc2lnbmVkKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbigneW8nLCBtYXRjaEVyYVllYXJPcmRpbmFsKVxuICAgICAgICAgICAgYWRkUGFyc2VUb2tlbihbJ3knLCAneXknLCAneXl5JywgJ3l5eXknXSwgWUVBUilcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oWyd5byddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaFxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGlucHV0Lm1hdGNoKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZSkge1xuICAgICAgICAgICAgICAgICAgICBhcnJheVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxlRXJhcyhtLCBmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICAgICAgICAgIGVyYXMgPSB0aGlzLl9lcmFzIHx8IGdldExvY2FsZSgnZW4nKS5fZXJhc1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnNpbmNlKS5zdGFydE9mKCdkYXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyYXNbaV0uc2luY2UgPSBkYXRlLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gSW5maW5pdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS51bnRpbCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9IGRhdGUudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbG9jYWxlRXJhc1BhcnNlKGVyYU5hbWUsIGZvcm1hdDIsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCksXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFiYnIsXG4gICAgICAgICAgICAgICAgICAgIG5hcnJvd1xuICAgICAgICAgICAgICAgIGVyYU5hbWUgPSBlcmFOYW1lLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGVyYXNbaV0ubmFtZS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgIGFiYnIgPSBlcmFzW2ldLmFiYnIudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICBuYXJyb3cgPSBlcmFzW2ldLm5hcnJvdy50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZm9ybWF0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJiciA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hcnJvdyA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFtuYW1lLCBhYmJyLCBuYXJyb3ddLmluZGV4T2YoZXJhTmFtZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNDb252ZXJ0WWVhcihlcmEsIHllYXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyID0gZXJhLnNpbmNlIDw9IGVyYS51bnRpbCA/IDEgOiAtMVxuICAgICAgICAgICAgICAgIGlmICh5ZWFyID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpICsgKHllYXIgLSBlcmEub2Zmc2V0KSAqIGRpclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVyYU5hbWUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RXJhTmFycm93KCkge1xuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKClcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvd1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRFcmFBYmJyKCkge1xuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKClcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVyYVllYXIoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgICAgIGRpcixcbiAgICAgICAgICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpciA9IGVyYXNbaV0uc2luY2UgPD0gZXJhc1tpXS51bnRpbCA/IDEgOiAtMVxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSlcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnllYXIoKSAtIGhvb2tzKGVyYXNbaV0uc2luY2UpLnllYXIoKSkgKiBkaXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyYXNbaV0ub2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBlcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hbWVSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFtZVJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBlcmFzQWJiclJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc0FiYnJSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzQWJiclJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBlcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFycm93UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hcnJvd1JlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtYXRjaEVyYUFiYnIoaXNTdHJpY3QsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMi5lcmFzQWJiclJlZ2V4KGlzU3RyaWN0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWF0Y2hFcmFOYW1lKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTIuZXJhc05hbWVSZWdleChpc1N0cmljdClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFycm93KGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTIuZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWF0Y2hFcmFZZWFyT3JkaW5hbChpc1N0cmljdCwgbG9jYWxlMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGUyLl9lcmFZZWFyT3JkaW5hbFJlZ2V4IHx8IG1hdGNoVW5zaWduZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVFcmFzUGFyc2UoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFiYnJQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZVBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBuYXJyb3dQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpKVxuICAgICAgICAgICAgICAgICAgICBhYmJyUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5hYmJyKSlcbiAgICAgICAgICAgICAgICAgICAgbmFycm93UGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYXJyb3cpKVxuICAgICAgICAgICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5hYmJyKSlcbiAgICAgICAgICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdykpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2VyYXNSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB0aGlzLl9lcmFzTmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14oJyArIG5hbWVQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdGhpcy5fZXJhc0FiYnJSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeKCcgKyBhYmJyUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHRoaXMuX2VyYXNOYXJyb3dSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeKCcgKyBuYXJyb3dQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4odG9rZW4yLCBnZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4yLCB0b2tlbjIubGVuZ3RoXSwgMCwgZ2V0dGVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICd3ZWVrWWVhcicpXG4gICAgICAgICAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICd3ZWVrWWVhcicpXG4gICAgICAgICAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgJ2lzb1dlZWtZZWFyJylcbiAgICAgICAgICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJylcbiAgICAgICAgICAgIGFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKVxuICAgICAgICAgICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpXG4gICAgICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSlcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla1llYXInLCAxKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignRycsIG1hdGNoU2lnbmVkKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignZycsIG1hdGNoU2lnbmVkKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignR0cnLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgbWF0Y2gxdG80LCBtYXRjaDQpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgbWF0Y2gxdG80LCBtYXRjaDQpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsIG1hdGNoMXRvNiwgbWF0Y2g2KVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCBtYXRjaDF0bzYsIG1hdGNoNilcbiAgICAgICAgICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICAgICAgICAgIFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrW3Rva2VuMi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgICAgICAgICAgWydnZycsICdHRyddLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbjIpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla1t0b2tlbjJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3lcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhcihpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc29XZWVrKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgpLFxuICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLmlzb1dlZWtZZWFyKCksIDEsIDQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhcigpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vla1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRXZWVrc0luV2Vla1llYXIoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy53ZWVrWWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICAgICAgICAgIHZhciB3ZWVrc1RhcmdldFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpXG4gICAgICAgICAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3MoXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWVrWWVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlZWssXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgZG95XG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5T2ZZZWFyRGF0YS55ZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKVxuICAgICAgICAgICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKVxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpXG4gICAgICAgICAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpXG4gICAgICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ3F1YXJ0ZXInLCA3KVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSlcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogM1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgKHRoaXMubW9udGgoKSAlIDMpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJylcbiAgICAgICAgICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJylcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdEJywgbWF0Y2gxdG8yKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgICAgID8gbG9jYWxlMi5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUyLl9vcmRpbmFsUGFyc2VcbiAgICAgICAgICAgICAgICAgICAgOiBsb2NhbGUyLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSlcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJylcbiAgICAgICAgICAgIGFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpXG4gICAgICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ2RheU9mWWVhcicsIDQpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdEREQnLCBtYXRjaDF0bzMpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKVxuICAgICAgICAgICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgODY0ZTVcbiAgICAgICAgICAgICAgICAgICAgKSArIDFcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICA/IGRheU9mWWVhclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuYWRkKGlucHV0IC0gZGF5T2ZZZWFyLCAnZCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpXG4gICAgICAgICAgICBhZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJylcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdtJywgbWF0Y2gxdG8yKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSlcbiAgICAgICAgICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpXG4gICAgICAgICAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJylcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdzJywgbWF0Y2gxdG8yKVxuICAgICAgICAgICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORClcbiAgICAgICAgICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxZTNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxZTRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMWU1XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxZTZcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJylcbiAgICAgICAgICAgIGFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNilcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCBtYXRjaDF0bzMsIG1hdGNoMSlcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgbWF0Y2gxdG8zLCBtYXRjaDIpXG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKCdTU1MnLCBtYXRjaDF0bzMsIG1hdGNoMylcbiAgICAgICAgICAgIHZhciB0b2tlbiwgZ2V0U2V0TWlsbGlzZWNvbmRcbiAgICAgICAgICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDFlMylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSlcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCd6JywgMCwgMCwgJ3pvbmVBYmJyJylcbiAgICAgICAgICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRab25lQWJicigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRab25lTmFtZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGVcbiAgICAgICAgICAgIHByb3RvLmFkZCA9IGFkZFxuICAgICAgICAgICAgcHJvdG8uY2FsZW5kYXIgPSBjYWxlbmRhciQxXG4gICAgICAgICAgICBwcm90by5jbG9uZSA9IGNsb25lXG4gICAgICAgICAgICBwcm90by5kaWZmID0gZGlmZlxuICAgICAgICAgICAgcHJvdG8uZW5kT2YgPSBlbmRPZlxuICAgICAgICAgICAgcHJvdG8uZm9ybWF0ID0gZm9ybWF0XG4gICAgICAgICAgICBwcm90by5mcm9tID0gZnJvbVxuICAgICAgICAgICAgcHJvdG8uZnJvbU5vdyA9IGZyb21Ob3dcbiAgICAgICAgICAgIHByb3RvLnRvID0gdG9cbiAgICAgICAgICAgIHByb3RvLnRvTm93ID0gdG9Ob3dcbiAgICAgICAgICAgIHByb3RvLmdldCA9IHN0cmluZ0dldFxuICAgICAgICAgICAgcHJvdG8uaW52YWxpZEF0ID0gaW52YWxpZEF0XG4gICAgICAgICAgICBwcm90by5pc0FmdGVyID0gaXNBZnRlclxuICAgICAgICAgICAgcHJvdG8uaXNCZWZvcmUgPSBpc0JlZm9yZVxuICAgICAgICAgICAgcHJvdG8uaXNCZXR3ZWVuID0gaXNCZXR3ZWVuXG4gICAgICAgICAgICBwcm90by5pc1NhbWUgPSBpc1NhbWVcbiAgICAgICAgICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgPSBpc1NhbWVPckFmdGVyXG4gICAgICAgICAgICBwcm90by5pc1NhbWVPckJlZm9yZSA9IGlzU2FtZU9yQmVmb3JlXG4gICAgICAgICAgICBwcm90by5pc1ZhbGlkID0gaXNWYWxpZCQyXG4gICAgICAgICAgICBwcm90by5sYW5nID0gbGFuZ1xuICAgICAgICAgICAgcHJvdG8ubG9jYWxlID0gbG9jYWxlXG4gICAgICAgICAgICBwcm90by5sb2NhbGVEYXRhID0gbG9jYWxlRGF0YVxuICAgICAgICAgICAgcHJvdG8ubWF4ID0gcHJvdG90eXBlTWF4XG4gICAgICAgICAgICBwcm90by5taW4gPSBwcm90b3R5cGVNaW5cbiAgICAgICAgICAgIHByb3RvLnBhcnNpbmdGbGFncyA9IHBhcnNpbmdGbGFnc1xuICAgICAgICAgICAgcHJvdG8uc2V0ID0gc3RyaW5nU2V0XG4gICAgICAgICAgICBwcm90by5zdGFydE9mID0gc3RhcnRPZlxuICAgICAgICAgICAgcHJvdG8uc3VidHJhY3QgPSBzdWJ0cmFjdFxuICAgICAgICAgICAgcHJvdG8udG9BcnJheSA9IHRvQXJyYXlcbiAgICAgICAgICAgIHByb3RvLnRvT2JqZWN0ID0gdG9PYmplY3RcbiAgICAgICAgICAgIHByb3RvLnRvRGF0ZSA9IHRvRGF0ZVxuICAgICAgICAgICAgcHJvdG8udG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZ1xuICAgICAgICAgICAgcHJvdG8uaW5zcGVjdCA9IGluc3BlY3RcbiAgICAgICAgICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuZm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwcm90b1tTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdNb21lbnQ8JyArIHRoaXMuZm9ybWF0KCkgKyAnPidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm90by50b0pTT04gPSB0b0pTT05cbiAgICAgICAgICAgIHByb3RvLnRvU3RyaW5nID0gdG9TdHJpbmdcbiAgICAgICAgICAgIHByb3RvLnVuaXggPSB1bml4XG4gICAgICAgICAgICBwcm90by52YWx1ZU9mID0gdmFsdWVPZlxuICAgICAgICAgICAgcHJvdG8uY3JlYXRpb25EYXRhID0gY3JlYXRpb25EYXRhXG4gICAgICAgICAgICBwcm90by5lcmFOYW1lID0gZ2V0RXJhTmFtZVxuICAgICAgICAgICAgcHJvdG8uZXJhTmFycm93ID0gZ2V0RXJhTmFycm93XG4gICAgICAgICAgICBwcm90by5lcmFBYmJyID0gZ2V0RXJhQWJiclxuICAgICAgICAgICAgcHJvdG8uZXJhWWVhciA9IGdldEVyYVllYXJcbiAgICAgICAgICAgIHByb3RvLnllYXIgPSBnZXRTZXRZZWFyXG4gICAgICAgICAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhclxuICAgICAgICAgICAgcHJvdG8ud2Vla1llYXIgPSBnZXRTZXRXZWVrWWVhclxuICAgICAgICAgICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhclxuICAgICAgICAgICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlclxuICAgICAgICAgICAgcHJvdG8ubW9udGggPSBnZXRTZXRNb250aFxuICAgICAgICAgICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aFxuICAgICAgICAgICAgcHJvdG8ud2VlayA9IHByb3RvLndlZWtzID0gZ2V0U2V0V2Vla1xuICAgICAgICAgICAgcHJvdG8uaXNvV2VlayA9IHByb3RvLmlzb1dlZWtzID0gZ2V0U2V0SVNPV2Vla1xuICAgICAgICAgICAgcHJvdG8ud2Vla3NJblllYXIgPSBnZXRXZWVrc0luWWVhclxuICAgICAgICAgICAgcHJvdG8ud2Vla3NJbldlZWtZZWFyID0gZ2V0V2Vla3NJbldlZWtZZWFyXG4gICAgICAgICAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyXG4gICAgICAgICAgICBwcm90by5pc29XZWVrc0luSVNPV2Vla1llYXIgPSBnZXRJU09XZWVrc0luSVNPV2Vla1llYXJcbiAgICAgICAgICAgIHByb3RvLmRhdGUgPSBnZXRTZXREYXlPZk1vbnRoXG4gICAgICAgICAgICBwcm90by5kYXkgPSBwcm90by5kYXlzID0gZ2V0U2V0RGF5T2ZXZWVrXG4gICAgICAgICAgICBwcm90by53ZWVrZGF5ID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrXG4gICAgICAgICAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrXG4gICAgICAgICAgICBwcm90by5kYXlPZlllYXIgPSBnZXRTZXREYXlPZlllYXJcbiAgICAgICAgICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXJcbiAgICAgICAgICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGVcbiAgICAgICAgICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmRcbiAgICAgICAgICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmRcbiAgICAgICAgICAgIHByb3RvLnV0Y09mZnNldCA9IGdldFNldE9mZnNldFxuICAgICAgICAgICAgcHJvdG8udXRjID0gc2V0T2Zmc2V0VG9VVENcbiAgICAgICAgICAgIHByb3RvLmxvY2FsID0gc2V0T2Zmc2V0VG9Mb2NhbFxuICAgICAgICAgICAgcHJvdG8ucGFyc2Vab25lID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXRcbiAgICAgICAgICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXRcbiAgICAgICAgICAgIHByb3RvLmlzRFNUID0gaXNEYXlsaWdodFNhdmluZ1RpbWVcbiAgICAgICAgICAgIHByb3RvLmlzTG9jYWwgPSBpc0xvY2FsXG4gICAgICAgICAgICBwcm90by5pc1V0Y09mZnNldCA9IGlzVXRjT2Zmc2V0XG4gICAgICAgICAgICBwcm90by5pc1V0YyA9IGlzVXRjXG4gICAgICAgICAgICBwcm90by5pc1VUQyA9IGlzVXRjXG4gICAgICAgICAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyXG4gICAgICAgICAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lXG4gICAgICAgICAgICBwcm90by5kYXRlcyA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICAgICAnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICAgICAgICAgIGdldFNldERheU9mTW9udGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICAgICAnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJyxcbiAgICAgICAgICAgICAgICBnZXRTZXRNb250aFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgcHJvdG8ueWVhcnMgPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAgICAgJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLFxuICAgICAgICAgICAgICAgIGdldFNldFllYXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByb3RvLnpvbmUgPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAgICAgJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJyxcbiAgICAgICAgICAgICAgICBnZXRTZXRab25lXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAgICAgJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLFxuICAgICAgICAgICAgICAgIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlVW5peChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDFlMylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0KHN0cmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZVxuICAgICAgICAgICAgcHJvdG8kMS5jYWxlbmRhciA9IGNhbGVuZGFyXG4gICAgICAgICAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ID0gbG9uZ0RhdGVGb3JtYXRcbiAgICAgICAgICAgIHByb3RvJDEuaW52YWxpZERhdGUgPSBpbnZhbGlkRGF0ZVxuICAgICAgICAgICAgcHJvdG8kMS5vcmRpbmFsID0gb3JkaW5hbFxuICAgICAgICAgICAgcHJvdG8kMS5wcmVwYXJzZSA9IHByZVBhcnNlUG9zdEZvcm1hdFxuICAgICAgICAgICAgcHJvdG8kMS5wb3N0Zm9ybWF0ID0gcHJlUGFyc2VQb3N0Rm9ybWF0XG4gICAgICAgICAgICBwcm90byQxLnJlbGF0aXZlVGltZSA9IHJlbGF0aXZlVGltZVxuICAgICAgICAgICAgcHJvdG8kMS5wYXN0RnV0dXJlID0gcGFzdEZ1dHVyZVxuICAgICAgICAgICAgcHJvdG8kMS5zZXQgPSBzZXRcbiAgICAgICAgICAgIHByb3RvJDEuZXJhcyA9IGxvY2FsZUVyYXNcbiAgICAgICAgICAgIHByb3RvJDEuZXJhc1BhcnNlID0gbG9jYWxlRXJhc1BhcnNlXG4gICAgICAgICAgICBwcm90byQxLmVyYXNDb252ZXJ0WWVhciA9IGxvY2FsZUVyYXNDb252ZXJ0WWVhclxuICAgICAgICAgICAgcHJvdG8kMS5lcmFzQWJiclJlZ2V4ID0gZXJhc0FiYnJSZWdleFxuICAgICAgICAgICAgcHJvdG8kMS5lcmFzTmFtZVJlZ2V4ID0gZXJhc05hbWVSZWdleFxuICAgICAgICAgICAgcHJvdG8kMS5lcmFzTmFycm93UmVnZXggPSBlcmFzTmFycm93UmVnZXhcbiAgICAgICAgICAgIHByb3RvJDEubW9udGhzID0gbG9jYWxlTW9udGhzXG4gICAgICAgICAgICBwcm90byQxLm1vbnRoc1Nob3J0ID0gbG9jYWxlTW9udGhzU2hvcnRcbiAgICAgICAgICAgIHByb3RvJDEubW9udGhzUGFyc2UgPSBsb2NhbGVNb250aHNQYXJzZVxuICAgICAgICAgICAgcHJvdG8kMS5tb250aHNSZWdleCA9IG1vbnRoc1JlZ2V4XG4gICAgICAgICAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggPSBtb250aHNTaG9ydFJlZ2V4XG4gICAgICAgICAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrXG4gICAgICAgICAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXJcbiAgICAgICAgICAgIHByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2Vla1xuICAgICAgICAgICAgcHJvdG8kMS53ZWVrZGF5cyA9IGxvY2FsZVdlZWtkYXlzXG4gICAgICAgICAgICBwcm90byQxLndlZWtkYXlzTWluID0gbG9jYWxlV2Vla2RheXNNaW5cbiAgICAgICAgICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCA9IGxvY2FsZVdlZWtkYXlzU2hvcnRcbiAgICAgICAgICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSA9IGxvY2FsZVdlZWtkYXlzUGFyc2VcbiAgICAgICAgICAgIHByb3RvJDEud2Vla2RheXNSZWdleCA9IHdlZWtkYXlzUmVnZXhcbiAgICAgICAgICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ID0gd2Vla2RheXNTaG9ydFJlZ2V4XG4gICAgICAgICAgICBwcm90byQxLndlZWtkYXlzTWluUmVnZXggPSB3ZWVrZGF5c01pblJlZ2V4XG4gICAgICAgICAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNXG4gICAgICAgICAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldCQxKGZvcm1hdDIsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsZTIgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgICAgICAgICAgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTJbZmllbGRdKHV0YywgZm9ybWF0MilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsKGZvcm1hdDIsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQyKSkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiA9IHZvaWQgMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3JtYXQyID0gZm9ybWF0MiB8fCAnJ1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQyLCBpbmRleCwgZmllbGQsICdtb250aCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBvdXQgPSBbXVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdDIsIGksIGZpZWxkLCAnbW9udGgnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0MiwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0MikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0MlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiA9IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDIgPSBmb3JtYXQyIHx8ICcnXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiA9IGxvY2FsZVNvcnRlZFxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDIgPSB2b2lkIDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQyID0gZm9ybWF0MiB8fCAnJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxlMiA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZTIuX3dlZWsuZG93IDogMCxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgb3V0ID0gW11cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0MiwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdDIsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsaXN0TW9udGhzKGZvcm1hdDIsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdDIsIGluZGV4LCAnbW9udGhzJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydChmb3JtYXQyLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQyLCBpbmRleCwgJ21vbnRoc1Nob3J0JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyhsb2NhbGVTb3J0ZWQsIGZvcm1hdDIsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwoXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVNvcnRlZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0MixcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICd3ZWVrZGF5cydcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydChsb2NhbGVTb3J0ZWQsIGZvcm1hdDIsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwoXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVNvcnRlZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0MixcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICd3ZWVrZGF5c1Nob3J0J1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbihsb2NhbGVTb3J0ZWQsIGZvcm1hdDIsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwoXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVNvcnRlZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0MixcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICd3ZWVrZGF5c01pbidcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICAgICAgICAgIGVyYXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2luY2U6ICcwMDAxLTAxLTAxJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVudGlsOiBJbmZpbml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdBbm5vIERvbWluaScsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXJyb3c6ICdBRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhYmJyOiAnQUQnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMC0xMi0zMScsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnRpbDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0JlZm9yZSBDaHJpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFycm93OiAnQkMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWJicjogJ0JDJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvSW50KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgICAgICdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsXG4gICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICAgICAnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsXG4gICAgICAgICAgICAgICAgZ2V0TG9jYWxlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzXG4gICAgICAgICAgICBmdW5jdGlvbiBhYnMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhXG4gICAgICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF5cyA9IG1hdGhBYnModGhpcy5fZGF5cylcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHMgPSBtYXRoQWJzKHRoaXMuX21vbnRocylcbiAgICAgICAgICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpXG4gICAgICAgICAgICAgICAgZGF0YS5zZWNvbmRzID0gbWF0aEFicyhkYXRhLnNlY29uZHMpXG4gICAgICAgICAgICAgICAgZGF0YS5taW51dGVzID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpXG4gICAgICAgICAgICAgICAgZGF0YS5ob3VycyA9IG1hdGhBYnMoZGF0YS5ob3VycylcbiAgICAgICAgICAgICAgICBkYXRhLm1vbnRocyA9IG1hdGhBYnMoZGF0YS5tb250aHMpXG4gICAgICAgICAgICAgICAgZGF0YS55ZWFycyA9IG1hdGhBYnMoZGF0YS55ZWFycylcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMShkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpXG4gICAgICAgICAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgZHVyYXRpb24uX2RheXMgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXNcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5fbW9udGhzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHNcbiAgICAgICAgICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGQkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhYnNDZWlsKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcilcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBidWJibGUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pbGxpc2Vjb25kczIgPSB0aGlzLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgICAgIGRheXMyID0gdGhpcy5fZGF5cyxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzMiA9IHRoaXMuX21vbnRocyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEsXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHMyLFxuICAgICAgICAgICAgICAgICAgICBtaW51dGVzMixcbiAgICAgICAgICAgICAgICAgICAgaG91cnMyLFxuICAgICAgICAgICAgICAgICAgICB5ZWFyczIsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoc0Zyb21EYXlzXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kczIgPj0gMCAmJiBkYXlzMiA+PSAwICYmIG1vbnRoczIgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMyIDw9IDAgJiYgZGF5czIgPD0gMCAmJiBtb250aHMyIDw9IDApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzMiArPVxuICAgICAgICAgICAgICAgICAgICAgICAgYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzMikgKyBkYXlzMikgKiA4NjRlNVxuICAgICAgICAgICAgICAgICAgICBkYXlzMiA9IDBcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzMiA9IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMyICUgMWUzXG4gICAgICAgICAgICAgICAgc2Vjb25kczIgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMyIC8gMWUzKVxuICAgICAgICAgICAgICAgIGRhdGEuc2Vjb25kcyA9IHNlY29uZHMyICUgNjBcbiAgICAgICAgICAgICAgICBtaW51dGVzMiA9IGFic0Zsb29yKHNlY29uZHMyIC8gNjApXG4gICAgICAgICAgICAgICAgZGF0YS5taW51dGVzID0gbWludXRlczIgJSA2MFxuICAgICAgICAgICAgICAgIGhvdXJzMiA9IGFic0Zsb29yKG1pbnV0ZXMyIC8gNjApXG4gICAgICAgICAgICAgICAgZGF0YS5ob3VycyA9IGhvdXJzMiAlIDI0XG4gICAgICAgICAgICAgICAgZGF5czIgKz0gYWJzRmxvb3IoaG91cnMyIC8gMjQpXG4gICAgICAgICAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5czIpKVxuICAgICAgICAgICAgICAgIG1vbnRoczIgKz0gbW9udGhzRnJvbURheXNcbiAgICAgICAgICAgICAgICBkYXlzMiAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpXG4gICAgICAgICAgICAgICAgeWVhcnMyID0gYWJzRmxvb3IobW9udGhzMiAvIDEyKVxuICAgICAgICAgICAgICAgIG1vbnRoczIgJT0gMTJcbiAgICAgICAgICAgICAgICBkYXRhLmRheXMgPSBkYXlzMlxuICAgICAgICAgICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzMlxuICAgICAgICAgICAgICAgIGRhdGEueWVhcnMgPSB5ZWFyczJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzKGRheXMyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkYXlzMiAqIDQ4MDApIC8gMTQ2MDk3XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtb250aHNUb0RheXMobW9udGhzMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAobW9udGhzMiAqIDE0NjA5NykgLyA0ODAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhcyh1bml0cykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5hTlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGF5czIsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoczIsXG4gICAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kczIgPSB0aGlzLl9taWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPT09ICdtb250aCcgfHxcbiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPT09ICdxdWFydGVyJyB8fFxuICAgICAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ3llYXInXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXMyID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kczIgLyA4NjRlNVxuICAgICAgICAgICAgICAgICAgICBtb250aHMyID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMyKVxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoczJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMyIC8gM1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoczIgLyAxMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF5czIgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSlcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMyIC8gNyArIG1pbGxpc2Vjb25kczIgLyA2MDQ4ZTVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMyICsgbWlsbGlzZWNvbmRzMiAvIDg2NGU1XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5czIgKiAyNCArIG1pbGxpc2Vjb25kczIgLyAzNmU1XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzMiAqIDE0NDAgKyBtaWxsaXNlY29uZHMyIC8gNmU0XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzMiAqIDg2NDAwICsgbWlsbGlzZWNvbmRzMiAvIDFlM1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXMyICogODY0ZTUpICsgbWlsbGlzZWNvbmRzMlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB2YWx1ZU9mJDEoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTmFOXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RheXMgKiA4NjRlNSArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgICAgICAgICB0b0ludCh0aGlzLl9tb250aHMgLyAxMikgKiAzMTUzNmU2XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUFzKGFsaWFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpLFxuICAgICAgICAgICAgICAgIGFzU2Vjb25kcyA9IG1ha2VBcygncycpLFxuICAgICAgICAgICAgICAgIGFzTWludXRlcyA9IG1ha2VBcygnbScpLFxuICAgICAgICAgICAgICAgIGFzSG91cnMgPSBtYWtlQXMoJ2gnKSxcbiAgICAgICAgICAgICAgICBhc0RheXMgPSBtYWtlQXMoJ2QnKSxcbiAgICAgICAgICAgICAgICBhc1dlZWtzID0gbWFrZUFzKCd3JyksXG4gICAgICAgICAgICAgICAgYXNNb250aHMgPSBtYWtlQXMoJ00nKSxcbiAgICAgICAgICAgICAgICBhc1F1YXJ0ZXJzID0gbWFrZUFzKCdRJyksXG4gICAgICAgICAgICAgICAgYXNZZWFycyA9IG1ha2VBcygneScpXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZSQxKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0JDIodW5pdHMpIHtcbiAgICAgICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyksXG4gICAgICAgICAgICAgICAgc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKSxcbiAgICAgICAgICAgICAgICBtaW51dGVzID0gbWFrZUdldHRlcignbWludXRlcycpLFxuICAgICAgICAgICAgICAgIGhvdXJzID0gbWFrZUdldHRlcignaG91cnMnKSxcbiAgICAgICAgICAgICAgICBkYXlzID0gbWFrZUdldHRlcignZGF5cycpLFxuICAgICAgICAgICAgICAgIG1vbnRocyA9IG1ha2VHZXR0ZXIoJ21vbnRocycpLFxuICAgICAgICAgICAgICAgIHllYXJzID0gbWFrZUdldHRlcigneWVhcnMnKVxuICAgICAgICAgICAgZnVuY3Rpb24gd2Vla3MoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3M6IDQ0LFxuICAgICAgICAgICAgICAgICAgICAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgczogNDUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgICAgICAgICAgICAgIG06IDQ1LFxuICAgICAgICAgICAgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgICAgICAgICAgICAgaDogMjIsXG4gICAgICAgICAgICAgICAgICAgIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICAgICAgICAgICAgICBkOiAyNixcbiAgICAgICAgICAgICAgICAgICAgLy8gZGF5cyB0byBtb250aC93ZWVrXG4gICAgICAgICAgICAgICAgICAgIHc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlZWtzIHRvIG1vbnRoXG4gICAgICAgICAgICAgICAgICAgIE06IDExXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oXG4gICAgICAgICAgICAgICAgc3RyaW5nLFxuICAgICAgICAgICAgICAgIG51bWJlcixcbiAgICAgICAgICAgICAgICB3aXRob3V0U3VmZml4LFxuICAgICAgICAgICAgICAgIGlzRnV0dXJlLFxuICAgICAgICAgICAgICAgIGxvY2FsZTJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGUyLnJlbGF0aXZlVGltZShcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyIHx8IDEsXG4gICAgICAgICAgICAgICAgICAgICEhd2l0aG91dFN1ZmZpeCxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBpc0Z1dHVyZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxKFxuICAgICAgICAgICAgICAgIHBvc05lZ0R1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHdpdGhvdXRTdWZmaXgsXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkczIsXG4gICAgICAgICAgICAgICAgbG9jYWxlMlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpLFxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRzMiA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpLFxuICAgICAgICAgICAgICAgICAgICBtaW51dGVzMiA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpLFxuICAgICAgICAgICAgICAgICAgICBob3VyczIgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKSxcbiAgICAgICAgICAgICAgICAgICAgZGF5czIgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKSxcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzMiA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpLFxuICAgICAgICAgICAgICAgICAgICB3ZWVrczIgPSByb3VuZChkdXJhdGlvbi5hcygndycpKSxcbiAgICAgICAgICAgICAgICAgICAgeWVhcnMyID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSksXG4gICAgICAgICAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlY29uZHMyIDw9IHRocmVzaG9sZHMyLnNzICYmIFsncycsIHNlY29uZHMyXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZWNvbmRzMiA8IHRocmVzaG9sZHMyLnMgJiYgWydzcycsIHNlY29uZHMyXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChtaW51dGVzMiA8PSAxICYmIFsnbSddKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKG1pbnV0ZXMyIDwgdGhyZXNob2xkczIubSAmJiBbJ21tJywgbWludXRlczJdKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGhvdXJzMiA8PSAxICYmIFsnaCddKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGhvdXJzMiA8IHRocmVzaG9sZHMyLmggJiYgWydoaCcsIGhvdXJzMl0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoZGF5czIgPD0gMSAmJiBbJ2QnXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChkYXlzMiA8IHRocmVzaG9sZHMyLmQgJiYgWydkZCcsIGRheXMyXSlcbiAgICAgICAgICAgICAgICBpZiAodGhyZXNob2xkczIudyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgICAgICAgICAgYSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHdlZWtzMiA8PSAxICYmIFsndyddKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHdlZWtzMiA8IHRocmVzaG9sZHMyLncgJiYgWyd3dycsIHdlZWtzMl0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGEgPSBhIHx8XG4gICAgICAgICAgICAgICAgICAgIChtb250aHMyIDw9IDEgJiYgWydNJ10pIHx8XG4gICAgICAgICAgICAgICAgICAgIChtb250aHMyIDwgdGhyZXNob2xkczIuTSAmJiBbJ01NJywgbW9udGhzMl0pIHx8XG4gICAgICAgICAgICAgICAgICAgICh5ZWFyczIgPD0gMSAmJiBbJ3knXSkgfHwgWyd5eScsIHllYXJzMl1cbiAgICAgICAgICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeFxuICAgICAgICAgICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwXG4gICAgICAgICAgICAgICAgYVs0XSA9IGxvY2FsZTJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3VuZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJvdW5kaW5nRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXRcbiAgICAgICAgICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaHVtYW5pemUoYXJnV2l0aFN1ZmZpeCwgYXJnVGhyZXNob2xkcykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHdpdGhTdWZmaXggPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdGggPSB0aHJlc2hvbGRzLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGUyLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ1RocmVzaG9sZHMgPSBhcmdXaXRoU3VmZml4XG4gICAgICAgICAgICAgICAgICAgIGFyZ1dpdGhTdWZmaXggPSBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgICAgICB3aXRoU3VmZml4ID0gYXJnV2l0aFN1ZmZpeFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ1RocmVzaG9sZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoID0gT2JqZWN0LmFzc2lnbih7fSwgdGhyZXNob2xkcywgYXJnVGhyZXNob2xkcylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ1RocmVzaG9sZHMucyAhPSBudWxsICYmIGFyZ1RocmVzaG9sZHMuc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGguc3MgPSBhcmdUaHJlc2hvbGRzLnMgLSAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxlMiA9IHRoaXMubG9jYWxlRGF0YSgpXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIHRoLCBsb2NhbGUyKVxuICAgICAgICAgICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZTIucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlMi5wb3N0Zm9ybWF0KG91dHB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhYnMkMSA9IE1hdGguYWJzXG4gICAgICAgICAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHggPiAwKSAtICh4IDwgMCkgfHwgK3hcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2Vjb25kczIgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMWUzLFxuICAgICAgICAgICAgICAgICAgICBkYXlzMiA9IGFicyQxKHRoaXMuX2RheXMpLFxuICAgICAgICAgICAgICAgICAgICBtb250aHMyID0gYWJzJDEodGhpcy5fbW9udGhzKSxcbiAgICAgICAgICAgICAgICAgICAgbWludXRlczIsXG4gICAgICAgICAgICAgICAgICAgIGhvdXJzMixcbiAgICAgICAgICAgICAgICAgICAgeWVhcnMyLFxuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCksXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsU2lnbixcbiAgICAgICAgICAgICAgICAgICAgeW1TaWduLFxuICAgICAgICAgICAgICAgICAgICBkYXlzU2lnbixcbiAgICAgICAgICAgICAgICAgICAgaG1zU2lnblxuICAgICAgICAgICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQMEQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1pbnV0ZXMyID0gYWJzRmxvb3Ioc2Vjb25kczIgLyA2MClcbiAgICAgICAgICAgICAgICBob3VyczIgPSBhYnNGbG9vcihtaW51dGVzMiAvIDYwKVxuICAgICAgICAgICAgICAgIHNlY29uZHMyICU9IDYwXG4gICAgICAgICAgICAgICAgbWludXRlczIgJT0gNjBcbiAgICAgICAgICAgICAgICB5ZWFyczIgPSBhYnNGbG9vcihtb250aHMyIC8gMTIpXG4gICAgICAgICAgICAgICAgbW9udGhzMiAlPSAxMlxuICAgICAgICAgICAgICAgIHMgPSBzZWNvbmRzMiA/IHNlY29uZHMyLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnXG4gICAgICAgICAgICAgICAgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJydcbiAgICAgICAgICAgICAgICB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJydcbiAgICAgICAgICAgICAgICBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJydcbiAgICAgICAgICAgICAgICBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgdG90YWxTaWduICtcbiAgICAgICAgICAgICAgICAgICAgJ1AnICtcbiAgICAgICAgICAgICAgICAgICAgKHllYXJzMiA/IHltU2lnbiArIHllYXJzMiArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChtb250aHMyID8geW1TaWduICsgbW9udGhzMiArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChkYXlzMiA/IGRheXNTaWduICsgZGF5czIgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAoaG91cnMyIHx8IG1pbnV0ZXMyIHx8IHNlY29uZHMyID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKGhvdXJzMiA/IGhtc1NpZ24gKyBob3VyczIgKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAobWludXRlczIgPyBobXNTaWduICsgbWludXRlczIgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAoc2Vjb25kczIgPyBobXNTaWduICsgcyArICdTJyA6ICcnKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlXG4gICAgICAgICAgICBwcm90byQyLmlzVmFsaWQgPSBpc1ZhbGlkJDFcbiAgICAgICAgICAgIHByb3RvJDIuYWJzID0gYWJzXG4gICAgICAgICAgICBwcm90byQyLmFkZCA9IGFkZCQxXG4gICAgICAgICAgICBwcm90byQyLnN1YnRyYWN0ID0gc3VidHJhY3QkMVxuICAgICAgICAgICAgcHJvdG8kMi5hcyA9IGFzXG4gICAgICAgICAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHNcbiAgICAgICAgICAgIHByb3RvJDIuYXNTZWNvbmRzID0gYXNTZWNvbmRzXG4gICAgICAgICAgICBwcm90byQyLmFzTWludXRlcyA9IGFzTWludXRlc1xuICAgICAgICAgICAgcHJvdG8kMi5hc0hvdXJzID0gYXNIb3Vyc1xuICAgICAgICAgICAgcHJvdG8kMi5hc0RheXMgPSBhc0RheXNcbiAgICAgICAgICAgIHByb3RvJDIuYXNXZWVrcyA9IGFzV2Vla3NcbiAgICAgICAgICAgIHByb3RvJDIuYXNNb250aHMgPSBhc01vbnRoc1xuICAgICAgICAgICAgcHJvdG8kMi5hc1F1YXJ0ZXJzID0gYXNRdWFydGVyc1xuICAgICAgICAgICAgcHJvdG8kMi5hc1llYXJzID0gYXNZZWFyc1xuICAgICAgICAgICAgcHJvdG8kMi52YWx1ZU9mID0gdmFsdWVPZiQxXG4gICAgICAgICAgICBwcm90byQyLl9idWJibGUgPSBidWJibGVcbiAgICAgICAgICAgIHByb3RvJDIuY2xvbmUgPSBjbG9uZSQxXG4gICAgICAgICAgICBwcm90byQyLmdldCA9IGdldCQyXG4gICAgICAgICAgICBwcm90byQyLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgcHJvdG8kMi5zZWNvbmRzID0gc2Vjb25kc1xuICAgICAgICAgICAgcHJvdG8kMi5taW51dGVzID0gbWludXRlc1xuICAgICAgICAgICAgcHJvdG8kMi5ob3VycyA9IGhvdXJzXG4gICAgICAgICAgICBwcm90byQyLmRheXMgPSBkYXlzXG4gICAgICAgICAgICBwcm90byQyLndlZWtzID0gd2Vla3NcbiAgICAgICAgICAgIHByb3RvJDIubW9udGhzID0gbW9udGhzXG4gICAgICAgICAgICBwcm90byQyLnllYXJzID0geWVhcnNcbiAgICAgICAgICAgIHByb3RvJDIuaHVtYW5pemUgPSBodW1hbml6ZVxuICAgICAgICAgICAgcHJvdG8kMi50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nJDFcbiAgICAgICAgICAgIHByb3RvJDIudG9TdHJpbmcgPSB0b0lTT1N0cmluZyQxXG4gICAgICAgICAgICBwcm90byQyLnRvSlNPTiA9IHRvSVNPU3RyaW5nJDFcbiAgICAgICAgICAgIHByb3RvJDIubG9jYWxlID0gbG9jYWxlXG4gICAgICAgICAgICBwcm90byQyLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhXG4gICAgICAgICAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgICAgICd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsXG4gICAgICAgICAgICAgICAgdG9JU09TdHJpbmckMVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgcHJvdG8kMi5sYW5nID0gbGFuZ1xuICAgICAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpXG4gICAgICAgICAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJylcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZClcbiAgICAgICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcClcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0KSAqIDFlMylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGhvb2tzLnZlcnNpb24gPSAnMi4yOS40J1xuICAgICAgICAgICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKVxuICAgICAgICAgICAgaG9va3MuZm4gPSBwcm90b1xuICAgICAgICAgICAgaG9va3MubWluID0gbWluXG4gICAgICAgICAgICBob29rcy5tYXggPSBtYXhcbiAgICAgICAgICAgIGhvb2tzLm5vdyA9IG5vd1xuICAgICAgICAgICAgaG9va3MudXRjID0gY3JlYXRlVVRDXG4gICAgICAgICAgICBob29rcy51bml4ID0gY3JlYXRlVW5peFxuICAgICAgICAgICAgaG9va3MubW9udGhzID0gbGlzdE1vbnRoc1xuICAgICAgICAgICAgaG9va3MuaXNEYXRlID0gaXNEYXRlXG4gICAgICAgICAgICBob29rcy5sb2NhbGUgPSBnZXRTZXRHbG9iYWxMb2NhbGVcbiAgICAgICAgICAgIGhvb2tzLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkXG4gICAgICAgICAgICBob29rcy5kdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uXG4gICAgICAgICAgICBob29rcy5pc01vbWVudCA9IGlzTW9tZW50XG4gICAgICAgICAgICBob29rcy53ZWVrZGF5cyA9IGxpc3RXZWVrZGF5c1xuICAgICAgICAgICAgaG9va3MucGFyc2Vab25lID0gY3JlYXRlSW5ab25lXG4gICAgICAgICAgICBob29rcy5sb2NhbGVEYXRhID0gZ2V0TG9jYWxlXG4gICAgICAgICAgICBob29rcy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvblxuICAgICAgICAgICAgaG9va3MubW9udGhzU2hvcnQgPSBsaXN0TW9udGhzU2hvcnRcbiAgICAgICAgICAgIGhvb2tzLndlZWtkYXlzTWluID0gbGlzdFdlZWtkYXlzTWluXG4gICAgICAgICAgICBob29rcy5kZWZpbmVMb2NhbGUgPSBkZWZpbmVMb2NhbGVcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSA9IHVwZGF0ZUxvY2FsZVxuICAgICAgICAgICAgaG9va3MubG9jYWxlcyA9IGxpc3RMb2NhbGVzXG4gICAgICAgICAgICBob29rcy53ZWVrZGF5c1Nob3J0ID0gbGlzdFdlZWtkYXlzU2hvcnRcbiAgICAgICAgICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzID0gbm9ybWFsaXplVW5pdHNcbiAgICAgICAgICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmdcbiAgICAgICAgICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZFxuICAgICAgICAgICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgPSBnZXRDYWxlbmRhckZvcm1hdFxuICAgICAgICAgICAgaG9va3MucHJvdG90eXBlID0gcHJvdG9cbiAgICAgICAgICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLFxuICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICAgICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJyxcbiAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICAgICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLFxuICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICAgICAgICAgIERBVEU6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICAgICAgICAgIFRJTUU6ICdISDptbScsXG4gICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICAgICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLFxuICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgICAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLFxuICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgICAgICAgICAgTU9OVEg6ICdZWVlZLU1NJ1xuICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvb2tzXG4gICAgICAgIH0pXG4gICAgfVxufSlcblxuZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpXG59XG5mdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFja1xufVxuZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHxcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgIClcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgaW5wdXQgIT0gbnVsbCAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgIClcbn1cbmZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYilcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrXG4gICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDBcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJ1xuICAgIClcbn1cbmZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSdcbiAgICApXG59XG5mdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgIHZhciByZXMgPSBbXSxcbiAgICAgICAgaSxcbiAgICAgICAgYXJyTGVuID0gYXJyLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG59XG5mdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgYVtpXSA9IGJbaV1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZ1xuICAgIH1cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZlxuICAgIH1cbiAgICByZXR1cm4gYVxufVxuZnVuY3Rpb24gY3JlYXRlVVRDKGlucHV0LCBmb3JtYXQyLCBsb2NhbGUyLCBzdHJpY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0MiwgbG9jYWxlMiwgc3RyaWN0LCB0cnVlKS51dGMoKVxufVxuZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbXB0eTogZmFsc2UsXG4gICAgICAgIHVudXNlZFRva2VuczogW10sXG4gICAgICAgIHVudXNlZElucHV0OiBbXSxcbiAgICAgICAgb3ZlcmZsb3c6IC0yLFxuICAgICAgICBjaGFyc0xlZnRPdmVyOiAwLFxuICAgICAgICBudWxsSW5wdXQ6IGZhbHNlLFxuICAgICAgICBpbnZhbGlkRXJhOiBudWxsLFxuICAgICAgICBpbnZhbGlkTW9udGg6IG51bGwsXG4gICAgICAgIGludmFsaWRGb3JtYXQ6IGZhbHNlLFxuICAgICAgICB1c2VySW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICBpc286IGZhbHNlLFxuICAgICAgICBwYXJzZWREYXRlUGFydHM6IFtdLFxuICAgICAgICBlcmE6IG51bGwsXG4gICAgICAgIG1lcmlkaWVtOiBudWxsLFxuICAgICAgICByZmMyODIyOiBmYWxzZSxcbiAgICAgICAgd2Vla2RheU1pc21hdGNoOiBmYWxzZVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKClcbiAgICB9XG4gICAgcmV0dXJuIG0uX3BmXG59XG5mdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKSxcbiAgICAgICAgICAgIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEVyYSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSlcbiAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdm9pZCAwXG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZFxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtLl9pc1ZhbGlkXG59XG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkKGZsYWdzKSB7XG4gICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKVxuICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiBtXG59XG5mdW5jdGlvbiBjb3B5Q29uZmlnKHRvMiwgZnJvbTIpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgdmFsLFxuICAgICAgICBtb21lbnRQcm9wZXJ0aWVzTGVuID0gbW9tZW50UHJvcGVydGllcy5sZW5ndGhcbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgIHRvMi5faXNBTW9tZW50T2JqZWN0ID0gZnJvbTIuX2lzQU1vbWVudE9iamVjdFxuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9pKSkge1xuICAgICAgICB0bzIuX2kgPSBmcm9tMi5faVxuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9mKSkge1xuICAgICAgICB0bzIuX2YgPSBmcm9tMi5fZlxuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9sKSkge1xuICAgICAgICB0bzIuX2wgPSBmcm9tMi5fbFxuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9zdHJpY3QpKSB7XG4gICAgICAgIHRvMi5fc3RyaWN0ID0gZnJvbTIuX3N0cmljdFxuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl90em0pKSB7XG4gICAgICAgIHRvMi5fdHptID0gZnJvbTIuX3R6bVxuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9pc1VUQykpIHtcbiAgICAgICAgdG8yLl9pc1VUQyA9IGZyb20yLl9pc1VUQ1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9vZmZzZXQpKSB7XG4gICAgICAgIHRvMi5fb2Zmc2V0ID0gZnJvbTIuX29mZnNldFxuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20yLl9wZikpIHtcbiAgICAgICAgdG8yLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tMilcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tMi5fbG9jYWxlKSkge1xuICAgICAgICB0bzIuX2xvY2FsZSA9IGZyb20yLl9sb2NhbGVcbiAgICB9XG4gICAgaWYgKG1vbWVudFByb3BlcnRpZXNMZW4gPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldXG4gICAgICAgICAgICB2YWwgPSBmcm9tMltwcm9wXVxuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdG8yW3Byb3BdID0gdmFsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvMlxufVxuZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKVxuICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICB0aGlzLl9kID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKE5hTilcbiAgICB9XG4gICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlXG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKVxuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2VcbiAgICB9XG59XG5mdW5jdGlvbiBpc01vbWVudChvYmopIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpXG4gICAgKVxufVxuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICBpZiAoXG4gICAgICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIGNvbnNvbGUud2FyblxuICAgICkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpXG4gICAgfVxufVxuZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZVxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAgICAgICBhcmcsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgYXJnTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnID0gJydcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnXG4gICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoYXJndW1lbnRzWzBdLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgIG1zZyArXG4gICAgICAgICAgICAgICAgICAgICdcXG5Bcmd1bWVudHM6ICcgK1xuICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArXG4gICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKCkuc3RhY2tcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9LCBmbilcbn1cbmZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZylcbiAgICB9XG4gICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgd2Fybihtc2cpXG4gICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWVcbiAgICB9XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgKHR5cGVvZiBGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbikgfHxcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgIClcbn1cbmZ1bmN0aW9uIHNldChjb25maWcpIHtcbiAgICB2YXIgcHJvcCwgaVxuICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoY29uZmlnLCBpKSkge1xuICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXVxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZ1xuICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICd8JyArXG4gICAgICAgICAgICAvXFxkezEsMn0vLnNvdXJjZVxuICAgIClcbn1cbmZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSxcbiAgICAgICAgcHJvcFxuICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSlcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG59XG5mdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0KGNvbmZpZylcbiAgICB9XG59XG5mdW5jdGlvbiBjYWxlbmRhcihrZXksIG1vbSwgbm93Mikge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93MikgOiBvdXRwdXRcbn1cbmZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgIHNpZ24yID0gbnVtYmVyID49IDBcbiAgICByZXR1cm4gKFxuICAgICAgICAoc2lnbjIgPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICtcbiAgICAgICAgYWJzTnVtYmVyXG4gICAgKVxufVxuZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4odG9rZW4yLCBwYWRkZWQsIG9yZGluYWwyLCBjYWxsYmFjaykge1xuICAgIHZhciBmdW5jID0gY2FsbGJhY2tcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKClcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodG9rZW4yKSB7XG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuMl0gPSBmdW5jXG4gICAgfVxuICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcmRpbmFsMikge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsMl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChcbiAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgdG9rZW4yXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpXG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKVxufVxuZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdDIpIHtcbiAgICB2YXIgYXJyYXkgPSBmb3JtYXQyLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLFxuICAgICAgICBpLFxuICAgICAgICBsZW5ndGhcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgIGkyXG4gICAgICAgIGZvciAoaTIgPSAwOyBpMiA8IGxlbmd0aDsgaTIrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaTJdKVxuICAgICAgICAgICAgICAgID8gYXJyYXlbaTJdLmNhbGwobW9tLCBmb3JtYXQyKVxuICAgICAgICAgICAgICAgIDogYXJyYXlbaTJdXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dFxuICAgIH1cbn1cbmZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQyKSB7XG4gICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKVxuICAgIH1cbiAgICBmb3JtYXQyID0gZXhwYW5kRm9ybWF0KGZvcm1hdDIsIG0ubG9jYWxlRGF0YSgpKVxuICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXQyXSA9XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXQyXSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0MilcbiAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdDJdKG0pXG59XG5mdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0MiwgbG9jYWxlMikge1xuICAgIHZhciBpID0gNVxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlMi5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXRcbiAgICB9XG4gICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDBcbiAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdDIpKSB7XG4gICAgICAgIGZvcm1hdDIgPSBmb3JtYXQyLnJlcGxhY2UoXG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMsXG4gICAgICAgICAgICByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnNcbiAgICAgICAgKVxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMFxuICAgICAgICBpIC09IDFcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdDJcbn1cbmZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0KGtleSkge1xuICAgIHZhciBmb3JtYXQyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV1cbiAgICBpZiAoZm9ybWF0MiB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdDJcbiAgICB9XG4gICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyXG4gICAgICAgIC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh0b2spIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0b2sgPT09ICdNTU1NJyB8fFxuICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NJyB8fFxuICAgICAgICAgICAgICAgIHRvayA9PT0gJ0REJyB8fFxuICAgICAgICAgICAgICAgIHRvayA9PT0gJ2RkZGQnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rLnNsaWNlKDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG9rXG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKCcnKVxuICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldXG59XG5mdW5jdGlvbiBpbnZhbGlkRGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGVcbn1cbmZ1bmN0aW9uIG9yZGluYWwobnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpXG59XG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KVxuICAgICAgICA/IG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAgICAgIDogb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcilcbn1cbmZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZjIsIG91dHB1dCkge1xuICAgIHZhciBmb3JtYXQyID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYyID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXVxuICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdDIpXG4gICAgICAgID8gZm9ybWF0MihvdXRwdXQpXG4gICAgICAgIDogZm9ybWF0Mi5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpXG59XG5mdW5jdGlvbiBhZGRVbml0QWxpYXModW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKVxuICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXRcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldXG4gICAgICAgIDogdm9pZCAwXG59XG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgIHByb3BcbiAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplZElucHV0XG59XG5mdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHlcbn1cbmZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICB2YXIgdW5pdHMgPSBbXSxcbiAgICAgICAgdVxuICAgIGZvciAodSBpbiB1bml0c09iaikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcCh1bml0c09iaiwgdSkpIHtcbiAgICAgICAgICAgIHVuaXRzLnB1c2goeyB1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XSB9KVxuICAgICAgICB9XG4gICAgfVxuICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5XG4gICAgfSlcbiAgICByZXR1cm4gdW5pdHNcbn1cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMFxufVxuZnVuY3Rpb24gYWJzRmxvb3IobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDBcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpXG4gICAgfVxufVxuZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgIHZhbHVlID0gMFxuICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcilcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG59XG5mdW5jdGlvbiBtYWtlR2V0U2V0KHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpXG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0KG1vbSwgdW5pdCkge1xuICAgIHJldHVybiBtb20uaXNWYWxpZCgpXG4gICAgICAgID8gbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKClcbiAgICAgICAgOiBOYU5cbn1cbmZ1bmN0aW9uIHNldCQxKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICBpZiAobW9tLmlzVmFsaWQoKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHVuaXQgPT09ICdGdWxsWWVhcicgJiZcbiAgICAgICAgICAgIGlzTGVhcFllYXIobW9tLnllYXIoKSkgJiZcbiAgICAgICAgICAgIG1vbS5tb250aCgpID09PSAxICYmXG4gICAgICAgICAgICBtb20uZGF0ZSgpID09PSAyOVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpXG4gICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgbW9tLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKVxuICAgICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc3RyaW5nR2V0KHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cylcbiAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbn1cbmZ1bmN0aW9uIHN0cmluZ1NldCh1bml0cywgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKVxuICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcmlvcml0aXplZExlbiA9IHByaW9yaXRpemVkLmxlbmd0aFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWRMZW47IGkrKykge1xuICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG59XG5mdW5jdGlvbiBhZGRSZWdleFRva2VuKHRva2VuMiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgcmVnZXhlc1t0b2tlbjJdID0gaXNGdW5jdGlvbihyZWdleClcbiAgICAgICAgPyByZWdleFxuICAgICAgICA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YTIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4ID8gc3RyaWN0UmVnZXggOiByZWdleFxuICAgICAgICAgIH1cbn1cbmZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbjIsIGNvbmZpZykge1xuICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbjIpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuMikpXG4gICAgfVxuICAgIHJldHVybiByZWdleGVzW3Rva2VuMl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKVxufVxuZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgIHJldHVybiByZWdleEVzY2FwZShcbiAgICAgICAgc1xuICAgICAgICAgICAgLnJlcGxhY2UoJ1xcXFwnLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICApXG59XG5mdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJylcbn1cbmZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4odG9rZW4yLCBjYWxsYmFjaykge1xuICAgIHZhciBpLFxuICAgICAgICBmdW5jID0gY2FsbGJhY2ssXG4gICAgICAgIHRva2VuTGVuXG4gICAgaWYgKHR5cGVvZiB0b2tlbjIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRva2VuMiA9IFt0b2tlbjJdXG4gICAgfVxuICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KVxuICAgICAgICB9XG4gICAgfVxuICAgIHRva2VuTGVuID0gdG9rZW4yLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbjJbaV1dID0gZnVuY1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuKHRva2VuMiwgY2FsbGJhY2spIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuMiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbjMpIHtcbiAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9XG4gICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4zKVxuICAgIH0pXG59XG5mdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbjIsIGlucHV0LCBjb25maWcpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4yKSkge1xuICAgICAgICB0b2tlbnNbdG9rZW4yXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuMilcbiAgICB9XG59XG5mdW5jdGlvbiBtb2QobiwgeCkge1xuICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeFxufVxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgIHJldHVybiBOYU5cbiAgICB9XG4gICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMilcbiAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyXG4gICAgcmV0dXJuIG1vZE1vbnRoID09PSAxXG4gICAgICAgID8gaXNMZWFwWWVhcih5ZWFyKVxuICAgICAgICAgICAgPyAyOVxuICAgICAgICAgICAgOiAyOFxuICAgICAgICA6IDMxIC0gKChtb2RNb250aCAlIDcpICUgMilcbn1cbmZ1bmN0aW9uIGxvY2FsZU1vbnRocyhtLCBmb3JtYXQyKSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHMgOiB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXVxuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV1cbiAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQyKVxuICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICBdW20ubW9udGgoKV1cbn1cbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0KG0sIGZvcm1hdDIpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0XG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ11cbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0W1xuICAgICAgICAgICAgICBNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0MikgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIF1bbS5tb250aCgpXVxufVxuZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQyLCBzdHJpY3QpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgaWksXG4gICAgICAgIG1vbSxcbiAgICAgICAgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW11cbiAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW11cbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzJlMywgaV0pXG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChcbiAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdDIgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpXG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGxcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQyID09PSAnTU1NJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpXG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGxcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlKG1vbnRoTmFtZSwgZm9ybWF0Miwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXhcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdDIsIHN0cmljdClcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdXG4gICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdXG4gICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzJlMywgaV0pXG4gICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJylcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICBmb3JtYXQyID09PSAnTU1NTScgJiZcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICBmb3JtYXQyID09PSAnTU1NJyAmJlxuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0TW9udGgobW9tLCB2YWx1ZSkge1xuICAgIHZhciBkYXlPZk1vbnRoXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBtb21cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKVxuICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSlcbiAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpXG4gICAgcmV0dXJuIG1vbVxufVxuZnVuY3Rpb24gZ2V0U2V0TW9udGgodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSlcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldERheXNJbk1vbnRoKCkge1xuICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKVxufVxuZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXhcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4XG4gICAgfVxufVxuZnVuY3Rpb24gbW9udGhzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXhcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4XG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1JlZ2V4XG4gICAgfVxufVxuZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlKCkge1xuICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoXG4gICAgfVxuICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksXG4gICAgICAgIG1vbVxuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMmUzLCBpXSlcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKVxuICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpXG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpXG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSlcbiAgICB9XG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpXG4gICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldilcbiAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldilcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKVxuICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSlcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSlcbiAgICB9XG4gICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJylcbiAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXhcbiAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpXG4gICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICdpJ1xuICAgIClcbn1cbmZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1XG59XG5mdW5jdGlvbiBnZXRJc0xlYXBZZWFyKCkge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKVxufVxuZnVuY3Rpb24gY3JlYXRlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgIHZhciBkYXRlXG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcylcbiAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcylcbiAgICB9XG4gICAgcmV0dXJuIGRhdGVcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUoeSkge1xuICAgIHZhciBkYXRlLCBhcmdzXG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwXG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmdzKSlcbiAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSlcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKVxuICAgIH1cbiAgICByZXR1cm4gZGF0ZVxufVxuZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgN1xuICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxXG59XG5mdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICByZXNZZWFyLFxuICAgICAgICByZXNEYXlPZlllYXJcbiAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxXG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXJcbiAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxXG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcilcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0geWVhclxuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXJcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICB9XG59XG5mdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgIHJlc1dlZWssXG4gICAgICAgIHJlc1llYXJcbiAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxXG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpXG4gICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpXG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpXG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgIHllYXI6IHJlc1llYXJcbiAgICB9XG59XG5mdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KVxuICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3XG59XG5mdW5jdGlvbiBsb2NhbGVXZWVrKG1vbSkge1xuICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrXG59XG5mdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlaygpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3dcbn1cbmZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrLmRveVxufVxuZnVuY3Rpb24gZ2V0U2V0V2VlayhpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKVxuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKVxufVxuZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayhpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrXG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpXG59XG5mdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZTIpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5wdXRcbiAgICB9XG4gICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMClcbiAgICB9XG4gICAgaW5wdXQgPSBsb2NhbGUyLndlZWtkYXlzUGFyc2UoaW5wdXQpXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0XG4gICAgfVxuICAgIHJldHVybiBudWxsXG59XG5mdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZTIpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbG9jYWxlMi53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgN1xuICAgIH1cbiAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0XG59XG5mdW5jdGlvbiBzaGlmdFdlZWtkYXlzKHdzLCBuKSB7XG4gICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSlcbn1cbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzKG0sIGZvcm1hdDIpIHtcbiAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKVxuICAgICAgICA/IHRoaXMuX3dlZWtkYXlzXG4gICAgICAgIDogdGhpcy5fd2Vla2RheXNbXG4gICAgICAgICAgICAgIG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdDIpXG4gICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIF1cbiAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICA/IHNoaWZ0V2Vla2RheXMod2Vla2RheXMsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICA6IG1cbiAgICAgICAgPyB3ZWVrZGF5c1ttLmRheSgpXVxuICAgICAgICA6IHdlZWtkYXlzXG59XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0KG0pIHtcbiAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgIDogbVxuICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV1cbiAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0XG59XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbihtKSB7XG4gICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgOiBtXG4gICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV1cbiAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pblxufVxuZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0Miwgc3RyaWN0KSB7XG4gICAgdmFyIGksXG4gICAgICAgIGlpLFxuICAgICAgICBtb20sXG4gICAgICAgIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdXG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdXG4gICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzJlMywgMV0pLmRheShpKVxuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4oXG4gICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChcbiAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdDIgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbFxuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdDIgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGxcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGxcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQyID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbFxuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdDIgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGxcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYylcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKVxuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbFxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSh3ZWVrZGF5TmFtZSwgZm9ybWF0Miwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXhcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdDIsIHN0cmljdClcbiAgICB9XG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXVxuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW11cbiAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW11cbiAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMmUzLCAxXSkuZGF5KGkpXG4gICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAnXicgK1xuICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArXG4gICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKVxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgZm9ybWF0MiA9PT0gJ2RkZGQnICYmXG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBpXG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgIGZvcm1hdDIgPT09ICdkZGQnICYmXG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICBmb3JtYXQyID09PSAnZGQnICYmXG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpXG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTZXREYXlPZldlZWsoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTlxuICAgIH1cbiAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSlcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRheVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayhpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOXG4gICAgfVxuICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDdcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJylcbn1cbmZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayhpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOXG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSlcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDdcbiAgICB9XG59XG5mdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcylcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleFxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXhcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4XG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzUmVnZXhcbiAgICB9XG59XG5mdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleFxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXhcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXhcbiAgICB9XG59XG5mdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcylcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleFxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXhcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4XG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXhcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSgpIHtcbiAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aFxuICAgIH1cbiAgICB2YXIgbWluUGllY2VzID0gW10sXG4gICAgICAgIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgIGxvbmdQaWVjZXMgPSBbXSxcbiAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSxcbiAgICAgICAgbW9tLFxuICAgICAgICBtaW5wLFxuICAgICAgICBzaG9ydHAsXG4gICAgICAgIGxvbmdwXG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzJlMywgMV0pLmRheShpKVxuICAgICAgICBtaW5wID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c01pbihtb20sICcnKSlcbiAgICAgICAgc2hvcnRwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpKVxuICAgICAgICBsb25ncCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXMobW9tLCAnJykpXG4gICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApXG4gICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKVxuICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApXG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucClcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApXG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApXG4gICAgfVxuICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldilcbiAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldilcbiAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KVxuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KVxuICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJylcbiAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4XG4gICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXhcbiAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAnaSdcbiAgICApXG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgJ2knXG4gICAgKVxuICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgJ2knXG4gICAgKVxufVxuZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTJcbn1cbmZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNFxufVxuZnVuY3Rpb24gbWVyaWRpZW0odG9rZW4yLCBsb3dlcmNhc2UpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbjIsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKFxuICAgICAgICAgICAgdGhpcy5ob3VycygpLFxuICAgICAgICAgICAgdGhpcy5taW51dGVzKCksXG4gICAgICAgICAgICBsb3dlcmNhc2VcbiAgICAgICAgKVxuICAgIH0pXG59XG5mdW5jdGlvbiBtYXRjaE1lcmlkaWVtKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgcmV0dXJuIGxvY2FsZTIuX21lcmlkaWVtUGFyc2Vcbn1cbmZ1bmN0aW9uIGxvY2FsZUlzUE0oaW5wdXQpIHtcbiAgICByZXR1cm4gKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCdcbn1cbmZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtKGhvdXJzMiwgbWludXRlczIsIGlzTG93ZXIpIHtcbiAgICBpZiAoaG91cnMyID4gMTEpIHtcbiAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSdcbiAgICB9XG59XG5mdW5jdGlvbiBjb21tb25QcmVmaXgoYXJyMSwgYXJyMikge1xuICAgIHZhciBpLFxuICAgICAgICBtaW5sID0gTWF0aC5taW4oYXJyMS5sZW5ndGgsIGFycjIubGVuZ3RoKVxuICAgIGZvciAoaSA9IDA7IGkgPCBtaW5sOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pbmxcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXlcbn1cbmZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgaixcbiAgICAgICAgbmV4dCxcbiAgICAgICAgbG9jYWxlMixcbiAgICAgICAgc3BsaXRcbiAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKVxuICAgICAgICBqID0gc3BsaXQubGVuZ3RoXG4gICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKVxuICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGxcbiAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICBsb2NhbGUyID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpXG4gICAgICAgICAgICBpZiAobG9jYWxlMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGUyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbmV4dCAmJlxuICAgICAgICAgICAgICAgIG5leHQubGVuZ3RoID49IGogJiZcbiAgICAgICAgICAgICAgICBjb21tb25QcmVmaXgoc3BsaXQsIG5leHQpID49IGogLSAxXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgai0tXG4gICAgICAgIH1cbiAgICAgICAgaSsrXG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxMb2NhbGVcbn1cbmZ1bmN0aW9uIGlzTG9jYWxlTmFtZVNhbmUobmFtZSkge1xuICAgIHJldHVybiBuYW1lLm1hdGNoKCdeW14vXFxcXFxcXFxdKiQnKSAhPSBudWxsXG59XG5mdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICB2YXIgb2xkTG9jYWxlID0gbnVsbCxcbiAgICAgICAgYWxpYXNlZFJlcXVpcmVcbiAgICBpZiAoXG4gICAgICAgIGxvY2FsZXNbbmFtZV0gPT09IHZvaWQgMCAmJlxuICAgICAgICB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBtb2R1bGUgJiZcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgJiZcbiAgICAgICAgaXNMb2NhbGVOYW1lU2FuZShuYW1lKVxuICAgICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyXG4gICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSA9IF9fcmVxdWlyZVxuICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSlcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG51bGxcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXVxufVxuZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlKGtleSwgdmFsdWVzKSB7XG4gICAgdmFyIGRhdGFcbiAgICBpZiAoa2V5KSB7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAnTG9jYWxlICcgKyBrZXkgKyAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnJcbn1cbmZ1bmN0aW9uIGRlZmluZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBsb2NhbGUyLFxuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZ1xuICAgICAgICBjb25maWcuYWJiciA9IG5hbWVcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlIGFuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZ1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUyID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKVxuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlMi5fY29uZmlnXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKVxuICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpXG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV1cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHZhciBsb2NhbGUyLFxuICAgICAgICAgICAgdG1wTG9jYWxlLFxuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZ1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsICYmIGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0uc2V0KG1lcmdlQ29uZmlncyhsb2NhbGVzW25hbWVdLl9jb25maWcsIGNvbmZpZykpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpXG4gICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKVxuICAgICAgICAgICAgaWYgKHRtcExvY2FsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGUyID0gbmV3IExvY2FsZShjb25maWcpXG4gICAgICAgICAgICBsb2NhbGUyLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGUyXG4gICAgICAgIH1cbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGVcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZ2V0U2V0R2xvYmFsTG9jYWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdXG59XG5mdW5jdGlvbiBnZXRMb2NhbGUoa2V5KSB7XG4gICAgdmFyIGxvY2FsZTJcbiAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyXG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGVcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgbG9jYWxlMiA9IGxvYWRMb2NhbGUoa2V5KVxuICAgICAgICBpZiAobG9jYWxlMikge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTJcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBba2V5XVxuICAgIH1cbiAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSlcbn1cbmZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgIHJldHVybiBrZXlzKGxvY2FsZXMpXG59XG5mdW5jdGlvbiBjaGVja092ZXJmbG93KG0pIHtcbiAgICB2YXIgb3ZlcmZsb3csXG4gICAgICAgIGEgPSBtLl9hXG4gICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICBhW01PTlRIXSA8IDAgfHwgYVtNT05USF0gPiAxMVxuICAgICAgICAgICAgICAgID8gTU9OVEhcbiAgICAgICAgICAgICAgICA6IGFbREFURV0gPCAxIHx8IGFbREFURV0gPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSlcbiAgICAgICAgICAgICAgICA/IERBVEVcbiAgICAgICAgICAgICAgICA6IGFbSE9VUl0gPCAwIHx8XG4gICAgICAgICAgICAgICAgICBhW0hPVVJdID4gMjQgfHxcbiAgICAgICAgICAgICAgICAgIChhW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgICAgICAgIChhW01JTlVURV0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYVtTRUNPTkRdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdICE9PSAwKSlcbiAgICAgICAgICAgICAgICA/IEhPVVJcbiAgICAgICAgICAgICAgICA6IGFbTUlOVVRFXSA8IDAgfHwgYVtNSU5VVEVdID4gNTlcbiAgICAgICAgICAgICAgICA/IE1JTlVURVxuICAgICAgICAgICAgICAgIDogYVtTRUNPTkRdIDwgMCB8fCBhW1NFQ09ORF0gPiA1OVxuICAgICAgICAgICAgICAgID8gU0VDT05EXG4gICAgICAgICAgICAgICAgOiBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTlcbiAgICAgICAgICAgICAgICA/IE1JTExJU0VDT05EXG4gICAgICAgICAgICAgICAgOiAtMVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmXG4gICAgICAgICAgICAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IERBVEVcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZXG4gICAgICAgIH1cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3dcbiAgICB9XG4gICAgcmV0dXJuIG1cbn1cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGwsXG4gICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgYWxsb3dUaW1lLFxuICAgICAgICBkYXRlRm9ybWF0LFxuICAgICAgICB0aW1lRm9ybWF0LFxuICAgICAgICB0ekZvcm1hdCxcbiAgICAgICAgaXNvRGF0ZXNMZW4gPSBpc29EYXRlcy5sZW5ndGgsXG4gICAgICAgIGlzb1RpbWVzTGVuID0gaXNvVGltZXMubGVuZ3RoXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWVcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF1cbiAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2VcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpXG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gICAgfVxufVxuZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICB5ZWFyU3RyLFxuICAgIG1vbnRoU3RyLFxuICAgIGRheVN0cixcbiAgICBob3VyU3RyLFxuICAgIG1pbnV0ZVN0cixcbiAgICBzZWNvbmRTdHJcbikge1xuICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApXG4gICAgXVxuICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cbmZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKVxuICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgIHJldHVybiAyZTMgKyB5ZWFyXG4gICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICByZXR1cm4gMTkwMCArIHllYXJcbiAgICB9XG4gICAgcmV0dXJuIHllYXJcbn1cbmZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICByZXR1cm4gc1xuICAgICAgICAucmVwbGFjZSgvXFwoW14oKV0qXFwpfFtcXG5cXHRdL2csICcgJylcbiAgICAgICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpXG4gICAgICAgIC5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKVxuICAgICAgICAucmVwbGFjZSgvXFxzXFxzKiQvLCAnJylcbn1cbmZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMF0sXG4gICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMV0sXG4gICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMl1cbiAgICAgICAgICAgICkuZ2V0RGF5KClcbiAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZVxuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG5mdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdXG4gICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICByZXR1cm4gMFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApLFxuICAgICAgICAgICAgbSA9IGhtICUgMTAwLFxuICAgICAgICAgICAgaCA9IChobSAtIG0pIC8gMTAwXG4gICAgICAgIHJldHVybiBoICogNjAgKyBtXG4gICAgfVxufVxuZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpLFxuICAgICAgICBwYXJzZWRBcnJheVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgICAgICAgICBtYXRjaFs0XSxcbiAgICAgICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgbWF0Y2hbMl0sXG4gICAgICAgICAgICBtYXRjaFs1XSxcbiAgICAgICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgbWF0Y2hbN11cbiAgICAgICAgKVxuICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5XG4gICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKVxuICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSlcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKVxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlXG4gICAgfVxufVxuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSlcbiAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICBjb25maWcuX2QgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoK21hdGNoZWRbMV0pXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25maWdGcm9tSVNPKGNvbmZpZylcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZylcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChjb25maWcuX3N0cmljdCkge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZylcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYVxuICAgIH1cbiAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBiXG4gICAgfVxuICAgIHJldHVybiBjXG59XG5mdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKVxuICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENEYXRlKClcbiAgICAgICAgXVxuICAgIH1cbiAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV1cbn1cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheShjb25maWcpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgZGF0ZSxcbiAgICAgICAgaW5wdXQgPSBbXSxcbiAgICAgICAgY3VycmVudERhdGUsXG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSxcbiAgICAgICAgeWVhclRvVXNlXG4gICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZylcbiAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKVxuICAgIH1cbiAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fFxuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcilcbiAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKVxuICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV1cbiAgICB9XG4gICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPVxuICAgICAgICAgICAgY29uZmlnLl9hW2ldID09IG51bGwgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXVxuICAgIH1cbiAgICBpZiAoXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMFxuICAgICkge1xuICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDBcbiAgICB9XG4gICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KG51bGwsIGlucHV0KVxuICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDXG4gICAgICAgID8gY29uZmlnLl9kLmdldFVUQ0RheSgpXG4gICAgICAgIDogY29uZmlnLl9kLmdldERheSgpXG4gICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKVxuICAgIH1cbiAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0XG4gICAgfVxuICAgIGlmIChcbiAgICAgICAgY29uZmlnLl93ICYmXG4gICAgICAgIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheVxuICAgICkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlXG4gICAgfVxufVxuZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdywgY3VyV2Vla1xuICAgIHcgPSBjb25maWcuX3dcbiAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgIGRvdyA9IDFcbiAgICAgICAgZG95ID0gNFxuICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKFxuICAgICAgICAgICAgdy5HRyxcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSxcbiAgICAgICAgICAgIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhclxuICAgICAgICApXG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpXG4gICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpXG4gICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93XG4gICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveVxuICAgICAgICBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSlcbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcilcbiAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKVxuICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmRcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvd1xuICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkb3dcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlXG4gICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KVxuICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXJcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhclxuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25maWcuX2EgPSBbXVxuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZVxuICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgaSxcbiAgICAgICAgcGFyc2VkSW5wdXQsXG4gICAgICAgIHRva2VuczIsXG4gICAgICAgIHRva2VuMixcbiAgICAgICAgc2tpcHBlZCxcbiAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDAsXG4gICAgICAgIGVyYSxcbiAgICAgICAgdG9rZW5MZW5cbiAgICB0b2tlbnMyID1cbiAgICAgICAgZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdXG4gICAgdG9rZW5MZW4gPSB0b2tlbnMyLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgIHRva2VuMiA9IHRva2VuczJbaV1cbiAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbjIsIGNvbmZpZykpIHx8XG4gICAgICAgICAgICBbXSlbMF1cbiAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpXG4gICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKFxuICAgICAgICAgICAgICAgIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW4yXSkge1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbjIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbjIsIHBhcnNlZElucHV0LCBjb25maWcpXG4gICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbjIpXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9XG4gICAgICAgIHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGhcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpXG4gICAgfVxuICAgIGlmIChcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMFxuICAgICkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdm9pZCAwXG4gICAgfVxuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKVxuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbVxuICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChcbiAgICAgICAgY29uZmlnLl9sb2NhbGUsXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSxcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbVxuICAgIClcbiAgICBlcmEgPSBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmFcbiAgICBpZiAoZXJhICE9PSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNDb252ZXJ0WWVhcihlcmEsIGNvbmZpZy5fYVtZRUFSXSlcbiAgICB9XG4gICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZylcbiAgICBjaGVja092ZXJmbG93KGNvbmZpZylcbn1cbmZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcChsb2NhbGUyLCBob3VyLCBtZXJpZGllbTIpIHtcbiAgICB2YXIgaXNQbVxuICAgIGlmIChtZXJpZGllbTIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaG91clxuICAgIH1cbiAgICBpZiAobG9jYWxlMi5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlMi5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0yKVxuICAgIH0gZWxzZSBpZiAobG9jYWxlMi5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgaXNQbSA9IGxvY2FsZTIuaXNQTShtZXJpZGllbTIpXG4gICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgaG91ciArPSAxMlxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG91clxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBob3VyXG4gICAgfVxufVxuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICBiZXN0TW9tZW50LFxuICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgaSxcbiAgICAgICAgY3VycmVudFNjb3JlLFxuICAgICAgICB2YWxpZEZvcm1hdEZvdW5kLFxuICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IGZhbHNlLFxuICAgICAgICBjb25maWdmTGVuID0gY29uZmlnLl9mLmxlbmd0aFxuICAgIGlmIChjb25maWdmTGVuID09PSAwKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlXG4gICAgICAgIGNvbmZpZy5fZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZShOYU4pXG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnZkxlbjsgaSsrKSB7XG4gICAgICAgIGN1cnJlbnRTY29yZSA9IDBcbiAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IGZhbHNlXG4gICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpXG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQ1xuICAgICAgICB9XG4gICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV1cbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKVxuICAgICAgICBpZiAoaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXJcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTBcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlXG4gICAgICAgIGlmICghYmVzdEZvcm1hdElzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQgfHxcbiAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZVxuICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybWF0Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmVcbiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZylcbn1cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpLFxuICAgICAgICBkYXlPckRhdGUgPSBpLmRheSA9PT0gdm9pZCAwID8gaS5kYXRlIDogaS5kYXlcbiAgICBjb25maWcuX2EgPSBtYXAoXG4gICAgICAgIFtpLnllYXIsIGkubW9udGgsIGRheU9yRGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLFxuICAgICAgICBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApXG4gICAgICAgIH1cbiAgICApXG4gICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZylcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcoY29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKVxuICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgcmVzLmFkZCgxLCAnZCcpXG4gICAgICAgIHJlcy5fbmV4dERheSA9IHZvaWQgMFxuICAgIH1cbiAgICByZXR1cm4gcmVzXG59XG5mdW5jdGlvbiBwcmVwYXJlQ29uZmlnKGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgZm9ybWF0MiA9IGNvbmZpZy5fZlxuICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbClcbiAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdDIgPT09IHZvaWQgMCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHsgbnVsbElucHV0OiB0cnVlIH0pXG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpXG4gICAgfVxuICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IGlucHV0XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdDIpKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpXG4gICAgfSBlbHNlIGlmIChmb3JtYXQyKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpXG4gICAgfVxuICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG51bGxcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ1xufVxuZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faVxuICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpXG4gICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKVxuICAgICAgICB9KVxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKVxuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZylcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQyLCBsb2NhbGUyLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgdmFyIGMgPSB7fVxuICAgIGlmIChmb3JtYXQyID09PSB0cnVlIHx8IGZvcm1hdDIgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0cmljdCA9IGZvcm1hdDJcbiAgICAgICAgZm9ybWF0MiA9IHZvaWQgMFxuICAgIH1cbiAgICBpZiAobG9jYWxlMiA9PT0gdHJ1ZSB8fCBsb2NhbGUyID09PSBmYWxzZSkge1xuICAgICAgICBzdHJpY3QgPSBsb2NhbGUyXG4gICAgICAgIGxvY2FsZTIgPSB2b2lkIDBcbiAgICB9XG4gICAgaWYgKFxuICAgICAgICAoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKVxuICAgICkge1xuICAgICAgICBpbnB1dCA9IHZvaWQgMFxuICAgIH1cbiAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlXG4gICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQ1xuICAgIGMuX2wgPSBsb2NhbGUyXG4gICAgYy5faSA9IGlucHV0XG4gICAgYy5fZiA9IGZvcm1hdDJcbiAgICBjLl9zdHJpY3QgPSBzdHJpY3RcbiAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKVxufVxuZnVuY3Rpb24gY3JlYXRlTG9jYWwoaW5wdXQsIGZvcm1hdDIsIGxvY2FsZTIsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQyLCBsb2NhbGUyLCBzdHJpY3QsIGZhbHNlKVxufVxuZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgdmFyIHJlcywgaVxuICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdXG4gICAgfVxuICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKClcbiAgICB9XG4gICAgcmVzID0gbW9tZW50c1swXVxuICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbn1cbmZ1bmN0aW9uIG1pbigpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncylcbn1cbmZ1bmN0aW9uIG1heCgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKVxufVxuZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICB2YXIga2V5LFxuICAgICAgICB1bml0SGFzRGVjaW1hbCA9IGZhbHNlLFxuICAgICAgICBpLFxuICAgICAgICBvcmRlckxlbiA9IG9yZGVyaW5nLmxlbmd0aFxuICAgIGZvciAoa2V5IGluIG0pIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaGFzT3duUHJvcChtLCBrZXkpICYmXG4gICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IG9yZGVyTGVuOyArK2kpIHtcbiAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbn1cbmZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNWYWxpZFxufVxuZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pXG59XG5mdW5jdGlvbiBEdXJhdGlvbihkdXJhdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgIHllYXJzMiA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgbW9udGhzMiA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICB3ZWVrczIgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCBub3JtYWxpemVkSW5wdXQuaXNvV2VlayB8fCAwLFxuICAgICAgICBkYXlzMiA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgaG91cnMyID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgbWludXRlczIgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgIHNlY29uZHMyID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICBtaWxsaXNlY29uZHMyID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDBcbiAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dClcbiAgICB0aGlzLl9taWxsaXNlY29uZHMgPVxuICAgICAgICArbWlsbGlzZWNvbmRzMiArXG4gICAgICAgIHNlY29uZHMyICogMWUzICsgLy8gMTAwMFxuICAgICAgICBtaW51dGVzMiAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICBob3VyczIgKiAxZTMgKiA2MCAqIDYwXG4gICAgdGhpcy5fZGF5cyA9ICtkYXlzMiArIHdlZWtzMiAqIDdcbiAgICB0aGlzLl9tb250aHMgPSArbW9udGhzMiArIHF1YXJ0ZXJzICogMyArIHllYXJzMiAqIDEyXG4gICAgdGhpcy5fZGF0YSA9IHt9XG4gICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKClcbiAgICB0aGlzLl9idWJibGUoKVxufVxuZnVuY3Rpb24gaXNEdXJhdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb25cbn1cbmZ1bmN0aW9uIGFic1JvdW5kKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgIGlcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRpZmZzKytcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmXG59XG5mdW5jdGlvbiBvZmZzZXQodG9rZW4yLCBzZXBhcmF0b3IpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbjIsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldDIgPSB0aGlzLnV0Y09mZnNldCgpLFxuICAgICAgICAgICAgc2lnbjIgPSAnKydcbiAgICAgICAgaWYgKG9mZnNldDIgPCAwKSB7XG4gICAgICAgICAgICBvZmZzZXQyID0gLW9mZnNldDJcbiAgICAgICAgICAgIHNpZ24yID0gJy0nXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHNpZ24yICtcbiAgICAgICAgICAgIHplcm9GaWxsKH5+KG9mZnNldDIgLyA2MCksIDIpICtcbiAgICAgICAgICAgIHNlcGFyYXRvciArXG4gICAgICAgICAgICB6ZXJvRmlsbCh+fm9mZnNldDIgJSA2MCwgMilcbiAgICAgICAgKVxuICAgIH0pXG59XG5mdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlciksXG4gICAgICAgIGNodW5rLFxuICAgICAgICBwYXJ0cyxcbiAgICAgICAgbWludXRlczJcbiAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBjaHVuayA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXVxuICAgIHBhcnRzID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXVxuICAgIG1pbnV0ZXMyID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKVxuICAgIHJldHVybiBtaW51dGVzMiA9PT0gMCA/IDAgOiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlczIgOiAtbWludXRlczJcbn1cbmZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICB2YXIgcmVzLCBkaWZmMlxuICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKVxuICAgICAgICBkaWZmMiA9XG4gICAgICAgICAgICAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dClcbiAgICAgICAgICAgICAgICA/IGlucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpXG4gICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmMilcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpXG4gICAgICAgIHJldHVybiByZXNcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKClcbiAgICB9XG59XG5mdW5jdGlvbiBnZXREYXRlT2Zmc2V0KG0pIHtcbiAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpKVxufVxuZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgIHZhciBvZmZzZXQyID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgIGxvY2FsQWRqdXN0XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU5cbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dClcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjBcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0XG4gICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZVxuICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJylcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0MiAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgYWRkU3VidHJhY3QoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0MiwgJ20nKSxcbiAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWVcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSlcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0MiA6IGdldERhdGVPZmZzZXQodGhpcylcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTZXRab25lKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlucHV0ID0gLWlucHV0XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMoa2VlcExvY2FsVGltZSkge1xuICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKVxufVxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbChrZWVwTG9jYWxUaW1lKSB7XG4gICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpXG4gICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2VcbiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG59XG5mdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCgpIHtcbiAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKVxuICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG59XG5mdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwXG4gICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDBcbn1cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgIClcbn1cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCgpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZFxuICAgIH1cbiAgICB2YXIgYyA9IHt9LFxuICAgICAgICBvdGhlclxuICAgIGNvcHlDb25maWcoYywgdGhpcylcbiAgICBjID0gcHJlcGFyZUNvbmZpZyhjKVxuICAgIGlmIChjLl9hKSB7XG4gICAgICAgIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKVxuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPVxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiYgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWRcbn1cbmZ1bmN0aW9uIGlzTG9jYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2Vcbn1cbmZ1bmN0aW9uIGlzVXRjT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2Vcbn1cbmZ1bmN0aW9uIGlzVXRjKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlXG59XG5mdW5jdGlvbiBjcmVhdGVEdXJhdGlvbihpbnB1dCwga2V5KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgc2lnbjIsXG4gICAgICAgIHJldCxcbiAgICAgICAgZGlmZlJlc1xuICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIG1zOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICBNOiBpbnB1dC5fbW9udGhzXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSB8fCAhaXNOYU4oK2lucHV0KSkge1xuICAgICAgICBkdXJhdGlvbiA9IHt9XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSAraW5wdXRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9ICtpbnB1dFxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICgobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgc2lnbjIgPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxXG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIGQ6IHRvSW50KG1hdGNoW0RBVEVdKSAqIHNpZ24yLFxuICAgICAgICAgICAgaDogdG9JbnQobWF0Y2hbSE9VUl0pICogc2lnbjIsXG4gICAgICAgICAgICBtOiB0b0ludChtYXRjaFtNSU5VVEVdKSAqIHNpZ24yLFxuICAgICAgICAgICAgczogdG9JbnQobWF0Y2hbU0VDT05EXSkgKiBzaWduMixcbiAgICAgICAgICAgIG1zOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxZTMpKSAqIHNpZ24yXG4gICAgICAgICAgICAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgIHNpZ24yID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMVxuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHk6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduMiksXG4gICAgICAgICAgICBNOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbjIpLFxuICAgICAgICAgICAgdzogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24yKSxcbiAgICAgICAgICAgIGQ6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduMiksXG4gICAgICAgICAgICBoOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbjIpLFxuICAgICAgICAgICAgbTogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24yKSxcbiAgICAgICAgICAgIHM6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduMilcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICBkdXJhdGlvbiA9IHt9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pXG4gICAgKSB7XG4gICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShcbiAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLFxuICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pXG4gICAgICAgIClcbiAgICAgICAgZHVyYXRpb24gPSB7fVxuICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzXG4gICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRoc1xuICAgIH1cbiAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlXG4gICAgfVxuICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2lzVmFsaWQnKSkge1xuICAgICAgICByZXQuX2lzVmFsaWQgPSBpbnB1dC5faXNWYWxpZFxuICAgIH1cbiAgICByZXR1cm4gcmV0XG59XG5mdW5jdGlvbiBwYXJzZUlzbyhpbnAsIHNpZ24yKSB7XG4gICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSlcbiAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ24yXG59XG5mdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgdmFyIHJlcyA9IHt9XG4gICAgcmVzLm1vbnRocyA9XG4gICAgICAgIG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgKyAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTJcbiAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgIC0tcmVzLm1vbnRoc1xuICAgIH1cbiAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gK2Jhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKVxuICAgIHJldHVybiByZXNcbn1cbmZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgdmFyIHJlc1xuICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgbWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDAgfVxuICAgIH1cbiAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSlcbiAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcilcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKVxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHNcbiAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzXG4gICAgfVxuICAgIHJldHVybiByZXNcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgdmFyIGR1ciwgdG1wXG4gICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAnbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgJyhudW1iZXIsIHBlcmlvZCkuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0bXAgPSB2YWxcbiAgICAgICAgICAgIHZhbCA9IHBlcmlvZFxuICAgICAgICAgICAgcGVyaW9kID0gdG1wXG4gICAgICAgIH1cbiAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpXG4gICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0KG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICB2YXIgbWlsbGlzZWNvbmRzMiA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgIGRheXMyID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICBtb250aHMyID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocylcbiAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldFxuICAgIGlmIChtb250aHMyKSB7XG4gICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMyICogaXNBZGRpbmcpXG4gICAgfVxuICAgIGlmIChkYXlzMikge1xuICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMyICogaXNBZGRpbmcpXG4gICAgfVxuICAgIGlmIChtaWxsaXNlY29uZHMyKSB7XG4gICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMyICogaXNBZGRpbmcpXG4gICAgfVxuICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5czIgfHwgbW9udGhzMilcbiAgICB9XG59XG5mdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nXG59XG5mdW5jdGlvbiBpc01vbWVudElucHV0KGlucHV0KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgaXNNb21lbnQoaW5wdXQpIHx8XG4gICAgICAgIGlzRGF0ZShpbnB1dCkgfHxcbiAgICAgICAgaXNTdHJpbmcoaW5wdXQpIHx8XG4gICAgICAgIGlzTnVtYmVyKGlucHV0KSB8fFxuICAgICAgICBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHx8XG4gICAgICAgIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHx8XG4gICAgICAgIGlucHV0ID09PSBudWxsIHx8XG4gICAgICAgIGlucHV0ID09PSB2b2lkIDBcbiAgICApXG59XG5mdW5jdGlvbiBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB7XG4gICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICd5ZWFycycsXG4gICAgICAgICAgICAneWVhcicsXG4gICAgICAgICAgICAneScsXG4gICAgICAgICAgICAnbW9udGhzJyxcbiAgICAgICAgICAgICdtb250aCcsXG4gICAgICAgICAgICAnTScsXG4gICAgICAgICAgICAnZGF5cycsXG4gICAgICAgICAgICAnZGF5JyxcbiAgICAgICAgICAgICdkJyxcbiAgICAgICAgICAgICdkYXRlcycsXG4gICAgICAgICAgICAnZGF0ZScsXG4gICAgICAgICAgICAnRCcsXG4gICAgICAgICAgICAnaG91cnMnLFxuICAgICAgICAgICAgJ2hvdXInLFxuICAgICAgICAgICAgJ2gnLFxuICAgICAgICAgICAgJ21pbnV0ZXMnLFxuICAgICAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICAgICAnbScsXG4gICAgICAgICAgICAnc2Vjb25kcycsXG4gICAgICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgICAgICdzJyxcbiAgICAgICAgICAgICdtaWxsaXNlY29uZHMnLFxuICAgICAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgICAgICdtcydcbiAgICAgICAgXSxcbiAgICAgICAgaSxcbiAgICAgICAgcHJvcGVydHksXG4gICAgICAgIHByb3BlcnR5TGVuID0gcHJvcGVydGllcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydHlMZW47IGkgKz0gMSkge1xuICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV1cbiAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Rcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkge1xuICAgIHZhciBhcnJheVRlc3QgPSBpc0FycmF5KGlucHV0KSxcbiAgICAgICAgZGF0YVR5cGVUZXN0ID0gZmFsc2VcbiAgICBpZiAoYXJyYXlUZXN0KSB7XG4gICAgICAgIGRhdGFUeXBlVGVzdCA9XG4gICAgICAgICAgICBpbnB1dC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzTnVtYmVyKGl0ZW0pICYmIGlzU3RyaW5nKGlucHV0KVxuICAgICAgICAgICAgfSkubGVuZ3RoID09PSAwXG4gICAgfVxuICAgIHJldHVybiBhcnJheVRlc3QgJiYgZGF0YVR5cGVUZXN0XG59XG5mdW5jdGlvbiBpc0NhbGVuZGFyU3BlYyhpbnB1dCkge1xuICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAnc2FtZURheScsXG4gICAgICAgICAgICAnbmV4dERheScsXG4gICAgICAgICAgICAnbGFzdERheScsXG4gICAgICAgICAgICAnbmV4dFdlZWsnLFxuICAgICAgICAgICAgJ2xhc3RXZWVrJyxcbiAgICAgICAgICAgICdzYW1lRWxzZSdcbiAgICAgICAgXSxcbiAgICAgICAgaSxcbiAgICAgICAgcHJvcGVydHlcbiAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV1cbiAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Rcbn1cbmZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cyKSB7XG4gICAgdmFyIGRpZmYyID0gbXlNb21lbnQuZGlmZihub3cyLCAnZGF5cycsIHRydWUpXG4gICAgcmV0dXJuIGRpZmYyIDwgLTZcbiAgICAgICAgPyAnc2FtZUVsc2UnXG4gICAgICAgIDogZGlmZjIgPCAtMVxuICAgICAgICA/ICdsYXN0V2VlaydcbiAgICAgICAgOiBkaWZmMiA8IDBcbiAgICAgICAgPyAnbGFzdERheSdcbiAgICAgICAgOiBkaWZmMiA8IDFcbiAgICAgICAgPyAnc2FtZURheSdcbiAgICAgICAgOiBkaWZmMiA8IDJcbiAgICAgICAgPyAnbmV4dERheSdcbiAgICAgICAgOiBkaWZmMiA8IDdcbiAgICAgICAgPyAnbmV4dFdlZWsnXG4gICAgICAgIDogJ3NhbWVFbHNlJ1xufVxuZnVuY3Rpb24gY2FsZW5kYXIkMSh0aW1lLCBmb3JtYXRzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgIHRpbWUgPSB2b2lkIDBcbiAgICAgICAgICAgIGZvcm1hdHMgPSB2b2lkIDBcbiAgICAgICAgfSBlbHNlIGlmIChpc01vbWVudElucHV0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgIHRpbWUgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgIGZvcm1hdHMgPSB2b2lkIDBcbiAgICAgICAgfSBlbHNlIGlmIChpc0NhbGVuZGFyU3BlYyhhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICBmb3JtYXRzID0gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICB0aW1lID0gdm9pZCAwXG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG5vdzIgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3cyLCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgZm9ybWF0MiA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJyxcbiAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgIGZvcm1hdHMgJiZcbiAgICAgICAgICAgIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0Ml0pXG4gICAgICAgICAgICAgICAgPyBmb3JtYXRzW2Zvcm1hdDJdLmNhbGwodGhpcywgbm93MilcbiAgICAgICAgICAgICAgICA6IGZvcm1hdHNbZm9ybWF0Ml0pXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgICBvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0MiwgdGhpcywgY3JlYXRlTG9jYWwobm93MikpXG4gICAgKVxufVxuZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcylcbn1cbmZ1bmN0aW9uIGlzQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KVxuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJ1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKClcbiAgICB9XG59XG5mdW5jdGlvbiBpc0JlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpXG4gICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnXG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKClcbiAgICB9XG59XG5mdW5jdGlvbiBpc0JldHdlZW4oZnJvbTIsIHRvMiwgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20yKSA/IGZyb20yIDogY3JlYXRlTG9jYWwoZnJvbTIpLFxuICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8yKSA/IHRvMiA6IGNyZWF0ZUxvY2FsKHRvMilcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbEZyb20uaXNWYWxpZCgpICYmIGxvY2FsVG8uaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknXG4gICAgcmV0dXJuIChcbiAgICAgICAgKGluY2x1c2l2aXR5WzBdID09PSAnKCdcbiAgICAgICAgICAgID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpXG4gICAgICAgICAgICA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJ1xuICAgICAgICAgICAgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKVxuICAgICAgICAgICAgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSlcbiAgICApXG59XG5mdW5jdGlvbiBpc1NhbWUoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgaW5wdXRNc1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJ1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiZcbiAgICAgICAgICAgIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKClcbiAgICAgICAgKVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cylcbn1cbmZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKVxufVxuZnVuY3Rpb24gZGlmZihpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICB2YXIgdGhhdCwgem9uZURlbHRhLCBvdXRwdXRcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU5cbiAgICB9XG4gICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcylcbiAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU5cbiAgICB9XG4gICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNFxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpXG4gICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gM1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTNcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0XG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1XG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1XG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTVcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBvdXRwdXQgPSB0aGlzIC0gdGhhdFxuICAgIH1cbiAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dClcbn1cbmZ1bmN0aW9uIG1vbnRoRGlmZihhLCBiKSB7XG4gICAgaWYgKGEuZGF0ZSgpIDwgYi5kYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIC1tb250aERpZmYoYiwgYSlcbiAgICB9XG4gICAgdmFyIHdob2xlTW9udGhEaWZmID0gKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICBhbmNob3IyLFxuICAgICAgICBhZGp1c3RcbiAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJylcbiAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJylcbiAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpXG4gICAgfVxuICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwXG59XG5mdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJylcbn1cbmZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlLFxuICAgICAgICBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpc1xuICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICBtLFxuICAgICAgICAgICAgdXRjXG4gICAgICAgICAgICAgICAgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJ1xuICAgICAgICAgICAgICAgIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgIClcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDFlMylcbiAgICAgICAgICAgICAgICAudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgbSxcbiAgICAgICAgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgIClcbn1cbmZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknXG4gICAgfVxuICAgIHZhciBmdW5jID0gJ21vbWVudCcsXG4gICAgICAgIHpvbmUgPSAnJyxcbiAgICAgICAgcHJlZml4LFxuICAgICAgICB5ZWFyLFxuICAgICAgICBkYXRldGltZSxcbiAgICAgICAgc3VmZml4XG4gICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJ1xuICAgICAgICB6b25lID0gJ1onXG4gICAgfVxuICAgIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSdcbiAgICB5ZWFyID0gMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5ID8gJ1lZWVknIDogJ1lZWVlZWSdcbiAgICBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnXG4gICAgc3VmZml4ID0gem9uZSArICdbXCIpXSdcbiAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KVxufVxuZnVuY3Rpb24gZm9ybWF0KGlucHV0U3RyaW5nKSB7XG4gICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKVxuICAgICAgICAgICAgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjXG4gICAgICAgICAgICA6IGhvb2tzLmRlZmF1bHRGb3JtYXRcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZylcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpXG59XG5mdW5jdGlvbiBmcm9tKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAoXG4gICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgdG86IHRoaXMsIGZyb206IHRpbWUgfSlcbiAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKVxuICAgIH1cbn1cbmZ1bmN0aW9uIGZyb21Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeClcbn1cbmZ1bmN0aW9uIHRvKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAoXG4gICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZnJvbTogdGhpcywgdG86IHRpbWUgfSlcbiAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRvTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KVxufVxuZnVuY3Rpb24gbG9jYWxlKGtleSkge1xuICAgIHZhciBuZXdMb2NhbGVEYXRhXG4gICAgaWYgKGtleSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnJcbiAgICB9IGVsc2Uge1xuICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSlcbiAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxufVxuZnVuY3Rpb24gbG9jYWxlRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlXG59XG5mdW5jdGlvbiBtb2QkMShkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgIHJldHVybiAoKGRpdmlkZW5kICUgZGl2aXNvcikgKyBkaXZpc29yKSAlIGRpdmlzb3Jcbn1cbmZ1bmN0aW9uIGxvY2FsU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKVxuICAgIH1cbn1cbmZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSU1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKVxuICAgIH1cbn1cbmZ1bmN0aW9uIHN0YXJ0T2YodW5pdHMpIHtcbiAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGVcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICAgIGlmICh1bml0cyA9PT0gdm9pZCAwIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlXG4gICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgMSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKVxuICAgICAgICAgICAgdGltZSAtPSBtb2QkMShcbiAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKVxuICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKVxuICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKVxuICAgICAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpXG4gICAgcmV0dXJuIHRoaXNcbn1cbmZ1bmN0aW9uIGVuZE9mKHVuaXRzKSB7XG4gICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlXG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cylcbiAgICBpZiAodW5pdHMgPT09IHZvaWQgMCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZVxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKSAtIDFcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMykgKyAzLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgKSAtIDFcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpICsgMSwgMSkgLSAxXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpICsgN1xuICAgICAgICAgICAgICAgICkgLSAxXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgN1xuICAgICAgICAgICAgICAgICkgLSAxXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKClcbiAgICAgICAgICAgIHRpbWUgKz1cbiAgICAgICAgICAgICAgICBNU19QRVJfSE9VUiAtXG4gICAgICAgICAgICAgICAgbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICkgLVxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKClcbiAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKVxuICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxXG4gICAgICAgICAgICBicmVha1xuICAgIH1cbiAgICB0aGlzLl9kLnNldFRpbWUodGltZSlcbiAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSlcbiAgICByZXR1cm4gdGhpc1xufVxuZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAodGhpcy5fb2Zmc2V0IHx8IDApICogNmU0XG59XG5mdW5jdGlvbiB1bml4KCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMWUzKVxufVxuZnVuY3Rpb24gdG9EYXRlKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSlcbn1cbmZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgdmFyIG0gPSB0aGlzXG4gICAgcmV0dXJuIFtcbiAgICAgICAgbS55ZWFyKCksXG4gICAgICAgIG0ubW9udGgoKSxcbiAgICAgICAgbS5kYXRlKCksXG4gICAgICAgIG0uaG91cigpLFxuICAgICAgICBtLm1pbnV0ZSgpLFxuICAgICAgICBtLnNlY29uZCgpLFxuICAgICAgICBtLm1pbGxpc2Vjb25kKClcbiAgICBdXG59XG5mdW5jdGlvbiB0b09iamVjdCgpIHtcbiAgICB2YXIgbSA9IHRoaXNcbiAgICByZXR1cm4ge1xuICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICB9XG59XG5mdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbFxufVxuZnVuY3Rpb24gaXNWYWxpZCQyKCkge1xuICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpXG59XG5mdW5jdGlvbiBwYXJzaW5nRmxhZ3MoKSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKVxufVxuZnVuY3Rpb24gaW52YWxpZEF0KCkge1xuICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3dcbn1cbmZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgIH1cbn1cbmZ1bmN0aW9uIGxvY2FsZUVyYXMobSwgZm9ybWF0Mikge1xuICAgIHZhciBpLFxuICAgICAgICBsLFxuICAgICAgICBkYXRlLFxuICAgICAgICBlcmFzID0gdGhpcy5fZXJhcyB8fCBnZXRMb2NhbGUoJ2VuJykuX2VyYXNcbiAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS5zaW5jZSkuc3RhcnRPZignZGF5JylcbiAgICAgICAgICAgICAgICBlcmFzW2ldLnNpbmNlID0gZGF0ZS52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9IEluZmluaXR5XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0udW50aWwpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSBkYXRlLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVyYXNcbn1cbmZ1bmN0aW9uIGxvY2FsZUVyYXNQYXJzZShlcmFOYW1lLCBmb3JtYXQyLCBzdHJpY3QpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbCxcbiAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBhYmJyLFxuICAgICAgICBuYXJyb3dcbiAgICBlcmFOYW1lID0gZXJhTmFtZS50b1VwcGVyQ2FzZSgpXG4gICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIG5hbWUgPSBlcmFzW2ldLm5hbWUudG9VcHBlckNhc2UoKVxuICAgICAgICBhYmJyID0gZXJhc1tpXS5hYmJyLnRvVXBwZXJDYXNlKClcbiAgICAgICAgbmFycm93ID0gZXJhc1tpXS5uYXJyb3cudG9VcHBlckNhc2UoKVxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGZvcm1hdDIpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICBjYXNlICdOTic6XG4gICAgICAgICAgICAgICAgY2FzZSAnTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFiYnIgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdOTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdOTk5OTic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYXJyb3cgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChbbmFtZSwgYWJiciwgbmFycm93XS5pbmRleE9mKGVyYU5hbWUpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlcmFzW2ldXG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBsb2NhbGVFcmFzQ29udmVydFllYXIoZXJhLCB5ZWFyKSB7XG4gICAgdmFyIGRpciA9IGVyYS5zaW5jZSA8PSBlcmEudW50aWwgPyAxIDogLTFcbiAgICBpZiAoeWVhciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKSArICh5ZWFyIC0gZXJhLm9mZnNldCkgKiBkaXJcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRFcmFOYW1lKCkge1xuICAgIHZhciBpLFxuICAgICAgICBsLFxuICAgICAgICB2YWwsXG4gICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKClcbiAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKVxuICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWVcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJydcbn1cbmZ1bmN0aW9uIGdldEVyYU5hcnJvdygpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbCxcbiAgICAgICAgdmFsLFxuICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpXG4gICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKClcbiAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3dcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvd1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJ1xufVxuZnVuY3Rpb24gZ2V0RXJhQWJicigpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbCxcbiAgICAgICAgdmFsLFxuICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpXG4gICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKClcbiAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnXG59XG5mdW5jdGlvbiBnZXRFcmFZZWFyKCkge1xuICAgIHZhciBpLFxuICAgICAgICBsLFxuICAgICAgICBkaXIsXG4gICAgICAgIHZhbCxcbiAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKVxuICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBkaXIgPSBlcmFzW2ldLnNpbmNlIDw9IGVyYXNbaV0udW50aWwgPyAxIDogLTFcbiAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHx8XG4gICAgICAgICAgICAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAodGhpcy55ZWFyKCkgLSBob29rcyhlcmFzW2ldLnNpbmNlKS55ZWFyKCkpICogZGlyICtcbiAgICAgICAgICAgICAgICBlcmFzW2ldLm9mZnNldFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnllYXIoKVxufVxuZnVuY3Rpb24gZXJhc05hbWVSZWdleChpc1N0cmljdCkge1xuICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYW1lUmVnZXgnKSkge1xuICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcylcbiAgICB9XG4gICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hbWVSZWdleCA6IHRoaXMuX2VyYXNSZWdleFxufVxuZnVuY3Rpb24gZXJhc0FiYnJSZWdleChpc1N0cmljdCkge1xuICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNBYmJyUmVnZXgnKSkge1xuICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcylcbiAgICB9XG4gICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc0FiYnJSZWdleCA6IHRoaXMuX2VyYXNSZWdleFxufVxuZnVuY3Rpb24gZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hcnJvd1JlZ2V4JykpIHtcbiAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpXG4gICAgfVxuICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYXJyb3dSZWdleCA6IHRoaXMuX2VyYXNSZWdleFxufVxuZnVuY3Rpb24gbWF0Y2hFcmFBYmJyKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgcmV0dXJuIGxvY2FsZTIuZXJhc0FiYnJSZWdleChpc1N0cmljdClcbn1cbmZ1bmN0aW9uIG1hdGNoRXJhTmFtZShpc1N0cmljdCwgbG9jYWxlMikge1xuICAgIHJldHVybiBsb2NhbGUyLmVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpXG59XG5mdW5jdGlvbiBtYXRjaEVyYU5hcnJvdyhpc1N0cmljdCwgbG9jYWxlMikge1xuICAgIHJldHVybiBsb2NhbGUyLmVyYXNOYXJyb3dSZWdleChpc1N0cmljdClcbn1cbmZ1bmN0aW9uIG1hdGNoRXJhWWVhck9yZGluYWwoaXNTdHJpY3QsIGxvY2FsZTIpIHtcbiAgICByZXR1cm4gbG9jYWxlMi5fZXJhWWVhck9yZGluYWxSZWdleCB8fCBtYXRjaFVuc2lnbmVkXG59XG5mdW5jdGlvbiBjb21wdXRlRXJhc1BhcnNlKCkge1xuICAgIHZhciBhYmJyUGllY2VzID0gW10sXG4gICAgICAgIG5hbWVQaWVjZXMgPSBbXSxcbiAgICAgICAgbmFycm93UGllY2VzID0gW10sXG4gICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksXG4gICAgICAgIGwsXG4gICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKVxuICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICBuYW1lUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYW1lKSlcbiAgICAgICAgYWJiclBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicikpXG4gICAgICAgIG5hcnJvd1BpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFycm93KSlcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpKVxuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicikpXG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYXJyb3cpKVxuICAgIH1cbiAgICB0aGlzLl9lcmFzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJylcbiAgICB0aGlzLl9lcmFzTmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbmFtZVBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJylcbiAgICB0aGlzLl9lcmFzQWJiclJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgYWJiclBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJylcbiAgICB0aGlzLl9lcmFzTmFycm93UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBuYXJyb3dQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpXG59XG5mdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuKHRva2VuMiwgZ2V0dGVyKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuMiwgdG9rZW4yLmxlbmd0aF0sIDAsIGdldHRlcilcbn1cbmZ1bmN0aW9uIGdldFNldFdlZWtZZWFyKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGlucHV0LFxuICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95XG4gICAgKVxufVxuZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIHRoaXMuaXNvV2VlaygpLFxuICAgICAgICB0aGlzLmlzb1dlZWtkYXkoKSxcbiAgICAgICAgMSxcbiAgICAgICAgNFxuICAgIClcbn1cbmZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyKCkge1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNClcbn1cbmZ1bmN0aW9uIGdldElTT1dlZWtzSW5JU09XZWVrWWVhcigpIHtcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy5pc29XZWVrWWVhcigpLCAxLCA0KVxufVxuZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIoKSB7XG4gICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWtcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KVxufVxuZnVuY3Rpb24gZ2V0V2Vla3NJbldlZWtZZWFyKCkge1xuICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrXG4gICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMud2Vla1llYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpXG59XG5mdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla3NUYXJnZXRcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhclxuICAgIH0gZWxzZSB7XG4gICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KVxuICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSlcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpXG4gICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSlcbiAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSlcbiAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpXG4gICAgcmV0dXJuIHRoaXNcbn1cbmZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbFxuICAgICAgICA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKVxuICAgICAgICA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgKHRoaXMubW9udGgoKSAlIDMpKVxufVxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyKGlucHV0KSB7XG4gICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgIE1hdGgucm91bmQoXG4gICAgICAgICAgICAodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNVxuICAgICAgICApICsgMVxuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoaW5wdXQgLSBkYXlPZlllYXIsICdkJylcbn1cbmZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxZTMpXG59XG5mdW5jdGlvbiBnZXRab25lQWJicigpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnXG59XG5mdW5jdGlvbiBnZXRab25lTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJydcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVuaXgoaW5wdXQpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxZTMpXG59XG5mdW5jdGlvbiBjcmVhdGVJblpvbmUoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKClcbn1cbmZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nXG59XG5mdW5jdGlvbiBnZXQkMShmb3JtYXQyLCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgIHZhciBsb2NhbGUyID0gZ2V0TG9jYWxlKCksXG4gICAgICAgIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KVxuICAgIHJldHVybiBsb2NhbGUyW2ZpZWxkXSh1dGMsIGZvcm1hdDIpXG59XG5mdW5jdGlvbiBsaXN0TW9udGhzSW1wbChmb3JtYXQyLCBpbmRleCwgZmllbGQpIHtcbiAgICBpZiAoaXNOdW1iZXIoZm9ybWF0MikpIHtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQyXG4gICAgICAgIGZvcm1hdDIgPSB2b2lkIDBcbiAgICB9XG4gICAgZm9ybWF0MiA9IGZvcm1hdDIgfHwgJydcbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0MiwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKVxuICAgIH1cbiAgICB2YXIgaSxcbiAgICAgICAgb3V0ID0gW11cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQyLCBpLCBmaWVsZCwgJ21vbnRoJylcbiAgICB9XG4gICAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdDIsIGluZGV4LCBmaWVsZCkge1xuICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdDIpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDJcbiAgICAgICAgICAgIGZvcm1hdDIgPSB2b2lkIDBcbiAgICAgICAgfVxuICAgICAgICBmb3JtYXQyID0gZm9ybWF0MiB8fCAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcm1hdDIgPSBsb2NhbGVTb3J0ZWRcbiAgICAgICAgaW5kZXggPSBmb3JtYXQyXG4gICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlXG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQyKSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQyXG4gICAgICAgICAgICBmb3JtYXQyID0gdm9pZCAwXG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0MiA9IGZvcm1hdDIgfHwgJydcbiAgICB9XG4gICAgdmFyIGxvY2FsZTIgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUyLl93ZWVrLmRvdyA6IDAsXG4gICAgICAgIGksXG4gICAgICAgIG91dCA9IFtdXG4gICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdDIsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5JylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQyLCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5JylcbiAgICB9XG4gICAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gbGlzdE1vbnRocyhmb3JtYXQyLCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQyLCBpbmRleCwgJ21vbnRocycpXG59XG5mdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQoZm9ybWF0MiwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0MiwgaW5kZXgsICdtb250aHNTaG9ydCcpXG59XG5mdW5jdGlvbiBsaXN0V2Vla2RheXMobG9jYWxlU29ydGVkLCBmb3JtYXQyLCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0MiwgaW5kZXgsICd3ZWVrZGF5cycpXG59XG5mdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydChsb2NhbGVTb3J0ZWQsIGZvcm1hdDIsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQyLCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKVxufVxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluKGxvY2FsZVNvcnRlZCwgZm9ybWF0MiwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdDIsIGluZGV4LCAnd2Vla2RheXNNaW4nKVxufVxuZnVuY3Rpb24gYWJzKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YVxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKVxuICAgIHRoaXMuX2RheXMgPSBtYXRoQWJzKHRoaXMuX2RheXMpXG4gICAgdGhpcy5fbW9udGhzID0gbWF0aEFicyh0aGlzLl9tb250aHMpXG4gICAgZGF0YS5taWxsaXNlY29uZHMgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKVxuICAgIGRhdGEuc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKVxuICAgIGRhdGEubWludXRlcyA9IG1hdGhBYnMoZGF0YS5taW51dGVzKVxuICAgIGRhdGEuaG91cnMgPSBtYXRoQWJzKGRhdGEuaG91cnMpXG4gICAgZGF0YS5tb250aHMgPSBtYXRoQWJzKGRhdGEubW9udGhzKVxuICAgIGRhdGEueWVhcnMgPSBtYXRoQWJzKGRhdGEueWVhcnMpXG4gICAgcmV0dXJuIHRoaXNcbn1cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKVxuICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kc1xuICAgIGR1cmF0aW9uLl9kYXlzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzXG4gICAgZHVyYXRpb24uX21vbnRocyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzXG4gICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKVxufVxuZnVuY3Rpb24gYWRkJDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKVxufVxuZnVuY3Rpb24gc3VidHJhY3QkMShpbnB1dCwgdmFsdWUpIHtcbiAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKVxufVxuZnVuY3Rpb24gYWJzQ2VpbChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpXG4gICAgfVxufVxuZnVuY3Rpb24gYnViYmxlKCkge1xuICAgIHZhciBtaWxsaXNlY29uZHMyID0gdGhpcy5fbWlsbGlzZWNvbmRzLFxuICAgICAgICBkYXlzMiA9IHRoaXMuX2RheXMsXG4gICAgICAgIG1vbnRoczIgPSB0aGlzLl9tb250aHMsXG4gICAgICAgIGRhdGEgPSB0aGlzLl9kYXRhLFxuICAgICAgICBzZWNvbmRzMixcbiAgICAgICAgbWludXRlczIsXG4gICAgICAgIGhvdXJzMixcbiAgICAgICAgeWVhcnMyLFxuICAgICAgICBtb250aHNGcm9tRGF5c1xuICAgIGlmIChcbiAgICAgICAgIShcbiAgICAgICAgICAgIChtaWxsaXNlY29uZHMyID49IDAgJiYgZGF5czIgPj0gMCAmJiBtb250aHMyID49IDApIHx8XG4gICAgICAgICAgICAobWlsbGlzZWNvbmRzMiA8PSAwICYmIGRheXMyIDw9IDAgJiYgbW9udGhzMiA8PSAwKVxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIG1pbGxpc2Vjb25kczIgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzMikgKyBkYXlzMikgKiA4NjRlNVxuICAgICAgICBkYXlzMiA9IDBcbiAgICAgICAgbW9udGhzMiA9IDBcbiAgICB9XG4gICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMyICUgMWUzXG4gICAgc2Vjb25kczIgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMyIC8gMWUzKVxuICAgIGRhdGEuc2Vjb25kcyA9IHNlY29uZHMyICUgNjBcbiAgICBtaW51dGVzMiA9IGFic0Zsb29yKHNlY29uZHMyIC8gNjApXG4gICAgZGF0YS5taW51dGVzID0gbWludXRlczIgJSA2MFxuICAgIGhvdXJzMiA9IGFic0Zsb29yKG1pbnV0ZXMyIC8gNjApXG4gICAgZGF0YS5ob3VycyA9IGhvdXJzMiAlIDI0XG4gICAgZGF5czIgKz0gYWJzRmxvb3IoaG91cnMyIC8gMjQpXG4gICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5czIpKVxuICAgIG1vbnRoczIgKz0gbW9udGhzRnJvbURheXNcbiAgICBkYXlzMiAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpXG4gICAgeWVhcnMyID0gYWJzRmxvb3IobW9udGhzMiAvIDEyKVxuICAgIG1vbnRoczIgJT0gMTJcbiAgICBkYXRhLmRheXMgPSBkYXlzMlxuICAgIGRhdGEubW9udGhzID0gbW9udGhzMlxuICAgIGRhdGEueWVhcnMgPSB5ZWFyczJcbiAgICByZXR1cm4gdGhpc1xufVxuZnVuY3Rpb24gZGF5c1RvTW9udGhzKGRheXMyKSB7XG4gICAgcmV0dXJuIChkYXlzMiAqIDQ4MDApIC8gMTQ2MDk3XG59XG5mdW5jdGlvbiBtb250aHNUb0RheXMobW9udGhzMikge1xuICAgIHJldHVybiAobW9udGhzMiAqIDE0NjA5NykgLyA0ODAwXG59XG5mdW5jdGlvbiBhcyh1bml0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTlxuICAgIH1cbiAgICB2YXIgZGF5czIsXG4gICAgICAgIG1vbnRoczIsXG4gICAgICAgIG1pbGxpc2Vjb25kczIgPSB0aGlzLl9taWxsaXNlY29uZHNcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgZGF5czIgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzMiAvIDg2NGU1XG4gICAgICAgIG1vbnRoczIgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5czIpXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzMlxuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoczIgLyAzXG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzMiAvIDEyXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBkYXlzMiA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKVxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF5czIgLyA3ICsgbWlsbGlzZWNvbmRzMiAvIDYwNDhlNVxuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF5czIgKyBtaWxsaXNlY29uZHMyIC8gODY0ZTVcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXlzMiAqIDI0ICsgbWlsbGlzZWNvbmRzMiAvIDM2ZTVcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRheXMyICogMTQ0MCArIG1pbGxpc2Vjb25kczIgLyA2ZTRcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRheXMyICogODY0MDAgKyBtaWxsaXNlY29uZHMyIC8gMWUzXG4gICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5czIgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHMyXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cylcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbHVlT2YkMSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU5cbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICApXG59XG5mdW5jdGlvbiBtYWtlQXMoYWxpYXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcylcbiAgICB9XG59XG5mdW5jdGlvbiBjbG9uZSQxKCkge1xuICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKVxufVxuZnVuY3Rpb24gZ2V0JDIodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKVxuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU5cbn1cbmZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU5cbiAgICB9XG59XG5mdW5jdGlvbiB3ZWVrcygpIHtcbiAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KVxufVxuZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUyKSB7XG4gICAgcmV0dXJuIGxvY2FsZTIucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG59XG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUkMShwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgdGhyZXNob2xkczIsIGxvY2FsZTIpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCksXG4gICAgICAgIHNlY29uZHMyID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSksXG4gICAgICAgIG1pbnV0ZXMyID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSksXG4gICAgICAgIGhvdXJzMiA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpLFxuICAgICAgICBkYXlzMiA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpLFxuICAgICAgICBtb250aHMyID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSksXG4gICAgICAgIHdlZWtzMiA9IHJvdW5kKGR1cmF0aW9uLmFzKCd3JykpLFxuICAgICAgICB5ZWFyczIgPSByb3VuZChkdXJhdGlvbi5hcygneScpKSxcbiAgICAgICAgYSA9XG4gICAgICAgICAgICAoc2Vjb25kczIgPD0gdGhyZXNob2xkczIuc3MgJiYgWydzJywgc2Vjb25kczJdKSB8fFxuICAgICAgICAgICAgKHNlY29uZHMyIDwgdGhyZXNob2xkczIucyAmJiBbJ3NzJywgc2Vjb25kczJdKSB8fFxuICAgICAgICAgICAgKG1pbnV0ZXMyIDw9IDEgJiYgWydtJ10pIHx8XG4gICAgICAgICAgICAobWludXRlczIgPCB0aHJlc2hvbGRzMi5tICYmIFsnbW0nLCBtaW51dGVzMl0pIHx8XG4gICAgICAgICAgICAoaG91cnMyIDw9IDEgJiYgWydoJ10pIHx8XG4gICAgICAgICAgICAoaG91cnMyIDwgdGhyZXNob2xkczIuaCAmJiBbJ2hoJywgaG91cnMyXSkgfHxcbiAgICAgICAgICAgIChkYXlzMiA8PSAxICYmIFsnZCddKSB8fFxuICAgICAgICAgICAgKGRheXMyIDwgdGhyZXNob2xkczIuZCAmJiBbJ2RkJywgZGF5czJdKVxuICAgIGlmICh0aHJlc2hvbGRzMi53ICE9IG51bGwpIHtcbiAgICAgICAgYSA9XG4gICAgICAgICAgICBhIHx8XG4gICAgICAgICAgICAod2Vla3MyIDw9IDEgJiYgWyd3J10pIHx8XG4gICAgICAgICAgICAod2Vla3MyIDwgdGhyZXNob2xkczIudyAmJiBbJ3d3Jywgd2Vla3MyXSlcbiAgICB9XG4gICAgYSA9IGEgfHxcbiAgICAgICAgKG1vbnRoczIgPD0gMSAmJiBbJ00nXSkgfHxcbiAgICAgICAgKG1vbnRoczIgPCB0aHJlc2hvbGRzMi5NICYmIFsnTU0nLCBtb250aHMyXSkgfHxcbiAgICAgICAgKHllYXJzMiA8PSAxICYmIFsneSddKSB8fCBbJ3l5JywgeWVhcnMyXVxuICAgIGFbMl0gPSB3aXRob3V0U3VmZml4XG4gICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDBcbiAgICBhWzRdID0gbG9jYWxlMlxuICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKVxufVxuZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcocm91bmRpbmdGdW5jdGlvbikge1xuICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIHJvdW5kXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygcm91bmRpbmdGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb25cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5mdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQodGhyZXNob2xkLCBsaW1pdCkge1xuICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXVxuICAgIH1cbiAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdFxuICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG5mdW5jdGlvbiBodW1hbml6ZShhcmdXaXRoU3VmZml4LCBhcmdUaHJlc2hvbGRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKVxuICAgIH1cbiAgICB2YXIgd2l0aFN1ZmZpeCA9IGZhbHNlLFxuICAgICAgICB0aCA9IHRocmVzaG9sZHMsXG4gICAgICAgIGxvY2FsZTIsXG4gICAgICAgIG91dHB1dFxuICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYXJnVGhyZXNob2xkcyA9IGFyZ1dpdGhTdWZmaXhcbiAgICAgICAgYXJnV2l0aFN1ZmZpeCA9IGZhbHNlXG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHdpdGhTdWZmaXggPSBhcmdXaXRoU3VmZml4XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnVGhyZXNob2xkcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGggPSBPYmplY3QuYXNzaWduKHt9LCB0aHJlc2hvbGRzLCBhcmdUaHJlc2hvbGRzKVxuICAgICAgICBpZiAoYXJnVGhyZXNob2xkcy5zICE9IG51bGwgJiYgYXJnVGhyZXNob2xkcy5zcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aC5zcyA9IGFyZ1RocmVzaG9sZHMucyAtIDFcbiAgICAgICAgfVxuICAgIH1cbiAgICBsb2NhbGUyID0gdGhpcy5sb2NhbGVEYXRhKClcbiAgICBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgdGgsIGxvY2FsZTIpXG4gICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgb3V0cHV0ID0gbG9jYWxlMi5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpXG4gICAgfVxuICAgIHJldHVybiBsb2NhbGUyLnBvc3Rmb3JtYXQob3V0cHV0KVxufVxuZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgcmV0dXJuICh4ID4gMCkgLSAoeCA8IDApIHx8ICt4XG59XG5mdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKClcbiAgICB9XG4gICAgdmFyIHNlY29uZHMyID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDFlMyxcbiAgICAgICAgZGF5czIgPSBhYnMkMSh0aGlzLl9kYXlzKSxcbiAgICAgICAgbW9udGhzMiA9IGFicyQxKHRoaXMuX21vbnRocyksXG4gICAgICAgIG1pbnV0ZXMyLFxuICAgICAgICBob3VyczIsXG4gICAgICAgIHllYXJzMixcbiAgICAgICAgcyxcbiAgICAgICAgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpLFxuICAgICAgICB0b3RhbFNpZ24sXG4gICAgICAgIHltU2lnbixcbiAgICAgICAgZGF5c1NpZ24sXG4gICAgICAgIGhtc1NpZ25cbiAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgIHJldHVybiAnUDBEJ1xuICAgIH1cbiAgICBtaW51dGVzMiA9IGFic0Zsb29yKHNlY29uZHMyIC8gNjApXG4gICAgaG91cnMyID0gYWJzRmxvb3IobWludXRlczIgLyA2MClcbiAgICBzZWNvbmRzMiAlPSA2MFxuICAgIG1pbnV0ZXMyICU9IDYwXG4gICAgeWVhcnMyID0gYWJzRmxvb3IobW9udGhzMiAvIDEyKVxuICAgIG1vbnRoczIgJT0gMTJcbiAgICBzID0gc2Vjb25kczIgPyBzZWNvbmRzMi50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJ1xuICAgIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnXG4gICAgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnXG4gICAgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnXG4gICAgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJ1xuICAgIHJldHVybiAoXG4gICAgICAgIHRvdGFsU2lnbiArXG4gICAgICAgICdQJyArXG4gICAgICAgICh5ZWFyczIgPyB5bVNpZ24gKyB5ZWFyczIgKyAnWScgOiAnJykgK1xuICAgICAgICAobW9udGhzMiA/IHltU2lnbiArIG1vbnRoczIgKyAnTScgOiAnJykgK1xuICAgICAgICAoZGF5czIgPyBkYXlzU2lnbiArIGRheXMyICsgJ0QnIDogJycpICtcbiAgICAgICAgKGhvdXJzMiB8fCBtaW51dGVzMiB8fCBzZWNvbmRzMiA/ICdUJyA6ICcnKSArXG4gICAgICAgIChob3VyczIgPyBobXNTaWduICsgaG91cnMyICsgJ0gnIDogJycpICtcbiAgICAgICAgKG1pbnV0ZXMyID8gaG1zU2lnbiArIG1pbnV0ZXMyICsgJ00nIDogJycpICtcbiAgICAgICAgKHNlY29uZHMyID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJylcbiAgICApXG59XG52YXIgaG9va0NhbGxiYWNrLFxuICAgIHNvbWUsXG4gICAgbW9tZW50UHJvcGVydGllcyxcbiAgICB1cGRhdGVJblByb2dyZXNzLFxuICAgIGRlcHJlY2F0aW9ucyxcbiAgICBrZXlzLFxuICAgIGRlZmF1bHRDYWxlbmRhcixcbiAgICBmb3JtYXR0aW5nVG9rZW5zLFxuICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyxcbiAgICBmb3JtYXRGdW5jdGlvbnMsXG4gICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMsXG4gICAgZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgIGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICBkZWZhdWx0T3JkaW5hbCxcbiAgICBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuICAgIGFsaWFzZXMsXG4gICAgcHJpb3JpdGllcyxcbiAgICBtYXRjaDEsXG4gICAgbWF0Y2gyLFxuICAgIG1hdGNoMyxcbiAgICBtYXRjaDQsXG4gICAgbWF0Y2g2LFxuICAgIG1hdGNoMXRvMixcbiAgICBtYXRjaDN0bzQsXG4gICAgbWF0Y2g1dG82LFxuICAgIG1hdGNoMXRvMyxcbiAgICBtYXRjaDF0bzQsXG4gICAgbWF0Y2gxdG82LFxuICAgIG1hdGNoVW5zaWduZWQsXG4gICAgbWF0Y2hTaWduZWQsXG4gICAgbWF0Y2hPZmZzZXQsXG4gICAgbWF0Y2hTaG9ydE9mZnNldCxcbiAgICBtYXRjaFRpbWVzdGFtcCxcbiAgICBtYXRjaFdvcmQsXG4gICAgcmVnZXhlcyxcbiAgICB0b2tlbnMsXG4gICAgWUVBUixcbiAgICBNT05USCxcbiAgICBEQVRFLFxuICAgIEhPVVIsXG4gICAgTUlOVVRFLFxuICAgIFNFQ09ORCxcbiAgICBNSUxMSVNFQ09ORCxcbiAgICBXRUVLLFxuICAgIFdFRUtEQVksXG4gICAgaW5kZXhPZixcbiAgICBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcbiAgICBNT05USFNfSU5fRk9STUFULFxuICAgIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4LFxuICAgIGRlZmF1bHRNb250aHNSZWdleCxcbiAgICBnZXRTZXRZZWFyLFxuICAgIGRlZmF1bHRMb2NhbGVXZWVrLFxuICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcbiAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgZGVmYXVsdFdlZWtkYXlzUmVnZXgsXG4gICAgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCxcbiAgICBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCxcbiAgICBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSxcbiAgICBnZXRTZXRIb3VyLFxuICAgIGJhc2VDb25maWcsXG4gICAgbG9jYWxlcyxcbiAgICBsb2NhbGVGYW1pbGllcyxcbiAgICBnbG9iYWxMb2NhbGUsXG4gICAgZXh0ZW5kZWRJc29SZWdleCxcbiAgICBiYXNpY0lzb1JlZ2V4LFxuICAgIHR6UmVnZXgsXG4gICAgaXNvRGF0ZXMsXG4gICAgaXNvVGltZXMsXG4gICAgYXNwTmV0SnNvblJlZ2V4LFxuICAgIHJmYzI4MjIsXG4gICAgb2JzT2Zmc2V0cyxcbiAgICBwcm90b3R5cGVNaW4sXG4gICAgcHJvdG90eXBlTWF4LFxuICAgIG5vdyxcbiAgICBvcmRlcmluZyxcbiAgICBjaHVua09mZnNldCxcbiAgICBhc3BOZXRSZWdleCxcbiAgICBpc29SZWdleCxcbiAgICBhZGQsXG4gICAgc3VidHJhY3QsXG4gICAgbGFuZyxcbiAgICBNU19QRVJfU0VDT05ELFxuICAgIE1TX1BFUl9NSU5VVEUsXG4gICAgTVNfUEVSX0hPVVIsXG4gICAgTVNfUEVSXzQwMF9ZRUFSUyxcbiAgICBnZXRTZXREYXlPZk1vbnRoLFxuICAgIGdldFNldE1pbnV0ZSxcbiAgICBnZXRTZXRTZWNvbmQsXG4gICAgdG9rZW4sXG4gICAgZ2V0U2V0TWlsbGlzZWNvbmQsXG4gICAgcHJvdG8sXG4gICAgcHJvdG8kMSxcbiAgICBtYXRoQWJzLFxuICAgIGFzTWlsbGlzZWNvbmRzLFxuICAgIGFzU2Vjb25kcyxcbiAgICBhc01pbnV0ZXMsXG4gICAgYXNIb3VycyxcbiAgICBhc0RheXMsXG4gICAgYXNXZWVrcyxcbiAgICBhc01vbnRocyxcbiAgICBhc1F1YXJ0ZXJzLFxuICAgIGFzWWVhcnMsXG4gICAgbWlsbGlzZWNvbmRzLFxuICAgIHNlY29uZHMsXG4gICAgbWludXRlcyxcbiAgICBob3VycyxcbiAgICBkYXlzLFxuICAgIG1vbnRocyxcbiAgICB5ZWFycyxcbiAgICByb3VuZCxcbiAgICB0aHJlc2hvbGRzLFxuICAgIGFicyQxLFxuICAgIHByb3RvJDIsXG4gICAgcmVxdWlyZV9tb21lbnRcbnZhciBpbml0X21vbWVudCA9IF9fZXNtKHtcbiAgICAnbm9kZV9tb2R1bGVzL21vbWVudC9kaXN0L21vbWVudC5qcycoKSB7XG4gICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICAgICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBsZW4gPSB0Lmxlbmd0aCA+Pj4gMCxcbiAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1vbWVudFByb3BlcnRpZXMgPSBob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW11cbiAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlXG4gICAgICAgIGRlcHJlY2F0aW9ucyA9IHt9XG4gICAgICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlXG4gICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGxcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgICAgICBrZXlzID0gT2JqZWN0LmtleXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IFtdXG4gICAgICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfVxuICAgICAgICBmb3JtYXR0aW5nVG9rZW5zID1cbiAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2dcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZ1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnMgPSB7fVxuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9XG4gICAgICAgIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMOiAnTU0vREQvWVlZWScsXG4gICAgICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnXG4gICAgICAgIGRlZmF1bHRPcmRpbmFsID0gJyVkJ1xuICAgICAgICBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS9cbiAgICAgICAgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIHc6ICdhIHdlZWsnLFxuICAgICAgICAgICAgd3c6ICclZCB3ZWVrcycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnXG4gICAgICAgIH1cbiAgICAgICAgYWxpYXNlcyA9IHt9XG4gICAgICAgIHByaW9yaXRpZXMgPSB7fVxuICAgICAgICBtYXRjaDEgPSAvXFxkL1xuICAgICAgICBtYXRjaDIgPSAvXFxkXFxkL1xuICAgICAgICBtYXRjaDMgPSAvXFxkezN9L1xuICAgICAgICBtYXRjaDQgPSAvXFxkezR9L1xuICAgICAgICBtYXRjaDYgPSAvWystXT9cXGR7Nn0vXG4gICAgICAgIG1hdGNoMXRvMiA9IC9cXGRcXGQ/L1xuICAgICAgICBtYXRjaDN0bzQgPSAvXFxkXFxkXFxkXFxkPy9cbiAgICAgICAgbWF0Y2g1dG82ID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vXG4gICAgICAgIG1hdGNoMXRvMyA9IC9cXGR7MSwzfS9cbiAgICAgICAgbWF0Y2gxdG80ID0gL1xcZHsxLDR9L1xuICAgICAgICBtYXRjaDF0bzYgPSAvWystXT9cXGR7MSw2fS9cbiAgICAgICAgbWF0Y2hVbnNpZ25lZCA9IC9cXGQrL1xuICAgICAgICBtYXRjaFNpZ25lZCA9IC9bKy1dP1xcZCsvXG4gICAgICAgIG1hdGNoT2Zmc2V0ID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpXG4gICAgICAgIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naVxuICAgICAgICBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy9cbiAgICAgICAgbWF0Y2hXb3JkID1cbiAgICAgICAgICAgIC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pXG4gICAgICAgIHJlZ2V4ZXMgPSB7fVxuICAgICAgICB0b2tlbnMgPSB7fVxuICAgICAgICBZRUFSID0gMFxuICAgICAgICBNT05USCA9IDFcbiAgICAgICAgREFURSA9IDJcbiAgICAgICAgSE9VUiA9IDNcbiAgICAgICAgTUlOVVRFID0gNFxuICAgICAgICBTRUNPTkQgPSA1XG4gICAgICAgIE1JTExJU0VDT05EID0gNlxuICAgICAgICBXRUVLID0gN1xuICAgICAgICBXRUVLREFZID0gOFxuICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gLTFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDFcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0MilcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0Mikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQyKVxuICAgICAgICB9KVxuICAgICAgICBhZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKVxuICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ21vbnRoJywgOClcbiAgICAgICAgYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignTU0nLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlMi5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KVxuICAgICAgICB9KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlMi5tb250aHNSZWdleChpc1N0cmljdClcbiAgICAgICAgfSlcbiAgICAgICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMVxuICAgICAgICB9KVxuICAgICAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbjIpIHtcbiAgICAgICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIHRva2VuMixcbiAgICAgICAgICAgICAgICBjb25maWcuX3N0cmljdFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzID1cbiAgICAgICAgICAgICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgIClcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID1cbiAgICAgICAgICAgICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKVxuICAgICAgICBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vXG4gICAgICAgIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkXG4gICAgICAgIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZFxuICAgICAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKClcbiAgICAgICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyB6ZXJvRmlsbCh5LCA0KSA6ICcrJyArIHlcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDBcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgNF0sIDAsICd5ZWFyJylcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsIDVdLCAwLCAneWVhcicpXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJylcbiAgICAgICAgYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKVxuICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdZJywgbWF0Y2hTaWduZWQpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCBtYXRjaDF0bzQsIG1hdGNoNClcbiAgICAgICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUilcbiAgICAgICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID1cbiAgICAgICAgICAgICAgICBpbnB1dC5sZW5ndGggPT09IDJcbiAgICAgICAgICAgICAgICAgICAgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dClcbiAgICAgICAgICAgICAgICAgICAgOiB0b0ludChpbnB1dClcbiAgICAgICAgfSlcbiAgICAgICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KVxuICAgICAgICB9KVxuICAgICAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApXG4gICAgICAgIH0pXG4gICAgICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDJlMylcbiAgICAgICAgfVxuICAgICAgICBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKVxuICAgICAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpXG4gICAgICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJylcbiAgICAgICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSlcbiAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSlcbiAgICAgICAgYWRkUmVnZXhUb2tlbigndycsIG1hdGNoMXRvMilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignVycsIG1hdGNoMXRvMilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgICAgICBbJ3cnLCAnd3cnLCAnVycsICdXVyddLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgICAgIHdlZWtbdG9rZW4yLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgICAgIGRvdzogMCxcbiAgICAgICAgICAgIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2XG4gICAgICAgICAgICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5JylcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdDIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQyKVxuICAgICAgICB9KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdDIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdDIpXG4gICAgICAgIH0pXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdDIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQyKVxuICAgICAgICB9KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5JylcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpXG4gICAgICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKVxuICAgICAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpXG4gICAgICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJylcbiAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdkYXknLCAxMSlcbiAgICAgICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrZGF5JywgMTEpXG4gICAgICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla2RheScsIDExKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdlJywgbWF0Y2gxdG8yKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdFJywgbWF0Y2gxdG8yKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlMikge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTIud2Vla2RheXNNaW5SZWdleChpc1N0cmljdClcbiAgICAgICAgfSlcbiAgICAgICAgYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUyKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlMi53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpXG4gICAgICAgIH0pXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUyLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpXG4gICAgICAgIH0pXG4gICAgICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICAgICAgWydkZCcsICdkZGQnLCAnZGRkZCddLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuMixcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9zdHJpY3RcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgICAgIFsnZCcsICdlJywgJ0UnXSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbjIpIHtcbiAgICAgICAgICAgICAgICB3ZWVrW3Rva2VuMl0gPSB0b0ludChpbnB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPVxuICAgICAgICAgICAgJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgIClcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpXG4gICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKVxuICAgICAgICBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdClcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMilcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAnJyArXG4gICAgICAgICAgICAgICAgaEZvcm1hdC5hcHBseSh0aGlzKSArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKVxuICAgICAgICB9KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzKCkgK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSlcbiAgICAgICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSlcbiAgICAgICAgYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKVxuICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMylcbiAgICAgICAgYWRkUmVnZXhUb2tlbignYScsIG1hdGNoTWVyaWRpZW0pXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCBtYXRjaE1lcmlkaWVtKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdIJywgbWF0Y2gxdG8yKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdoJywgbWF0Y2gxdG8yKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdrJywgbWF0Y2gxdG8yKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KVxuICAgICAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKVxuICAgICAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dClcbiAgICAgICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXRcbiAgICAgICAgfSlcbiAgICAgICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpXG4gICAgICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXRcbiAgICAgICAgfSlcbiAgICAgICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KVxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMlxuICAgICAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSlcbiAgICAgICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSlcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlXG4gICAgICAgIH0pXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDJcbiAgICAgICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKVxuICAgICAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSlcbiAgICAgICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZVxuICAgICAgICB9KVxuICAgICAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyXG4gICAgICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKVxuICAgICAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKVxuICAgICAgICB9KVxuICAgICAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyXG4gICAgICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSlcbiAgICAgICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpXG4gICAgICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKVxuICAgICAgICB9KVxuICAgICAgICBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pXG4gICAgICAgIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpXG4gICAgICAgIGJhc2VDb25maWcgPSB7XG4gICAgICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcbiAgICAgICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuICAgICAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcbiAgICAgICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlXG4gICAgICAgIH1cbiAgICAgICAgbG9jYWxlcyA9IHt9XG4gICAgICAgIGxvY2FsZUZhbWlsaWVzID0ge31cbiAgICAgICAgZXh0ZW5kZWRJc29SZWdleCA9XG4gICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kL1xuICAgICAgICBiYXNpY0lzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGR8KSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC9cbiAgICAgICAgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L1xuICAgICAgICBpc29EYXRlcyA9IFtcbiAgICAgICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NJywgL1xcZHs2fS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWScsIC9cXGR7NH0vLCBmYWxzZV1cbiAgICAgICAgXVxuICAgICAgICBpc29UaW1lcyA9IFtcbiAgICAgICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIJywgL1xcZFxcZC9dXG4gICAgICAgIF1cbiAgICAgICAgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKCgtP1xcZCspL2lcbiAgICAgICAgcmZjMjgyMiA9XG4gICAgICAgICAgICAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvXG4gICAgICAgIG9ic09mZnNldHMgPSB7XG4gICAgICAgICAgICBVVDogMCxcbiAgICAgICAgICAgIEdNVDogMCxcbiAgICAgICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBTVDogLTggKiA2MFxuICAgICAgICB9XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCB3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlIGRpc2NvdXJhZ2VkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9kID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICAgIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogKygvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSlcbiAgICAgICAgfVxuICAgICAgICBvcmRlcmluZyA9IFtcbiAgICAgICAgICAgICd5ZWFyJyxcbiAgICAgICAgICAgICdxdWFydGVyJyxcbiAgICAgICAgICAgICdtb250aCcsXG4gICAgICAgICAgICAnd2VlaycsXG4gICAgICAgICAgICAnZGF5JyxcbiAgICAgICAgICAgICdob3VyJyxcbiAgICAgICAgICAgICdtaW51dGUnLFxuICAgICAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICAgICAnbWlsbGlzZWNvbmQnXG4gICAgICAgIF1cbiAgICAgICAgb2Zmc2V0KCdaJywgJzonKVxuICAgICAgICBvZmZzZXQoJ1paJywgJycpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCBtYXRjaFNob3J0T2Zmc2V0KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlXG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpXG4gICAgICAgIH0pXG4gICAgICAgIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpXG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICAgIGFzcE5ldFJlZ2V4ID0gL14oLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKTooXFxkKykoPzo6KFxcZCspKFxcLlxcZCopPyk/JC9cbiAgICAgICAgaXNvUmVnZXggPVxuICAgICAgICAgICAgL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kL1xuICAgICAgICBjcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZVxuICAgICAgICBjcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxXG4gICAgICAgIGFkZCA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKVxuICAgICAgICBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKVxuICAgICAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJ1xuICAgICAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nXG4gICAgICAgIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBNU19QRVJfU0VDT05EID0gMWUzXG4gICAgICAgIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkRcbiAgICAgICAgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEVcbiAgICAgICAgTVNfUEVSXzQwMF9ZRUFSUyA9ICgzNjUgKiA0MDAgKyA5NykgKiAyNCAqIE1TX1BFUl9IT1VSXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdOJywgMCwgMCwgJ2VyYUFiYnInKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignTk4nLCAwLCAwLCAnZXJhQWJicicpXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdOTk4nLCAwLCAwLCAnZXJhQWJicicpXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OJywgMCwgMCwgJ2VyYU5hbWUnKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignTk5OTk4nLCAwLCAwLCAnZXJhTmFycm93JylcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3knLCAxXSwgJ3lvJywgJ2VyYVllYXInKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXknLCAyXSwgMCwgJ2VyYVllYXInKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5JywgM10sIDAsICdlcmFZZWFyJylcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eXknLCA0XSwgMCwgJ2VyYVllYXInKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdOJywgbWF0Y2hFcmFBYmJyKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdOTicsIG1hdGNoRXJhQWJicilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignTk5OJywgbWF0Y2hFcmFBYmJyKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdOTk5OJywgbWF0Y2hFcmFOYW1lKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdOTk5OTicsIG1hdGNoRXJhTmFycm93KVxuICAgICAgICBhZGRQYXJzZVRva2VuKFxuICAgICAgICAgICAgWydOJywgJ05OJywgJ05OTicsICdOTk5OJywgJ05OTk5OJ10sXG4gICAgICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgICAgIHZhciBlcmEgPSBjb25maWcuX2xvY2FsZS5lcmFzUGFyc2UoXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgICAgICB0b2tlbjIsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fc3RyaWN0XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmIChlcmEpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhID0gZXJhXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEVyYSA9IGlucHV0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3knLCBtYXRjaFVuc2lnbmVkKVxuICAgICAgICBhZGRSZWdleFRva2VuKCd5eScsIG1hdGNoVW5zaWduZWQpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eScsIG1hdGNoVW5zaWduZWQpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eXknLCBtYXRjaFVuc2lnbmVkKVxuICAgICAgICBhZGRSZWdleFRva2VuKCd5bycsIG1hdGNoRXJhWWVhck9yZGluYWwpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oWyd5JywgJ3l5JywgJ3l5eScsICd5eXl5J10sIFlFQVIpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oWyd5byddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgdmFyIG1hdGNoXG4gICAgICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IGlucHV0Lm1hdGNoKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UoaW5wdXQsIG1hdGNoKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwXG4gICAgICAgIH0pXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMFxuICAgICAgICB9KVxuICAgICAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgJ3dlZWtZZWFyJylcbiAgICAgICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAnd2Vla1llYXInKVxuICAgICAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgJ2lzb1dlZWtZZWFyJylcbiAgICAgICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKVxuICAgICAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJylcbiAgICAgICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpXG4gICAgICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKVxuICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSlcbiAgICAgICAgYWRkUmVnZXhUb2tlbignRycsIG1hdGNoU2lnbmVkKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdnJywgbWF0Y2hTaWduZWQpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCBtYXRjaDF0bzQsIG1hdGNoNClcbiAgICAgICAgYWRkUmVnZXhUb2tlbignZ2dnZycsIG1hdGNoMXRvNCwgbWF0Y2g0KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsIG1hdGNoMXRvNiwgbWF0Y2g2KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsIG1hdGNoMXRvNiwgbWF0Y2g2KVxuICAgICAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgICAgIFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sXG4gICAgICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4yKSB7XG4gICAgICAgICAgICAgICAgd2Vla1t0b2tlbjIuc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuMikge1xuICAgICAgICAgICAgd2Vla1t0b2tlbjJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpXG4gICAgICAgIH0pXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKVxuICAgICAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpXG4gICAgICAgIGFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzXG4gICAgICAgIH0pXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpXG4gICAgICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJylcbiAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdkYXRlJywgOSlcbiAgICAgICAgYWRkUmVnZXhUb2tlbignRCcsIG1hdGNoMXRvMilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMilcbiAgICAgICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZTIpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gbG9jYWxlMi5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUyLl9vcmRpbmFsUGFyc2VcbiAgICAgICAgICAgICAgICA6IGxvY2FsZTIuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50XG4gICAgICAgIH0pXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdKVxuICAgICAgICB9KVxuICAgICAgICBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJylcbiAgICAgICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJylcbiAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdEREQnLCBtYXRjaDF0bzMpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpXG4gICAgICAgIH0pXG4gICAgICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJylcbiAgICAgICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpXG4gICAgICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCBtYXRjaDF0bzIpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpXG4gICAgICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSlcbiAgICAgICAgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpXG4gICAgICAgIGFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKVxuICAgICAgICBhZGRVbml0UHJpb3JpdHkoJ3NlY29uZCcsIDE1KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdzJywgbWF0Y2gxdG8yKVxuICAgICAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKVxuICAgICAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpXG4gICAgICAgIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKVxuICAgICAgICB9KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMClcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJylcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMFxuICAgICAgICB9KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDBcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDFlM1xuICAgICAgICB9KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDFlNFxuICAgICAgICB9KVxuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxZTVcbiAgICAgICAgfSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDFlNlxuICAgICAgICB9KVxuICAgICAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJylcbiAgICAgICAgYWRkVW5pdFByaW9yaXR5KCdtaWxsaXNlY29uZCcsIDE2KVxuICAgICAgICBhZGRSZWdleFRva2VuKCdTJywgbWF0Y2gxdG8zLCBtYXRjaDEpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgbWF0Y2gxdG8zLCBtYXRjaDIpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsIG1hdGNoMXRvMywgbWF0Y2gzKVxuICAgICAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKVxuICAgICAgICB9XG4gICAgICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpXG4gICAgICAgIH1cbiAgICAgICAgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSlcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAwLCAwLCAnem9uZUFiYnInKVxuICAgICAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKVxuICAgICAgICBwcm90byA9IE1vbWVudC5wcm90b3R5cGVcbiAgICAgICAgcHJvdG8uYWRkID0gYWRkXG4gICAgICAgIHByb3RvLmNhbGVuZGFyID0gY2FsZW5kYXIkMVxuICAgICAgICBwcm90by5jbG9uZSA9IGNsb25lXG4gICAgICAgIHByb3RvLmRpZmYgPSBkaWZmXG4gICAgICAgIHByb3RvLmVuZE9mID0gZW5kT2ZcbiAgICAgICAgcHJvdG8uZm9ybWF0ID0gZm9ybWF0XG4gICAgICAgIHByb3RvLmZyb20gPSBmcm9tXG4gICAgICAgIHByb3RvLmZyb21Ob3cgPSBmcm9tTm93XG4gICAgICAgIHByb3RvLnRvID0gdG9cbiAgICAgICAgcHJvdG8udG9Ob3cgPSB0b05vd1xuICAgICAgICBwcm90by5nZXQgPSBzdHJpbmdHZXRcbiAgICAgICAgcHJvdG8uaW52YWxpZEF0ID0gaW52YWxpZEF0XG4gICAgICAgIHByb3RvLmlzQWZ0ZXIgPSBpc0FmdGVyXG4gICAgICAgIHByb3RvLmlzQmVmb3JlID0gaXNCZWZvcmVcbiAgICAgICAgcHJvdG8uaXNCZXR3ZWVuID0gaXNCZXR3ZWVuXG4gICAgICAgIHByb3RvLmlzU2FtZSA9IGlzU2FtZVxuICAgICAgICBwcm90by5pc1NhbWVPckFmdGVyID0gaXNTYW1lT3JBZnRlclxuICAgICAgICBwcm90by5pc1NhbWVPckJlZm9yZSA9IGlzU2FtZU9yQmVmb3JlXG4gICAgICAgIHByb3RvLmlzVmFsaWQgPSBpc1ZhbGlkJDJcbiAgICAgICAgcHJvdG8ubGFuZyA9IGxhbmdcbiAgICAgICAgcHJvdG8ubG9jYWxlID0gbG9jYWxlXG4gICAgICAgIHByb3RvLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhXG4gICAgICAgIHByb3RvLm1heCA9IHByb3RvdHlwZU1heFxuICAgICAgICBwcm90by5taW4gPSBwcm90b3R5cGVNaW5cbiAgICAgICAgcHJvdG8ucGFyc2luZ0ZsYWdzID0gcGFyc2luZ0ZsYWdzXG4gICAgICAgIHByb3RvLnNldCA9IHN0cmluZ1NldFxuICAgICAgICBwcm90by5zdGFydE9mID0gc3RhcnRPZlxuICAgICAgICBwcm90by5zdWJ0cmFjdCA9IHN1YnRyYWN0XG4gICAgICAgIHByb3RvLnRvQXJyYXkgPSB0b0FycmF5XG4gICAgICAgIHByb3RvLnRvT2JqZWN0ID0gdG9PYmplY3RcbiAgICAgICAgcHJvdG8udG9EYXRlID0gdG9EYXRlXG4gICAgICAgIHByb3RvLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmdcbiAgICAgICAgcHJvdG8uaW5zcGVjdCA9IGluc3BlY3RcbiAgICAgICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5mb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvdG9bU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdNb21lbnQ8JyArIHRoaXMuZm9ybWF0KCkgKyAnPidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm90by50b0pTT04gPSB0b0pTT05cbiAgICAgICAgcHJvdG8udG9TdHJpbmcgPSB0b1N0cmluZ1xuICAgICAgICBwcm90by51bml4ID0gdW5peFxuICAgICAgICBwcm90by52YWx1ZU9mID0gdmFsdWVPZlxuICAgICAgICBwcm90by5jcmVhdGlvbkRhdGEgPSBjcmVhdGlvbkRhdGFcbiAgICAgICAgcHJvdG8uZXJhTmFtZSA9IGdldEVyYU5hbWVcbiAgICAgICAgcHJvdG8uZXJhTmFycm93ID0gZ2V0RXJhTmFycm93XG4gICAgICAgIHByb3RvLmVyYUFiYnIgPSBnZXRFcmFBYmJyXG4gICAgICAgIHByb3RvLmVyYVllYXIgPSBnZXRFcmFZZWFyXG4gICAgICAgIHByb3RvLnllYXIgPSBnZXRTZXRZZWFyXG4gICAgICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyXG4gICAgICAgIHByb3RvLndlZWtZZWFyID0gZ2V0U2V0V2Vla1llYXJcbiAgICAgICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhclxuICAgICAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyXG4gICAgICAgIHByb3RvLm1vbnRoID0gZ2V0U2V0TW9udGhcbiAgICAgICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aFxuICAgICAgICBwcm90by53ZWVrID0gcHJvdG8ud2Vla3MgPSBnZXRTZXRXZWVrXG4gICAgICAgIHByb3RvLmlzb1dlZWsgPSBwcm90by5pc29XZWVrcyA9IGdldFNldElTT1dlZWtcbiAgICAgICAgcHJvdG8ud2Vla3NJblllYXIgPSBnZXRXZWVrc0luWWVhclxuICAgICAgICBwcm90by53ZWVrc0luV2Vla1llYXIgPSBnZXRXZWVrc0luV2Vla1llYXJcbiAgICAgICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhclxuICAgICAgICBwcm90by5pc29XZWVrc0luSVNPV2Vla1llYXIgPSBnZXRJU09XZWVrc0luSVNPV2Vla1llYXJcbiAgICAgICAgcHJvdG8uZGF0ZSA9IGdldFNldERheU9mTW9udGhcbiAgICAgICAgcHJvdG8uZGF5ID0gcHJvdG8uZGF5cyA9IGdldFNldERheU9mV2Vla1xuICAgICAgICBwcm90by53ZWVrZGF5ID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrXG4gICAgICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWtcbiAgICAgICAgcHJvdG8uZGF5T2ZZZWFyID0gZ2V0U2V0RGF5T2ZZZWFyXG4gICAgICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXJcbiAgICAgICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZVxuICAgICAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kXG4gICAgICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmRcbiAgICAgICAgcHJvdG8udXRjT2Zmc2V0ID0gZ2V0U2V0T2Zmc2V0XG4gICAgICAgIHByb3RvLnV0YyA9IHNldE9mZnNldFRvVVRDXG4gICAgICAgIHByb3RvLmxvY2FsID0gc2V0T2Zmc2V0VG9Mb2NhbFxuICAgICAgICBwcm90by5wYXJzZVpvbmUgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldFxuICAgICAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0XG4gICAgICAgIHByb3RvLmlzRFNUID0gaXNEYXlsaWdodFNhdmluZ1RpbWVcbiAgICAgICAgcHJvdG8uaXNMb2NhbCA9IGlzTG9jYWxcbiAgICAgICAgcHJvdG8uaXNVdGNPZmZzZXQgPSBpc1V0Y09mZnNldFxuICAgICAgICBwcm90by5pc1V0YyA9IGlzVXRjXG4gICAgICAgIHByb3RvLmlzVVRDID0gaXNVdGNcbiAgICAgICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJiclxuICAgICAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lXG4gICAgICAgIHByb3RvLmRhdGVzID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJyxcbiAgICAgICAgICAgIGdldFNldERheU9mTW9udGhcbiAgICAgICAgKVxuICAgICAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJyxcbiAgICAgICAgICAgIGdldFNldE1vbnRoXG4gICAgICAgIClcbiAgICAgICAgcHJvdG8ueWVhcnMgPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsXG4gICAgICAgICAgICBnZXRTZXRZZWFyXG4gICAgICAgIClcbiAgICAgICAgcHJvdG8uem9uZSA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsXG4gICAgICAgICAgICBnZXRTZXRab25lXG4gICAgICAgIClcbiAgICAgICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLFxuICAgICAgICAgICAgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkXG4gICAgICAgIClcbiAgICAgICAgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGVcbiAgICAgICAgcHJvdG8kMS5jYWxlbmRhciA9IGNhbGVuZGFyXG4gICAgICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgPSBsb25nRGF0ZUZvcm1hdFxuICAgICAgICBwcm90byQxLmludmFsaWREYXRlID0gaW52YWxpZERhdGVcbiAgICAgICAgcHJvdG8kMS5vcmRpbmFsID0gb3JkaW5hbFxuICAgICAgICBwcm90byQxLnByZXBhcnNlID0gcHJlUGFyc2VQb3N0Rm9ybWF0XG4gICAgICAgIHByb3RvJDEucG9zdGZvcm1hdCA9IHByZVBhcnNlUG9zdEZvcm1hdFxuICAgICAgICBwcm90byQxLnJlbGF0aXZlVGltZSA9IHJlbGF0aXZlVGltZVxuICAgICAgICBwcm90byQxLnBhc3RGdXR1cmUgPSBwYXN0RnV0dXJlXG4gICAgICAgIHByb3RvJDEuc2V0ID0gc2V0XG4gICAgICAgIHByb3RvJDEuZXJhcyA9IGxvY2FsZUVyYXNcbiAgICAgICAgcHJvdG8kMS5lcmFzUGFyc2UgPSBsb2NhbGVFcmFzUGFyc2VcbiAgICAgICAgcHJvdG8kMS5lcmFzQ29udmVydFllYXIgPSBsb2NhbGVFcmFzQ29udmVydFllYXJcbiAgICAgICAgcHJvdG8kMS5lcmFzQWJiclJlZ2V4ID0gZXJhc0FiYnJSZWdleFxuICAgICAgICBwcm90byQxLmVyYXNOYW1lUmVnZXggPSBlcmFzTmFtZVJlZ2V4XG4gICAgICAgIHByb3RvJDEuZXJhc05hcnJvd1JlZ2V4ID0gZXJhc05hcnJvd1JlZ2V4XG4gICAgICAgIHByb3RvJDEubW9udGhzID0gbG9jYWxlTW9udGhzXG4gICAgICAgIHByb3RvJDEubW9udGhzU2hvcnQgPSBsb2NhbGVNb250aHNTaG9ydFxuICAgICAgICBwcm90byQxLm1vbnRoc1BhcnNlID0gbG9jYWxlTW9udGhzUGFyc2VcbiAgICAgICAgcHJvdG8kMS5tb250aHNSZWdleCA9IG1vbnRoc1JlZ2V4XG4gICAgICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCA9IG1vbnRoc1Nob3J0UmVnZXhcbiAgICAgICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2Vla1xuICAgICAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXJcbiAgICAgICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrXG4gICAgICAgIHByb3RvJDEud2Vla2RheXMgPSBsb2NhbGVXZWVrZGF5c1xuICAgICAgICBwcm90byQxLndlZWtkYXlzTWluID0gbG9jYWxlV2Vla2RheXNNaW5cbiAgICAgICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ID0gbG9jYWxlV2Vla2RheXNTaG9ydFxuICAgICAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgPSBsb2NhbGVXZWVrZGF5c1BhcnNlXG4gICAgICAgIHByb3RvJDEud2Vla2RheXNSZWdleCA9IHdlZWtkYXlzUmVnZXhcbiAgICAgICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggPSB3ZWVrZGF5c1Nob3J0UmVnZXhcbiAgICAgICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ID0gd2Vla2RheXNNaW5SZWdleFxuICAgICAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNXG4gICAgICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbVxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICAgICAgZXJhczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc2luY2U6ICcwMDAxLTAxLTAxJyxcbiAgICAgICAgICAgICAgICAgICAgdW50aWw6IEluZmluaXR5LFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdBbm5vIERvbWluaScsXG4gICAgICAgICAgICAgICAgICAgIG5hcnJvdzogJ0FEJyxcbiAgICAgICAgICAgICAgICAgICAgYWJicjogJ0FEJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgICAgICAgICB1bnRpbDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdCZWZvcmUgQ2hyaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgbmFycm93OiAnQkMnLFxuICAgICAgICAgICAgICAgICAgICBhYmJyOiAnQkMnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0ludCgobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJ1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGVcbiAgICAgICAgKVxuICAgICAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJyxcbiAgICAgICAgICAgIGdldExvY2FsZVxuICAgICAgICApXG4gICAgICAgIG1hdGhBYnMgPSBNYXRoLmFic1xuICAgICAgICBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKVxuICAgICAgICBhc1NlY29uZHMgPSBtYWtlQXMoJ3MnKVxuICAgICAgICBhc01pbnV0ZXMgPSBtYWtlQXMoJ20nKVxuICAgICAgICBhc0hvdXJzID0gbWFrZUFzKCdoJylcbiAgICAgICAgYXNEYXlzID0gbWFrZUFzKCdkJylcbiAgICAgICAgYXNXZWVrcyA9IG1ha2VBcygndycpXG4gICAgICAgIGFzTW9udGhzID0gbWFrZUFzKCdNJylcbiAgICAgICAgYXNRdWFydGVycyA9IG1ha2VBcygnUScpXG4gICAgICAgIGFzWWVhcnMgPSBtYWtlQXMoJ3knKVxuICAgICAgICBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKVxuICAgICAgICBzZWNvbmRzID0gbWFrZUdldHRlcignc2Vjb25kcycpXG4gICAgICAgIG1pbnV0ZXMgPSBtYWtlR2V0dGVyKCdtaW51dGVzJylcbiAgICAgICAgaG91cnMgPSBtYWtlR2V0dGVyKCdob3VycycpXG4gICAgICAgIGRheXMgPSBtYWtlR2V0dGVyKCdkYXlzJylcbiAgICAgICAgbW9udGhzID0gbWFrZUdldHRlcignbW9udGhzJylcbiAgICAgICAgeWVhcnMgPSBtYWtlR2V0dGVyKCd5ZWFycycpXG4gICAgICAgIHJvdW5kID0gTWF0aC5yb3VuZFxuICAgICAgICB0aHJlc2hvbGRzID0ge1xuICAgICAgICAgICAgc3M6IDQ0LFxuICAgICAgICAgICAgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgICAgICBzOiA0NSxcbiAgICAgICAgICAgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgICAgICBtOiA0NSxcbiAgICAgICAgICAgIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICAgICAgaDogMjIsXG4gICAgICAgICAgICAvLyBob3VycyB0byBkYXlcbiAgICAgICAgICAgIGQ6IDI2LFxuICAgICAgICAgICAgLy8gZGF5cyB0byBtb250aC93ZWVrXG4gICAgICAgICAgICB3OiBudWxsLFxuICAgICAgICAgICAgLy8gd2Vla3MgdG8gbW9udGhcbiAgICAgICAgICAgIE06IDExXG4gICAgICAgICAgICAvLyBtb250aHMgdG8geWVhclxuICAgICAgICB9XG4gICAgICAgIGFicyQxID0gTWF0aC5hYnNcbiAgICAgICAgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZVxuICAgICAgICBwcm90byQyLmlzVmFsaWQgPSBpc1ZhbGlkJDFcbiAgICAgICAgcHJvdG8kMi5hYnMgPSBhYnNcbiAgICAgICAgcHJvdG8kMi5hZGQgPSBhZGQkMVxuICAgICAgICBwcm90byQyLnN1YnRyYWN0ID0gc3VidHJhY3QkMVxuICAgICAgICBwcm90byQyLmFzID0gYXNcbiAgICAgICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzXG4gICAgICAgIHByb3RvJDIuYXNTZWNvbmRzID0gYXNTZWNvbmRzXG4gICAgICAgIHByb3RvJDIuYXNNaW51dGVzID0gYXNNaW51dGVzXG4gICAgICAgIHByb3RvJDIuYXNIb3VycyA9IGFzSG91cnNcbiAgICAgICAgcHJvdG8kMi5hc0RheXMgPSBhc0RheXNcbiAgICAgICAgcHJvdG8kMi5hc1dlZWtzID0gYXNXZWVrc1xuICAgICAgICBwcm90byQyLmFzTW9udGhzID0gYXNNb250aHNcbiAgICAgICAgcHJvdG8kMi5hc1F1YXJ0ZXJzID0gYXNRdWFydGVyc1xuICAgICAgICBwcm90byQyLmFzWWVhcnMgPSBhc1llYXJzXG4gICAgICAgIHByb3RvJDIudmFsdWVPZiA9IHZhbHVlT2YkMVxuICAgICAgICBwcm90byQyLl9idWJibGUgPSBidWJibGVcbiAgICAgICAgcHJvdG8kMi5jbG9uZSA9IGNsb25lJDFcbiAgICAgICAgcHJvdG8kMi5nZXQgPSBnZXQkMlxuICAgICAgICBwcm90byQyLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kc1xuICAgICAgICBwcm90byQyLnNlY29uZHMgPSBzZWNvbmRzXG4gICAgICAgIHByb3RvJDIubWludXRlcyA9IG1pbnV0ZXNcbiAgICAgICAgcHJvdG8kMi5ob3VycyA9IGhvdXJzXG4gICAgICAgIHByb3RvJDIuZGF5cyA9IGRheXNcbiAgICAgICAgcHJvdG8kMi53ZWVrcyA9IHdlZWtzXG4gICAgICAgIHByb3RvJDIubW9udGhzID0gbW9udGhzXG4gICAgICAgIHByb3RvJDIueWVhcnMgPSB5ZWFyc1xuICAgICAgICBwcm90byQyLmh1bWFuaXplID0gaHVtYW5pemVcbiAgICAgICAgcHJvdG8kMi50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nJDFcbiAgICAgICAgcHJvdG8kMi50b1N0cmluZyA9IHRvSVNPU3RyaW5nJDFcbiAgICAgICAgcHJvdG8kMi50b0pTT04gPSB0b0lTT1N0cmluZyQxXG4gICAgICAgIHByb3RvJDIubG9jYWxlID0gbG9jYWxlXG4gICAgICAgIHByb3RvJDIubG9jYWxlRGF0YSA9IGxvY2FsZURhdGFcbiAgICAgICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsXG4gICAgICAgICAgICB0b0lTT1N0cmluZyQxXG4gICAgICAgIClcbiAgICAgICAgcHJvdG8kMi5sYW5nID0gbGFuZ1xuICAgICAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4JylcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpXG4gICAgICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZClcbiAgICAgICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKVxuICAgICAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0KSAqIDFlMylcbiAgICAgICAgfSlcbiAgICAgICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKVxuICAgICAgICB9KVxuICAgICAgICBob29rcy52ZXJzaW9uID0gJzIuMjkuNCdcbiAgICAgICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKVxuICAgICAgICBob29rcy5mbiA9IHByb3RvXG4gICAgICAgIGhvb2tzLm1pbiA9IG1pblxuICAgICAgICBob29rcy5tYXggPSBtYXhcbiAgICAgICAgaG9va3Mubm93ID0gbm93XG4gICAgICAgIGhvb2tzLnV0YyA9IGNyZWF0ZVVUQ1xuICAgICAgICBob29rcy51bml4ID0gY3JlYXRlVW5peFxuICAgICAgICBob29rcy5tb250aHMgPSBsaXN0TW9udGhzXG4gICAgICAgIGhvb2tzLmlzRGF0ZSA9IGlzRGF0ZVxuICAgICAgICBob29rcy5sb2NhbGUgPSBnZXRTZXRHbG9iYWxMb2NhbGVcbiAgICAgICAgaG9va3MuaW52YWxpZCA9IGNyZWF0ZUludmFsaWRcbiAgICAgICAgaG9va3MuZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvblxuICAgICAgICBob29rcy5pc01vbWVudCA9IGlzTW9tZW50XG4gICAgICAgIGhvb2tzLndlZWtkYXlzID0gbGlzdFdlZWtkYXlzXG4gICAgICAgIGhvb2tzLnBhcnNlWm9uZSA9IGNyZWF0ZUluWm9uZVxuICAgICAgICBob29rcy5sb2NhbGVEYXRhID0gZ2V0TG9jYWxlXG4gICAgICAgIGhvb2tzLmlzRHVyYXRpb24gPSBpc0R1cmF0aW9uXG4gICAgICAgIGhvb2tzLm1vbnRoc1Nob3J0ID0gbGlzdE1vbnRoc1Nob3J0XG4gICAgICAgIGhvb2tzLndlZWtkYXlzTWluID0gbGlzdFdlZWtkYXlzTWluXG4gICAgICAgIGhvb2tzLmRlZmluZUxvY2FsZSA9IGRlZmluZUxvY2FsZVxuICAgICAgICBob29rcy51cGRhdGVMb2NhbGUgPSB1cGRhdGVMb2NhbGVcbiAgICAgICAgaG9va3MubG9jYWxlcyA9IGxpc3RMb2NhbGVzXG4gICAgICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgPSBsaXN0V2Vla2RheXNTaG9ydFxuICAgICAgICBob29rcy5ub3JtYWxpemVVbml0cyA9IG5vcm1hbGl6ZVVuaXRzXG4gICAgICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmdcbiAgICAgICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkXG4gICAgICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ID0gZ2V0Q2FsZW5kYXJGb3JtYXRcbiAgICAgICAgaG9va3MucHJvdG90eXBlID0gcHJvdG9cbiAgICAgICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJyxcbiAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLFxuICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLFxuICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICAgICAgVElNRTogJ0hIOm1tJyxcbiAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJyxcbiAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsXG4gICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICAgICAgTU9OVEg6ICdZWVlZLU1NJ1xuICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWlyZV9tb21lbnQgPSBob29rc1xuICAgIH1cbn0pXG5cbnZhciBtb21lbnRfZXhwb3J0cyA9IHt9XG5fX2V4cG9ydChtb21lbnRfZXhwb3J0cywge1xuICAgIGRlZmF1bHQ6ICgpID0+IG1vbWVudF9leHBvcnRzXG59KVxuXG52YXIgcmVxdWlyZV9tb21lbnRfaGlqcmkgPSBfX2NvbW1vbkpTKHtcbiAgICAnLicoZXhwb3J0cywgbW9kdWxlMikge1xuICAgICAgICA7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lKFsnbW9tZW50J10sIGZ1bmN0aW9uIChtb21lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5tb21lbnQgPSBmYWN0b3J5KG1vbWVudClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvb3QubW9tZW50XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgbW9kdWxlMi5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgICAgICAgICAgICAgKHJlcXVpcmVfbW9tZW50KCksIF9fdG9Db21tb25KUyhtb21lbnRfZXhwb3J0cykpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByb290Lm1vbWVudCA9IGZhY3Rvcnkocm9vdC5tb21lbnQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKGV4cG9ydHMsIGZ1bmN0aW9uIChtb21lbnQpIHtcbiAgICAgICAgICAgIGlmIChtb21lbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgbW9tZW50JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtb21lbnQgPSByZXF1aXJlX21vbWVudChtb21lbnQpXG4gICAgICAgICAgICB2YXIgdW1tYWxxdXJhID0ge1xuICAgICAgICAgICAgICAgIHVtbWFscXVyYURhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAgMjg2MDcsIDI4NjM2LCAyODY2NSwgMjg2OTUsIDI4NzI0LCAyODc1NCwgMjg3ODMsIDI4ODEzLFxuICAgICAgICAgICAgICAgICAgICAyODg0MywgMjg4NzIsIDI4OTAxLCAyODkzMSwgMjg5NjAsIDI4OTkwLCAyOTAxOSwgMjkwNDksXG4gICAgICAgICAgICAgICAgICAgIDI5MDc4LCAyOTEwOCwgMjkxMzcsIDI5MTY3LCAyOTE5NiwgMjkyMjYsIDI5MjU1LCAyOTI4NSxcbiAgICAgICAgICAgICAgICAgICAgMjkzMTUsIDI5MzQ1LCAyOTM3NSwgMjk0MDQsIDI5NDM0LCAyOTQ2MywgMjk0OTIsIDI5NTIyLFxuICAgICAgICAgICAgICAgICAgICAyOTU1MSwgMjk1ODAsIDI5NjEwLCAyOTY0MCwgMjk2NjksIDI5Njk5LCAyOTcyOSwgMjk3NTksXG4gICAgICAgICAgICAgICAgICAgIDI5Nzg4LCAyOTgxOCwgMjk4NDcsIDI5ODc2LCAyOTkwNiwgMjk5MzUsIDI5OTY0LCAyOTk5NCxcbiAgICAgICAgICAgICAgICAgICAgMzAwMjMsIDMwMDUzLCAzMDA4MiwgMzAxMTIsIDMwMTQxLCAzMDE3MSwgMzAyMDAsIDMwMjMwLFxuICAgICAgICAgICAgICAgICAgICAzMDI1OSwgMzAyODksIDMwMzE4LCAzMDM0OCwgMzAzNzgsIDMwNDA4LCAzMDQzNywgMzA0NjcsXG4gICAgICAgICAgICAgICAgICAgIDMwNDk2LCAzMDUyNiwgMzA1NTUsIDMwNTg1LCAzMDYxNCwgMzA2NDQsIDMwNjczLCAzMDcwMyxcbiAgICAgICAgICAgICAgICAgICAgMzA3MzIsIDMwNzYyLCAzMDc5MSwgMzA4MjEsIDMwODUwLCAzMDg4MCwgMzA5MDksIDMwOTM5LFxuICAgICAgICAgICAgICAgICAgICAzMDk2OCwgMzA5OTgsIDMxMDI3LCAzMTA1NywgMzEwODYsIDMxMTE2LCAzMTE0NSwgMzExNzUsXG4gICAgICAgICAgICAgICAgICAgIDMxMjA0LCAzMTIzNCwgMzEyNjMsIDMxMjkzLCAzMTMyMiwgMzEzNTIsIDMxMzgxLCAzMTQxMSxcbiAgICAgICAgICAgICAgICAgICAgMzE0NDEsIDMxNDcxLCAzMTUwMCwgMzE1MzAsIDMxNTU5LCAzMTU4OSwgMzE2MTgsIDMxNjQ4LFxuICAgICAgICAgICAgICAgICAgICAzMTY3NiwgMzE3MDYsIDMxNzM2LCAzMTc2NiwgMzE3OTUsIDMxODI1LCAzMTg1NCwgMzE4ODQsXG4gICAgICAgICAgICAgICAgICAgIDMxOTEzLCAzMTk0MywgMzE5NzIsIDMyMDAyLCAzMjAzMSwgMzIwNjEsIDMyMDkwLCAzMjEyMCxcbiAgICAgICAgICAgICAgICAgICAgMzIxNTAsIDMyMTgwLCAzMjIwOSwgMzIyMzksIDMyMjY4LCAzMjI5OCwgMzIzMjcsIDMyMzU3LFxuICAgICAgICAgICAgICAgICAgICAzMjM4NiwgMzI0MTYsIDMyNDQ1LCAzMjQ3NSwgMzI1MDQsIDMyNTM0LCAzMjU2MywgMzI1OTMsXG4gICAgICAgICAgICAgICAgICAgIDMyNjIyLCAzMjY1MiwgMzI2ODEsIDMyNzExLCAzMjc0MCwgMzI3NzAsIDMyNzk5LCAzMjgyOSxcbiAgICAgICAgICAgICAgICAgICAgMzI4NTgsIDMyODg4LCAzMjkxNywgMzI5NDcsIDMyOTc2LCAzMzAwNiwgMzMwMzUsIDMzMDY1LFxuICAgICAgICAgICAgICAgICAgICAzMzA5NCwgMzMxMjQsIDMzMTUzLCAzMzE4MywgMzMyMTMsIDMzMjQzLCAzMzI3MiwgMzMzMDIsXG4gICAgICAgICAgICAgICAgICAgIDMzMzMxLCAzMzM2MSwgMzMzOTAsIDMzNDIwLCAzMzQ1MCwgMzM0NzksIDMzNTA5LCAzMzUzOSxcbiAgICAgICAgICAgICAgICAgICAgMzM1NjgsIDMzNTk4LCAzMzYyNywgMzM2NTcsIDMzNjg2LCAzMzcxNiwgMzM3NDUsIDMzNzc1LFxuICAgICAgICAgICAgICAgICAgICAzMzgwNCwgMzM4MzQsIDMzODYzLCAzMzg5MywgMzM5MjIsIDMzOTUyLCAzMzk4MSwgMzQwMTEsXG4gICAgICAgICAgICAgICAgICAgIDM0MDQwLCAzNDA2OSwgMzQwOTksIDM0MTI4LCAzNDE1OCwgMzQxODcsIDM0MjE3LCAzNDI0NyxcbiAgICAgICAgICAgICAgICAgICAgMzQyNzcsIDM0MzA2LCAzNDMzNiwgMzQzNjUsIDM0Mzk1LCAzNDQyNCwgMzQ0NTQsIDM0NDgzLFxuICAgICAgICAgICAgICAgICAgICAzNDUxMiwgMzQ1NDIsIDM0NTcxLCAzNDYwMSwgMzQ2MzEsIDM0NjYwLCAzNDY5MCwgMzQ3MTksXG4gICAgICAgICAgICAgICAgICAgIDM0NzQ5LCAzNDc3OCwgMzQ4MDgsIDM0ODM3LCAzNDg2NywgMzQ4OTYsIDM0OTI2LCAzNDk1NSxcbiAgICAgICAgICAgICAgICAgICAgMzQ5ODUsIDM1MDE1LCAzNTA0NCwgMzUwNzQsIDM1MTAzLCAzNTEzMywgMzUxNjIsIDM1MTkyLFxuICAgICAgICAgICAgICAgICAgICAzNTIyMiwgMzUyNTEsIDM1MjgwLCAzNTMxMCwgMzUzNDAsIDM1MzcwLCAzNTM5OSwgMzU0MjksXG4gICAgICAgICAgICAgICAgICAgIDM1NDU4LCAzNTQ4OCwgMzU1MTcsIDM1NTQ3LCAzNTU3NiwgMzU2MDUsIDM1NjM1LCAzNTY2NSxcbiAgICAgICAgICAgICAgICAgICAgMzU2OTQsIDM1NzIzLCAzNTc1MywgMzU3ODIsIDM1ODExLCAzNTg0MSwgMzU4NzEsIDM1OTAxLFxuICAgICAgICAgICAgICAgICAgICAzNTkzMCwgMzU5NjAsIDM1OTg5LCAzNjAxOSwgMzYwNDgsIDM2MDc4LCAzNjEwNywgMzYxMzYsXG4gICAgICAgICAgICAgICAgICAgIDM2MTY2LCAzNjE5NSwgMzYyMjUsIDM2MjU0LCAzNjI4NCwgMzYzMTQsIDM2MzQzLCAzNjM3MyxcbiAgICAgICAgICAgICAgICAgICAgMzY0MDMsIDM2NDMzLCAzNjQ2MiwgMzY0OTIsIDM2NTIxLCAzNjU1MSwgMzY1ODAsIDM2NjEwLFxuICAgICAgICAgICAgICAgICAgICAzNjYzOSwgMzY2NjksIDM2Njk4LCAzNjcyOCwgMzY3NTcsIDM2Nzg2LCAzNjgxNiwgMzY4NDUsXG4gICAgICAgICAgICAgICAgICAgIDM2ODc1LCAzNjkwNCwgMzY5MzQsIDM2OTYzLCAzNjk5MywgMzcwMjIsIDM3MDUyLCAzNzA4MSxcbiAgICAgICAgICAgICAgICAgICAgMzcxMTEsIDM3MTQxLCAzNzE3MCwgMzcyMDAsIDM3MjI5LCAzNzI1OSwgMzcyODgsIDM3MzE4LFxuICAgICAgICAgICAgICAgICAgICAzNzM0NywgMzczNzcsIDM3NDA2LCAzNzQzNiwgMzc0NjUsIDM3NDk1LCAzNzUyNCwgMzc1NTQsXG4gICAgICAgICAgICAgICAgICAgIDM3NTg0LCAzNzYxMywgMzc2NDMsIDM3NjcyLCAzNzcwMSwgMzc3MzEsIDM3NzYwLCAzNzc5MCxcbiAgICAgICAgICAgICAgICAgICAgMzc4MTksIDM3ODQ5LCAzNzg3OCwgMzc5MDgsIDM3OTM4LCAzNzk2NywgMzc5OTcsIDM4MDI3LFxuICAgICAgICAgICAgICAgICAgICAzODA1NiwgMzgwODUsIDM4MTE1LCAzODE0NCwgMzgxNzQsIDM4MjAzLCAzODIzMywgMzgyNjIsXG4gICAgICAgICAgICAgICAgICAgIDM4MjkyLCAzODMyMiwgMzgzNTEsIDM4MzgxLCAzODQxMCwgMzg0NDAsIDM4NDY5LCAzODQ5OSxcbiAgICAgICAgICAgICAgICAgICAgMzg1MjgsIDM4NTU4LCAzODU4NywgMzg2MTcsIDM4NjQ2LCAzODY3NiwgMzg3MDUsIDM4NzM1LFxuICAgICAgICAgICAgICAgICAgICAzODc2NCwgMzg3OTQsIDM4ODIzLCAzODg1MywgMzg4ODIsIDM4OTEyLCAzODk0MSwgMzg5NzEsXG4gICAgICAgICAgICAgICAgICAgIDM5MDAxLCAzOTAzMCwgMzkwNTksIDM5MDg5LCAzOTExOCwgMzkxNDgsIDM5MTc4LCAzOTIwOCxcbiAgICAgICAgICAgICAgICAgICAgMzkyMzcsIDM5MjY3LCAzOTI5NywgMzkzMjYsIDM5MzU1LCAzOTM4NSwgMzk0MTQsIDM5NDQ0LFxuICAgICAgICAgICAgICAgICAgICAzOTQ3MywgMzk1MDMsIDM5NTMyLCAzOTU2MiwgMzk1OTIsIDM5NjIxLCAzOTY1MCwgMzk2ODAsXG4gICAgICAgICAgICAgICAgICAgIDM5NzA5LCAzOTczOSwgMzk3NjgsIDM5Nzk4LCAzOTgyNywgMzk4NTcsIDM5ODg2LCAzOTkxNixcbiAgICAgICAgICAgICAgICAgICAgMzk5NDYsIDM5OTc1LCA0MDAwNSwgNDAwMzUsIDQwMDY0LCA0MDA5NCwgNDAxMjMsIDQwMTUzLFxuICAgICAgICAgICAgICAgICAgICA0MDE4MiwgNDAyMTIsIDQwMjQxLCA0MDI3MSwgNDAzMDAsIDQwMzMwLCA0MDM1OSwgNDAzODksXG4gICAgICAgICAgICAgICAgICAgIDQwNDE4LCA0MDQ0OCwgNDA0NzcsIDQwNTA3LCA0MDUzNiwgNDA1NjYsIDQwNTk1LCA0MDYyNSxcbiAgICAgICAgICAgICAgICAgICAgNDA2NTUsIDQwNjg1LCA0MDcxNCwgNDA3NDQsIDQwNzczLCA0MDgwMywgNDA4MzIsIDQwODYyLFxuICAgICAgICAgICAgICAgICAgICA0MDg5MiwgNDA5MjEsIDQwOTUxLCA0MDk4MCwgNDEwMDksIDQxMDM5LCA0MTA2OCwgNDEwOTgsXG4gICAgICAgICAgICAgICAgICAgIDQxMTI3LCA0MTE1NywgNDExODYsIDQxMjE2LCA0MTI0NSwgNDEyNzUsIDQxMzA0LCA0MTMzNCxcbiAgICAgICAgICAgICAgICAgICAgNDEzNjQsIDQxMzkzLCA0MTQyMiwgNDE0NTIsIDQxNDgxLCA0MTUxMSwgNDE1NDAsIDQxNTcwLFxuICAgICAgICAgICAgICAgICAgICA0MTU5OSwgNDE2MjksIDQxNjU4LCA0MTY4OCwgNDE3MTgsIDQxNzQ4LCA0MTc3NywgNDE4MDcsXG4gICAgICAgICAgICAgICAgICAgIDQxODM2LCA0MTg2NSwgNDE4OTQsIDQxOTI0LCA0MTk1MywgNDE5ODMsIDQyMDEyLCA0MjA0MixcbiAgICAgICAgICAgICAgICAgICAgNDIwNzIsIDQyMTAyLCA0MjEzMSwgNDIxNjEsIDQyMTkwLCA0MjIyMCwgNDIyNDksIDQyMjc5LFxuICAgICAgICAgICAgICAgICAgICA0MjMwOCwgNDIzMzcsIDQyMzY3LCA0MjM5NywgNDI0MjYsIDQyNDU2LCA0MjQ4NSwgNDI1MTUsXG4gICAgICAgICAgICAgICAgICAgIDQyNTQ1LCA0MjU3NCwgNDI2MDQsIDQyNjMzLCA0MjY2MiwgNDI2OTIsIDQyNzIxLCA0Mjc1MSxcbiAgICAgICAgICAgICAgICAgICAgNDI3ODAsIDQyODEwLCA0MjgzOSwgNDI4NjksIDQyODk5LCA0MjkyOSwgNDI5NTgsIDQyOTg4LFxuICAgICAgICAgICAgICAgICAgICA0MzAxNywgNDMwNDYsIDQzMDc2LCA0MzEwNSwgNDMxMzUsIDQzMTY0LCA0MzE5NCwgNDMyMjMsXG4gICAgICAgICAgICAgICAgICAgIDQzMjUzLCA0MzI4MywgNDMzMTIsIDQzMzQyLCA0MzM3MSwgNDM0MDEsIDQzNDMwLCA0MzQ2MCxcbiAgICAgICAgICAgICAgICAgICAgNDM0ODksIDQzNTE5LCA0MzU0OCwgNDM1NzgsIDQzNjA3LCA0MzYzNywgNDM2NjYsIDQzNjk2LFxuICAgICAgICAgICAgICAgICAgICA0MzcyNiwgNDM3NTUsIDQzNzg1LCA0MzgxNCwgNDM4NDQsIDQzODczLCA0MzkwMywgNDM5MzIsXG4gICAgICAgICAgICAgICAgICAgIDQzOTYyLCA0Mzk5MSwgNDQwMjEsIDQ0MDUwLCA0NDA4MCwgNDQxMDksIDQ0MTM5LCA0NDE2OSxcbiAgICAgICAgICAgICAgICAgICAgNDQxOTgsIDQ0MjI4LCA0NDI1OCwgNDQyODcsIDQ0MzE3LCA0NDM0NiwgNDQzNzUsIDQ0NDA1LFxuICAgICAgICAgICAgICAgICAgICA0NDQzNCwgNDQ0NjQsIDQ0NDkzLCA0NDUyMywgNDQ1NTMsIDQ0NTgyLCA0NDYxMiwgNDQ2NDEsXG4gICAgICAgICAgICAgICAgICAgIDQ0NjcxLCA0NDcwMCwgNDQ3MzAsIDQ0NzU5LCA0NDc4OCwgNDQ4MTgsIDQ0ODQ3LCA0NDg3NyxcbiAgICAgICAgICAgICAgICAgICAgNDQ5MDYsIDQ0OTM2LCA0NDk2NiwgNDQ5OTYsIDQ1MDI1LCA0NTA1NSwgNDUwODQsIDQ1MTE0LFxuICAgICAgICAgICAgICAgICAgICA0NTE0MywgNDUxNzIsIDQ1MjAyLCA0NTIzMSwgNDUyNjEsIDQ1MjkwLCA0NTMyMCwgNDUzNTAsXG4gICAgICAgICAgICAgICAgICAgIDQ1MzgwLCA0NTQwOSwgNDU0MzksIDQ1NDY4LCA0NTQ5OCwgNDU1MjcsIDQ1NTU2LCA0NTU4NixcbiAgICAgICAgICAgICAgICAgICAgNDU2MTUsIDQ1NjQ0LCA0NTY3NCwgNDU3MDQsIDQ1NzMzLCA0NTc2MywgNDU3OTMsIDQ1ODIzLFxuICAgICAgICAgICAgICAgICAgICA0NTg1MiwgNDU4ODIsIDQ1OTExLCA0NTk0MCwgNDU5NzAsIDQ1OTk5LCA0NjAyOCwgNDYwNTgsXG4gICAgICAgICAgICAgICAgICAgIDQ2MDg4LCA0NjExNywgNDYxNDcsIDQ2MTc3LCA0NjIwNiwgNDYyMzYsIDQ2MjY1LCA0NjI5NSxcbiAgICAgICAgICAgICAgICAgICAgNDYzMjQsIDQ2MzU0LCA0NjM4MywgNDY0MTMsIDQ2NDQyLCA0NjQ3MiwgNDY1MDEsIDQ2NTMxLFxuICAgICAgICAgICAgICAgICAgICA0NjU2MCwgNDY1OTAsIDQ2NjIwLCA0NjY0OSwgNDY2NzksIDQ2NzA4LCA0NjczOCwgNDY3NjcsXG4gICAgICAgICAgICAgICAgICAgIDQ2Nzk3LCA0NjgyNiwgNDY4NTYsIDQ2ODg1LCA0NjkxNSwgNDY5NDQsIDQ2OTc0LCA0NzAwMyxcbiAgICAgICAgICAgICAgICAgICAgNDcwMzMsIDQ3MDYzLCA0NzA5MiwgNDcxMjIsIDQ3MTUxLCA0NzE4MSwgNDcyMTAsIDQ3MjQwLFxuICAgICAgICAgICAgICAgICAgICA0NzI2OSwgNDcyOTgsIDQ3MzI4LCA0NzM1NywgNDczODcsIDQ3NDE3LCA0NzQ0NiwgNDc0NzYsXG4gICAgICAgICAgICAgICAgICAgIDQ3NTA2LCA0NzUzNSwgNDc1NjUsIDQ3NTk0LCA0NzYyNCwgNDc2NTMsIDQ3NjgyLCA0NzcxMixcbiAgICAgICAgICAgICAgICAgICAgNDc3NDEsIDQ3NzcxLCA0NzgwMCwgNDc4MzAsIDQ3ODYwLCA0Nzg5MCwgNDc5MTksIDQ3OTQ5LFxuICAgICAgICAgICAgICAgICAgICA0Nzk3OCwgNDgwMDgsIDQ4MDM3LCA0ODA2NiwgNDgwOTYsIDQ4MTI1LCA0ODE1NSwgNDgxODQsXG4gICAgICAgICAgICAgICAgICAgIDQ4MjE0LCA0ODI0NCwgNDgyNzMsIDQ4MzAzLCA0ODMzMywgNDgzNjIsIDQ4MzkyLCA0ODQyMSxcbiAgICAgICAgICAgICAgICAgICAgNDg0NTAsIDQ4NDgwLCA0ODUwOSwgNDg1MzgsIDQ4NTY4LCA0ODU5OCwgNDg2MjcsIDQ4NjU3LFxuICAgICAgICAgICAgICAgICAgICA0ODY4NywgNDg3MTcsIDQ4NzQ2LCA0ODc3NiwgNDg4MDUsIDQ4ODM0LCA0ODg2NCwgNDg4OTMsXG4gICAgICAgICAgICAgICAgICAgIDQ4OTIyLCA0ODk1MiwgNDg5ODIsIDQ5MDExLCA0OTA0MSwgNDkwNzEsIDQ5MTAwLCA0OTEzMCxcbiAgICAgICAgICAgICAgICAgICAgNDkxNjAsIDQ5MTg5LCA0OTIxOCwgNDkyNDgsIDQ5Mjc3LCA0OTMwNiwgNDkzMzYsIDQ5MzY1LFxuICAgICAgICAgICAgICAgICAgICA0OTM5NSwgNDk0MjUsIDQ5NDU1LCA0OTQ4NCwgNDk1MTQsIDQ5NTQzLCA0OTU3MywgNDk2MDIsXG4gICAgICAgICAgICAgICAgICAgIDQ5NjMyLCA0OTY2MSwgNDk2OTAsIDQ5NzIwLCA0OTc0OSwgNDk3NzksIDQ5ODA5LCA0OTgzOCxcbiAgICAgICAgICAgICAgICAgICAgNDk4NjgsIDQ5ODk4LCA0OTkyNywgNDk5NTcsIDQ5OTg2LCA1MDAxNiwgNTAwNDUsIDUwMDc1LFxuICAgICAgICAgICAgICAgICAgICA1MDEwNCwgNTAxMzMsIDUwMTYzLCA1MDE5MiwgNTAyMjIsIDUwMjUyLCA1MDI4MSwgNTAzMTEsXG4gICAgICAgICAgICAgICAgICAgIDUwMzQwLCA1MDM3MCwgNTA0MDAsIDUwNDI5LCA1MDQ1OSwgNTA0ODgsIDUwNTE4LCA1MDU0NyxcbiAgICAgICAgICAgICAgICAgICAgNTA1NzYsIDUwNjA2LCA1MDYzNSwgNTA2NjUsIDUwNjk0LCA1MDcyNCwgNTA3NTQsIDUwNzg0LFxuICAgICAgICAgICAgICAgICAgICA1MDgxMywgNTA4NDMsIDUwODcyLCA1MDkwMiwgNTA5MzEsIDUwOTYwLCA1MDk5MCwgNTEwMTksXG4gICAgICAgICAgICAgICAgICAgIDUxMDQ5LCA1MTA3OCwgNTExMDgsIDUxMTM4LCA1MTE2NywgNTExOTcsIDUxMjI3LCA1MTI1NixcbiAgICAgICAgICAgICAgICAgICAgNTEyODYsIDUxMzE1LCA1MTM0NSwgNTEzNzQsIDUxNDAzLCA1MTQzMywgNTE0NjIsIDUxNDkyLFxuICAgICAgICAgICAgICAgICAgICA1MTUyMiwgNTE1NTIsIDUxNTgyLCA1MTYxMSwgNTE2NDEsIDUxNjcwLCA1MTY5OSwgNTE3MjksXG4gICAgICAgICAgICAgICAgICAgIDUxNzU4LCA1MTc4NywgNTE4MTYsIDUxODQ2LCA1MTg3NiwgNTE5MDYsIDUxOTM2LCA1MTk2NSxcbiAgICAgICAgICAgICAgICAgICAgNTE5OTUsIDUyMDI1LCA1MjA1NCwgNTIwODMsIDUyMTEzLCA1MjE0MiwgNTIxNzEsIDUyMjAwLFxuICAgICAgICAgICAgICAgICAgICA1MjIzMCwgNTIyNjAsIDUyMjkwLCA1MjMxOSwgNTIzNDksIDUyMzc5LCA1MjQwOCwgNTI0MzgsXG4gICAgICAgICAgICAgICAgICAgIDUyNDY3LCA1MjQ5NywgNTI1MjYsIDUyNTU1LCA1MjU4NSwgNTI2MTQsIDUyNjQ0LCA1MjY3MyxcbiAgICAgICAgICAgICAgICAgICAgNTI3MDMsIDUyNzMzLCA1Mjc2MiwgNTI3OTIsIDUyODIyLCA1Mjg1MSwgNTI4ODEsIDUyOTEwLFxuICAgICAgICAgICAgICAgICAgICA1MjkzOSwgNTI5NjksIDUyOTk4LCA1MzAyOCwgNTMwNTcsIDUzMDg3LCA1MzExNiwgNTMxNDYsXG4gICAgICAgICAgICAgICAgICAgIDUzMTc2LCA1MzIwNSwgNTMyMzUsIDUzMjY0LCA1MzI5NCwgNTMzMjQsIDUzMzUzLCA1MzM4MyxcbiAgICAgICAgICAgICAgICAgICAgNTM0MTIsIDUzNDQxLCA1MzQ3MSwgNTM1MDAsIDUzNTMwLCA1MzU1OSwgNTM1ODksIDUzNjE5LFxuICAgICAgICAgICAgICAgICAgICA1MzY0OCwgNTM2NzgsIDUzNzA4LCA1MzczNywgNTM3NjcsIDUzNzk2LCA1MzgyNSwgNTM4NTUsXG4gICAgICAgICAgICAgICAgICAgIDUzODg0LCA1MzkxMywgNTM5NDMsIDUzOTczLCA1NDAwMywgNTQwMzIsIDU0MDYyLCA1NDA5MixcbiAgICAgICAgICAgICAgICAgICAgNTQxMjEsIDU0MTUxLCA1NDE4MCwgNTQyMDksIDU0MjM5LCA1NDI2OCwgNTQyOTcsIDU0MzI3LFxuICAgICAgICAgICAgICAgICAgICA1NDM1NywgNTQzODcsIDU0NDE2LCA1NDQ0NiwgNTQ0NzYsIDU0NTA1LCA1NDUzNSwgNTQ1NjQsXG4gICAgICAgICAgICAgICAgICAgIDU0NTkzLCA1NDYyMywgNTQ2NTIsIDU0NjgxLCA1NDcxMSwgNTQ3NDEsIDU0NzcwLCA1NDgwMCxcbiAgICAgICAgICAgICAgICAgICAgNTQ4MzAsIDU0ODU5LCA1NDg4OSwgNTQ5MTksIDU0OTQ4LCA1NDk3NywgNTUwMDcsIDU1MDM2LFxuICAgICAgICAgICAgICAgICAgICA1NTA2NiwgNTUwOTUsIDU1MTI1LCA1NTE1NCwgNTUxODQsIDU1MjEzLCA1NTI0MywgNTUyNzMsXG4gICAgICAgICAgICAgICAgICAgIDU1MzAyLCA1NTMzMiwgNTUzNjEsIDU1MzkxLCA1NTQyMCwgNTU0NTAsIDU1NDc5LCA1NTUwOCxcbiAgICAgICAgICAgICAgICAgICAgNTU1MzgsIDU1NTY3LCA1NTU5NywgNTU2MjcsIDU1NjU3LCA1NTY4NiwgNTU3MTYsIDU1NzQ1LFxuICAgICAgICAgICAgICAgICAgICA1NTc3NSwgNTU4MDQsIDU1ODM0LCA1NTg2MywgNTU4OTIsIDU1OTIyLCA1NTk1MSwgNTU5ODEsXG4gICAgICAgICAgICAgICAgICAgIDU2MDExLCA1NjA0MCwgNTYwNzAsIDU2MTAwLCA1NjEyOSwgNTYxNTksIDU2MTg4LCA1NjIxOCxcbiAgICAgICAgICAgICAgICAgICAgNTYyNDcsIDU2Mjc2LCA1NjMwNiwgNTYzMzUsIDU2MzY1LCA1NjM5NCwgNTY0MjQsIDU2NDU0LFxuICAgICAgICAgICAgICAgICAgICA1NjQ4MywgNTY1MTMsIDU2NTQzLCA1NjU3MiwgNTY2MDEsIDU2NjMxLCA1NjY2MCwgNTY2OTAsXG4gICAgICAgICAgICAgICAgICAgIDU2NzE5LCA1Njc0OSwgNTY3NzgsIDU2ODA4LCA1NjgzNywgNTY4NjcsIDU2ODk3LCA1NjkyNixcbiAgICAgICAgICAgICAgICAgICAgNTY5NTYsIDU2OTg1LCA1NzAxNSwgNTcwNDQsIDU3MDc0LCA1NzEwMywgNTcxMzMsIDU3MTYyLFxuICAgICAgICAgICAgICAgICAgICA1NzE5MiwgNTcyMjEsIDU3MjUxLCA1NzI4MCwgNTczMTAsIDU3MzQwLCA1NzM2OSwgNTczOTksXG4gICAgICAgICAgICAgICAgICAgIDU3NDI5LCA1NzQ1OCwgNTc0ODcsIDU3NTE3LCA1NzU0NiwgNTc1NzYsIDU3NjA1LCA1NzYzNCxcbiAgICAgICAgICAgICAgICAgICAgNTc2NjQsIDU3Njk0LCA1NzcyMywgNTc3NTMsIDU3NzgzLCA1NzgxMywgNTc4NDIsIDU3ODcxLFxuICAgICAgICAgICAgICAgICAgICA1NzkwMSwgNTc5MzAsIDU3OTU5LCA1Nzk4OSwgNTgwMTgsIDU4MDQ4LCA1ODA3NywgNTgxMDcsXG4gICAgICAgICAgICAgICAgICAgIDU4MTM3LCA1ODE2NywgNTgxOTYsIDU4MjI2LCA1ODI1NSwgNTgyODUsIDU4MzE0LCA1ODM0MyxcbiAgICAgICAgICAgICAgICAgICAgNTgzNzMsIDU4NDAyLCA1ODQzMiwgNTg0NjEsIDU4NDkxLCA1ODUyMSwgNTg1NTEsIDU4NTgwLFxuICAgICAgICAgICAgICAgICAgICA1ODYxMCwgNTg2MzksIDU4NjY5LCA1ODY5OCwgNTg3MjcsIDU4NzU3LCA1ODc4NiwgNTg4MTYsXG4gICAgICAgICAgICAgICAgICAgIDU4ODQ1LCA1ODg3NSwgNTg5MDUsIDU4OTM0LCA1ODk2NCwgNTg5OTQsIDU5MDIzLCA1OTA1MyxcbiAgICAgICAgICAgICAgICAgICAgNTkwODIsIDU5MTExLCA1OTE0MSwgNTkxNzAsIDU5MjAwLCA1OTIyOSwgNTkyNTksIDU5Mjg4LFxuICAgICAgICAgICAgICAgICAgICA1OTMxOCwgNTkzNDgsIDU5Mzc3LCA1OTQwNywgNTk0MzYsIDU5NDY2LCA1OTQ5NSwgNTk1MjUsXG4gICAgICAgICAgICAgICAgICAgIDU5NTU0LCA1OTU4NCwgNTk2MTMsIDU5NjQzLCA1OTY3MiwgNTk3MDIsIDU5NzMxLCA1OTc2MSxcbiAgICAgICAgICAgICAgICAgICAgNTk3OTEsIDU5ODIwLCA1OTg1MCwgNTk4NzksIDU5OTA5LCA1OTkzOSwgNTk5NjgsIDU5OTk3LFxuICAgICAgICAgICAgICAgICAgICA2MDAyNywgNjAwNTYsIDYwMDg2LCA2MDExNSwgNjAxNDUsIDYwMTc0LCA2MDIwNCwgNjAyMzQsXG4gICAgICAgICAgICAgICAgICAgIDYwMjY0LCA2MDI5MywgNjAzMjMsIDYwMzUyLCA2MDM4MSwgNjA0MTEsIDYwNDQwLCA2MDQ2OSxcbiAgICAgICAgICAgICAgICAgICAgNjA0OTksIDYwNTI4LCA2MDU1OCwgNjA1ODgsIDYwNjE4LCA2MDY0OCwgNjA2NzcsIDYwNzA3LFxuICAgICAgICAgICAgICAgICAgICA2MDczNiwgNjA3NjUsIDYwNzk1LCA2MDgyNCwgNjA4NTMsIDYwODgzLCA2MDkxMiwgNjA5NDIsXG4gICAgICAgICAgICAgICAgICAgIDYwOTcyLCA2MTAwMiwgNjEwMzEsIDYxMDYxLCA2MTA5MCwgNjExMjAsIDYxMTQ5LCA2MTE3OSxcbiAgICAgICAgICAgICAgICAgICAgNjEyMDgsIDYxMjM3LCA2MTI2NywgNjEyOTYsIDYxMzI2LCA2MTM1NiwgNjEzODUsIDYxNDE1LFxuICAgICAgICAgICAgICAgICAgICA2MTQ0NSwgNjE0NzQsIDYxNTA0LCA2MTUzMywgNjE1NjMsIDYxNTkyLCA2MTYyMSwgNjE2NTEsXG4gICAgICAgICAgICAgICAgICAgIDYxNjgwLCA2MTcxMCwgNjE3MzksIDYxNzY5LCA2MTc5OSwgNjE4MjgsIDYxODU4LCA2MTg4OCxcbiAgICAgICAgICAgICAgICAgICAgNjE5MTcsIDYxOTQ3LCA2MTk3NiwgNjIwMDYsIDYyMDM1LCA2MjA2NCwgNjIwOTQsIDYyMTIzLFxuICAgICAgICAgICAgICAgICAgICA2MjE1MywgNjIxODIsIDYyMjEyLCA2MjI0MiwgNjIyNzEsIDYyMzAxLCA2MjMzMSwgNjIzNjAsXG4gICAgICAgICAgICAgICAgICAgIDYyMzkwLCA2MjQxOSwgNjI0NDgsIDYyNDc4LCA2MjUwNywgNjI1MzcsIDYyNTY2LCA2MjU5NixcbiAgICAgICAgICAgICAgICAgICAgNjI2MjUsIDYyNjU1LCA2MjY4NSwgNjI3MTUsIDYyNzQ0LCA2Mjc3NCwgNjI4MDMsIDYyODMyLFxuICAgICAgICAgICAgICAgICAgICA2Mjg2MiwgNjI4OTEsIDYyOTIxLCA2Mjk1MCwgNjI5ODAsIDYzMDA5LCA2MzAzOSwgNjMwNjksXG4gICAgICAgICAgICAgICAgICAgIDYzMDk5LCA2MzEyOCwgNjMxNTcsIDYzMTg3LCA2MzIxNiwgNjMyNDYsIDYzMjc1LCA2MzMwNSxcbiAgICAgICAgICAgICAgICAgICAgNjMzMzQsIDYzMzYzLCA2MzM5MywgNjM0MjMsIDYzNDUzLCA2MzQ4MiwgNjM1MTIsIDYzNTQxLFxuICAgICAgICAgICAgICAgICAgICA2MzU3MSwgNjM2MDAsIDYzNjMwLCA2MzY1OSwgNjM2ODksIDYzNzE4LCA2Mzc0NywgNjM3NzcsXG4gICAgICAgICAgICAgICAgICAgIDYzODA3LCA2MzgzNiwgNjM4NjYsIDYzODk1LCA2MzkyNSwgNjM5NTUsIDYzOTg0LCA2NDAxNCxcbiAgICAgICAgICAgICAgICAgICAgNjQwNDMsIDY0MDczLCA2NDEwMiwgNjQxMzEsIDY0MTYxLCA2NDE5MCwgNjQyMjAsIDY0MjQ5LFxuICAgICAgICAgICAgICAgICAgICA2NDI3OSwgNjQzMDksIDY0MzM5LCA2NDM2OCwgNjQzOTgsIDY0NDI3LCA2NDQ1NywgNjQ0ODYsXG4gICAgICAgICAgICAgICAgICAgIDY0NTE1LCA2NDU0NSwgNjQ1NzQsIDY0NjAzLCA2NDYzMywgNjQ2NjMsIDY0NjkyLCA2NDcyMixcbiAgICAgICAgICAgICAgICAgICAgNjQ3NTIsIDY0NzgyLCA2NDgxMSwgNjQ4NDEsIDY0ODcwLCA2NDg5OSwgNjQ5MjksIDY0OTU4LFxuICAgICAgICAgICAgICAgICAgICA2NDk4NywgNjUwMTcsIDY1MDQ3LCA2NTA3NiwgNjUxMDYsIDY1MTM2LCA2NTE2NiwgNjUxOTUsXG4gICAgICAgICAgICAgICAgICAgIDY1MjI1LCA2NTI1NCwgNjUyODMsIDY1MzEzLCA2NTM0MiwgNjUzNzEsIDY1NDAxLCA2NTQzMSxcbiAgICAgICAgICAgICAgICAgICAgNjU0NjAsIDY1NDkwLCA2NTUyMCwgNjU1NDksIDY1NTc5LCA2NTYwOCwgNjU2MzgsIDY1NjY3LFxuICAgICAgICAgICAgICAgICAgICA2NTY5NywgNjU3MjYsIDY1NzU1LCA2NTc4NSwgNjU4MTUsIDY1ODQ0LCA2NTg3NCwgNjU5MDMsXG4gICAgICAgICAgICAgICAgICAgIDY1OTMzLCA2NTk2MywgNjU5OTIsIDY2MDIyLCA2NjA1MSwgNjYwODEsIDY2MTEwLCA2NjE0MCxcbiAgICAgICAgICAgICAgICAgICAgNjYxNjksIDY2MTk5LCA2NjIyOCwgNjYyNTgsIDY2Mjg3LCA2NjMxNywgNjYzNDYsIDY2Mzc2LFxuICAgICAgICAgICAgICAgICAgICA2NjQwNSwgNjY0MzUsIDY2NDY1LCA2NjQ5NCwgNjY1MjQsIDY2NTUzLCA2NjU4MywgNjY2MTIsXG4gICAgICAgICAgICAgICAgICAgIDY2NjQxLCA2NjY3MSwgNjY3MDAsIDY2NzMwLCA2Njc2MCwgNjY3ODksIDY2ODE5LCA2Njg0OSxcbiAgICAgICAgICAgICAgICAgICAgNjY4NzgsIDY2OTA4LCA2NjkzNywgNjY5NjcsIDY2OTk2LCA2NzAyNSwgNjcwNTUsIDY3MDg0LFxuICAgICAgICAgICAgICAgICAgICA2NzExNCwgNjcxNDMsIDY3MTczLCA2NzIwMywgNjcyMzMsIDY3MjYyLCA2NzI5MiwgNjczMjEsXG4gICAgICAgICAgICAgICAgICAgIDY3MzUxLCA2NzM4MCwgNjc0MDksIDY3NDM5LCA2NzQ2OCwgNjc0OTcsIDY3NTI3LCA2NzU1NyxcbiAgICAgICAgICAgICAgICAgICAgNjc1ODcsIDY3NjE3LCA2NzY0NiwgNjc2NzYsIDY3NzA1LCA2NzczNSwgNjc3NjQsIDY3NzkzLFxuICAgICAgICAgICAgICAgICAgICA2NzgyMywgNjc4NTIsIDY3ODgyLCA2NzkxMSwgNjc5NDEsIDY3OTcxLCA2OGUzLCA2ODAzMCxcbiAgICAgICAgICAgICAgICAgICAgNjgwNjAsIDY4MDg5LCA2ODExOSwgNjgxNDgsIDY4MTc3LCA2ODIwNywgNjgyMzYsIDY4MjY2LFxuICAgICAgICAgICAgICAgICAgICA2ODI5NSwgNjgzMjUsIDY4MzU0LCA2ODM4NCwgNjg0MTQsIDY4NDQzLCA2ODQ3MywgNjg1MDIsXG4gICAgICAgICAgICAgICAgICAgIDY4NTMyLCA2ODU2MSwgNjg1OTEsIDY4NjIwLCA2ODY1MCwgNjg2NzksIDY4NzA4LCA2ODczOCxcbiAgICAgICAgICAgICAgICAgICAgNjg3NjgsIDY4Nzk3LCA2ODgyNywgNjg4NTcsIDY4ODg2LCA2ODkxNiwgNjg5NDYsIDY4OTc1LFxuICAgICAgICAgICAgICAgICAgICA2OTAwNCwgNjkwMzQsIDY5MDYzLCA2OTA5MiwgNjkxMjIsIDY5MTUyLCA2OTE4MSwgNjkyMTEsXG4gICAgICAgICAgICAgICAgICAgIDY5MjQwLCA2OTI3MCwgNjkzMDAsIDY5MzMwLCA2OTM1OSwgNjkzODgsIDY5NDE4LCA2OTQ0NyxcbiAgICAgICAgICAgICAgICAgICAgNjk0NzYsIDY5NTA2LCA2OTUzNSwgNjk1NjUsIDY5NTk1LCA2OTYyNCwgNjk2NTQsIDY5Njg0LFxuICAgICAgICAgICAgICAgICAgICA2OTcxMywgNjk3NDMsIDY5NzcyLCA2OTgwMiwgNjk4MzEsIDY5ODYxLCA2OTg5MCwgNjk5MTksXG4gICAgICAgICAgICAgICAgICAgIDY5OTQ5LCA2OTk3OCwgNzAwMDgsIDcwMDM4LCA3MDA2NywgNzAwOTcsIDcwMTI2LCA3MDE1NixcbiAgICAgICAgICAgICAgICAgICAgNzAxODYsIDcwMjE1LCA3MDI0NSwgNzAyNzQsIDcwMzAzLCA3MDMzMywgNzAzNjIsIDcwMzkyLFxuICAgICAgICAgICAgICAgICAgICA3MDQyMSwgNzA0NTEsIDcwNDgxLCA3MDUxMCwgNzA1NDAsIDcwNTcwLCA3MDU5OSwgNzA2MjksXG4gICAgICAgICAgICAgICAgICAgIDcwNjU4LCA3MDY4NywgNzA3MTcsIDcwNzQ2LCA3MDc3NiwgNzA4MDUsIDcwODM1LCA3MDg2NCxcbiAgICAgICAgICAgICAgICAgICAgNzA4OTQsIDcwOTI0LCA3MDk1NCwgNzA5ODMsIDcxMDEzLCA3MTA0MiwgNzEwNzEsIDcxMTAxLFxuICAgICAgICAgICAgICAgICAgICA3MTEzMCwgNzExNTksIDcxMTg5LCA3MTIxOCwgNzEyNDgsIDcxMjc4LCA3MTMwOCwgNzEzMzcsXG4gICAgICAgICAgICAgICAgICAgIDcxMzY3LCA3MTM5NywgNzE0MjYsIDcxNDU1LCA3MTQ4NSwgNzE1MTQsIDcxNTQzLCA3MTU3MyxcbiAgICAgICAgICAgICAgICAgICAgNzE2MDIsIDcxNjMyLCA3MTY2MiwgNzE2OTEsIDcxNzIxLCA3MTc1MSwgNzE3ODEsIDcxODEwLFxuICAgICAgICAgICAgICAgICAgICA3MTgzOSwgNzE4NjksIDcxODk4LCA3MTkyNywgNzE5NTcsIDcxOTg2LCA3MjAxNiwgNzIwNDYsXG4gICAgICAgICAgICAgICAgICAgIDcyMDc1LCA3MjEwNSwgNzIxMzUsIDcyMTY0LCA3MjE5NCwgNzIyMjMsIDcyMjUzLCA3MjI4MixcbiAgICAgICAgICAgICAgICAgICAgNzIzMTEsIDcyMzQxLCA3MjM3MCwgNzI0MDAsIDcyNDI5LCA3MjQ1OSwgNzI0ODksIDcyNTE4LFxuICAgICAgICAgICAgICAgICAgICA3MjU0OCwgNzI1NzcsIDcyNjA3LCA3MjYzNywgNzI2NjYsIDcyNjk1LCA3MjcyNSwgNzI3NTQsXG4gICAgICAgICAgICAgICAgICAgIDcyNzg0LCA3MjgxMywgNzI4NDMsIDcyODcyLCA3MjkwMiwgNzI5MzEsIDcyOTYxLCA3Mjk5MSxcbiAgICAgICAgICAgICAgICAgICAgNzMwMjAsIDczMDUwLCA3MzA4MCwgNzMxMDksIDczMTM5LCA3MzE2OCwgNzMxOTcsIDczMjI3LFxuICAgICAgICAgICAgICAgICAgICA3MzI1NiwgNzMyODYsIDczMzE1LCA3MzM0NSwgNzMzNzUsIDczNDA0LCA3MzQzNCwgNzM0NjQsXG4gICAgICAgICAgICAgICAgICAgIDczNDkzLCA3MzUyMywgNzM1NTIsIDczNTgxLCA3MzYxMSwgNzM2NDAsIDczNjY5LCA3MzY5OSxcbiAgICAgICAgICAgICAgICAgICAgNzM3MjksIDczNzU4LCA3Mzc4OCwgNzM4MTgsIDczODQ4LCA3Mzg3NywgNzM5MDcsIDczOTM2LFxuICAgICAgICAgICAgICAgICAgICA3Mzk2NSwgNzM5OTUsIDc0MDI0LCA3NDA1MywgNzQwODMsIDc0MTEzLCA3NDE0MiwgNzQxNzIsXG4gICAgICAgICAgICAgICAgICAgIDc0MjAyLCA3NDIzMSwgNzQyNjEsIDc0MjkxLCA3NDMyMCwgNzQzNDksIDc0Mzc5LCA3NDQwOCxcbiAgICAgICAgICAgICAgICAgICAgNzQ0MzcsIDc0NDY3LCA3NDQ5NywgNzQ1MjYsIDc0NTU2LCA3NDU4NiwgNzQ2MTUsIDc0NjQ1LFxuICAgICAgICAgICAgICAgICAgICA3NDY3NSwgNzQ3MDQsIDc0NzMzLCA3NDc2MywgNzQ3OTIsIDc0ODIyLCA3NDg1MSwgNzQ4ODEsXG4gICAgICAgICAgICAgICAgICAgIDc0OTEwLCA3NDk0MCwgNzQ5NjksIDc0OTk5LCA3NTAyOSwgNzUwNTgsIDc1MDg4LCA3NTExNyxcbiAgICAgICAgICAgICAgICAgICAgNzUxNDcsIDc1MTc2LCA3NTIwNiwgNzUyMzUsIDc1MjY0LCA3NTI5NCwgNzUzMjMsIDc1MzUzLFxuICAgICAgICAgICAgICAgICAgICA3NTM4MywgNzU0MTIsIDc1NDQyLCA3NTQ3MiwgNzU1MDEsIDc1NTMxLCA3NTU2MCwgNzU1OTAsXG4gICAgICAgICAgICAgICAgICAgIDc1NjE5LCA3NTY0OCwgNzU2NzgsIDc1NzA3LCA3NTczNywgNzU3NjYsIDc1Nzk2LCA3NTgyNixcbiAgICAgICAgICAgICAgICAgICAgNzU4NTYsIDc1ODg1LCA3NTkxNSwgNzU5NDQsIDc1OTc0LCA3NjAwMywgNzYwMzIsIDc2MDYyLFxuICAgICAgICAgICAgICAgICAgICA3NjA5MSwgNzYxMjEsIDc2MTUwLCA3NjE4MCwgNzYyMTAsIDc2MjM5LCA3NjI2OSwgNzYyOTksXG4gICAgICAgICAgICAgICAgICAgIDc2MzI4LCA3NjM1OCwgNzYzODcsIDc2NDE2LCA3NjQ0NiwgNzY0NzUsIDc2NTA1LCA3NjUzNCxcbiAgICAgICAgICAgICAgICAgICAgNzY1NjQsIDc2NTkzLCA3NjYyMywgNzY2NTMsIDc2NjgyLCA3NjcxMiwgNzY3NDEsIDc2NzcxLFxuICAgICAgICAgICAgICAgICAgICA3NjgwMSwgNzY4MzAsIDc2ODU5LCA3Njg4OSwgNzY5MTgsIDc2OTQ4LCA3Njk3NywgNzcwMDcsXG4gICAgICAgICAgICAgICAgICAgIDc3MDM2LCA3NzA2NiwgNzcwOTYsIDc3MTI1LCA3NzE1NSwgNzcxODUsIDc3MjE0LCA3NzI0MyxcbiAgICAgICAgICAgICAgICAgICAgNzcyNzMsIDc3MzAyLCA3NzMzMiwgNzczNjEsIDc3MzkwLCA3NzQyMCwgNzc0NTAsIDc3NDc5LFxuICAgICAgICAgICAgICAgICAgICA3NzUwOSwgNzc1MzksIDc3NTY5LCA3NzU5OCwgNzc2MjcsIDc3NjU3LCA3NzY4NiwgNzc3MTUsXG4gICAgICAgICAgICAgICAgICAgIDc3NzQ1LCA3Nzc3NCwgNzc4MDQsIDc3ODMzLCA3Nzg2MywgNzc4OTMsIDc3OTIzLCA3Nzk1MixcbiAgICAgICAgICAgICAgICAgICAgNzc5ODIsIDc4MDExLCA3ODA0MSwgNzgwNzAsIDc4MDk5LCA3ODEyOSwgNzgxNTgsIDc4MTg4LFxuICAgICAgICAgICAgICAgICAgICA3ODIxNywgNzgyNDcsIDc4Mjc3LCA3ODMwNywgNzgzMzYsIDc4MzY2LCA3ODM5NSwgNzg0MjUsXG4gICAgICAgICAgICAgICAgICAgIDc4NDU0LCA3ODQ4MywgNzg1MTMsIDc4NTQyLCA3ODU3MiwgNzg2MDEsIDc4NjMxLCA3ODY2MSxcbiAgICAgICAgICAgICAgICAgICAgNzg2OTAsIDc4NzIwLCA3ODc1MCwgNzg3NzksIDc4ODA4LCA3ODgzOCwgNzg4NjcsIDc4ODk3LFxuICAgICAgICAgICAgICAgICAgICA3ODkyNiwgNzg5NTYsIDc4OTg1LCA3OTAxNSwgNzkwNDQsIDc5MDc0LCA3OTEwNCwgNzkxMzMsXG4gICAgICAgICAgICAgICAgICAgIDc5MTYzLCA3OTE5MiwgNzkyMjIsIDc5MjUxLCA3OTI4MSwgNzkzMTAsIDc5MzQwLCA3OTM2OSxcbiAgICAgICAgICAgICAgICAgICAgNzkzOTksIDc5NDI4LCA3OTQ1OCwgNzk0ODcsIDc5NTE3LCA3OTU0NiwgNzk1NzYsIDc5NjA2LFxuICAgICAgICAgICAgICAgICAgICA3OTYzNSwgNzk2NjUsIDc5Njk1LCA3OTcyNCwgNzk3NTMsIDc5NzgzLCA3OTgxMiwgNzk4NDEsXG4gICAgICAgICAgICAgICAgICAgIDc5ODcxLCA3OTkwMCwgNzk5MzAsIDc5OTYwLCA3OTk5MFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zMiA9XG4gICAgICAgICAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpP2koTW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98d1tvfHddP3xZWVlZWXxZWVlZfFlZfGdnKGdnZz8pPyl8KFxcXFwpPyhNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xZWVlZWXxZWVlZfFlZfGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fG1tP3xzcz98U1M/Uz98WHx6ej98Wlo/fC4pL2csXG4gICAgICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zMiA9XG4gICAgICAgICAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csXG4gICAgICAgICAgICAgICAgcGFyc2VUb2tlbk9uZU9yVHdvRGlnaXRzID0gL1xcZFxcZD8vLFxuICAgICAgICAgICAgICAgIHBhcnNlVG9rZW5PbmVUb1RocmVlRGlnaXRzID0gL1xcZHsxLDN9LyxcbiAgICAgICAgICAgICAgICBwYXJzZVRva2VuVGhyZWVEaWdpdHMgPSAvXFxkezN9LyxcbiAgICAgICAgICAgICAgICBwYXJzZVRva2VuRm91ckRpZ2l0cyA9IC9cXGR7MSw0fS8sXG4gICAgICAgICAgICAgICAgcGFyc2VUb2tlblNpeERpZ2l0cyA9IC9bK1xcLV0/XFxkezEsNn0vLFxuICAgICAgICAgICAgICAgIHBhcnNlVG9rZW5Xb3JkID1cbiAgICAgICAgICAgICAgICAgICAgL1swLTldKlsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSsoXFwuPyl8W1xcdTA2MDAtXFx1MDZGRlxcL10rKFxccyo/W1xcdTA2MDAtXFx1MDZGRl0rKXsxLDJ9L2ksXG4gICAgICAgICAgICAgICAgcGFyc2VUb2tlblRpbWV6b25lID0gL1p8W1xcK1xcLV1cXGRcXGQ6P1xcZFxcZC9pLFxuICAgICAgICAgICAgICAgIHBhcnNlVG9rZW5UID0gL1QvaSxcbiAgICAgICAgICAgICAgICBwYXJzZVRva2VuVGltZXN0YW1wTXMgPSAvW1xcK1xcLV0/XFxkKyhcXC5cXGR7MSwzfSk/LyxcbiAgICAgICAgICAgICAgICB1bml0QWxpYXNlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGQ6ICdpZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIGhtOiAnaW1vbnRoJyxcbiAgICAgICAgICAgICAgICAgICAgaHk6ICdpeWVhcidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uczIgPSB7fSxcbiAgICAgICAgICAgICAgICBvcmRpbmFsaXplVG9rZW5zID0gJ0RERCB3IE0gRCcuc3BsaXQoJyAnKSxcbiAgICAgICAgICAgICAgICBwYWRkZWRUb2tlbnMgPSAnTSBEIHcnLnNwbGl0KCcgJyksXG4gICAgICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMyID0ge1xuICAgICAgICAgICAgICAgICAgICBpTTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaU1vbnRoKCkgKyAxXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlNTU06IGZ1bmN0aW9uIChmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaU1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdDIpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlNTU1NOiBmdW5jdGlvbiAoZm9ybWF0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmlNb250aHModGhpcywgZm9ybWF0MilcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaUQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlEYXRlKClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaURERDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaURheU9mWWVhcigpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGl3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pV2VlaygpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlZWTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLmlZZWFyKCkgJSAxMDAsIDIpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlZWVlZOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMuaVllYXIoKSwgNClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaVlZWVlZOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMuaVllYXIoKSwgNSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaWdnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMuaVdlZWtZZWFyKCkgJSAxMDAsIDIpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlnZ2dnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pV2Vla1llYXIoKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpZ2dnZ2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy5pV2Vla1llYXIoKSwgNSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgZnVuY3Rpb24gcGFkVG9rZW4oZnVuYywgY291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbChmdW5jLmNhbGwodGhpcywgYSksIGNvdW50KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9yZGluYWxpemVUb2tlbihmdW5jLCBwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoZnVuYy5jYWxsKHRoaXMsIGEpLCBwZXJpb2QpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKG9yZGluYWxpemVUb2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaSA9IG9yZGluYWxpemVUb2tlbnMucG9wKClcbiAgICAgICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uczJbJ2knICsgaSArICdvJ10gPSBvcmRpbmFsaXplVG9rZW4oXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zMlsnaScgKyBpXSxcbiAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChwYWRkZWRUb2tlbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaSA9IHBhZGRlZFRva2Vucy5wb3AoKVxuICAgICAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zMlsnaScgKyBpICsgaV0gPSBwYWRUb2tlbihcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMyWydpJyArIGldLFxuICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMyLmlEREREID0gcGFkVG9rZW4oXG4gICAgICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMyLmlEREQsXG4gICAgICAgICAgICAgICAgM1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5XG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkoa2V5KSkgYVtrZXldID0gYltrZXldXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxlZnRaZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgKyAnJ1xuICAgICAgICAgICAgICAgIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSBvdXRwdXQgPSAnMCcgKyBvdXRwdXRcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0FycmF5MihpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0czIodW5pdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5pdHNcbiAgICAgICAgICAgICAgICAgICAgPyB1bml0QWxpYXNlc1t1bml0c10gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdHMudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oLilzJC8sICckMScpXG4gICAgICAgICAgICAgICAgICAgIDogdW5pdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldERhdGUobW9tZW50LCB5ZWFyLCBtb250aCwgZGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciB1dGMgPSBtb21lbnQuX2lzVVRDID8gJ1VUQycgOiAnJ1xuICAgICAgICAgICAgICAgIG1vbWVudC5fZFsnc2V0JyArIHV0YyArICdGdWxsWWVhciddKHllYXIpXG4gICAgICAgICAgICAgICAgbW9tZW50Ll9kWydzZXQnICsgdXRjICsgJ01vbnRoJ10obW9udGgpXG4gICAgICAgICAgICAgICAgbW9tZW50Ll9kWydzZXQnICsgdXRjICsgJ0RhdGUnXShkYXRlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gb2JqZWN0Q3JlYXRlKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEYoKSB7fVxuICAgICAgICAgICAgICAgIEYucHJvdG90eXBlID0gcGFyZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCcnLl9fcHJvdG9fXykgcmV0dXJuIG9iamVjdC5fX3Byb3RvX19cbiAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBvYmplY3QuY29uc3RydWN0b3IucHJvdG90eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHRlbmQoZ2V0UHJvdG90eXBlT2YobW9tZW50LmxvY2FsZURhdGEoKSksIHtcbiAgICAgICAgICAgICAgICBfaU1vbnRoczogW1xuICAgICAgICAgICAgICAgICAgICAnTXVoYXJyYW0nLFxuICAgICAgICAgICAgICAgICAgICAnU2FmYXInLFxuICAgICAgICAgICAgICAgICAgICBcIlJhYmknIGFsLUF3d2FsXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiUmFiaScgYWwtVGhhbmlcIixcbiAgICAgICAgICAgICAgICAgICAgJ0p1bWFkYSBhbC1VbGEnLFxuICAgICAgICAgICAgICAgICAgICAnSnVtYWRhIGFsLUFsa2hpcmFoJyxcbiAgICAgICAgICAgICAgICAgICAgJ1JhamFiJyxcbiAgICAgICAgICAgICAgICAgICAgXCJTaGEnYmFuXCIsXG4gICAgICAgICAgICAgICAgICAgICdSYW1hZGhhbicsXG4gICAgICAgICAgICAgICAgICAgICdTaGF3d2FsJyxcbiAgICAgICAgICAgICAgICAgICAgXCJUaHVsLVFpJ2RhaFwiLFxuICAgICAgICAgICAgICAgICAgICAnVGh1bC1IaWpqYWgnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpTW9udGhzOiBmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faU1vbnRoc1ttLmlNb250aCgpXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX2lNb250aHNTaG9ydDogW1xuICAgICAgICAgICAgICAgICAgICAnTXVoJyxcbiAgICAgICAgICAgICAgICAgICAgJ1NhZicsXG4gICAgICAgICAgICAgICAgICAgICdSYWItSScsXG4gICAgICAgICAgICAgICAgICAgICdSYWItSUknLFxuICAgICAgICAgICAgICAgICAgICAnSnVtLUknLFxuICAgICAgICAgICAgICAgICAgICAnSnVtLUlJJyxcbiAgICAgICAgICAgICAgICAgICAgJ1JhaicsXG4gICAgICAgICAgICAgICAgICAgICdTaGEnLFxuICAgICAgICAgICAgICAgICAgICAnUmFtJyxcbiAgICAgICAgICAgICAgICAgICAgJ1NodycsXG4gICAgICAgICAgICAgICAgICAgICdEaHUtUScsXG4gICAgICAgICAgICAgICAgICAgICdEaHUtSCdcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGlNb250aHNTaG9ydDogZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lNb250aHNTaG9ydFttLmlNb250aCgpXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaU1vbnRoc1BhcnNlOiBmdW5jdGlvbiAobW9udGhOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpMiwgbW9tLCByZWdleFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lNb250aHNQYXJzZSkgdGhpcy5faU1vbnRoc1BhcnNlID0gW11cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpMiA9IDA7IGkyIDwgMTI7IGkyICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faU1vbnRoc1BhcnNlW2kyXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbSA9IGhNb21lbnQoWzJlMywgKDIgKyBpMikgJSAxMiwgMjVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ14nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pTW9udGhzKG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyR8XicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlNb250aHNTaG9ydChtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICckJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lNb250aHNQYXJzZVtpMl0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleC5yZXBsYWNlKCcuJywgJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faU1vbnRoc1BhcnNlW2kyXS50ZXN0KG1vbnRoTmFtZSkpIHJldHVybiBpMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHZhciBpTW9udGhOYW1lcyA9IHtcbiAgICAgICAgICAgICAgICBpTW9udGhzOlxuICAgICAgICAgICAgICAgICAgICAn2YXYrdix2YVf2LXZgdixX9ix2KjZiti5INin2YTYo9mI2YRf2LHYqNmK2Lkg2KfZhNir2KfZhtmKX9is2YXYp9iv2Ykg2KfZhNij2YjZhNmJX9is2YXYp9iv2Ykg2KfZhNii2K7YsdipX9ix2KzYqF/YtNi52KjYp9mGX9ix2YXYttin2YZf2LTZiNin2YRf2LDZiCDYp9mE2YLYudiv2Klf2LDZiCDYp9mE2K3YrNipJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGlNb250aHNTaG9ydDpcbiAgICAgICAgICAgICAgICAgICAgJ9mF2K3YsdmFX9i12YHYsV/Ysdio2YrYuSDZoV/Ysdio2YrYuSDZol/YrNmF2KfYr9mJINmhX9is2YXYp9iv2Ykg2aJf2LHYrNioX9i02LnYqNin2YZf2LHZhdi22KfZhl/YtNmI2KfZhF/YsNmIINin2YTZgti52K/YqV/YsNmIINin2YTYrdis2KknLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9tZW50LnVwZGF0ZUxvY2FsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG1vbWVudC51cGRhdGVMb2NhbGUoJ2FyLXNhJywgaU1vbnRoTmFtZXMpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBvbGRMb2NhbGUgPSBtb21lbnQubG9jYWxlKClcbiAgICAgICAgICAgICAgICBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1zYScsIGlNb250aE5hbWVzKVxuICAgICAgICAgICAgICAgIG1vbWVudC5sb2NhbGUob2xkTG9jYWxlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uMihmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Mi5tYXRjaChmb3JtYXR0aW5nVG9rZW5zMiksXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaTJcbiAgICAgICAgICAgICAgICBmb3IgKGkyID0gMDsgaTIgPCBsZW5ndGg7IGkyICs9IDEpXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uczJbYXJyYXlbaTJdXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2kyXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zMlthcnJheVtpMl1dXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaTIgPSAwOyBpMiA8IGxlbmd0aDsgaTIgKz0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W2kyXSBpbnN0YW5jZW9mIEZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ1snICsgYXJyYXlbaTJdLmNhbGwobW9tLCBmb3JtYXQyKSArICddJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFycmF5W2kyXVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuMih0b2tlbjIsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodG9rZW4yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lEREREJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuVGhyZWVEaWdpdHNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaVlZWVknOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5Gb3VyRGlnaXRzXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lZWVlZWSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlblNpeERpZ2l0c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpREREJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuT25lVG9UaHJlZURpZ2l0c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpTU1NJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaU1NTU0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5Xb3JkXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lNTSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lERCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lZWSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lNJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaUQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5PbmVPclR3b0RpZ2l0c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdEREREJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuVGhyZWVEaWdpdHNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWVlZWSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbkZvdXJEaWdpdHNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWVlZWVknOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5TaXhEaWdpdHNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NTJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnU1NTJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuT25lVG9UaHJlZURpZ2l0c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdNTU0nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdNTU1NJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkZGQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkZGRkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuV29yZFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50LmxvY2FsZURhdGEoY29uZmlnLl9sKS5fbWVyaWRpZW1QYXJzZVxuICAgICAgICAgICAgICAgICAgICBjYXNlICdYJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuVGltZXN0YW1wTXNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1paJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuVGltZXpvbmVcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlblRcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdERCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1lZJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSEgnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuT25lT3JUd29EaWdpdHNcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHRva2VuMi5yZXBsYWNlKCdcXFxcJywgJycpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuMih0b2tlbjIsIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVBhcnRBcnJheSA9IGNvbmZpZy5fYVxuICAgICAgICAgICAgICAgIHN3aXRjaCAodG9rZW4yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lNJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaU1NJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbMV0gPSBpbnB1dCA9PSBudWxsID8gMCA6IH5+aW5wdXQgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpTU1NJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaU1NTU0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG1vbWVudC5sb2NhbGVEYXRhKGNvbmZpZy5fbCkuaU1vbnRoc1BhcnNlKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgIT0gbnVsbCkgZGF0ZVBhcnRBcnJheVsxXSA9IGFcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lEJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaUREJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaURERCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lEREREJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSBkYXRlUGFydEFycmF5WzJdID0gfn5pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaVlZJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbMF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH5+aW5wdXQgKyAofn5pbnB1dCA+IDQ3ID8gMTMwMCA6IDE0MDApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpWVlZWSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lZWVlZWSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlUGFydEFycmF5WzBdID0gfn5pbnB1dFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRhdGVGcm9tQXJyYXkoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGcsXG4gICAgICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgICAgIGh5ID0gY29uZmlnLl9hWzBdLFxuICAgICAgICAgICAgICAgICAgICBobSA9IGNvbmZpZy5fYVsxXSxcbiAgICAgICAgICAgICAgICAgICAgaGQgPSBjb25maWcuX2FbMl1cbiAgICAgICAgICAgICAgICBpZiAoaHkgPT0gbnVsbCAmJiBobSA9PSBudWxsICYmIGhkID09IG51bGwpIHJldHVybiBbMCwgMCwgMV1cbiAgICAgICAgICAgICAgICBoeSA9IGh5IHx8IDBcbiAgICAgICAgICAgICAgICBobSA9IGhtIHx8IDBcbiAgICAgICAgICAgICAgICBoZCA9IGhkIHx8IDFcbiAgICAgICAgICAgICAgICBpZiAoaGQgPCAxIHx8IGhkID4gaE1vbWVudC5pRGF5c0luTW9udGgoaHksIGhtKSlcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2VcbiAgICAgICAgICAgICAgICBnID0gdG9HcmVnb3JpYW4oaHksIGhtLCBoZClcbiAgICAgICAgICAgICAgICBoID0gdG9IaWpyaShnLmd5LCBnLmdtLCBnLmdkKVxuICAgICAgICAgICAgICAgIGNvbmZpZy5faERpZmYgPSAwXG4gICAgICAgICAgICAgICAgaWYgKH5+aC5oeSAhPT0gaHkpIGNvbmZpZy5faERpZmYgKz0gMVxuICAgICAgICAgICAgICAgIGlmICh+fmguaG0gIT09IGhtKSBjb25maWcuX2hEaWZmICs9IDFcbiAgICAgICAgICAgICAgICBpZiAofn5oLmhkICE9PSBoZCkgY29uZmlnLl9oRGlmZiArPSAxXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtnLmd5LCBnLmdtLCBnLmdkXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZURhdGVGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbnMyID0gY29uZmlnLl9mLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMyKSxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgICAgICAgICBsZW4gPSB0b2tlbnMyLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaTIsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuMixcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRcbiAgICAgICAgICAgICAgICBjb25maWcuX2EgPSBbXVxuICAgICAgICAgICAgICAgIGZvciAoaTIgPSAwOyBpMiA8IGxlbjsgaTIgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbjIgPSB0b2tlbnMyW2kyXVxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4yKHRva2VuMiwgY29uZmlnKS5leGVjKFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICkgfHwgW10pWzBdXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dClcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zMlt0b2tlbjJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4yKHRva2VuMiwgcGFyc2VkSW5wdXQsIGNvbmZpZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0cmluZykgY29uZmlnLl9pbCA9IHN0cmluZ1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlRnJvbUFycmF5KGNvbmZpZylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZywgdXRjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNvbmZpZy5fZi5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGkyLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQyLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wTW9tZW50LFxuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50LFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NvcmUsXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0XG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZU1vbWVudCgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoTmFOKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpMiA9IDA7IGkyIDwgbGVuOyBpMiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDIgPSBjb25maWcuX2ZbaTJdXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDBcbiAgICAgICAgICAgICAgICAgICAgdGVtcE1vbWVudCA9IG1ha2VNb21lbnQoY29uZmlnLl9pLCBmb3JtYXQyLCBjb25maWcuX2wsIHV0YylcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wTW9tZW50LmlzVmFsaWQoKSkgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IHRlbXBNb21lbnQuX2hEaWZmXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wTW9tZW50Ll9pbCkgY3VycmVudFNjb3JlICs9IHRlbXBNb21lbnQuX2lsLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wTW9tZW50XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlc3RNb21lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBhcnNlZFRva2Vucyhjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9ICcnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQyID0gJycsXG4gICAgICAgICAgICAgICAgICAgIGFycmF5ID0gY29uZmlnLl9mLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMyKSxcbiAgICAgICAgICAgICAgICAgICAgbGVuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBpMixcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFxuICAgICAgICAgICAgICAgIGZvciAoaTIgPSAwOyBpMiA8IGxlbjsgaTIgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGFycmF5W2kyXVxuICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSAoZ2V0UGFyc2VSZWdleEZvclRva2VuMihtYXRjaCwgY29uZmlnKS5leGVjKFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICkgfHwgW10pWzBdXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLmluZGV4T2YocGFyc2VkKSArIHBhcnNlZC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZm9ybWF0VG9rZW5GdW5jdGlvbnMyW21hdGNoXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0MiArPSBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZCkgaW5wdXQgKz0gcGFyc2VkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXRcbiAgICAgICAgICAgICAgICBjb25maWcuX2YgPSBmb3JtYXQyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpV2Vla09mWWVhcihtb20sIGZpcnN0RGF5T2ZXZWVrLCBmaXJzdERheU9mV2Vla09mWWVhcikge1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBmaXJzdERheU9mV2Vla09mWWVhciAtIGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICAgICAgICAgICAgICBkYXlzVG9EYXlPZldlZWsgPSBmaXJzdERheU9mV2Vla09mWWVhciAtIG1vbS5kYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgYWRqdXN0ZWRNb21lbnRcbiAgICAgICAgICAgICAgICBpZiAoZGF5c1RvRGF5T2ZXZWVrID4gZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXNUb0RheU9mV2VlayAtPSA3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkYXlzVG9EYXlPZldlZWsgPCBlbmQgLSA3KSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXNUb0RheU9mV2VlayArPSA3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkanVzdGVkTW9tZW50ID0gaE1vbWVudChtb20pLmFkZChkYXlzVG9EYXlPZldlZWssICdkJylcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrOiBNYXRoLmNlaWwoYWRqdXN0ZWRNb21lbnQuaURheU9mWWVhcigpIC8gNyksXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IGFkanVzdGVkTW9tZW50LmlZZWFyKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtYWtlTW9tZW50KGlucHV0LCBmb3JtYXQyLCBsYW5nMiwgdXRjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pOiBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mOiBmb3JtYXQyLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2w6IGxhbmcyXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgICAgIGhtXG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdDIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkyKGZvcm1hdDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZURhdGVGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnLCB1dGMpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gbWFrZURhdGVGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVBhcnNlZFRva2Vucyhjb25maWcpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQyID0gJ1lZWVktTU0tREQtJyArIGNvbmZpZy5fZlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRaZXJvRmlsbChkYXRlWzBdLCA0KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0WmVyb0ZpbGwoZGF0ZVsxXSArIDEsIDIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRaZXJvRmlsbChkYXRlWzJdLCAyKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodXRjKSBtID0gbW9tZW50LnV0YyhpbnB1dCwgZm9ybWF0MiwgbGFuZzIpXG4gICAgICAgICAgICAgICAgZWxzZSBtID0gbW9tZW50KGlucHV0LCBmb3JtYXQyLCBsYW5nMilcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkgbS5faXNWYWxpZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgbS5faERpZmYgPSBjb25maWcuX2hEaWZmIHx8IDBcbiAgICAgICAgICAgICAgICBobSA9IG9iamVjdENyZWF0ZShoTW9tZW50LmZuKVxuICAgICAgICAgICAgICAgIGV4dGVuZChobSwgbSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaG1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhNb21lbnQoaW5wdXQsIGZvcm1hdDIsIGxhbmcyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VNb21lbnQoaW5wdXQsIGZvcm1hdDIsIGxhbmcyLCBmYWxzZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4dGVuZChoTW9tZW50LCBtb21lbnQpXG4gICAgICAgICAgICBoTW9tZW50LmZuID0gb2JqZWN0Q3JlYXRlKG1vbWVudC5mbilcbiAgICAgICAgICAgIGhNb21lbnQudXRjID0gZnVuY3Rpb24gKGlucHV0LCBmb3JtYXQyLCBsYW5nMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlTW9tZW50KGlucHV0LCBmb3JtYXQyLCBsYW5nMiwgdHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhNb21lbnQuZm4uZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaTIsXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2UsXG4gICAgICAgICAgICAgICAgICAgIG1lID0gdGhpc1xuICAgICAgICAgICAgICAgIGlmIChmb3JtYXQyKSB7XG4gICAgICAgICAgICAgICAgICAgIGkyID0gNVxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWUubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpMiA+IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zMi50ZXN0KGZvcm1hdDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpMiAtPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQyID0gZm9ybWF0Mi5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VuczIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghZm9ybWF0RnVuY3Rpb25zMltmb3JtYXQyXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb25zMltmb3JtYXQyXSA9IG1ha2VGb3JtYXRGdW5jdGlvbjIoZm9ybWF0MilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQyID0gZm9ybWF0RnVuY3Rpb25zMltmb3JtYXQyXSh0aGlzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50LmZuLmZvcm1hdC5jYWxsKHRoaXMsIGZvcm1hdDIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoTW9tZW50LmZuLmlZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3REYXksIGgsIGdcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBoID0gdG9IaWpyaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgbGFzdERheSA9IE1hdGgubWluKGguaGQsIGhNb21lbnQuaURheXNJbk1vbnRoKGlucHV0LCBoLmhtKSlcbiAgICAgICAgICAgICAgICAgICAgZyA9IHRvR3JlZ29yaWFuKGlucHV0LCBoLmhtLCBsYXN0RGF5KVxuICAgICAgICAgICAgICAgICAgICBzZXREYXRlKHRoaXMsIGcuZ3ksIGcuZ20sIGcuZ2QpXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAhPT0gZy5nbSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgIT09IGcuZ2QgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpICE9PSBnLmd5XG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGF0ZSh0aGlzLCBnLmd5LCBnLmdtLCBnLmdkKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1vbWVudC51cGRhdGVPZmZzZXQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9IaWpyaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSkuaHlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoTW9tZW50LmZuLmlNb250aCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0RGF5LCBoLCBnXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0ID0gdGhpcy5sb2NhbGVEYXRhKCkuaU1vbnRoc1BhcnNlKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCAtPSAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaCA9IHRvSGlqcmkodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpXG4gICAgICAgICAgICAgICAgICAgIGxhc3REYXkgPSBNYXRoLm1pbihoLmhkLCBoTW9tZW50LmlEYXlzSW5Nb250aChoLmh5LCBpbnB1dCkpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaVllYXIoaC5oeSArIGRpdihpbnB1dCwgMTIpKVxuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IG1vZDIoaW5wdXQsIDEyKVxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCArPSAxMlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pWWVhcih0aGlzLmlZZWFyKCkgLSAxKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGcgPSB0b0dyZWdvcmlhbih0aGlzLmlZZWFyKCksIGlucHV0LCBsYXN0RGF5KVxuICAgICAgICAgICAgICAgICAgICBzZXREYXRlKHRoaXMsIGcuZ3ksIGcuZ20sIGcuZ2QpXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAhPT0gZy5nbSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgIT09IGcuZ2QgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpICE9PSBnLmd5XG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGF0ZSh0aGlzLCBnLmd5LCBnLmdtLCBnLmdkKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1vbWVudC51cGRhdGVPZmZzZXQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9IaWpyaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSkuaG1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoTW9tZW50LmZuLmlEYXRlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGgsIGdcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBoID0gdG9IaWpyaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgZyA9IHRvR3JlZ29yaWFuKGguaHksIGguaG0sIGlucHV0KVxuICAgICAgICAgICAgICAgICAgICBzZXREYXRlKHRoaXMsIGcuZ3ksIGcuZ20sIGcuZ2QpXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAhPT0gZy5nbSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgIT09IGcuZ2QgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpICE9PSBnLmd5XG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGF0ZSh0aGlzLCBnLmd5LCBnLmdtLCBnLmdkKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1vbWVudC51cGRhdGVPZmZzZXQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9IaWpyaSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSkuaGRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoTW9tZW50LmZuLmlEYXlPZlllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF5T2ZZZWFyID1cbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAgICAgICAgIChoTW9tZW50KHRoaXMpLnN0YXJ0T2YoJ2RheScpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoTW9tZW50KHRoaXMpLnN0YXJ0T2YoJ2lZZWFyJykpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA4NjRlNVxuICAgICAgICAgICAgICAgICAgICApICsgMVxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsXG4gICAgICAgICAgICAgICAgICAgID8gZGF5T2ZZZWFyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5hZGQoaW5wdXQgLSBkYXlPZlllYXIsICdkJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhNb21lbnQuZm4uaURheXNJbk1vbnRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChoTW9tZW50KHRoaXMpLmVuZE9mKCdpTW9udGgnKS5mb3JtYXQoJ2lERCcpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaE1vbWVudC5mbi5pV2VlayA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciB3ZWVrID0gaVdlZWtPZlllYXIoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95XG4gICAgICAgICAgICAgICAgKS53ZWVrXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoTW9tZW50LmZuLmlXZWVrWWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gaVdlZWtPZlllYXIoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95XG4gICAgICAgICAgICAgICAgKS55ZWFyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB5ZWFyIDogdGhpcy5hZGQoaW5wdXQgLSB5ZWFyLCAneScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoTW9tZW50LmZuLmFkZCA9IGZ1bmN0aW9uICh2YWwsIHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBcbiAgICAgICAgICAgICAgICBpZiAodW5pdHMgIT09IG51bGwgJiYgIWlzTmFOKCt1bml0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IHZhbFxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB1bml0c1xuICAgICAgICAgICAgICAgICAgICB1bml0cyA9IHRlbXBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0czIodW5pdHMpXG4gICAgICAgICAgICAgICAgaWYgKHVuaXRzID09PSAnaXllYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaVllYXIodGhpcy5pWWVhcigpICsgdmFsKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdHMgPT09ICdpbW9udGgnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaU1vbnRoKHRoaXMuaU1vbnRoKCkgKyB2YWwpXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1bml0cyA9PT0gJ2lkYXRlJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlEYXRlKHRoaXMuaURhdGUoKSArIHZhbClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtb21lbnQuZm4uYWRkLmNhbGwodGhpcywgdmFsLCB1bml0cylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhNb21lbnQuZm4uc3VidHJhY3QgPSBmdW5jdGlvbiAodmFsLCB1bml0cykge1xuICAgICAgICAgICAgICAgIHZhciB0ZW1wXG4gICAgICAgICAgICAgICAgaWYgKHVuaXRzICE9PSBudWxsICYmICFpc05hTigrdW5pdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXAgPSB2YWxcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdW5pdHNcbiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPSB0ZW1wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMyKHVuaXRzKVxuICAgICAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ2l5ZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlZZWFyKHRoaXMuaVllYXIoKSAtIHZhbClcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVuaXRzID09PSAnaW1vbnRoJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlNb250aCh0aGlzLmlNb250aCgpIC0gdmFsKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodW5pdHMgPT09ICdpZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pRGF0ZSh0aGlzLmlEYXRlKCkgLSB2YWwpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbW9tZW50LmZuLnN1YnRyYWN0LmNhbGwodGhpcywgdmFsLCB1bml0cylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhNb21lbnQuZm4uc3RhcnRPZiA9IGZ1bmN0aW9uICh1bml0cykge1xuICAgICAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMyKHVuaXRzKVxuICAgICAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ2l5ZWFyJyB8fCB1bml0cyA9PT0gJ2ltb250aCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXRzID09PSAnaXllYXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlNb250aCgwKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaURhdGUoMSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3VycygwKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbnV0ZXMoMClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWlsbGlzZWNvbmRzKDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudC5mbi5zdGFydE9mLmNhbGwodGhpcywgdW5pdHMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaE1vbWVudC5mbi5lbmRPZiA9IGZ1bmN0aW9uICh1bml0cykge1xuICAgICAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMyKHVuaXRzKVxuICAgICAgICAgICAgICAgIGlmICh1bml0cyA9PT0gdm9pZCAwIHx8IHVuaXRzID09PSAnbWlsaXNlY29uZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRPZih1bml0cylcbiAgICAgICAgICAgICAgICAgICAgLmFkZCgxLCB1bml0cyA9PT0gJ2lzb3dlZWsnID8gJ3dlZWsnIDogdW5pdHMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJ0cmFjdCgxLCAnbWlsbGlzZWNvbmRzJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhNb21lbnQuZm4uY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhNb21lbnQodGhpcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhNb21lbnQuZm4uaVllYXJzID0gaE1vbWVudC5mbi5pWWVhclxuICAgICAgICAgICAgaE1vbWVudC5mbi5pTW9udGhzID0gaE1vbWVudC5mbi5pTW9udGhcbiAgICAgICAgICAgIGhNb21lbnQuZm4uaURhdGVzID0gaE1vbWVudC5mbi5pRGF0ZVxuICAgICAgICAgICAgaE1vbWVudC5mbi5pV2Vla3MgPSBoTW9tZW50LmZuLmlXZWVrXG4gICAgICAgICAgICBoTW9tZW50LmlEYXlzSW5Nb250aCA9IGZ1bmN0aW9uICh5ZWFyLCBtb250aCkge1xuICAgICAgICAgICAgICAgIHZhciBpMiA9IGdldE5ld01vb25NSkROSW5kZXgoeWVhciwgbW9udGggKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgZGF5c0luTW9udGgyID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVtbWFscXVyYS51bW1hbHF1cmFEYXRhW2kyXSAtXG4gICAgICAgICAgICAgICAgICAgICAgICB1bW1hbHF1cmEudW1tYWxxdXJhRGF0YVtpMiAtIDFdXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoMlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdG9IaWpyaShneSwgZ20sIGdkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGggPSBkMmgoZzJkKGd5LCBnbSArIDEsIGdkKSlcbiAgICAgICAgICAgICAgICBoLmhtIC09IDFcbiAgICAgICAgICAgICAgICByZXR1cm4gaFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdG9HcmVnb3JpYW4oaHksIGhtLCBoZCkge1xuICAgICAgICAgICAgICAgIHZhciBnID0gZDJnKGgyZChoeSwgaG0gKyAxLCBoZCkpXG4gICAgICAgICAgICAgICAgZy5nbSAtPSAxXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhNb21lbnQuaUNvbnZlcnQgPSB7XG4gICAgICAgICAgICAgICAgdG9IaWpyaSxcbiAgICAgICAgICAgICAgICB0b0dyZWdvcmlhblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhNb21lbnRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRpdihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIH5+KGEgLyBiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbW9kMihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgLSB+fihhIC8gYikgKiBiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBoMmQoaHksIGhtLCBoZCkge1xuICAgICAgICAgICAgICAgIHZhciBpMiA9IGdldE5ld01vb25NSkROSW5kZXgoaHksIGhtKSxcbiAgICAgICAgICAgICAgICAgICAgbWpkbiA9IGhkICsgdW1tYWxxdXJhLnVtbWFscXVyYURhdGFbaTIgLSAxXSAtIDEsXG4gICAgICAgICAgICAgICAgICAgIGpkbiA9IG1qZG4gKyAyNGU1XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpkblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZDJoKGpkbikge1xuICAgICAgICAgICAgICAgIHZhciBtamRuID0gamRuIC0gMjRlNSxcbiAgICAgICAgICAgICAgICAgICAgaTIgPSBnZXROZXdNb29uTUpETkluZGV4QnlKRE4obWpkbiksXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsTW9udGhzID0gaTIgKyAxNjI2MCxcbiAgICAgICAgICAgICAgICAgICAgY1llYXJzID0gTWF0aC5mbG9vcigodG90YWxNb250aHMgLSAxKSAvIDEyKSxcbiAgICAgICAgICAgICAgICAgICAgaHkgPSBjWWVhcnMgKyAxLFxuICAgICAgICAgICAgICAgICAgICBobSA9IHRvdGFsTW9udGhzIC0gMTIgKiBjWWVhcnMsXG4gICAgICAgICAgICAgICAgICAgIGhkID0gbWpkbiAtIHVtbWFscXVyYS51bW1hbHF1cmFEYXRhW2kyIC0gMV0gKyAxXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaHksXG4gICAgICAgICAgICAgICAgICAgIGhtLFxuICAgICAgICAgICAgICAgICAgICBoZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGcyZChneSwgZ20sIGdkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPVxuICAgICAgICAgICAgICAgICAgICBkaXYoKGd5ICsgZGl2KGdtIC0gOCwgNikgKyAxMDAxMDApICogMTQ2MSwgNCkgK1xuICAgICAgICAgICAgICAgICAgICBkaXYoMTUzICogbW9kMihnbSArIDksIDEyKSArIDIsIDUpICtcbiAgICAgICAgICAgICAgICAgICAgZ2QgLVxuICAgICAgICAgICAgICAgICAgICAzNDg0MDQwOFxuICAgICAgICAgICAgICAgIGQgPSBkIC0gZGl2KGRpdihneSArIDEwMDEwMCArIGRpdihnbSAtIDgsIDYpLCAxMDApICogMywgNCkgKyA3NTJcbiAgICAgICAgICAgICAgICByZXR1cm4gZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZDJnKGpkbikge1xuICAgICAgICAgICAgICAgIHZhciBqLCBpMiwgZ2QsIGdtLCBneVxuICAgICAgICAgICAgICAgIGogPSA0ICogamRuICsgMTM5MzYxNjMxXG4gICAgICAgICAgICAgICAgaiA9IGogKyBkaXYoZGl2KDQgKiBqZG4gKyAxODMxODc3MjAsIDE0NjA5NykgKiAzLCA0KSAqIDQgLSAzOTA4XG4gICAgICAgICAgICAgICAgaTIgPSBkaXYobW9kMihqLCAxNDYxKSwgNCkgKiA1ICsgMzA4XG4gICAgICAgICAgICAgICAgZ2QgPSBkaXYobW9kMihpMiwgMTUzKSwgNSkgKyAxXG4gICAgICAgICAgICAgICAgZ20gPSBtb2QyKGRpdihpMiwgMTUzKSwgMTIpICsgMVxuICAgICAgICAgICAgICAgIGd5ID0gZGl2KGosIDE0NjEpIC0gMTAwMTAwICsgZGl2KDggLSBnbSwgNilcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBneSxcbiAgICAgICAgICAgICAgICAgICAgZ20sXG4gICAgICAgICAgICAgICAgICAgIGdkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV3TW9vbk1KRE5JbmRleChoeSwgaG0pIHtcbiAgICAgICAgICAgICAgICB2YXIgY1llYXJzID0gaHkgLSAxLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbE1vbnRocyA9IGNZZWFycyAqIDEyICsgMSArIChobSAtIDEpLFxuICAgICAgICAgICAgICAgICAgICBpMiA9IHRvdGFsTW9udGhzIC0gMTYyNjBcbiAgICAgICAgICAgICAgICByZXR1cm4gaTJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5ld01vb25NSkROSW5kZXhCeUpETihtamRuKSB7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaTIgPCB1bW1hbHF1cmEudW1tYWxxdXJhRGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGkyID0gaTIgKyAxXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bW1hbHF1cmEudW1tYWxxdXJhRGF0YVtpMl0gPiBtamRuKSByZXR1cm4gaTJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufSlcbmV4cG9ydCBkZWZhdWx0IHJlcXVpcmVfbW9tZW50X2hpanJpKClcblxuLyohIEJ1bmRsZWQgbGljZW5zZSBpbmZvcm1hdGlvbjpcblxubW9tZW50L21vbWVudC5qczpcbiAgICAoKiEgbW9tZW50LmpzICopXG4gICAgKCohIHZlcnNpb24gOiAyLjI5LjQgKilcbiAgICAoKiEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9ycyAqKVxuICAgICgqISBsaWNlbnNlIDogTUlUICopXG4gICAgKCohIG1vbWVudGpzLmNvbSAqKVxuICAqL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGlqcmktbGliLmpzLm1hcFxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBSUEsSUFBSUEsUUFBUSxHQUFHQyxNQUFNLENBQUNDLE1BQU07QUFDNUIsSUFBSUMsU0FBUyxHQUFHRixNQUFNLENBQUNHLGNBQWM7QUFDckMsSUFBSUMsZ0JBQWdCLEdBQUdKLE1BQU0sQ0FBQ0ssd0JBQXdCO0FBQ3RELElBQUlDLGlCQUFpQixHQUFHTixNQUFNLENBQUNPLG1CQUFtQjtBQUNsRCxJQUFJQyxZQUFZLEdBQUdSLE1BQU0sQ0FBQ1MsY0FBYztBQUN4QyxJQUFJQyxZQUFZLEdBQUdWLE1BQU0sQ0FBQ1csU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFNBQVMsR0FBb0IsVUFBQ0MsQ0FBQztFQUFBLE9BQy9CLE9BQU9DLE9BQU8sS0FBSyxXQUFXLEdBQ3hCQSxPQUFPLEdBQ1AsT0FBT0MsS0FBSyxLQUFLLFdBQVcsR0FDNUIsSUFBSUEsS0FBSyxDQUFDRixDQUFDLEVBQUU7SUFDVEcsR0FBRyxFQUFFLFNBQUFBLElBQUNDLENBQUMsRUFBRUMsQ0FBQztNQUFBLE9BQUssQ0FBQyxPQUFPSixPQUFPLEtBQUssV0FBVyxHQUFHQSxPQUFPLEdBQUdHLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQUE7RUFDcEUsQ0FBQyxDQUFDLEdBQ0ZMLENBQUM7QUFBQSxFQUFFLFVBQVVBLENBQUMsRUFBRTtFQUN0QixJQUFJLE9BQU9DLE9BQU8sS0FBSyxXQUFXLEVBQUUsT0FBT0EsT0FBTyxDQUFDSyxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7RUFDekUsTUFBTSxJQUFJQyxLQUFLLENBQUMsc0JBQXNCLEdBQUdSLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztBQUN0RSxDQUFDLENBQUM7QUFBQVMsT0FBQSxDQUFBVixTQUFBLEdBQUFBLFNBQUE7QUFDRixJQUFJVyxLQUFLLEdBQUcsU0FBUkEsS0FBS0EsQ0FBSUMsRUFBRSxFQUFFQyxHQUFHO0VBQUEsT0FDaEIsU0FBU0MsTUFBTUEsQ0FBQSxFQUFHO0lBQ2QsT0FBT0YsRUFBRSxLQUFLQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUVELEVBQUUsQ0FBQ25CLGlCQUFpQixDQUFDbUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBR0EsRUFBRSxHQUFHLENBQUUsQ0FBQyxDQUFDLEVBQUVDLEdBQUc7RUFDekUsQ0FBQztBQUFBO0FBQUFILE9BQUEsQ0FBQUMsS0FBQSxHQUFBQSxLQUFBO0FBQ0wsSUFBSUksVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQUlDLEVBQUUsRUFBRUMsR0FBRztFQUFBLE9BQ3JCLFNBQVNDLFVBQVVBLENBQUEsRUFBRztJQUNsQixPQUNJRCxHQUFHLElBQ0MsQ0FBQyxDQUFDLEVBQUVELEVBQUUsQ0FBQ3ZCLGlCQUFpQixDQUFDdUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDNUIsQ0FBQ0MsR0FBRyxHQUFHO01BQUVQLE9BQU8sRUFBRSxDQUFDO0lBQUUsQ0FBQyxFQUFFQSxPQUFPLEVBQy9CTyxHQUNKLENBQUMsRUFDTEEsR0FBRyxDQUFDUCxPQUFPO0VBRW5CLENBQUM7QUFBQTtBQUFBQSxPQUFBLENBQUFLLFVBQUEsR0FBQUEsVUFBQTtBQUNMLElBQUlJLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFJQyxNQUFNLEVBQUVDLEdBQUcsRUFBSztFQUM1QixLQUFLLElBQUlDLElBQUksSUFBSUQsR0FBRyxFQUNoQmhDLFNBQVMsQ0FBQytCLE1BQU0sRUFBRUUsSUFBSSxFQUFFO0lBQUVsQixHQUFHLEVBQUVpQixHQUFHLENBQUNDLElBQUksQ0FBQztJQUFFQyxVQUFVLEVBQUU7RUFBSyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUFBYixPQUFBLENBQUFTLFFBQUEsR0FBQUEsUUFBQTtBQUNELElBQUlLLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFJQyxFQUFFLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUs7RUFDMUMsSUFBS0YsSUFBSSxJQUFJRyxPQUFBLENBQU9ILElBQUksTUFBSyxRQUFRLElBQUssT0FBT0EsSUFBSSxLQUFLLFVBQVUsRUFBRTtJQUFBLElBQUFJLFNBQUEsR0FBQUMsMEJBQUEsQ0FDbER0QyxpQkFBaUIsQ0FBQ2lDLElBQUksQ0FBQztNQUFBTSxLQUFBO0lBQUE7TUFBQSxJQUFBQyxLQUFBLFlBQUFBLE1BQUEsRUFDbkM7UUFBQSxJQURLQyxHQUFHLEdBQUFGLEtBQUEsQ0FBQUcsS0FBQTtRQUNSLElBQUksQ0FBQ3RDLFlBQVksQ0FBQ3VDLElBQUksQ0FBQ1gsRUFBRSxFQUFFUyxHQUFHLENBQUMsSUFBSUEsR0FBRyxLQUFLUCxNQUFNLEVBQzdDdEMsU0FBUyxDQUFDb0MsRUFBRSxFQUFFUyxHQUFHLEVBQUU7VUFDZjlCLEdBQUcsRUFBRSxTQUFBQSxJQUFBO1lBQUEsT0FBTXNCLElBQUksQ0FBQ1EsR0FBRyxDQUFDO1VBQUE7VUFDcEJYLFVBQVUsRUFDTixFQUFFSyxJQUFJLEdBQUdyQyxnQkFBZ0IsQ0FBQ21DLElBQUksRUFBRVEsR0FBRyxDQUFDLENBQUMsSUFBSU4sSUFBSSxDQUFDTDtRQUN0RCxDQUFDLENBQUM7TUFBRCxDQUFDO01BTlYsS0FBQU8sU0FBQSxDQUFBTyxDQUFBLE1BQUFMLEtBQUEsR0FBQUYsU0FBQSxDQUFBUSxDQUFBLElBQUFDLElBQUE7UUFBQU4sS0FBQTtNQUFBO0lBTVUsU0FBQU8sR0FBQTtNQUFBVixTQUFBLENBQUFXLENBQUEsQ0FBQUQsR0FBQTtJQUFBO01BQUFWLFNBQUEsQ0FBQVksQ0FBQTtJQUFBO0VBQ2Q7RUFDQSxPQUFPakIsRUFBRTtBQUNiLENBQUM7QUFDRCxJQUFJa0IsT0FBTyxHQUFHLFNBQVZBLE9BQU9BLENBQUkxQixHQUFHLEVBQUUyQixVQUFVLEVBQUV4QixNQUFNO0VBQUEsT0FDakNBLE1BQU0sR0FBR0gsR0FBRyxJQUFJLElBQUksR0FBRy9CLFFBQVEsQ0FBQ1MsWUFBWSxDQUFDc0IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDeERPLFdBQVcsQ0FLUG9CLFVBQVUsSUFBSSxDQUFDM0IsR0FBRyxJQUFJLENBQUNBLEdBQUcsQ0FBQzRCLFVBQVUsR0FDL0J4RCxTQUFTLENBQUMrQixNQUFNLEVBQUUsU0FBUyxFQUFFO0lBQUVlLEtBQUssRUFBRWxCLEdBQUc7SUFBRU0sVUFBVSxFQUFFO0VBQUssQ0FBQyxDQUFDLEdBQzlESCxNQUFNLEVBQ1pILEdBQ0osQ0FBQztBQUFBLENBQ0o7QUFBQVAsT0FBQSxDQUFBaUMsT0FBQSxHQUFBQSxPQUFBO0FBQ0QsSUFBSUcsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUk3QixHQUFHO0VBQUEsT0FDbkJPLFdBQVcsQ0FBQ25DLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUU7SUFBRThDLEtBQUssRUFBRTtFQUFLLENBQUMsQ0FBQyxFQUFFbEIsR0FBRyxDQUFDO0FBQUE7QUFBQVAsT0FBQSxDQUFBb0MsWUFBQSxHQUFBQSxZQUFBO0FBY2xFLElBQUlDLGNBQWMsR0FBR2hDLFVBQVUsQ0FBQztFQUM1QiwrQkFBK0IsV0FBQWlDLDJCQUFDdEMsT0FBTyxFQUFFdUMsTUFBTSxFQUFFO0lBQzdDO0lBQUMsQ0FBQyxVQUFVQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtNQUN6QnRCLE9BQUEsQ0FBT25CLE9BQU8sTUFBSyxRQUFRLElBQUksT0FBT3VDLE1BQU0sS0FBSyxXQUFXLEdBQ3JEQSxNQUFNLENBQUN2QyxPQUFPLEdBQUd5QyxPQUFPLENBQUMsQ0FBQyxHQUMzQixPQUFPQyxNQUFNLEtBQUssVUFBVSxJQUFJQSxNQUFNLENBQUNDLEdBQUcsR0FDMUNELE1BQU0sQ0FBQ0QsT0FBTyxDQUFDLEdBQ2RELE1BQU0sQ0FBQ0ksTUFBTSxHQUFHSCxPQUFPLENBQUMsQ0FBRTtJQUNyQyxDQUFDLEVBQUV6QyxPQUFPLEVBQUUsWUFBWTtNQUNwQixJQUFJNkMsWUFBWTtNQUNoQixTQUFTQyxLQUFLQSxDQUFBLEVBQUc7UUFDYixPQUFPRCxZQUFZLENBQUNoRCxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7TUFDOUM7TUFDQSxTQUFTaUQsZUFBZUEsQ0FBQ0MsUUFBUSxFQUFFO1FBQy9CSCxZQUFZLEdBQUdHLFFBQVE7TUFDM0I7TUFDQSxTQUFTQyxPQUFPQSxDQUFDQyxLQUFLLEVBQUU7UUFDcEIsT0FDSUEsS0FBSyxZQUFZQyxLQUFLLElBQ3RCMUUsTUFBTSxDQUFDVyxTQUFTLENBQUNnRSxRQUFRLENBQUMxQixJQUFJLENBQUN3QixLQUFLLENBQUMsS0FBSyxnQkFBZ0I7TUFFbEU7TUFDQSxTQUFTRyxRQUFRQSxDQUFDSCxLQUFLLEVBQUU7UUFDckIsT0FDSUEsS0FBSyxJQUFJLElBQUksSUFDYnpFLE1BQU0sQ0FBQ1csU0FBUyxDQUFDZ0UsUUFBUSxDQUFDMUIsSUFBSSxDQUFDd0IsS0FBSyxDQUFDLEtBQUssaUJBQWlCO01BRW5FO01BQ0EsU0FBU0ksVUFBVUEsQ0FBQzNELENBQUMsRUFBRUMsQ0FBQyxFQUFFO1FBQ3RCLE9BQU9uQixNQUFNLENBQUNXLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDcUMsSUFBSSxDQUFDL0IsQ0FBQyxFQUFFQyxDQUFDLENBQUM7TUFDckQ7TUFDQSxTQUFTMkQsYUFBYUEsQ0FBQ0MsR0FBRyxFQUFFO1FBQ3hCLElBQUkvRSxNQUFNLENBQUNPLG1CQUFtQixFQUFFO1VBQzVCLE9BQU9QLE1BQU0sQ0FBQ08sbUJBQW1CLENBQUN3RSxHQUFHLENBQUMsQ0FBQ0MsTUFBTSxLQUFLLENBQUM7UUFDdkQsQ0FBQyxNQUFNO1VBQ0gsSUFBSUMsQ0FBQztVQUNMLEtBQUtBLENBQUMsSUFBSUYsR0FBRyxFQUFFO1lBQ1gsSUFBSUYsVUFBVSxDQUFDRSxHQUFHLEVBQUVFLENBQUMsQ0FBQyxFQUFFO2NBQ3BCLE9BQU8sS0FBSztZQUNoQjtVQUNKO1VBQ0EsT0FBTyxJQUFJO1FBQ2Y7TUFDSjtNQUNBLFNBQVNDLFdBQVdBLENBQUNULEtBQUssRUFBRTtRQUN4QixPQUFPQSxLQUFLLEtBQUssS0FBSyxDQUFDO01BQzNCO01BQ0EsU0FBU1UsUUFBUUEsQ0FBQ1YsS0FBSyxFQUFFO1FBQ3JCLE9BQ0ksT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFDekJ6RSxNQUFNLENBQUNXLFNBQVMsQ0FBQ2dFLFFBQVEsQ0FBQzFCLElBQUksQ0FBQ3dCLEtBQUssQ0FBQyxLQUFLLGlCQUFpQjtNQUVuRTtNQUNBLFNBQVNXLE1BQU1BLENBQUNYLEtBQUssRUFBRTtRQUNuQixPQUNJQSxLQUFLLFlBQVlZLElBQUksSUFDckJyRixNQUFNLENBQUNXLFNBQVMsQ0FBQ2dFLFFBQVEsQ0FBQzFCLElBQUksQ0FBQ3dCLEtBQUssQ0FBQyxLQUFLLGVBQWU7TUFFakU7TUFDQSxTQUFTYSxHQUFHQSxDQUFDQyxHQUFHLEVBQUU5RCxFQUFFLEVBQUU7UUFDbEIsSUFBSUMsR0FBRyxHQUFHLEVBQUU7VUFDUjhELENBQUM7VUFDREMsTUFBTSxHQUFHRixHQUFHLENBQUNQLE1BQU07UUFDdkIsS0FBS1EsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHQyxNQUFNLEVBQUUsRUFBRUQsQ0FBQyxFQUFFO1VBQ3pCOUQsR0FBRyxDQUFDZ0UsSUFBSSxDQUFDakUsRUFBRSxDQUFDOEQsR0FBRyxDQUFDQyxDQUFDLENBQUMsRUFBRUEsQ0FBQyxDQUFDLENBQUM7UUFDM0I7UUFDQSxPQUFPOUQsR0FBRztNQUNkO01BQ0EsU0FBU2lFLE1BQU1BLENBQUN6RSxDQUFDLEVBQUVDLENBQUMsRUFBRTtRQUNsQixLQUFLLElBQUlxRSxDQUFDLElBQUlyRSxDQUFDLEVBQUU7VUFDYixJQUFJMEQsVUFBVSxDQUFDMUQsQ0FBQyxFQUFFcUUsQ0FBQyxDQUFDLEVBQUU7WUFDbEJ0RSxDQUFDLENBQUNzRSxDQUFDLENBQUMsR0FBR3JFLENBQUMsQ0FBQ3FFLENBQUMsQ0FBQztVQUNmO1FBQ0o7UUFDQSxJQUFJWCxVQUFVLENBQUMxRCxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUU7VUFDM0JELENBQUMsQ0FBQ3lELFFBQVEsR0FBR3hELENBQUMsQ0FBQ3dELFFBQVE7UUFDM0I7UUFDQSxJQUFJRSxVQUFVLENBQUMxRCxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUU7VUFDMUJELENBQUMsQ0FBQzBFLE9BQU8sR0FBR3pFLENBQUMsQ0FBQ3lFLE9BQU87UUFDekI7UUFDQSxPQUFPMUUsQ0FBQztNQUNaO01BQ0EsU0FBUzJFLFNBQVNBLENBQUNwQixLQUFLLEVBQUVxQixPQUFPLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO1FBQ2hELE9BQU9DLGdCQUFnQixDQUNuQnhCLEtBQUssRUFDTHFCLE9BQU8sRUFDUEMsT0FBTyxFQUNQQyxNQUFNLEVBQ04sSUFDSixDQUFDLENBQUNFLEdBQUcsQ0FBQyxDQUFDO01BQ1g7TUFDQSxTQUFTQyxtQkFBbUJBLENBQUEsRUFBRztRQUMzQixPQUFPO1VBQ0hDLEtBQUssRUFBRSxLQUFLO1VBQ1pDLFlBQVksRUFBRSxFQUFFO1VBQ2hCQyxXQUFXLEVBQUUsRUFBRTtVQUNmQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1VBQ1pDLGFBQWEsRUFBRSxDQUFDO1VBQ2hCQyxTQUFTLEVBQUUsS0FBSztVQUNoQkMsVUFBVSxFQUFFLElBQUk7VUFDaEJDLFlBQVksRUFBRSxJQUFJO1VBQ2xCQyxhQUFhLEVBQUUsS0FBSztVQUNwQkMsZUFBZSxFQUFFLEtBQUs7VUFDdEJDLEdBQUcsRUFBRSxLQUFLO1VBQ1ZDLGVBQWUsRUFBRSxFQUFFO1VBQ25CQyxHQUFHLEVBQUUsSUFBSTtVQUNUQyxRQUFRLEVBQUUsSUFBSTtVQUNkQyxPQUFPLEVBQUUsS0FBSztVQUNkQyxlQUFlLEVBQUU7UUFDckIsQ0FBQztNQUNMO01BQ0EsU0FBU0MsZUFBZUEsQ0FBQ0MsQ0FBQyxFQUFFO1FBQ3hCLElBQUlBLENBQUMsQ0FBQ0MsR0FBRyxJQUFJLElBQUksRUFBRTtVQUNmRCxDQUFDLENBQUNDLEdBQUcsR0FBR25CLG1CQUFtQixDQUFDLENBQUM7UUFDakM7UUFDQSxPQUFPa0IsQ0FBQyxDQUFDQyxHQUFHO01BQ2hCO01BQ0EsSUFBSUMsSUFBSTtNQUNSLElBQUk3QyxLQUFLLENBQUMvRCxTQUFTLENBQUM0RyxJQUFJLEVBQUU7UUFDdEJBLElBQUksR0FBRzdDLEtBQUssQ0FBQy9ELFNBQVMsQ0FBQzRHLElBQUk7TUFDL0IsQ0FBQyxNQUFNO1FBQ0hBLElBQUksR0FBRyxTQUFBQSxLQUFVQyxHQUFHLEVBQUU7VUFDbEIsSUFBSUMsQ0FBQyxHQUFHekgsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQjBILEdBQUcsR0FBR0QsQ0FBQyxDQUFDekMsTUFBTSxLQUFLLENBQUM7WUFDcEJRLENBQUM7VUFDTCxLQUFLQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdrQyxHQUFHLEVBQUVsQyxDQUFDLEVBQUUsRUFBRTtZQUN0QixJQUFJQSxDQUFDLElBQUlpQyxDQUFDLElBQUlELEdBQUcsQ0FBQ3ZFLElBQUksQ0FBQyxJQUFJLEVBQUV3RSxDQUFDLENBQUNqQyxDQUFDLENBQUMsRUFBRUEsQ0FBQyxFQUFFaUMsQ0FBQyxDQUFDLEVBQUU7Y0FDdEMsT0FBTyxJQUFJO1lBQ2Y7VUFDSjtVQUNBLE9BQU8sS0FBSztRQUNoQixDQUFDO01BQ0w7TUFDQSxTQUFTRSxPQUFPQSxDQUFDTixDQUFDLEVBQUU7UUFDaEIsSUFBSUEsQ0FBQyxDQUFDTyxRQUFRLElBQUksSUFBSSxFQUFFO1VBQ3BCLElBQUlDLEtBQUssR0FBR1QsZUFBZSxDQUFDQyxDQUFDLENBQUM7WUFDMUJTLFdBQVcsR0FBR1AsSUFBSSxDQUFDdEUsSUFBSSxDQUNuQjRFLEtBQUssQ0FBQ2QsZUFBZSxFQUNyQixVQUFVdkIsQ0FBQyxFQUFFO2NBQ1QsT0FBT0EsQ0FBQyxJQUFJLElBQUk7WUFDcEIsQ0FDSixDQUFDO1lBQ0R1QyxVQUFVLEdBQ04sQ0FBQ0MsS0FBSyxDQUFDWCxDQUFDLENBQUNZLEVBQUUsQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUN0QkwsS0FBSyxDQUFDdEIsUUFBUSxHQUFHLENBQUMsSUFDbEIsQ0FBQ3NCLEtBQUssQ0FBQ3pCLEtBQUssSUFDWixDQUFDeUIsS0FBSyxDQUFDbkIsVUFBVSxJQUNqQixDQUFDbUIsS0FBSyxDQUFDbEIsWUFBWSxJQUNuQixDQUFDa0IsS0FBSyxDQUFDTSxjQUFjLElBQ3JCLENBQUNOLEtBQUssQ0FBQ1YsZUFBZSxJQUN0QixDQUFDVSxLQUFLLENBQUNwQixTQUFTLElBQ2hCLENBQUNvQixLQUFLLENBQUNqQixhQUFhLElBQ3BCLENBQUNpQixLQUFLLENBQUNoQixlQUFlLEtBQ3JCLENBQUNnQixLQUFLLENBQUNaLFFBQVEsSUFBS1ksS0FBSyxDQUFDWixRQUFRLElBQUlhLFdBQVksQ0FBQztVQUM1RCxJQUFJVCxDQUFDLENBQUNlLE9BQU8sRUFBRTtZQUNYTCxVQUFVLEdBQ05BLFVBQVUsSUFDVkYsS0FBSyxDQUFDckIsYUFBYSxLQUFLLENBQUMsSUFDekJxQixLQUFLLENBQUN4QixZQUFZLENBQUNyQixNQUFNLEtBQUssQ0FBQyxJQUMvQjZDLEtBQUssQ0FBQ1EsT0FBTyxLQUFLLEtBQUssQ0FBQztVQUNoQztVQUNBLElBQUlySSxNQUFNLENBQUNzSSxRQUFRLElBQUksSUFBSSxJQUFJLENBQUN0SSxNQUFNLENBQUNzSSxRQUFRLENBQUNqQixDQUFDLENBQUMsRUFBRTtZQUNoREEsQ0FBQyxDQUFDTyxRQUFRLEdBQUdHLFVBQVU7VUFDM0IsQ0FBQyxNQUFNO1lBQ0gsT0FBT0EsVUFBVTtVQUNyQjtRQUNKO1FBQ0EsT0FBT1YsQ0FBQyxDQUFDTyxRQUFRO01BQ3JCO01BQ0EsU0FBU1csYUFBYUEsQ0FBQ1YsS0FBSyxFQUFFO1FBQzFCLElBQUlSLENBQUMsR0FBR3hCLFNBQVMsQ0FBQzJDLEdBQUcsQ0FBQztRQUN0QixJQUFJWCxLQUFLLElBQUksSUFBSSxFQUFFO1VBQ2ZsQyxNQUFNLENBQUN5QixlQUFlLENBQUNDLENBQUMsQ0FBQyxFQUFFUSxLQUFLLENBQUM7UUFDckMsQ0FBQyxNQUFNO1VBQ0hULGVBQWUsQ0FBQ0MsQ0FBQyxDQUFDLENBQUNSLGVBQWUsR0FBRyxJQUFJO1FBQzdDO1FBQ0EsT0FBT1EsQ0FBQztNQUNaO01BQ0EsSUFBSW9CLGdCQUFnQixHQUFJcEUsS0FBSyxDQUFDb0UsZ0JBQWdCLEdBQUcsRUFBRztRQUNoREMsZ0JBQWdCLEdBQUcsS0FBSztNQUM1QixTQUFTQyxVQUFVQSxDQUFDQyxHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUM1QixJQUFJckQsQ0FBQztVQUNEc0QsSUFBSTtVQUNKQyxHQUFHO1VBQ0hDLG1CQUFtQixHQUFHUCxnQkFBZ0IsQ0FBQ3pELE1BQU07UUFDakQsSUFBSSxDQUFDRSxXQUFXLENBQUMyRCxLQUFLLENBQUNJLGdCQUFnQixDQUFDLEVBQUU7VUFDdENMLEdBQUcsQ0FBQ0ssZ0JBQWdCLEdBQUdKLEtBQUssQ0FBQ0ksZ0JBQWdCO1FBQ2pEO1FBQ0EsSUFBSSxDQUFDL0QsV0FBVyxDQUFDMkQsS0FBSyxDQUFDSyxFQUFFLENBQUMsRUFBRTtVQUN4Qk4sR0FBRyxDQUFDTSxFQUFFLEdBQUdMLEtBQUssQ0FBQ0ssRUFBRTtRQUNyQjtRQUNBLElBQUksQ0FBQ2hFLFdBQVcsQ0FBQzJELEtBQUssQ0FBQ00sRUFBRSxDQUFDLEVBQUU7VUFDeEJQLEdBQUcsQ0FBQ08sRUFBRSxHQUFHTixLQUFLLENBQUNNLEVBQUU7UUFDckI7UUFDQSxJQUFJLENBQUNqRSxXQUFXLENBQUMyRCxLQUFLLENBQUNPLEVBQUUsQ0FBQyxFQUFFO1VBQ3hCUixHQUFHLENBQUNRLEVBQUUsR0FBR1AsS0FBSyxDQUFDTyxFQUFFO1FBQ3JCO1FBQ0EsSUFBSSxDQUFDbEUsV0FBVyxDQUFDMkQsS0FBSyxDQUFDVCxPQUFPLENBQUMsRUFBRTtVQUM3QlEsR0FBRyxDQUFDUixPQUFPLEdBQUdTLEtBQUssQ0FBQ1QsT0FBTztRQUMvQjtRQUNBLElBQUksQ0FBQ2xELFdBQVcsQ0FBQzJELEtBQUssQ0FBQ1EsSUFBSSxDQUFDLEVBQUU7VUFDMUJULEdBQUcsQ0FBQ1MsSUFBSSxHQUFHUixLQUFLLENBQUNRLElBQUk7UUFDekI7UUFDQSxJQUFJLENBQUNuRSxXQUFXLENBQUMyRCxLQUFLLENBQUNTLE1BQU0sQ0FBQyxFQUFFO1VBQzVCVixHQUFHLENBQUNVLE1BQU0sR0FBR1QsS0FBSyxDQUFDUyxNQUFNO1FBQzdCO1FBQ0EsSUFBSSxDQUFDcEUsV0FBVyxDQUFDMkQsS0FBSyxDQUFDVSxPQUFPLENBQUMsRUFBRTtVQUM3QlgsR0FBRyxDQUFDVyxPQUFPLEdBQUdWLEtBQUssQ0FBQ1UsT0FBTztRQUMvQjtRQUNBLElBQUksQ0FBQ3JFLFdBQVcsQ0FBQzJELEtBQUssQ0FBQ3ZCLEdBQUcsQ0FBQyxFQUFFO1VBQ3pCc0IsR0FBRyxDQUFDdEIsR0FBRyxHQUFHRixlQUFlLENBQUN5QixLQUFLLENBQUM7UUFDcEM7UUFDQSxJQUFJLENBQUMzRCxXQUFXLENBQUMyRCxLQUFLLENBQUNXLE9BQU8sQ0FBQyxFQUFFO1VBQzdCWixHQUFHLENBQUNZLE9BQU8sR0FBR1gsS0FBSyxDQUFDVyxPQUFPO1FBQy9CO1FBQ0EsSUFBSVIsbUJBQW1CLEdBQUcsQ0FBQyxFQUFFO1VBQ3pCLEtBQUt4RCxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUd3RCxtQkFBbUIsRUFBRXhELENBQUMsRUFBRSxFQUFFO1lBQ3RDc0QsSUFBSSxHQUFHTCxnQkFBZ0IsQ0FBQ2pELENBQUMsQ0FBQztZQUMxQnVELEdBQUcsR0FBR0YsS0FBSyxDQUFDQyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDNUQsV0FBVyxDQUFDNkQsR0FBRyxDQUFDLEVBQUU7Y0FDbkJILEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLEdBQUdDLEdBQUc7WUFDbkI7VUFDSjtRQUNKO1FBQ0EsT0FBT0gsR0FBRztNQUNkO01BQ0EsU0FBU2EsTUFBTUEsQ0FBQ0MsTUFBTSxFQUFFO1FBQ3BCZixVQUFVLENBQUMsSUFBSSxFQUFFZSxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDekIsRUFBRSxHQUFHLElBQUk1QyxJQUFJLENBQ2RxRSxNQUFNLENBQUN6QixFQUFFLElBQUksSUFBSSxHQUFHeUIsTUFBTSxDQUFDekIsRUFBRSxDQUFDQyxPQUFPLENBQUMsQ0FBQyxHQUFHTSxHQUM5QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQ2IsT0FBTyxDQUFDLENBQUMsRUFBRTtVQUNqQixJQUFJLENBQUNNLEVBQUUsR0FBbUIsSUFBSTVDLElBQUksQ0FBQ21ELEdBQUcsQ0FBQztRQUMzQztRQUNBLElBQUlFLGdCQUFnQixLQUFLLEtBQUssRUFBRTtVQUM1QkEsZ0JBQWdCLEdBQUcsSUFBSTtVQUN2QnJFLEtBQUssQ0FBQ3NGLFlBQVksQ0FBQyxJQUFJLENBQUM7VUFDeEJqQixnQkFBZ0IsR0FBRyxLQUFLO1FBQzVCO01BQ0o7TUFDQSxTQUFTa0IsUUFBUUEsQ0FBQzdFLEdBQUcsRUFBRTtRQUNuQixPQUNJQSxHQUFHLFlBQVkwRSxNQUFNLElBQ3BCMUUsR0FBRyxJQUFJLElBQUksSUFBSUEsR0FBRyxDQUFDa0UsZ0JBQWdCLElBQUksSUFBSztNQUVyRDtNQUNBLFNBQVNZLElBQUlBLENBQUNDLEdBQUcsRUFBRTtRQUNmLElBQ0l6RixLQUFLLENBQUMwRiwyQkFBMkIsS0FBSyxLQUFLLElBQzNDLE9BQU9DLE9BQU8sS0FBSyxXQUFXLElBQzlCQSxPQUFPLENBQUNILElBQUksRUFDZDtVQUNFRyxPQUFPLENBQUNILElBQUksQ0FBQyx1QkFBdUIsR0FBR0MsR0FBRyxDQUFDO1FBQy9DO01BQ0o7TUFDQSxTQUFTRyxTQUFTQSxDQUFDSCxHQUFHLEVBQUVySSxFQUFFLEVBQUU7UUFDeEIsSUFBSXlJLFNBQVMsR0FBRyxJQUFJO1FBQ3BCLE9BQU92RSxNQUFNLENBQUMsWUFBWTtVQUN0QixJQUFJdEIsS0FBSyxDQUFDOEYsa0JBQWtCLElBQUksSUFBSSxFQUFFO1lBQ2xDOUYsS0FBSyxDQUFDOEYsa0JBQWtCLENBQUMsSUFBSSxFQUFFTCxHQUFHLENBQUM7VUFDdkM7VUFDQSxJQUFJSSxTQUFTLEVBQUU7WUFDWCxJQUFJRSxJQUFJLEdBQUcsRUFBRTtjQUNUQyxHQUFHO2NBQ0g3RSxDQUFDO2NBQ0R6QyxHQUFHO2NBQ0h1SCxNQUFNLEdBQUdqSixTQUFTLENBQUMyRCxNQUFNO1lBQzdCLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzhFLE1BQU0sRUFBRTlFLENBQUMsRUFBRSxFQUFFO2NBQ3pCNkUsR0FBRyxHQUFHLEVBQUU7Y0FDUixJQUFJM0gsT0FBQSxDQUFPckIsU0FBUyxDQUFDbUUsQ0FBQyxDQUFDLE1BQUssUUFBUSxFQUFFO2dCQUNsQzZFLEdBQUcsSUFBSSxLQUFLLEdBQUc3RSxDQUFDLEdBQUcsSUFBSTtnQkFDdkIsS0FBS3pDLEdBQUcsSUFBSTFCLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtrQkFDdEIsSUFBSXdELFVBQVUsQ0FBQ3hELFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTBCLEdBQUcsQ0FBQyxFQUFFO29CQUMvQnNILEdBQUcsSUFDQ3RILEdBQUcsR0FDSCxJQUFJLEdBQ0oxQixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMwQixHQUFHLENBQUMsR0FDakIsSUFBSTtrQkFDWjtnQkFDSjtnQkFDQXNILEdBQUcsR0FBR0EsR0FBRyxDQUFDRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2NBQzFCLENBQUMsTUFBTTtnQkFDSEYsR0FBRyxHQUFHaEosU0FBUyxDQUFDbUUsQ0FBQyxDQUFDO2NBQ3RCO2NBQ0E0RSxJQUFJLENBQUMxRSxJQUFJLENBQUMyRSxHQUFHLENBQUM7WUFDbEI7WUFDQVIsSUFBSSxDQUNBQyxHQUFHLEdBQ0MsZUFBZSxHQUNmcEYsS0FBSyxDQUFDL0QsU0FBUyxDQUFDNEosS0FBSyxDQUFDdEgsSUFBSSxDQUFDbUgsSUFBSSxDQUFDLENBQUNJLElBQUksQ0FBQyxFQUFFLENBQUMsR0FDekMsSUFBSSxHQUNKLElBQUlsSixLQUFLLENBQUMsQ0FBQyxDQUFDbUosS0FDcEIsQ0FBQztZQUNEUCxTQUFTLEdBQUcsS0FBSztVQUNyQjtVQUNBLE9BQU96SSxFQUFFLENBQUNMLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztRQUNwQyxDQUFDLEVBQUVJLEVBQUUsQ0FBQztNQUNWO01BQ0EsSUFBSWlKLFlBQVksR0FBRyxDQUFDLENBQUM7TUFDckIsU0FBU0MsZUFBZUEsQ0FBQ3hJLElBQUksRUFBRTJILEdBQUcsRUFBRTtRQUNoQyxJQUFJekYsS0FBSyxDQUFDOEYsa0JBQWtCLElBQUksSUFBSSxFQUFFO1VBQ2xDOUYsS0FBSyxDQUFDOEYsa0JBQWtCLENBQUNoSSxJQUFJLEVBQUUySCxHQUFHLENBQUM7UUFDdkM7UUFDQSxJQUFJLENBQUNZLFlBQVksQ0FBQ3ZJLElBQUksQ0FBQyxFQUFFO1VBQ3JCMEgsSUFBSSxDQUFDQyxHQUFHLENBQUM7VUFDVFksWUFBWSxDQUFDdkksSUFBSSxDQUFDLEdBQUcsSUFBSTtRQUM3QjtNQUNKO01BQ0FrQyxLQUFLLENBQUMwRiwyQkFBMkIsR0FBRyxLQUFLO01BQ3pDMUYsS0FBSyxDQUFDOEYsa0JBQWtCLEdBQUcsSUFBSTtNQUMvQixTQUFTUyxVQUFVQSxDQUFDbkcsS0FBSyxFQUFFO1FBQ3ZCLE9BQ0ssT0FBT29HLFFBQVEsS0FBSyxXQUFXLElBQzVCcEcsS0FBSyxZQUFZb0csUUFBUSxJQUM3QjdLLE1BQU0sQ0FBQ1csU0FBUyxDQUFDZ0UsUUFBUSxDQUFDMUIsSUFBSSxDQUFDd0IsS0FBSyxDQUFDLEtBQ2pDLG1CQUFtQjtNQUUvQjtNQUNBLFNBQVNxRyxHQUFHQSxDQUFDcEIsTUFBTSxFQUFFO1FBQ2pCLElBQUlaLElBQUksRUFBRXRELENBQUM7UUFDWCxLQUFLQSxDQUFDLElBQUlrRSxNQUFNLEVBQUU7VUFDZCxJQUFJN0UsVUFBVSxDQUFDNkUsTUFBTSxFQUFFbEUsQ0FBQyxDQUFDLEVBQUU7WUFDdkJzRCxJQUFJLEdBQUdZLE1BQU0sQ0FBQ2xFLENBQUMsQ0FBQztZQUNoQixJQUFJb0YsVUFBVSxDQUFDOUIsSUFBSSxDQUFDLEVBQUU7Y0FDbEIsSUFBSSxDQUFDdEQsQ0FBQyxDQUFDLEdBQUdzRCxJQUFJO1lBQ2xCLENBQUMsTUFBTTtjQUNILElBQUksQ0FBQyxHQUFHLEdBQUd0RCxDQUFDLENBQUMsR0FBR3NELElBQUk7WUFDeEI7VUFDSjtRQUNKO1FBQ0EsSUFBSSxDQUFDaUMsT0FBTyxHQUFHckIsTUFBTTtRQUNyQixJQUFJLENBQUNzQiw4QkFBOEIsR0FBRyxJQUFJQyxNQUFNLENBQzVDLENBQUMsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQ0MsTUFBTSxJQUNoQyxJQUFJLENBQUNDLGFBQWEsQ0FBQ0QsTUFBTSxJQUN6QixHQUFHLEdBQ0gsU0FBUyxDQUFDQSxNQUNsQixDQUFDO01BQ0w7TUFDQSxTQUFTRSxZQUFZQSxDQUFDQyxZQUFZLEVBQUVDLFdBQVcsRUFBRTtRQUM3QyxJQUFJN0osR0FBRyxHQUFHaUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFMkYsWUFBWSxDQUFDO1VBQzlCeEMsSUFBSTtRQUNSLEtBQUtBLElBQUksSUFBSXlDLFdBQVcsRUFBRTtVQUN0QixJQUFJMUcsVUFBVSxDQUFDMEcsV0FBVyxFQUFFekMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFDSWxFLFFBQVEsQ0FBQzBHLFlBQVksQ0FBQ3hDLElBQUksQ0FBQyxDQUFDLElBQzVCbEUsUUFBUSxDQUFDMkcsV0FBVyxDQUFDekMsSUFBSSxDQUFDLENBQUMsRUFDN0I7Y0FDRXBILEdBQUcsQ0FBQ29ILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztjQUNkbkQsTUFBTSxDQUFDakUsR0FBRyxDQUFDb0gsSUFBSSxDQUFDLEVBQUV3QyxZQUFZLENBQUN4QyxJQUFJLENBQUMsQ0FBQztjQUNyQ25ELE1BQU0sQ0FBQ2pFLEdBQUcsQ0FBQ29ILElBQUksQ0FBQyxFQUFFeUMsV0FBVyxDQUFDekMsSUFBSSxDQUFDLENBQUM7WUFDeEMsQ0FBQyxNQUFNLElBQUl5QyxXQUFXLENBQUN6QyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7Y0FDbENwSCxHQUFHLENBQUNvSCxJQUFJLENBQUMsR0FBR3lDLFdBQVcsQ0FBQ3pDLElBQUksQ0FBQztZQUNqQyxDQUFDLE1BQU07Y0FDSCxPQUFPcEgsR0FBRyxDQUFDb0gsSUFBSSxDQUFDO1lBQ3BCO1VBQ0o7UUFDSjtRQUNBLEtBQUtBLElBQUksSUFBSXdDLFlBQVksRUFBRTtVQUN2QixJQUNJekcsVUFBVSxDQUFDeUcsWUFBWSxFQUFFeEMsSUFBSSxDQUFDLElBQzlCLENBQUNqRSxVQUFVLENBQUMwRyxXQUFXLEVBQUV6QyxJQUFJLENBQUMsSUFDOUJsRSxRQUFRLENBQUMwRyxZQUFZLENBQUN4QyxJQUFJLENBQUMsQ0FBQyxFQUM5QjtZQUNFcEgsR0FBRyxDQUFDb0gsSUFBSSxDQUFDLEdBQUduRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVqRSxHQUFHLENBQUNvSCxJQUFJLENBQUMsQ0FBQztVQUNyQztRQUNKO1FBQ0EsT0FBT3BILEdBQUc7TUFDZDtNQUNBLFNBQVM4SixNQUFNQSxDQUFDOUIsTUFBTSxFQUFFO1FBQ3BCLElBQUlBLE1BQU0sSUFBSSxJQUFJLEVBQUU7VUFDaEIsSUFBSSxDQUFDb0IsR0FBRyxDQUFDcEIsTUFBTSxDQUFDO1FBQ3BCO01BQ0o7TUFDQSxJQUFJK0IsSUFBSTtNQUNSLElBQUl6TCxNQUFNLENBQUN5TCxJQUFJLEVBQUU7UUFDYkEsSUFBSSxHQUFHekwsTUFBTSxDQUFDeUwsSUFBSTtNQUN0QixDQUFDLE1BQU07UUFDSEEsSUFBSSxHQUFHLFNBQUFBLEtBQVUxRyxHQUFHLEVBQUU7VUFDbEIsSUFBSVMsQ0FBQztZQUNEOUQsR0FBRyxHQUFHLEVBQUU7VUFDWixLQUFLOEQsQ0FBQyxJQUFJVCxHQUFHLEVBQUU7WUFDWCxJQUFJRixVQUFVLENBQUNFLEdBQUcsRUFBRVMsQ0FBQyxDQUFDLEVBQUU7Y0FDcEI5RCxHQUFHLENBQUNnRSxJQUFJLENBQUNGLENBQUMsQ0FBQztZQUNmO1VBQ0o7VUFDQSxPQUFPOUQsR0FBRztRQUNkLENBQUM7TUFDTDtNQUNBLElBQUlnSyxlQUFlLEdBQUc7UUFDbEJDLE9BQU8sRUFBRSxlQUFlO1FBQ3hCQyxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCQyxRQUFRLEVBQUUsY0FBYztRQUN4QkMsT0FBTyxFQUFFLG1CQUFtQjtRQUM1QkMsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQkMsUUFBUSxFQUFFO01BQ2QsQ0FBQztNQUNELFNBQVNDLFFBQVFBLENBQUNsSixHQUFHLEVBQUVtSixHQUFHLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJQyxNQUFNLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUN0SixHQUFHLENBQUMsSUFBSSxJQUFJLENBQUNzSixTQUFTLENBQUMsVUFBVSxDQUFDO1FBQzlELE9BQU96QixVQUFVLENBQUN3QixNQUFNLENBQUMsR0FBR0EsTUFBTSxDQUFDbkosSUFBSSxDQUFDaUosR0FBRyxFQUFFQyxJQUFJLENBQUMsR0FBR0MsTUFBTTtNQUMvRDtNQUNBLFNBQVNFLFFBQVFBLENBQUNDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxTQUFTLEVBQUU7UUFDL0MsSUFBSUMsU0FBUyxHQUFHLEVBQUUsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUNMLE1BQU0sQ0FBQztVQUNqQ00sV0FBVyxHQUFHTCxZQUFZLEdBQUdFLFNBQVMsQ0FBQzFILE1BQU07VUFDN0M4SCxLQUFLLEdBQUdQLE1BQU0sSUFBSSxDQUFDO1FBQ3ZCLE9BQ0ksQ0FBQ08sS0FBSyxHQUFJTCxTQUFTLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBSSxHQUFHLElBQ3JDRSxJQUFJLENBQUNJLEdBQUcsQ0FBQyxFQUFFLEVBQUVKLElBQUksQ0FBQ0ssR0FBRyxDQUFDLENBQUMsRUFBRUgsV0FBVyxDQUFDLENBQUMsQ0FDakNsSSxRQUFRLENBQUMsQ0FBQyxDQUNWc0ksTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUNkUCxTQUFTO01BRWpCO01BQ0EsSUFBSVEsZ0JBQWdCLEdBQ1osd01BQXdNO1FBQzVNQyxxQkFBcUIsR0FDakIsNENBQTRDO1FBQ2hEQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCQyxvQkFBb0IsR0FBRyxDQUFDLENBQUM7TUFDN0IsU0FBU0MsY0FBY0EsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRWxKLFFBQVEsRUFBRTtRQUN4RCxJQUFJbUosSUFBSSxHQUFHbkosUUFBUTtRQUNuQixJQUFJLE9BQU9BLFFBQVEsS0FBSyxRQUFRLEVBQUU7VUFDOUJtSixJQUFJLEdBQUcsU0FBQUEsS0FBQSxFQUFZO1lBQ2YsT0FBTyxJQUFJLENBQUNuSixRQUFRLENBQUMsQ0FBQyxDQUFDO1VBQzNCLENBQUM7UUFDTDtRQUNBLElBQUlnSixNQUFNLEVBQUU7VUFDUkYsb0JBQW9CLENBQUNFLE1BQU0sQ0FBQyxHQUFHRyxJQUFJO1FBQ3ZDO1FBQ0EsSUFBSUYsTUFBTSxFQUFFO1VBQ1JILG9CQUFvQixDQUFDRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZO1lBQzFDLE9BQU9sQixRQUFRLENBQ1hvQixJQUFJLENBQUN0TSxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUMsRUFDM0JtTSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ1RBLE1BQU0sQ0FBQyxDQUFDLENBQ1osQ0FBQztVQUNMLENBQUM7UUFDTDtRQUNBLElBQUlDLFFBQVEsRUFBRTtVQUNWSixvQkFBb0IsQ0FBQ0ksUUFBUSxDQUFDLEdBQUcsWUFBWTtZQUN6QyxPQUFPLElBQUksQ0FBQ0UsVUFBVSxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxDQUM1QkYsSUFBSSxDQUFDdE0sS0FBSyxDQUFDLElBQUksRUFBRUMsU0FBUyxDQUFDLEVBQzNCa00sTUFDSixDQUFDO1VBQ0wsQ0FBQztRQUNMO01BQ0o7TUFDQSxTQUFTTSxzQkFBc0JBLENBQUNwSixLQUFLLEVBQUU7UUFDbkMsSUFBSUEsS0FBSyxDQUFDcUosS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1VBQ3pCLE9BQU9ySixLQUFLLENBQUNzSixPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztRQUN4QztRQUNBLE9BQU90SixLQUFLLENBQUNzSixPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztNQUNuQztNQUNBLFNBQVNDLGtCQUFrQkEsQ0FBQ2xJLE9BQU8sRUFBRTtRQUNqQyxJQUFJbUksS0FBSyxHQUFHbkksT0FBTyxDQUFDZ0ksS0FBSyxDQUFDWixnQkFBZ0IsQ0FBQztVQUN2QzFILENBQUM7VUFDRFIsTUFBTTtRQUNWLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVSLE1BQU0sR0FBR2lKLEtBQUssQ0FBQ2pKLE1BQU0sRUFBRVEsQ0FBQyxHQUFHUixNQUFNLEVBQUVRLENBQUMsRUFBRSxFQUFFO1VBQ2hELElBQUk2SCxvQkFBb0IsQ0FBQ1ksS0FBSyxDQUFDekksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNoQ3lJLEtBQUssQ0FBQ3pJLENBQUMsQ0FBQyxHQUFHNkgsb0JBQW9CLENBQUNZLEtBQUssQ0FBQ3pJLENBQUMsQ0FBQyxDQUFDO1VBQzdDLENBQUMsTUFBTTtZQUNIeUksS0FBSyxDQUFDekksQ0FBQyxDQUFDLEdBQUdxSSxzQkFBc0IsQ0FBQ0ksS0FBSyxDQUFDekksQ0FBQyxDQUFDLENBQUM7VUFDL0M7UUFDSjtRQUNBLE9BQU8sVUFBVTBHLEdBQUcsRUFBRTtVQUNsQixJQUFJRSxNQUFNLEdBQUcsRUFBRTtZQUNYOEIsRUFBRTtVQUNOLEtBQUtBLEVBQUUsR0FBRyxDQUFDLEVBQUVBLEVBQUUsR0FBR2xKLE1BQU0sRUFBRWtKLEVBQUUsRUFBRSxFQUFFO1lBQzVCOUIsTUFBTSxJQUFJeEIsVUFBVSxDQUFDcUQsS0FBSyxDQUFDQyxFQUFFLENBQUMsQ0FBQyxHQUN6QkQsS0FBSyxDQUFDQyxFQUFFLENBQUMsQ0FBQ2pMLElBQUksQ0FBQ2lKLEdBQUcsRUFBRXBHLE9BQU8sQ0FBQyxHQUM1Qm1JLEtBQUssQ0FBQ0MsRUFBRSxDQUFDO1VBQ25CO1VBQ0EsT0FBTzlCLE1BQU07UUFDakIsQ0FBQztNQUNMO01BQ0EsU0FBUytCLFlBQVlBLENBQUM5RyxDQUFDLEVBQUV2QixPQUFPLEVBQUU7UUFDOUIsSUFBSSxDQUFDdUIsQ0FBQyxDQUFDTSxPQUFPLENBQUMsQ0FBQyxFQUFFO1VBQ2QsT0FBT04sQ0FBQyxDQUFDc0csVUFBVSxDQUFDLENBQUMsQ0FBQ1MsV0FBVyxDQUFDLENBQUM7UUFDdkM7UUFDQXRJLE9BQU8sR0FBR3VJLFlBQVksQ0FBQ3ZJLE9BQU8sRUFBRXVCLENBQUMsQ0FBQ3NHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDL0NQLGVBQWUsQ0FBQ3RILE9BQU8sQ0FBQyxHQUNwQnNILGVBQWUsQ0FBQ3RILE9BQU8sQ0FBQyxJQUFJa0ksa0JBQWtCLENBQUNsSSxPQUFPLENBQUM7UUFDM0QsT0FBT3NILGVBQWUsQ0FBQ3RILE9BQU8sQ0FBQyxDQUFDdUIsQ0FBQyxDQUFDO01BQ3RDO01BQ0EsU0FBU2dILFlBQVlBLENBQUN2SSxPQUFPLEVBQUVDLE9BQU8sRUFBRTtRQUNwQyxJQUFJUCxDQUFDLEdBQUcsQ0FBQztRQUNULFNBQVM4SSwyQkFBMkJBLENBQUM3SixLQUFLLEVBQUU7VUFDeEMsT0FBT3NCLE9BQU8sQ0FBQ3dJLGNBQWMsQ0FBQzlKLEtBQUssQ0FBQyxJQUFJQSxLQUFLO1FBQ2pEO1FBQ0EwSSxxQkFBcUIsQ0FBQ3FCLFNBQVMsR0FBRyxDQUFDO1FBQ25DLE9BQU9oSixDQUFDLElBQUksQ0FBQyxJQUFJMkgscUJBQXFCLENBQUNzQixJQUFJLENBQUMzSSxPQUFPLENBQUMsRUFBRTtVQUNsREEsT0FBTyxHQUFHQSxPQUFPLENBQUNpSSxPQUFPLENBQ3JCWixxQkFBcUIsRUFDckJtQiwyQkFDSixDQUFDO1VBQ0RuQixxQkFBcUIsQ0FBQ3FCLFNBQVMsR0FBRyxDQUFDO1VBQ25DaEosQ0FBQyxJQUFJLENBQUM7UUFDVjtRQUNBLE9BQU9NLE9BQU87TUFDbEI7TUFDQSxJQUFJNEkscUJBQXFCLEdBQUc7UUFDeEJDLEdBQUcsRUFBRSxXQUFXO1FBQ2hCQyxFQUFFLEVBQUUsUUFBUTtRQUNaQyxDQUFDLEVBQUUsWUFBWTtRQUNmQyxFQUFFLEVBQUUsY0FBYztRQUNsQkMsR0FBRyxFQUFFLHFCQUFxQjtRQUMxQkMsSUFBSSxFQUFFO01BQ1YsQ0FBQztNQUNELFNBQVNULGNBQWNBLENBQUN4TCxHQUFHLEVBQUU7UUFDekIsSUFBSStDLE9BQU8sR0FBRyxJQUFJLENBQUNtSixlQUFlLENBQUNsTSxHQUFHLENBQUM7VUFDbkNtTSxXQUFXLEdBQUcsSUFBSSxDQUFDRCxlQUFlLENBQUNsTSxHQUFHLENBQUNvTSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUlySixPQUFPLElBQUksQ0FBQ29KLFdBQVcsRUFBRTtVQUN6QixPQUFPcEosT0FBTztRQUNsQjtRQUNBLElBQUksQ0FBQ21KLGVBQWUsQ0FBQ2xNLEdBQUcsQ0FBQyxHQUFHbU0sV0FBVyxDQUNsQ3BCLEtBQUssQ0FBQ1osZ0JBQWdCLENBQUMsQ0FDdkI1SCxHQUFHLENBQUMsVUFBVThKLEdBQUcsRUFBRTtVQUNoQixJQUNJQSxHQUFHLEtBQUssTUFBTSxJQUNkQSxHQUFHLEtBQUssSUFBSSxJQUNaQSxHQUFHLEtBQUssSUFBSSxJQUNaQSxHQUFHLEtBQUssTUFBTSxFQUNoQjtZQUNFLE9BQU9BLEdBQUcsQ0FBQzdFLEtBQUssQ0FBQyxDQUFDLENBQUM7VUFDdkI7VUFDQSxPQUFPNkUsR0FBRztRQUNkLENBQUMsQ0FBQyxDQUNENUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNiLE9BQU8sSUFBSSxDQUFDeUUsZUFBZSxDQUFDbE0sR0FBRyxDQUFDO01BQ3BDO01BQ0EsSUFBSXNNLGtCQUFrQixHQUFHLGNBQWM7TUFDdkMsU0FBU2pCLFdBQVdBLENBQUEsRUFBRztRQUNuQixPQUFPLElBQUksQ0FBQ2tCLFlBQVk7TUFDNUI7TUFDQSxJQUFJQyxjQUFjLEdBQUcsSUFBSTtRQUNyQkMsNkJBQTZCLEdBQUcsU0FBUztNQUM3QyxTQUFTNUIsT0FBT0EsQ0FBQ3JCLE1BQU0sRUFBRTtRQUNyQixPQUFPLElBQUksQ0FBQ2tELFFBQVEsQ0FBQzFCLE9BQU8sQ0FBQyxJQUFJLEVBQUV4QixNQUFNLENBQUM7TUFDOUM7TUFDQSxJQUFJbUQsbUJBQW1CLEdBQUc7UUFDdEJDLE1BQU0sRUFBRSxPQUFPO1FBQ2ZDLElBQUksRUFBRSxRQUFRO1FBQ2QxTSxDQUFDLEVBQUUsZUFBZTtRQUNsQjJNLEVBQUUsRUFBRSxZQUFZO1FBQ2hCeEksQ0FBQyxFQUFFLFVBQVU7UUFDYnlJLEVBQUUsRUFBRSxZQUFZO1FBQ2hCQyxDQUFDLEVBQUUsU0FBUztRQUNaQyxFQUFFLEVBQUUsVUFBVTtRQUNkQyxDQUFDLEVBQUUsT0FBTztRQUNWQyxFQUFFLEVBQUUsU0FBUztRQUNiQyxDQUFDLEVBQUUsUUFBUTtRQUNYQyxFQUFFLEVBQUUsVUFBVTtRQUNkQyxDQUFDLEVBQUUsU0FBUztRQUNaQyxFQUFFLEVBQUUsV0FBVztRQUNmQyxDQUFDLEVBQUUsUUFBUTtRQUNYQyxFQUFFLEVBQUU7TUFDUixDQUFDO01BQ0QsU0FBU0MsWUFBWUEsQ0FBQ2xFLE1BQU0sRUFBRW1FLGFBQWEsRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUU7UUFDM0QsSUFBSXhFLE1BQU0sR0FBRyxJQUFJLENBQUN5RSxhQUFhLENBQUNGLE1BQU0sQ0FBQztRQUN2QyxPQUFPL0YsVUFBVSxDQUFDd0IsTUFBTSxDQUFDLEdBQ25CQSxNQUFNLENBQUNHLE1BQU0sRUFBRW1FLGFBQWEsRUFBRUMsTUFBTSxFQUFFQyxRQUFRLENBQUMsR0FDL0N4RSxNQUFNLENBQUMyQixPQUFPLENBQUMsS0FBSyxFQUFFeEIsTUFBTSxDQUFDO01BQ3ZDO01BQ0EsU0FBU3VFLFVBQVVBLENBQUNDLEtBQUssRUFBRTNFLE1BQU0sRUFBRTtRQUMvQixJQUFJdEcsT0FBTyxHQUFHLElBQUksQ0FBQytLLGFBQWEsQ0FBQ0UsS0FBSyxHQUFHLENBQUMsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQy9ELE9BQU9uRyxVQUFVLENBQUM5RSxPQUFPLENBQUMsR0FDcEJBLE9BQU8sQ0FBQ3NHLE1BQU0sQ0FBQyxHQUNmdEcsT0FBTyxDQUFDaUksT0FBTyxDQUFDLEtBQUssRUFBRTNCLE1BQU0sQ0FBQztNQUN4QztNQUNBLElBQUk0RSxPQUFPLEdBQUcsQ0FBQyxDQUFDO01BQ2hCLFNBQVNDLFlBQVlBLENBQUNDLElBQUksRUFBRUMsU0FBUyxFQUFFO1FBQ25DLElBQUlDLFNBQVMsR0FBR0YsSUFBSSxDQUFDRyxXQUFXLENBQUMsQ0FBQztRQUNsQ0wsT0FBTyxDQUFDSSxTQUFTLENBQUMsR0FDZEosT0FBTyxDQUFDSSxTQUFTLEdBQUcsR0FBRyxDQUFDLEdBQ3hCSixPQUFPLENBQUNHLFNBQVMsQ0FBQyxHQUNkRCxJQUFJO01BQ2hCO01BQ0EsU0FBU0ksY0FBY0EsQ0FBQ0MsS0FBSyxFQUFFO1FBQzNCLE9BQU8sT0FBT0EsS0FBSyxLQUFLLFFBQVEsR0FDMUJQLE9BQU8sQ0FBQ08sS0FBSyxDQUFDLElBQUlQLE9BQU8sQ0FBQ08sS0FBSyxDQUFDRixXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQzlDLEtBQUssQ0FBQztNQUNoQjtNQUNBLFNBQVNHLG9CQUFvQkEsQ0FBQ0MsV0FBVyxFQUFFO1FBQ3ZDLElBQUlDLGVBQWUsR0FBRyxDQUFDLENBQUM7VUFDcEJDLGNBQWM7VUFDZDdJLElBQUk7UUFDUixLQUFLQSxJQUFJLElBQUkySSxXQUFXLEVBQUU7VUFDdEIsSUFBSTVNLFVBQVUsQ0FBQzRNLFdBQVcsRUFBRTNJLElBQUksQ0FBQyxFQUFFO1lBQy9CNkksY0FBYyxHQUFHTCxjQUFjLENBQUN4SSxJQUFJLENBQUM7WUFDckMsSUFBSTZJLGNBQWMsRUFBRTtjQUNoQkQsZUFBZSxDQUFDQyxjQUFjLENBQUMsR0FBR0YsV0FBVyxDQUFDM0ksSUFBSSxDQUFDO1lBQ3ZEO1VBQ0o7UUFDSjtRQUNBLE9BQU80SSxlQUFlO01BQzFCO01BQ0EsSUFBSUUsVUFBVSxHQUFHLENBQUMsQ0FBQztNQUNuQixTQUFTQyxlQUFlQSxDQUFDWCxJQUFJLEVBQUVZLFFBQVEsRUFBRTtRQUNyQ0YsVUFBVSxDQUFDVixJQUFJLENBQUMsR0FBR1ksUUFBUTtNQUMvQjtNQUNBLFNBQVNDLG1CQUFtQkEsQ0FBQ0MsUUFBUSxFQUFFO1FBQ25DLElBQUlULEtBQUssR0FBRyxFQUFFO1VBQ1ZVLENBQUM7UUFDTCxLQUFLQSxDQUFDLElBQUlELFFBQVEsRUFBRTtVQUNoQixJQUFJbk4sVUFBVSxDQUFDbU4sUUFBUSxFQUFFQyxDQUFDLENBQUMsRUFBRTtZQUN6QlYsS0FBSyxDQUFDN0wsSUFBSSxDQUFDO2NBQUV3TCxJQUFJLEVBQUVlLENBQUM7Y0FBRUgsUUFBUSxFQUFFRixVQUFVLENBQUNLLENBQUM7WUFBRSxDQUFDLENBQUM7VUFDcEQ7UUFDSjtRQUNBVixLQUFLLENBQUNXLElBQUksQ0FBQyxVQUFVaFIsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7VUFDdkIsT0FBT0QsQ0FBQyxDQUFDNFEsUUFBUSxHQUFHM1EsQ0FBQyxDQUFDMlEsUUFBUTtRQUNsQyxDQUFDLENBQUM7UUFDRixPQUFPUCxLQUFLO01BQ2hCO01BQ0EsU0FBU1ksVUFBVUEsQ0FBQ0MsSUFBSSxFQUFFO1FBQ3RCLE9BQVFBLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJQSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBS0EsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO01BQ25FO01BQ0EsU0FBU0MsUUFBUUEsQ0FBQzlGLE1BQU0sRUFBRTtRQUN0QixJQUFJQSxNQUFNLEdBQUcsQ0FBQyxFQUFFO1VBQ1osT0FBT0ksSUFBSSxDQUFDMkYsSUFBSSxDQUFDL0YsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNqQyxDQUFDLE1BQU07VUFDSCxPQUFPSSxJQUFJLENBQUM0RixLQUFLLENBQUNoRyxNQUFNLENBQUM7UUFDN0I7TUFDSjtNQUNBLFNBQVNpRyxLQUFLQSxDQUFDQyxtQkFBbUIsRUFBRTtRQUNoQyxJQUFJQyxhQUFhLEdBQUcsQ0FBQ0QsbUJBQW1CO1VBQ3BDelAsS0FBSyxHQUFHLENBQUM7UUFDYixJQUFJMFAsYUFBYSxLQUFLLENBQUMsSUFBSUMsUUFBUSxDQUFDRCxhQUFhLENBQUMsRUFBRTtVQUNoRDFQLEtBQUssR0FBR3FQLFFBQVEsQ0FBQ0ssYUFBYSxDQUFDO1FBQ25DO1FBQ0EsT0FBTzFQLEtBQUs7TUFDaEI7TUFDQSxTQUFTNFAsVUFBVUEsQ0FBQzFCLElBQUksRUFBRTJCLFFBQVEsRUFBRTtRQUNoQyxPQUFPLFVBQVU3UCxLQUFLLEVBQUU7VUFDcEIsSUFBSUEsS0FBSyxJQUFJLElBQUksRUFBRTtZQUNmOFAsS0FBSyxDQUFDLElBQUksRUFBRTVCLElBQUksRUFBRWxPLEtBQUssQ0FBQztZQUN4QnFCLEtBQUssQ0FBQ3NGLFlBQVksQ0FBQyxJQUFJLEVBQUVrSixRQUFRLENBQUM7WUFDbEMsT0FBTyxJQUFJO1VBQ2YsQ0FBQyxNQUFNO1lBQ0gsT0FBTzVSLEdBQUcsQ0FBQyxJQUFJLEVBQUVpUSxJQUFJLENBQUM7VUFDMUI7UUFDSixDQUFDO01BQ0w7TUFDQSxTQUFTalEsR0FBR0EsQ0FBQ2lMLEdBQUcsRUFBRWdGLElBQUksRUFBRTtRQUNwQixPQUFPaEYsR0FBRyxDQUFDdkUsT0FBTyxDQUFDLENBQUMsR0FDZHVFLEdBQUcsQ0FBQ2pFLEVBQUUsQ0FBQyxLQUFLLElBQUlpRSxHQUFHLENBQUM1QyxNQUFNLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHNEgsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUNsRDFJLEdBQUc7TUFDYjtNQUNBLFNBQVNzSyxLQUFLQSxDQUFDNUcsR0FBRyxFQUFFZ0YsSUFBSSxFQUFFbE8sS0FBSyxFQUFFO1FBQzdCLElBQUlrSixHQUFHLENBQUN2RSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNLLEtBQUssQ0FBQ2hGLEtBQUssQ0FBQyxFQUFFO1VBQ2hDLElBQ0lrTyxJQUFJLEtBQUssVUFBVSxJQUNuQmlCLFVBQVUsQ0FBQ2pHLEdBQUcsQ0FBQ2tHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFDdEJsRyxHQUFHLENBQUM2RyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFDakI3RyxHQUFHLENBQUM4RyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFDbkI7WUFDRWhRLEtBQUssR0FBR3dQLEtBQUssQ0FBQ3hQLEtBQUssQ0FBQztZQUNwQmtKLEdBQUcsQ0FBQ2pFLEVBQUUsQ0FBQyxLQUFLLElBQUlpRSxHQUFHLENBQUM1QyxNQUFNLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHNEgsSUFBSSxDQUFDLENBQzVDbE8sS0FBSyxFQUNMa0osR0FBRyxDQUFDNkcsS0FBSyxDQUFDLENBQUMsRUFDWEUsV0FBVyxDQUFDalEsS0FBSyxFQUFFa0osR0FBRyxDQUFDNkcsS0FBSyxDQUFDLENBQUMsQ0FDbEMsQ0FBQztVQUNMLENBQUMsTUFBTTtZQUNIN0csR0FBRyxDQUFDakUsRUFBRSxDQUFDLEtBQUssSUFBSWlFLEdBQUcsQ0FBQzVDLE1BQU0sR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUc0SCxJQUFJLENBQUMsQ0FBQ2xPLEtBQUssQ0FBQztVQUMzRDtRQUNKO01BQ0o7TUFDQSxTQUFTa1EsU0FBU0EsQ0FBQzNCLEtBQUssRUFBRTtRQUN0QkEsS0FBSyxHQUFHRCxjQUFjLENBQUNDLEtBQUssQ0FBQztRQUM3QixJQUFJM0csVUFBVSxDQUFDLElBQUksQ0FBQzJHLEtBQUssQ0FBQyxDQUFDLEVBQUU7VUFDekIsT0FBTyxJQUFJLENBQUNBLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDeEI7UUFDQSxPQUFPLElBQUk7TUFDZjtNQUNBLFNBQVM0QixTQUFTQSxDQUFDNUIsS0FBSyxFQUFFdk8sS0FBSyxFQUFFO1FBQzdCLElBQUlOLE9BQUEsQ0FBTzZPLEtBQUssTUFBSyxRQUFRLEVBQUU7VUFDM0JBLEtBQUssR0FBR0Msb0JBQW9CLENBQUNELEtBQUssQ0FBQztVQUNuQyxJQUFJNkIsV0FBVyxHQUFHckIsbUJBQW1CLENBQUNSLEtBQUssQ0FBQztZQUN4Qy9MLENBQUM7WUFDRDZOLGNBQWMsR0FBR0QsV0FBVyxDQUFDcE8sTUFBTTtVQUN2QyxLQUFLUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUc2TixjQUFjLEVBQUU3TixDQUFDLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUM0TixXQUFXLENBQUM1TixDQUFDLENBQUMsQ0FBQzBMLElBQUksQ0FBQyxDQUFDSyxLQUFLLENBQUM2QixXQUFXLENBQUM1TixDQUFDLENBQUMsQ0FBQzBMLElBQUksQ0FBQyxDQUFDO1VBQ3pEO1FBQ0osQ0FBQyxNQUFNO1VBQ0hLLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUM7VUFDN0IsSUFBSTNHLFVBQVUsQ0FBQyxJQUFJLENBQUMyRyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQ3ZPLEtBQUssQ0FBQztVQUM3QjtRQUNKO1FBQ0EsT0FBTyxJQUFJO01BQ2Y7TUFDQSxJQUFJc1EsTUFBTSxHQUFHLElBQUk7UUFDYkMsTUFBTSxHQUFHLE1BQU07UUFDZkMsTUFBTSxHQUFHLE9BQU87UUFDaEJDLE1BQU0sR0FBRyxPQUFPO1FBQ2hCQyxNQUFNLEdBQUcsWUFBWTtRQUNyQkMsU0FBUyxHQUFHLE9BQU87UUFDbkJDLFNBQVMsR0FBRyxXQUFXO1FBQ3ZCQyxTQUFTLEdBQUcsZUFBZTtRQUMzQkMsU0FBUyxHQUFHLFNBQVM7UUFDckJDLFNBQVMsR0FBRyxTQUFTO1FBQ3JCQyxTQUFTLEdBQUcsY0FBYztRQUMxQkMsYUFBYSxHQUFHLEtBQUs7UUFDckJDLFdBQVcsR0FBRyxVQUFVO1FBQ3hCQyxXQUFXLEdBQUcsb0JBQW9CO1FBQ2xDQyxnQkFBZ0IsR0FBRyx5QkFBeUI7UUFDNUNDLGNBQWMsR0FBRyxzQkFBc0I7UUFDdkNDLFNBQVMsR0FDTCx1SkFBdUo7UUFDM0pDLE9BQU87TUFDWEEsT0FBTyxHQUFHLENBQUMsQ0FBQztNQUNaLFNBQVNDLGFBQWFBLENBQUNqSCxNQUFNLEVBQUVrSCxLQUFLLEVBQUVDLFdBQVcsRUFBRTtRQUMvQ0gsT0FBTyxDQUFDaEgsTUFBTSxDQUFDLEdBQUczQyxVQUFVLENBQUM2SixLQUFLLENBQUMsR0FDN0JBLEtBQUssR0FDTCxVQUFVRSxRQUFRLEVBQUVDLFdBQVcsRUFBRTtVQUM3QixPQUFPRCxRQUFRLElBQUlELFdBQVcsR0FBR0EsV0FBVyxHQUFHRCxLQUFLO1FBQ3hELENBQUM7TUFDWDtNQUNBLFNBQVNJLHFCQUFxQkEsQ0FBQ3RILE1BQU0sRUFBRTdELE1BQU0sRUFBRTtRQUMzQyxJQUFJLENBQUM3RSxVQUFVLENBQUMwUCxPQUFPLEVBQUVoSCxNQUFNLENBQUMsRUFBRTtVQUM5QixPQUFPLElBQUl0QyxNQUFNLENBQUM2SixjQUFjLENBQUN2SCxNQUFNLENBQUMsQ0FBQztRQUM3QztRQUNBLE9BQU9nSCxPQUFPLENBQUNoSCxNQUFNLENBQUMsQ0FBQzdELE1BQU0sQ0FBQ3RCLE9BQU8sRUFBRXNCLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDO01BQzFEO01BQ0EsU0FBU3NMLGNBQWNBLENBQUM1UixDQUFDLEVBQUU7UUFDdkIsT0FBTzZSLFdBQVcsQ0FDZDdSLENBQUMsQ0FDSTZLLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQ2pCQSxPQUFPLENBQ0oscUNBQXFDLEVBQ3JDLFVBQVVpSCxPQUFPLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRTtVQUMvQixPQUFPSCxFQUFFLElBQUlDLEVBQUUsSUFBSUMsRUFBRSxJQUFJQyxFQUFFO1FBQy9CLENBQ0osQ0FDUixDQUFDO01BQ0w7TUFDQSxTQUFTTCxXQUFXQSxDQUFDN1IsQ0FBQyxFQUFFO1FBQ3BCLE9BQU9BLENBQUMsQ0FBQzZLLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUM7TUFDdEQ7TUFDQSxJQUFJc0gsTUFBTSxHQUFHLENBQUMsQ0FBQztNQUNmLFNBQVNDLGFBQWFBLENBQUMvSCxNQUFNLEVBQUVoSixRQUFRLEVBQUU7UUFDckMsSUFBSWlCLENBQUM7VUFDRGtJLElBQUksR0FBR25KLFFBQVE7VUFDZmdSLFFBQVE7UUFDWixJQUFJLE9BQU9oSSxNQUFNLEtBQUssUUFBUSxFQUFFO1VBQzVCQSxNQUFNLEdBQUcsQ0FBQ0EsTUFBTSxDQUFDO1FBQ3JCO1FBQ0EsSUFBSXBJLFFBQVEsQ0FBQ1osUUFBUSxDQUFDLEVBQUU7VUFDcEJtSixJQUFJLEdBQUcsU0FBQUEsS0FBVWpKLEtBQUssRUFBRXdKLEtBQUssRUFBRTtZQUMzQkEsS0FBSyxDQUFDMUosUUFBUSxDQUFDLEdBQUdpTyxLQUFLLENBQUMvTixLQUFLLENBQUM7VUFDbEMsQ0FBQztRQUNMO1FBQ0E4USxRQUFRLEdBQUdoSSxNQUFNLENBQUN2SSxNQUFNO1FBQ3hCLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRytQLFFBQVEsRUFBRS9QLENBQUMsRUFBRSxFQUFFO1VBQzNCNlAsTUFBTSxDQUFDOUgsTUFBTSxDQUFDL0gsQ0FBQyxDQUFDLENBQUMsR0FBR2tJLElBQUk7UUFDNUI7TUFDSjtNQUNBLFNBQVM4SCxpQkFBaUJBLENBQUNqSSxNQUFNLEVBQUVoSixRQUFRLEVBQUU7UUFDekMrUSxhQUFhLENBQUMvSCxNQUFNLEVBQUUsVUFBVTlJLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRStMLE1BQU0sRUFBRTtVQUMxRC9MLE1BQU0sQ0FBQ2dNLEVBQUUsR0FBR2hNLE1BQU0sQ0FBQ2dNLEVBQUUsSUFBSSxDQUFDLENBQUM7VUFDM0JuUixRQUFRLENBQUNFLEtBQUssRUFBRWlGLE1BQU0sQ0FBQ2dNLEVBQUUsRUFBRWhNLE1BQU0sRUFBRStMLE1BQU0sQ0FBQztRQUM5QyxDQUFDLENBQUM7TUFDTjtNQUNBLFNBQVNFLHVCQUF1QkEsQ0FBQ3BJLE1BQU0sRUFBRTlJLEtBQUssRUFBRWlGLE1BQU0sRUFBRTtRQUNwRCxJQUFJakYsS0FBSyxJQUFJLElBQUksSUFBSUksVUFBVSxDQUFDd1EsTUFBTSxFQUFFOUgsTUFBTSxDQUFDLEVBQUU7VUFDN0M4SCxNQUFNLENBQUM5SCxNQUFNLENBQUMsQ0FBQzlJLEtBQUssRUFBRWlGLE1BQU0sQ0FBQ2tNLEVBQUUsRUFBRWxNLE1BQU0sRUFBRTZELE1BQU0sQ0FBQztRQUNwRDtNQUNKO01BQ0EsSUFBSXNJLElBQUksR0FBRyxDQUFDO1FBQ1JDLEtBQUssR0FBRyxDQUFDO1FBQ1RDLElBQUksR0FBRyxDQUFDO1FBQ1JDLElBQUksR0FBRyxDQUFDO1FBQ1JDLE1BQU0sR0FBRyxDQUFDO1FBQ1ZDLE1BQU0sR0FBRyxDQUFDO1FBQ1ZDLFdBQVcsR0FBRyxDQUFDO1FBQ2ZDLElBQUksR0FBRyxDQUFDO1FBQ1JDLE9BQU8sR0FBRyxDQUFDO01BQ2YsU0FBU3ZVLEdBQUdBLENBQUNxQixDQUFDLEVBQUVyQyxDQUFDLEVBQUU7UUFDZixPQUFPLENBQUVxQyxDQUFDLEdBQUdyQyxDQUFDLEdBQUlBLENBQUMsSUFBSUEsQ0FBQztNQUM1QjtNQUNBLElBQUl3VixPQUFPO01BQ1gsSUFBSTVSLEtBQUssQ0FBQy9ELFNBQVMsQ0FBQzJWLE9BQU8sRUFBRTtRQUN6QkEsT0FBTyxHQUFHNVIsS0FBSyxDQUFDL0QsU0FBUyxDQUFDMlYsT0FBTztNQUNyQyxDQUFDLE1BQU07UUFDSEEsT0FBTyxHQUFHLFNBQUFBLFFBQVVDLENBQUMsRUFBRTtVQUNuQixJQUFJL1EsQ0FBQztVQUNMLEtBQUtBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNSLE1BQU0sRUFBRSxFQUFFUSxDQUFDLEVBQUU7WUFDOUIsSUFBSSxJQUFJLENBQUNBLENBQUMsQ0FBQyxLQUFLK1EsQ0FBQyxFQUFFO2NBQ2YsT0FBTy9RLENBQUM7WUFDWjtVQUNKO1VBQ0EsT0FBTyxDQUFDLENBQUM7UUFDYixDQUFDO01BQ0w7TUFDQSxTQUFTeU4sV0FBV0EsQ0FBQ2IsSUFBSSxFQUFFVyxLQUFLLEVBQUU7UUFDOUIsSUFBSS9LLEtBQUssQ0FBQ29LLElBQUksQ0FBQyxJQUFJcEssS0FBSyxDQUFDK0ssS0FBSyxDQUFDLEVBQUU7VUFDN0IsT0FBT3ZLLEdBQUc7UUFDZDtRQUNBLElBQUlnTyxRQUFRLEdBQUcxVSxHQUFHLENBQUNpUixLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQzdCWCxJQUFJLElBQUksQ0FBQ1csS0FBSyxHQUFHeUQsUUFBUSxJQUFJLEVBQUU7UUFDL0IsT0FBT0EsUUFBUSxLQUFLLENBQUMsR0FDZnJFLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLEdBQ1osRUFBRSxHQUNGLEVBQUUsR0FDTixFQUFFLEdBQUtvRSxRQUFRLEdBQUcsQ0FBQyxHQUFJLENBQUU7TUFDbkM7TUFDQWxKLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVk7UUFDN0MsT0FBTyxJQUFJLENBQUN5RixLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7TUFDM0IsQ0FBQyxDQUFDO01BQ0Z6RixjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVXhILE9BQU8sRUFBRTtRQUMzQyxPQUFPLElBQUksQ0FBQzZILFVBQVUsQ0FBQyxDQUFDLENBQUM4SSxXQUFXLENBQUMsSUFBSSxFQUFFM1EsT0FBTyxDQUFDO01BQ3ZELENBQUMsQ0FBQztNQUNGd0gsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVV4SCxPQUFPLEVBQUU7UUFDNUMsT0FBTyxJQUFJLENBQUM2SCxVQUFVLENBQUMsQ0FBQyxDQUFDK0ksTUFBTSxDQUFDLElBQUksRUFBRTVRLE9BQU8sQ0FBQztNQUNsRCxDQUFDLENBQUM7TUFDRm1MLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO01BQzFCWSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztNQUMzQjJDLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztNQUM3QmEsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7TUFDdENpQixhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVVHLFFBQVEsRUFBRTVPLE9BQU8sRUFBRTtRQUM5QyxPQUFPQSxPQUFPLENBQUM0USxnQkFBZ0IsQ0FBQ2hDLFFBQVEsQ0FBQztNQUM3QyxDQUFDLENBQUM7TUFDRkgsYUFBYSxDQUFDLE1BQU0sRUFBRSxVQUFVRyxRQUFRLEVBQUU1TyxPQUFPLEVBQUU7UUFDL0MsT0FBT0EsT0FBTyxDQUFDNlEsV0FBVyxDQUFDakMsUUFBUSxDQUFDO01BQ3hDLENBQUMsQ0FBQztNQUNGVyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtRQUMvQ0EsS0FBSyxDQUFDNkgsS0FBSyxDQUFDLEdBQUd0RCxLQUFLLENBQUMvTixLQUFLLENBQUMsR0FBRyxDQUFDO01BQ25DLENBQUMsQ0FBQztNQUNGNlEsYUFBYSxDQUNULENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUNmLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU2RCxNQUFNLEVBQUU7UUFDcEMsSUFBSXdGLEtBQUssR0FBR3JKLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDcU4sV0FBVyxDQUNsQ3BTLEtBQUssRUFDTDhJLE1BQU0sRUFDTjdELE1BQU0sQ0FBQ3RCLE9BQ1gsQ0FBQztRQUNELElBQUkySyxLQUFLLElBQUksSUFBSSxFQUFFO1VBQ2Y5RSxLQUFLLENBQUM2SCxLQUFLLENBQUMsR0FBRy9DLEtBQUs7UUFDeEIsQ0FBQyxNQUFNO1VBQ0gzTCxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQy9DLFlBQVksR0FBR2xDLEtBQUs7UUFDaEQ7TUFDSixDQUNKLENBQUM7TUFDRCxJQUFJcVMsbUJBQW1CLEdBQ2YsdUZBQXVGLENBQUNDLEtBQUssQ0FDekYsR0FDSixDQUFDO1FBQ0xDLHdCQUF3QixHQUNwQixpREFBaUQsQ0FBQ0QsS0FBSyxDQUNuRCxHQUNKLENBQUM7UUFDTEUsZ0JBQWdCLEdBQUcsK0JBQStCO1FBQ2xEQyx1QkFBdUIsR0FBRzVDLFNBQVM7UUFDbkM2QyxrQkFBa0IsR0FBRzdDLFNBQVM7TUFDbEMsU0FBUzhDLFlBQVlBLENBQUMvUCxDQUFDLEVBQUV2QixPQUFPLEVBQUU7UUFDOUIsSUFBSSxDQUFDdUIsQ0FBQyxFQUFFO1VBQ0osT0FBTzdDLE9BQU8sQ0FBQyxJQUFJLENBQUM2UyxPQUFPLENBQUMsR0FDdEIsSUFBSSxDQUFDQSxPQUFPLEdBQ1osSUFBSSxDQUFDQSxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDO1FBQ0EsT0FBTzdTLE9BQU8sQ0FBQyxJQUFJLENBQUM2UyxPQUFPLENBQUMsR0FDdEIsSUFBSSxDQUFDQSxPQUFPLENBQUNoUSxDQUFDLENBQUMwTCxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQ3ZCLElBQUksQ0FBQ3NFLE9BQU8sQ0FDUixDQUFDLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxRQUFRLElBQUlMLGdCQUFnQixFQUFFeEksSUFBSSxDQUM1QzNJLE9BQ0osQ0FBQyxHQUNLLFFBQVEsR0FDUixZQUFZLENBQ3JCLENBQUN1QixDQUFDLENBQUMwTCxLQUFLLENBQUMsQ0FBQyxDQUFDO01BQ3RCO01BQ0EsU0FBU3dFLGlCQUFpQkEsQ0FBQ2xRLENBQUMsRUFBRXZCLE9BQU8sRUFBRTtRQUNuQyxJQUFJLENBQUN1QixDQUFDLEVBQUU7VUFDSixPQUFPN0MsT0FBTyxDQUFDLElBQUksQ0FBQ2dULFlBQVksQ0FBQyxHQUMzQixJQUFJLENBQUNBLFlBQVksR0FDakIsSUFBSSxDQUFDQSxZQUFZLENBQUMsWUFBWSxDQUFDO1FBQ3pDO1FBQ0EsT0FBT2hULE9BQU8sQ0FBQyxJQUFJLENBQUNnVCxZQUFZLENBQUMsR0FDM0IsSUFBSSxDQUFDQSxZQUFZLENBQUNuUSxDQUFDLENBQUMwTCxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQzVCLElBQUksQ0FBQ3lFLFlBQVksQ0FDYlAsZ0JBQWdCLENBQUN4SSxJQUFJLENBQUMzSSxPQUFPLENBQUMsR0FDeEIsUUFBUSxHQUNSLFlBQVksQ0FDckIsQ0FBQ3VCLENBQUMsQ0FBQzBMLEtBQUssQ0FBQyxDQUFDLENBQUM7TUFDdEI7TUFDQSxTQUFTMEUsaUJBQWlCQSxDQUFDQyxTQUFTLEVBQUU1UixPQUFPLEVBQUVFLE1BQU0sRUFBRTtRQUNuRCxJQUFJUixDQUFDO1VBQ0RtUyxFQUFFO1VBQ0Z6TCxHQUFHO1VBQ0gwTCxHQUFHLEdBQUdGLFNBQVMsQ0FBQ0csaUJBQWlCLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDQyxZQUFZLEVBQUU7VUFDcEIsSUFBSSxDQUFDQSxZQUFZLEdBQUcsRUFBRTtVQUN0QixJQUFJLENBQUNDLGdCQUFnQixHQUFHLEVBQUU7VUFDMUIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxFQUFFO1VBQzNCLEtBQUt4UyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUVBLENBQUMsRUFBRTtZQUNyQjBHLEdBQUcsR0FBR3JHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRUwsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDd1MsaUJBQWlCLENBQUN4UyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNpUixXQUFXLENBQ3hDdkssR0FBRyxFQUNILEVBQ0osQ0FBQyxDQUFDMkwsaUJBQWlCLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUNFLGdCQUFnQixDQUFDdlMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDa1IsTUFBTSxDQUNsQ3hLLEdBQUcsRUFDSCxFQUNKLENBQUMsQ0FBQzJMLGlCQUFpQixDQUFDLENBQUM7VUFDekI7UUFDSjtRQUNBLElBQUk3UixNQUFNLEVBQUU7VUFDUixJQUFJRixPQUFPLEtBQUssS0FBSyxFQUFFO1lBQ25CNlIsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQytVLGlCQUFpQixFQUFFSixHQUFHLENBQUM7WUFDOUMsT0FBT0QsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxFQUFFLEdBQUcsSUFBSTtVQUNoQyxDQUFDLE1BQU07WUFDSEEsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQzhVLGdCQUFnQixFQUFFSCxHQUFHLENBQUM7WUFDN0MsT0FBT0QsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxFQUFFLEdBQUcsSUFBSTtVQUNoQztRQUNKLENBQUMsTUFBTTtVQUNILElBQUk3UixPQUFPLEtBQUssS0FBSyxFQUFFO1lBQ25CNlIsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQytVLGlCQUFpQixFQUFFSixHQUFHLENBQUM7WUFDOUMsSUFBSUQsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO2NBQ1gsT0FBT0EsRUFBRTtZQUNiO1lBQ0FBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUM4VSxnQkFBZ0IsRUFBRUgsR0FBRyxDQUFDO1lBQzdDLE9BQU9ELEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBR0EsRUFBRSxHQUFHLElBQUk7VUFDaEMsQ0FBQyxNQUFNO1lBQ0hBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUM4VSxnQkFBZ0IsRUFBRUgsR0FBRyxDQUFDO1lBQzdDLElBQUlELEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRTtjQUNYLE9BQU9BLEVBQUU7WUFDYjtZQUNBQSxFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDK1UsaUJBQWlCLEVBQUVKLEdBQUcsQ0FBQztZQUM5QyxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO1VBQ2hDO1FBQ0o7TUFDSjtNQUNBLFNBQVNNLGlCQUFpQkEsQ0FBQ1AsU0FBUyxFQUFFNVIsT0FBTyxFQUFFRSxNQUFNLEVBQUU7UUFDbkQsSUFBSVIsQ0FBQyxFQUFFMEcsR0FBRyxFQUFFdUksS0FBSztRQUNqQixJQUFJLElBQUksQ0FBQ3lELGlCQUFpQixFQUFFO1VBQ3hCLE9BQU9ULGlCQUFpQixDQUFDeFUsSUFBSSxDQUN6QixJQUFJLEVBQ0p5VSxTQUFTLEVBQ1Q1UixPQUFPLEVBQ1BFLE1BQ0osQ0FBQztRQUNMO1FBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQzhSLFlBQVksRUFBRTtVQUNwQixJQUFJLENBQUNBLFlBQVksR0FBRyxFQUFFO1VBQ3RCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsRUFBRTtVQUMxQixJQUFJLENBQUNDLGlCQUFpQixHQUFHLEVBQUU7UUFDL0I7UUFDQSxLQUFLeFMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7VUFDckIwRyxHQUFHLEdBQUdyRyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUVMLENBQUMsQ0FBQyxDQUFDO1VBQ3pCLElBQUlRLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQytSLGdCQUFnQixDQUFDdlMsQ0FBQyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDdVMsZ0JBQWdCLENBQUN2UyxDQUFDLENBQUMsR0FBRyxJQUFJeUYsTUFBTSxDQUNqQyxHQUFHLEdBQUcsSUFBSSxDQUFDeUwsTUFBTSxDQUFDeEssR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDNkIsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQ2pELEdBQ0osQ0FBQztZQUNELElBQUksQ0FBQ2lLLGlCQUFpQixDQUFDeFMsQ0FBQyxDQUFDLEdBQUcsSUFBSXlGLE1BQU0sQ0FDbEMsR0FBRyxHQUNDLElBQUksQ0FBQ3dMLFdBQVcsQ0FBQ3ZLLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzZCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQzFDLEdBQUcsRUFDUCxHQUNKLENBQUM7VUFDTDtVQUNBLElBQUksQ0FBQy9ILE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQzhSLFlBQVksQ0FBQ3RTLENBQUMsQ0FBQyxFQUFFO1lBQ2xDaVAsS0FBSyxHQUNELEdBQUcsR0FDSCxJQUFJLENBQUNpQyxNQUFNLENBQUN4SyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQ3BCLElBQUksR0FDSixJQUFJLENBQUN1SyxXQUFXLENBQUN2SyxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQzRMLFlBQVksQ0FBQ3RTLENBQUMsQ0FBQyxHQUFHLElBQUl5RixNQUFNLENBQzdCd0osS0FBSyxDQUFDMUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDdEIsR0FDSixDQUFDO1VBQ0w7VUFDQSxJQUNJL0gsTUFBTSxJQUNORixPQUFPLEtBQUssTUFBTSxJQUNsQixJQUFJLENBQUNpUyxnQkFBZ0IsQ0FBQ3ZTLENBQUMsQ0FBQyxDQUFDaUosSUFBSSxDQUFDaUosU0FBUyxDQUFDLEVBQzFDO1lBQ0UsT0FBT2xTLENBQUM7VUFDWixDQUFDLE1BQU0sSUFDSFEsTUFBTSxJQUNORixPQUFPLEtBQUssS0FBSyxJQUNqQixJQUFJLENBQUNrUyxpQkFBaUIsQ0FBQ3hTLENBQUMsQ0FBQyxDQUFDaUosSUFBSSxDQUFDaUosU0FBUyxDQUFDLEVBQzNDO1lBQ0UsT0FBT2xTLENBQUM7VUFDWixDQUFDLE1BQU0sSUFDSCxDQUFDUSxNQUFNLElBQ1AsSUFBSSxDQUFDOFIsWUFBWSxDQUFDdFMsQ0FBQyxDQUFDLENBQUNpSixJQUFJLENBQUNpSixTQUFTLENBQUMsRUFDdEM7WUFDRSxPQUFPbFMsQ0FBQztVQUNaO1FBQ0o7TUFDSjtNQUNBLFNBQVMyUyxRQUFRQSxDQUFDak0sR0FBRyxFQUFFbEosS0FBSyxFQUFFO1FBQzFCLElBQUlvVixVQUFVO1FBQ2QsSUFBSSxDQUFDbE0sR0FBRyxDQUFDdkUsT0FBTyxDQUFDLENBQUMsRUFBRTtVQUNoQixPQUFPdUUsR0FBRztRQUNkO1FBQ0EsSUFBSSxPQUFPbEosS0FBSyxLQUFLLFFBQVEsRUFBRTtVQUMzQixJQUFJLE9BQU8sQ0FBQ3lMLElBQUksQ0FBQ3pMLEtBQUssQ0FBQyxFQUFFO1lBQ3JCQSxLQUFLLEdBQUd3UCxLQUFLLENBQUN4UCxLQUFLLENBQUM7VUFDeEIsQ0FBQyxNQUFNO1lBQ0hBLEtBQUssR0FBR2tKLEdBQUcsQ0FBQ3lCLFVBQVUsQ0FBQyxDQUFDLENBQUNrSixXQUFXLENBQUM3VCxLQUFLLENBQUM7WUFDM0MsSUFBSSxDQUFDbUMsUUFBUSxDQUFDbkMsS0FBSyxDQUFDLEVBQUU7Y0FDbEIsT0FBT2tKLEdBQUc7WUFDZDtVQUNKO1FBQ0o7UUFDQWtNLFVBQVUsR0FBR3pMLElBQUksQ0FBQzBMLEdBQUcsQ0FDakJuTSxHQUFHLENBQUM4RyxJQUFJLENBQUMsQ0FBQyxFQUNWQyxXQUFXLENBQUMvRyxHQUFHLENBQUNrRyxJQUFJLENBQUMsQ0FBQyxFQUFFcFAsS0FBSyxDQUNqQyxDQUFDO1FBQ0RrSixHQUFHLENBQUNqRSxFQUFFLENBQUMsS0FBSyxJQUFJaUUsR0FBRyxDQUFDNUMsTUFBTSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FDL0N0RyxLQUFLLEVBQ0xvVixVQUNKLENBQUM7UUFDRCxPQUFPbE0sR0FBRztNQUNkO01BQ0EsU0FBU29NLFdBQVdBLENBQUN0VixLQUFLLEVBQUU7UUFDeEIsSUFBSUEsS0FBSyxJQUFJLElBQUksRUFBRTtVQUNmbVYsUUFBUSxDQUFDLElBQUksRUFBRW5WLEtBQUssQ0FBQztVQUNyQnFCLEtBQUssQ0FBQ3NGLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1VBQzlCLE9BQU8sSUFBSTtRQUNmLENBQUMsTUFBTTtVQUNILE9BQU8xSSxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztRQUM3QjtNQUNKO01BQ0EsU0FBU3NYLGNBQWNBLENBQUEsRUFBRztRQUN0QixPQUFPdEYsV0FBVyxDQUFDLElBQUksQ0FBQ2IsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLENBQUM7TUFDakQ7TUFDQSxTQUFTNEQsZ0JBQWdCQSxDQUFDaEMsUUFBUSxFQUFFO1FBQ2hDLElBQUksSUFBSSxDQUFDdUQsaUJBQWlCLEVBQUU7VUFDeEIsSUFBSSxDQUFDclQsVUFBVSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsRUFBRTtZQUNuQzJULGtCQUFrQixDQUFDdlYsSUFBSSxDQUFDLElBQUksQ0FBQztVQUNqQztVQUNBLElBQUkwUixRQUFRLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQzhELHVCQUF1QjtVQUN2QyxDQUFDLE1BQU07WUFDSCxPQUFPLElBQUksQ0FBQ0MsaUJBQWlCO1VBQ2pDO1FBQ0osQ0FBQyxNQUFNO1VBQ0gsSUFBSSxDQUFDN1QsVUFBVSxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQzZULGlCQUFpQixHQUFHeEIsdUJBQXVCO1VBQ3BEO1VBQ0EsT0FBTyxJQUFJLENBQUN1Qix1QkFBdUIsSUFBSTlELFFBQVEsR0FDekMsSUFBSSxDQUFDOEQsdUJBQXVCLEdBQzVCLElBQUksQ0FBQ0MsaUJBQWlCO1FBQ2hDO01BQ0o7TUFDQSxTQUFTOUIsV0FBV0EsQ0FBQ2pDLFFBQVEsRUFBRTtRQUMzQixJQUFJLElBQUksQ0FBQ3VELGlCQUFpQixFQUFFO1VBQ3hCLElBQUksQ0FBQ3JULFVBQVUsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLEVBQUU7WUFDbkMyVCxrQkFBa0IsQ0FBQ3ZWLElBQUksQ0FBQyxJQUFJLENBQUM7VUFDakM7VUFDQSxJQUFJMFIsUUFBUSxFQUFFO1lBQ1YsT0FBTyxJQUFJLENBQUNnRSxrQkFBa0I7VUFDbEMsQ0FBQyxNQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUNDLFlBQVk7VUFDNUI7UUFDSixDQUFDLE1BQU07VUFDSCxJQUFJLENBQUMvVCxVQUFVLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQytULFlBQVksR0FBR3pCLGtCQUFrQjtVQUMxQztVQUNBLE9BQU8sSUFBSSxDQUFDd0Isa0JBQWtCLElBQUloRSxRQUFRLEdBQ3BDLElBQUksQ0FBQ2dFLGtCQUFrQixHQUN2QixJQUFJLENBQUNDLFlBQVk7UUFDM0I7TUFDSjtNQUNBLFNBQVNKLGtCQUFrQkEsQ0FBQSxFQUFHO1FBQzFCLFNBQVNLLFNBQVNBLENBQUMzWCxDQUFDLEVBQUVDLENBQUMsRUFBRTtVQUNyQixPQUFPQSxDQUFDLENBQUM2RCxNQUFNLEdBQUc5RCxDQUFDLENBQUM4RCxNQUFNO1FBQzlCO1FBQ0EsSUFBSThULFdBQVcsR0FBRyxFQUFFO1VBQ2hCQyxVQUFVLEdBQUcsRUFBRTtVQUNmQyxXQUFXLEdBQUcsRUFBRTtVQUNoQnhULENBQUM7VUFDRDBHLEdBQUc7UUFDUCxLQUFLMUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7VUFDckIwRyxHQUFHLEdBQUdyRyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUVMLENBQUMsQ0FBQyxDQUFDO1VBQ3pCc1QsV0FBVyxDQUFDcFQsSUFBSSxDQUFDLElBQUksQ0FBQytRLFdBQVcsQ0FBQ3ZLLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztVQUMzQzZNLFVBQVUsQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNnUixNQUFNLENBQUN4SyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7VUFDckM4TSxXQUFXLENBQUN0VCxJQUFJLENBQUMsSUFBSSxDQUFDZ1IsTUFBTSxDQUFDeEssR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1VBQ3RDOE0sV0FBVyxDQUFDdFQsSUFBSSxDQUFDLElBQUksQ0FBQytRLFdBQVcsQ0FBQ3ZLLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQztRQUNBNE0sV0FBVyxDQUFDNUcsSUFBSSxDQUFDMkcsU0FBUyxDQUFDO1FBQzNCRSxVQUFVLENBQUM3RyxJQUFJLENBQUMyRyxTQUFTLENBQUM7UUFDMUJHLFdBQVcsQ0FBQzlHLElBQUksQ0FBQzJHLFNBQVMsQ0FBQztRQUMzQixLQUFLclQsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7VUFDckJzVCxXQUFXLENBQUN0VCxDQUFDLENBQUMsR0FBR3VQLFdBQVcsQ0FBQytELFdBQVcsQ0FBQ3RULENBQUMsQ0FBQyxDQUFDO1VBQzVDdVQsVUFBVSxDQUFDdlQsQ0FBQyxDQUFDLEdBQUd1UCxXQUFXLENBQUNnRSxVQUFVLENBQUN2VCxDQUFDLENBQUMsQ0FBQztRQUM5QztRQUNBLEtBQUtBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxFQUFFLEVBQUVBLENBQUMsRUFBRSxFQUFFO1VBQ3JCd1QsV0FBVyxDQUFDeFQsQ0FBQyxDQUFDLEdBQUd1UCxXQUFXLENBQUNpRSxXQUFXLENBQUN4VCxDQUFDLENBQUMsQ0FBQztRQUNoRDtRQUNBLElBQUksQ0FBQ29ULFlBQVksR0FBRyxJQUFJM04sTUFBTSxDQUMxQixJQUFJLEdBQUcrTixXQUFXLENBQUN4TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNsQyxHQUNKLENBQUM7UUFDRCxJQUFJLENBQUNrTyxpQkFBaUIsR0FBRyxJQUFJLENBQUNFLFlBQVk7UUFDMUMsSUFBSSxDQUFDRCxrQkFBa0IsR0FBRyxJQUFJMU4sTUFBTSxDQUNoQyxJQUFJLEdBQUc4TixVQUFVLENBQUN2TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNqQyxHQUNKLENBQUM7UUFDRCxJQUFJLENBQUNpTyx1QkFBdUIsR0FBRyxJQUFJeE4sTUFBTSxDQUNyQyxJQUFJLEdBQUc2TixXQUFXLENBQUN0TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNsQyxHQUNKLENBQUM7TUFDTDtNQUNBOEMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7UUFDbEMsSUFBSWlELENBQUMsR0FBRyxJQUFJLENBQUM2QixJQUFJLENBQUMsQ0FBQztRQUNuQixPQUFPN0IsQ0FBQyxJQUFJLElBQUksR0FBR2pFLFFBQVEsQ0FBQ2lFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdBLENBQUM7TUFDL0MsQ0FBQyxDQUFDO01BQ0ZqRCxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO1FBQ3hDLE9BQU8sSUFBSSxDQUFDOEUsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHO01BQzVCLENBQUMsQ0FBQztNQUNGOUUsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDO01BQ3pDQSxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUM7TUFDMUNBLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUM7TUFDakQyRCxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztNQUN6QlksZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7TUFDMUIyQyxhQUFhLENBQUMsR0FBRyxFQUFFTixXQUFXLENBQUM7TUFDL0JNLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO01BQ3RDaUIsYUFBYSxDQUFDLE1BQU0sRUFBRVQsU0FBUyxFQUFFTixNQUFNLENBQUM7TUFDeENlLGFBQWEsQ0FBQyxPQUFPLEVBQUVSLFNBQVMsRUFBRU4sTUFBTSxDQUFDO01BQ3pDYyxhQUFhLENBQUMsUUFBUSxFQUFFUixTQUFTLEVBQUVOLE1BQU0sQ0FBQztNQUMxQzRCLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRU8sSUFBSSxDQUFDO01BQ3hDUCxhQUFhLENBQUMsTUFBTSxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUU7UUFDMUNBLEtBQUssQ0FBQzRILElBQUksQ0FBQyxHQUNQcFIsS0FBSyxDQUFDTyxNQUFNLEtBQUssQ0FBQyxHQUNaWCxLQUFLLENBQUM0VSxpQkFBaUIsQ0FBQ3hVLEtBQUssQ0FBQyxHQUM5QitOLEtBQUssQ0FBQy9OLEtBQUssQ0FBQztNQUMxQixDQUFDLENBQUM7TUFDRjZRLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtRQUN4Q0EsS0FBSyxDQUFDNEgsSUFBSSxDQUFDLEdBQUd4UixLQUFLLENBQUM0VSxpQkFBaUIsQ0FBQ3hVLEtBQUssQ0FBQztNQUNoRCxDQUFDLENBQUM7TUFDRjZRLGFBQWEsQ0FBQyxHQUFHLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtRQUN2Q0EsS0FBSyxDQUFDNEgsSUFBSSxDQUFDLEdBQUdxRCxRQUFRLENBQUN6VSxLQUFLLEVBQUUsRUFBRSxDQUFDO01BQ3JDLENBQUMsQ0FBQztNQUNGLFNBQVMwVSxVQUFVQSxDQUFDL0csSUFBSSxFQUFFO1FBQ3RCLE9BQU9ELFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUc7TUFDdkM7TUFDQS9OLEtBQUssQ0FBQzRVLGlCQUFpQixHQUFHLFVBQVV4VSxLQUFLLEVBQUU7UUFDdkMsT0FBTytOLEtBQUssQ0FBQy9OLEtBQUssQ0FBQyxJQUFJK04sS0FBSyxDQUFDL04sS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUM7TUFDMUQsQ0FBQztNQUNELElBQUkyVSxVQUFVLEdBQUd4RyxVQUFVLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQztNQUM3QyxTQUFTeUcsYUFBYUEsQ0FBQSxFQUFHO1FBQ3JCLE9BQU9sSCxVQUFVLENBQUMsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO01BQ2xDO01BQ0EsU0FBU2tILFVBQVVBLENBQUMvSSxDQUFDLEVBQUVsSixDQUFDLEVBQUU0SSxDQUFDLEVBQUVGLENBQUMsRUFBRU0sQ0FBQyxFQUFFbk4sQ0FBQyxFQUFFcVcsRUFBRSxFQUFFO1FBQ3RDLElBQUl2RyxJQUFJO1FBQ1IsSUFBSXpDLENBQUMsR0FBRyxHQUFHLElBQUlBLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDbkJ5QyxJQUFJLEdBQUcsSUFBSTNOLElBQUksQ0FBQ2tMLENBQUMsR0FBRyxHQUFHLEVBQUVsSixDQUFDLEVBQUU0SSxDQUFDLEVBQUVGLENBQUMsRUFBRU0sQ0FBQyxFQUFFbk4sQ0FBQyxFQUFFcVcsRUFBRSxDQUFDO1VBQzNDLElBQUk1RyxRQUFRLENBQUNLLElBQUksQ0FBQ3dHLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM5QnhHLElBQUksQ0FBQ3lHLFdBQVcsQ0FBQ2xKLENBQUMsQ0FBQztVQUN2QjtRQUNKLENBQUMsTUFBTTtVQUNIeUMsSUFBSSxHQUFHLElBQUkzTixJQUFJLENBQUNrTCxDQUFDLEVBQUVsSixDQUFDLEVBQUU0SSxDQUFDLEVBQUVGLENBQUMsRUFBRU0sQ0FBQyxFQUFFbk4sQ0FBQyxFQUFFcVcsRUFBRSxDQUFDO1FBQ3pDO1FBQ0EsT0FBT3ZHLElBQUk7TUFDZjtNQUNBLFNBQVMwRyxhQUFhQSxDQUFDbkosQ0FBQyxFQUFFO1FBQ3RCLElBQUl5QyxJQUFJLEVBQUU1SSxJQUFJO1FBQ2QsSUFBSW1HLENBQUMsR0FBRyxHQUFHLElBQUlBLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDbkJuRyxJQUFJLEdBQUcxRixLQUFLLENBQUMvRCxTQUFTLENBQUM0SixLQUFLLENBQUN0SCxJQUFJLENBQUM1QixTQUFTLENBQUM7VUFDNUMrSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdtRyxDQUFDLEdBQUcsR0FBRztVQUNqQnlDLElBQUksR0FBRyxJQUFJM04sSUFBSSxDQUFDQSxJQUFJLENBQUNzVSxHQUFHLENBQUN2WSxLQUFLLENBQUMsSUFBSSxFQUFFZ0osSUFBSSxDQUFDLENBQUM7VUFDM0MsSUFBSXVJLFFBQVEsQ0FBQ0ssSUFBSSxDQUFDNEcsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2pDNUcsSUFBSSxDQUFDNkcsY0FBYyxDQUFDdEosQ0FBQyxDQUFDO1VBQzFCO1FBQ0osQ0FBQyxNQUFNO1VBQ0h5QyxJQUFJLEdBQUcsSUFBSTNOLElBQUksQ0FBQ0EsSUFBSSxDQUFDc1UsR0FBRyxDQUFDdlksS0FBSyxDQUFDLElBQUksRUFBRUMsU0FBUyxDQUFDLENBQUM7UUFDcEQ7UUFDQSxPQUFPMlIsSUFBSTtNQUNmO01BQ0EsU0FBUzhHLGVBQWVBLENBQUMxSCxJQUFJLEVBQUUySCxHQUFHLEVBQUVDLEdBQUcsRUFBRTtRQUNyQyxJQUFJQyxHQUFHLEdBQUcsQ0FBQyxHQUFHRixHQUFHLEdBQUdDLEdBQUc7VUFDbkJFLEtBQUssR0FDRCxDQUFDLENBQUMsR0FBR1IsYUFBYSxDQUFDdEgsSUFBSSxFQUFFLENBQUMsRUFBRTZILEdBQUcsQ0FBQyxDQUFDRSxTQUFTLENBQUMsQ0FBQyxHQUFHSixHQUFHLElBQUksQ0FBQztRQUMvRCxPQUFPLENBQUNHLEtBQUssR0FBR0QsR0FBRyxHQUFHLENBQUM7TUFDM0I7TUFDQSxTQUFTRyxrQkFBa0JBLENBQUNoSSxJQUFJLEVBQUVpSSxJQUFJLEVBQUVDLE9BQU8sRUFBRVAsR0FBRyxFQUFFQyxHQUFHLEVBQUU7UUFDdkQsSUFBSU8sWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHRCxPQUFPLEdBQUdQLEdBQUcsSUFBSSxDQUFDO1VBQ3RDUyxVQUFVLEdBQUdWLGVBQWUsQ0FBQzFILElBQUksRUFBRTJILEdBQUcsRUFBRUMsR0FBRyxDQUFDO1VBQzVDUyxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSUosSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHRSxZQUFZLEdBQUdDLFVBQVU7VUFDMURFLE9BQU87VUFDUEMsWUFBWTtRQUNoQixJQUFJRixTQUFTLElBQUksQ0FBQyxFQUFFO1VBQ2hCQyxPQUFPLEdBQUd0SSxJQUFJLEdBQUcsQ0FBQztVQUNsQnVJLFlBQVksR0FBR3hCLFVBQVUsQ0FBQ3VCLE9BQU8sQ0FBQyxHQUFHRCxTQUFTO1FBQ2xELENBQUMsTUFBTSxJQUFJQSxTQUFTLEdBQUd0QixVQUFVLENBQUMvRyxJQUFJLENBQUMsRUFBRTtVQUNyQ3NJLE9BQU8sR0FBR3RJLElBQUksR0FBRyxDQUFDO1VBQ2xCdUksWUFBWSxHQUFHRixTQUFTLEdBQUd0QixVQUFVLENBQUMvRyxJQUFJLENBQUM7UUFDL0MsQ0FBQyxNQUFNO1VBQ0hzSSxPQUFPLEdBQUd0SSxJQUFJO1VBQ2R1SSxZQUFZLEdBQUdGLFNBQVM7UUFDNUI7UUFDQSxPQUFPO1VBQ0hySSxJQUFJLEVBQUVzSSxPQUFPO1VBQ2JELFNBQVMsRUFBRUU7UUFDZixDQUFDO01BQ0w7TUFDQSxTQUFTQyxVQUFVQSxDQUFDMU8sR0FBRyxFQUFFNk4sR0FBRyxFQUFFQyxHQUFHLEVBQUU7UUFDL0IsSUFBSVEsVUFBVSxHQUFHVixlQUFlLENBQUM1TixHQUFHLENBQUNrRyxJQUFJLENBQUMsQ0FBQyxFQUFFMkgsR0FBRyxFQUFFQyxHQUFHLENBQUM7VUFDbERLLElBQUksR0FDQTFOLElBQUksQ0FBQzRGLEtBQUssQ0FBQyxDQUFDckcsR0FBRyxDQUFDdU8sU0FBUyxDQUFDLENBQUMsR0FBR0QsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO1VBQzFESyxPQUFPO1VBQ1BILE9BQU87UUFDWCxJQUFJTCxJQUFJLEdBQUcsQ0FBQyxFQUFFO1VBQ1ZLLE9BQU8sR0FBR3hPLEdBQUcsQ0FBQ2tHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztVQUN4QnlJLE9BQU8sR0FBR1IsSUFBSSxHQUFHUyxXQUFXLENBQUNKLE9BQU8sRUFBRVgsR0FBRyxFQUFFQyxHQUFHLENBQUM7UUFDbkQsQ0FBQyxNQUFNLElBQUlLLElBQUksR0FBR1MsV0FBVyxDQUFDNU8sR0FBRyxDQUFDa0csSUFBSSxDQUFDLENBQUMsRUFBRTJILEdBQUcsRUFBRUMsR0FBRyxDQUFDLEVBQUU7VUFDakRhLE9BQU8sR0FBR1IsSUFBSSxHQUFHUyxXQUFXLENBQUM1TyxHQUFHLENBQUNrRyxJQUFJLENBQUMsQ0FBQyxFQUFFMkgsR0FBRyxFQUFFQyxHQUFHLENBQUM7VUFDbERVLE9BQU8sR0FBR3hPLEdBQUcsQ0FBQ2tHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUM1QixDQUFDLE1BQU07VUFDSHNJLE9BQU8sR0FBR3hPLEdBQUcsQ0FBQ2tHLElBQUksQ0FBQyxDQUFDO1VBQ3BCeUksT0FBTyxHQUFHUixJQUFJO1FBQ2xCO1FBQ0EsT0FBTztVQUNIQSxJQUFJLEVBQUVRLE9BQU87VUFDYnpJLElBQUksRUFBRXNJO1FBQ1YsQ0FBQztNQUNMO01BQ0EsU0FBU0ksV0FBV0EsQ0FBQzFJLElBQUksRUFBRTJILEdBQUcsRUFBRUMsR0FBRyxFQUFFO1FBQ2pDLElBQUlRLFVBQVUsR0FBR1YsZUFBZSxDQUFDMUgsSUFBSSxFQUFFMkgsR0FBRyxFQUFFQyxHQUFHLENBQUM7VUFDNUNlLGNBQWMsR0FBR2pCLGVBQWUsQ0FBQzFILElBQUksR0FBRyxDQUFDLEVBQUUySCxHQUFHLEVBQUVDLEdBQUcsQ0FBQztRQUN4RCxPQUFPLENBQUNiLFVBQVUsQ0FBQy9HLElBQUksQ0FBQyxHQUFHb0ksVUFBVSxHQUFHTyxjQUFjLElBQUksQ0FBQztNQUMvRDtNQUNBek4sY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDO01BQzVDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUM7TUFDL0MyRCxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztNQUN6QkEsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUM7TUFDNUJZLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO01BQzFCQSxlQUFlLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztNQUM3QjJDLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztNQUM3QmEsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7TUFDdENpQixhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7TUFDN0JhLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO01BQ3RDaUMsaUJBQWlCLENBQ2IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDdEIsVUFBVS9RLEtBQUssRUFBRTRWLElBQUksRUFBRTNRLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtRQUNuQzhNLElBQUksQ0FBQzlNLE1BQU0sQ0FBQ04sTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHdUYsS0FBSyxDQUFDL04sS0FBSyxDQUFDO01BQzVDLENBQ0osQ0FBQztNQUNELFNBQVN1VyxVQUFVQSxDQUFDOU8sR0FBRyxFQUFFO1FBQ3JCLE9BQU8wTyxVQUFVLENBQUMxTyxHQUFHLEVBQUUsSUFBSSxDQUFDK08sS0FBSyxDQUFDbEIsR0FBRyxFQUFFLElBQUksQ0FBQ2tCLEtBQUssQ0FBQ2pCLEdBQUcsQ0FBQyxDQUFDSyxJQUFJO01BQy9EO01BQ0EsSUFBSWEsaUJBQWlCLEdBQUc7UUFDcEJuQixHQUFHLEVBQUUsQ0FBQztRQUVOQyxHQUFHLEVBQUU7TUFFVCxDQUFDO01BQ0QsU0FBU21CLG9CQUFvQkEsQ0FBQSxFQUFHO1FBQzVCLE9BQU8sSUFBSSxDQUFDRixLQUFLLENBQUNsQixHQUFHO01BQ3pCO01BQ0EsU0FBU3FCLG9CQUFvQkEsQ0FBQSxFQUFHO1FBQzVCLE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNqQixHQUFHO01BQ3pCO01BQ0EsU0FBU3FCLFVBQVVBLENBQUM1VyxLQUFLLEVBQUU7UUFDdkIsSUFBSTRWLElBQUksR0FBRyxJQUFJLENBQUMxTSxVQUFVLENBQUMsQ0FBQyxDQUFDME0sSUFBSSxDQUFDLElBQUksQ0FBQztRQUN2QyxPQUFPNVYsS0FBSyxJQUFJLElBQUksR0FBRzRWLElBQUksR0FBRyxJQUFJLENBQUNpQixHQUFHLENBQUMsQ0FBQzdXLEtBQUssR0FBRzRWLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDO01BQ25FO01BQ0EsU0FBU2tCLGFBQWFBLENBQUM5VyxLQUFLLEVBQUU7UUFDMUIsSUFBSTRWLElBQUksR0FBR08sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUNQLElBQUk7UUFDdEMsT0FBTzVWLEtBQUssSUFBSSxJQUFJLEdBQUc0VixJQUFJLEdBQUcsSUFBSSxDQUFDaUIsR0FBRyxDQUFDLENBQUM3VyxLQUFLLEdBQUc0VixJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQztNQUNuRTtNQUNBL00sY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQztNQUNuQ0EsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVV4SCxPQUFPLEVBQUU7UUFDMUMsT0FBTyxJQUFJLENBQUM2SCxVQUFVLENBQUMsQ0FBQyxDQUFDNk4sV0FBVyxDQUFDLElBQUksRUFBRTFWLE9BQU8sQ0FBQztNQUN2RCxDQUFDLENBQUM7TUFDRndILGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVeEgsT0FBTyxFQUFFO1FBQzNDLE9BQU8sSUFBSSxDQUFDNkgsVUFBVSxDQUFDLENBQUMsQ0FBQzhOLGFBQWEsQ0FBQyxJQUFJLEVBQUUzVixPQUFPLENBQUM7TUFDekQsQ0FBQyxDQUFDO01BQ0Z3SCxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVXhILE9BQU8sRUFBRTtRQUM1QyxPQUFPLElBQUksQ0FBQzZILFVBQVUsQ0FBQyxDQUFDLENBQUMrTixRQUFRLENBQUMsSUFBSSxFQUFFNVYsT0FBTyxDQUFDO01BQ3BELENBQUMsQ0FBQztNQUNGd0gsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQztNQUNwQ0EsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQztNQUN2QzJELFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO01BQ3hCQSxZQUFZLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQztNQUM1QkEsWUFBWSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUM7TUFDL0JZLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO01BQzFCQSxlQUFlLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQztNQUM5QkEsZUFBZSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7TUFDakMyQyxhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7TUFDN0JhLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztNQUM3QmEsYUFBYSxDQUFDLEdBQUcsRUFBRWIsU0FBUyxDQUFDO01BQzdCYSxhQUFhLENBQUMsSUFBSSxFQUFFLFVBQVVHLFFBQVEsRUFBRTVPLE9BQU8sRUFBRTtRQUM3QyxPQUFPQSxPQUFPLENBQUM0VixnQkFBZ0IsQ0FBQ2hILFFBQVEsQ0FBQztNQUM3QyxDQUFDLENBQUM7TUFDRkgsYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVRyxRQUFRLEVBQUU1TyxPQUFPLEVBQUU7UUFDOUMsT0FBT0EsT0FBTyxDQUFDNlYsa0JBQWtCLENBQUNqSCxRQUFRLENBQUM7TUFDL0MsQ0FBQyxDQUFDO01BQ0ZILGFBQWEsQ0FBQyxNQUFNLEVBQUUsVUFBVUcsUUFBUSxFQUFFNU8sT0FBTyxFQUFFO1FBQy9DLE9BQU9BLE9BQU8sQ0FBQzhWLGFBQWEsQ0FBQ2xILFFBQVEsQ0FBQztNQUMxQyxDQUFDLENBQUM7TUFDRmEsaUJBQWlCLENBQ2IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUNyQixVQUFVL1EsS0FBSyxFQUFFNFYsSUFBSSxFQUFFM1EsTUFBTSxFQUFFNkQsTUFBTSxFQUFFO1FBQ25DLElBQUkrTSxPQUFPLEdBQUc1USxNQUFNLENBQUNGLE9BQU8sQ0FBQ3NTLGFBQWEsQ0FDdENyWCxLQUFLLEVBQ0w4SSxNQUFNLEVBQ043RCxNQUFNLENBQUN0QixPQUNYLENBQUM7UUFDRCxJQUFJa1MsT0FBTyxJQUFJLElBQUksRUFBRTtVQUNqQkQsSUFBSSxDQUFDcEssQ0FBQyxHQUFHcUssT0FBTztRQUNwQixDQUFDLE1BQU07VUFDSGxULGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDdkIsY0FBYyxHQUFHMUQsS0FBSztRQUNsRDtNQUNKLENBQ0osQ0FBQztNQUNEK1EsaUJBQWlCLENBQ2IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUNmLFVBQVUvUSxLQUFLLEVBQUU0VixJQUFJLEVBQUUzUSxNQUFNLEVBQUU2RCxNQUFNLEVBQUU7UUFDbkM4TSxJQUFJLENBQUM5TSxNQUFNLENBQUMsR0FBR2lGLEtBQUssQ0FBQy9OLEtBQUssQ0FBQztNQUMvQixDQUNKLENBQUM7TUFDRCxTQUFTc1gsWUFBWUEsQ0FBQ3RYLEtBQUssRUFBRXNCLE9BQU8sRUFBRTtRQUNsQyxJQUFJLE9BQU90QixLQUFLLEtBQUssUUFBUSxFQUFFO1VBQzNCLE9BQU9BLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUN1RCxLQUFLLENBQUN2RCxLQUFLLENBQUMsRUFBRTtVQUNmLE9BQU95VSxRQUFRLENBQUN6VSxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQzlCO1FBQ0FBLEtBQUssR0FBR3NCLE9BQU8sQ0FBQytWLGFBQWEsQ0FBQ3JYLEtBQUssQ0FBQztRQUNwQyxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7VUFDM0IsT0FBT0EsS0FBSztRQUNoQjtRQUNBLE9BQU8sSUFBSTtNQUNmO01BQ0EsU0FBU3VYLGVBQWVBLENBQUN2WCxLQUFLLEVBQUVzQixPQUFPLEVBQUU7UUFDckMsSUFBSSxPQUFPdEIsS0FBSyxLQUFLLFFBQVEsRUFBRTtVQUMzQixPQUFPc0IsT0FBTyxDQUFDK1YsYUFBYSxDQUFDclgsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDaEQ7UUFDQSxPQUFPdUQsS0FBSyxDQUFDdkQsS0FBSyxDQUFDLEdBQUcsSUFBSSxHQUFHQSxLQUFLO01BQ3RDO01BQ0EsU0FBU3dYLGFBQWFBLENBQUNDLEVBQUUsRUFBRS9ZLENBQUMsRUFBRTtRQUMxQixPQUFPK1ksRUFBRSxDQUFDM1IsS0FBSyxDQUFDcEgsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDZ1osTUFBTSxDQUFDRCxFQUFFLENBQUMzUixLQUFLLENBQUMsQ0FBQyxFQUFFcEgsQ0FBQyxDQUFDLENBQUM7TUFDaEQ7TUFDQSxJQUFJaVoscUJBQXFCLEdBQ2pCLDBEQUEwRCxDQUFDckYsS0FBSyxDQUM1RCxHQUNKLENBQUM7UUFDTHNGLDBCQUEwQixHQUN0Qiw2QkFBNkIsQ0FBQ3RGLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDNUN1Rix3QkFBd0IsR0FBRyxzQkFBc0IsQ0FBQ3ZGLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDNUR3RixvQkFBb0IsR0FBR2pJLFNBQVM7UUFDaENrSSx5QkFBeUIsR0FBR2xJLFNBQVM7UUFDckNtSSx1QkFBdUIsR0FBR25JLFNBQVM7TUFDdkMsU0FBU29JLGNBQWNBLENBQUNyVixDQUFDLEVBQUV2QixPQUFPLEVBQUU7UUFDaEMsSUFBSTRWLFFBQVEsR0FBR2xYLE9BQU8sQ0FBQyxJQUFJLENBQUNtWSxTQUFTLENBQUMsR0FDaEMsSUFBSSxDQUFDQSxTQUFTLEdBQ2QsSUFBSSxDQUFDQSxTQUFTLENBQ1Z0VixDQUFDLElBQ0RBLENBQUMsS0FBSyxJQUFJLElBQ1YsSUFBSSxDQUFDc1YsU0FBUyxDQUFDckYsUUFBUSxDQUFDN0ksSUFBSSxDQUFDM0ksT0FBTyxDQUFDLEdBQy9CLFFBQVEsR0FDUixZQUFZLENBQ3JCO1FBQ1AsT0FBT3VCLENBQUMsS0FBSyxJQUFJLEdBQ1g0VSxhQUFhLENBQUNQLFFBQVEsRUFBRSxJQUFJLENBQUNULEtBQUssQ0FBQ2xCLEdBQUcsQ0FBQyxHQUN2QzFTLENBQUMsR0FDRHFVLFFBQVEsQ0FBQ3JVLENBQUMsQ0FBQ3VWLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FDakJsQixRQUFRO01BQ2xCO01BQ0EsU0FBU21CLG1CQUFtQkEsQ0FBQ3hWLENBQUMsRUFBRTtRQUM1QixPQUFPQSxDQUFDLEtBQUssSUFBSSxHQUNYNFUsYUFBYSxDQUFDLElBQUksQ0FBQ2EsY0FBYyxFQUFFLElBQUksQ0FBQzdCLEtBQUssQ0FBQ2xCLEdBQUcsQ0FBQyxHQUNsRDFTLENBQUMsR0FDRCxJQUFJLENBQUN5VixjQUFjLENBQUN6VixDQUFDLENBQUN1VixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQzVCLElBQUksQ0FBQ0UsY0FBYztNQUM3QjtNQUNBLFNBQVNDLGlCQUFpQkEsQ0FBQzFWLENBQUMsRUFBRTtRQUMxQixPQUFPQSxDQUFDLEtBQUssSUFBSSxHQUNYNFUsYUFBYSxDQUFDLElBQUksQ0FBQ2UsWUFBWSxFQUFFLElBQUksQ0FBQy9CLEtBQUssQ0FBQ2xCLEdBQUcsQ0FBQyxHQUNoRDFTLENBQUMsR0FDRCxJQUFJLENBQUMyVixZQUFZLENBQUMzVixDQUFDLENBQUN1VixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQzFCLElBQUksQ0FBQ0ksWUFBWTtNQUMzQjtNQUNBLFNBQVNDLG1CQUFtQkEsQ0FBQ0MsV0FBVyxFQUFFcFgsT0FBTyxFQUFFRSxNQUFNLEVBQUU7UUFDdkQsSUFBSVIsQ0FBQztVQUNEbVMsRUFBRTtVQUNGekwsR0FBRztVQUNIMEwsR0FBRyxHQUFHc0YsV0FBVyxDQUFDckYsaUJBQWlCLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDc0YsY0FBYyxFQUFFO1VBQ3RCLElBQUksQ0FBQ0EsY0FBYyxHQUFHLEVBQUU7VUFDeEIsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRyxFQUFFO1VBQzdCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsRUFBRTtVQUMzQixLQUFLN1gsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFQSxDQUFDLEVBQUU7WUFDcEIwRyxHQUFHLEdBQUdyRyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQytXLEdBQUcsQ0FBQ3BYLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUM2WCxpQkFBaUIsQ0FBQzdYLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2dXLFdBQVcsQ0FDeEN0UCxHQUFHLEVBQ0gsRUFDSixDQUFDLENBQUMyTCxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQ3VGLG1CQUFtQixDQUFDNVgsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDaVcsYUFBYSxDQUM1Q3ZQLEdBQUcsRUFDSCxFQUNKLENBQUMsQ0FBQzJMLGlCQUFpQixDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDc0YsY0FBYyxDQUFDM1gsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDa1csUUFBUSxDQUNsQ3hQLEdBQUcsRUFDSCxFQUNKLENBQUMsQ0FBQzJMLGlCQUFpQixDQUFDLENBQUM7VUFDekI7UUFDSjtRQUNBLElBQUk3UixNQUFNLEVBQUU7VUFDUixJQUFJRixPQUFPLEtBQUssTUFBTSxFQUFFO1lBQ3BCNlIsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ2thLGNBQWMsRUFBRXZGLEdBQUcsQ0FBQztZQUMzQyxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO1VBQ2hDLENBQUMsTUFBTSxJQUFJN1IsT0FBTyxLQUFLLEtBQUssRUFBRTtZQUMxQjZSLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNtYSxtQkFBbUIsRUFBRXhGLEdBQUcsQ0FBQztZQUNoRCxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO1VBQ2hDLENBQUMsTUFBTTtZQUNIQSxFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDb2EsaUJBQWlCLEVBQUV6RixHQUFHLENBQUM7WUFDOUMsT0FBT0QsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxFQUFFLEdBQUcsSUFBSTtVQUNoQztRQUNKLENBQUMsTUFBTTtVQUNILElBQUk3UixPQUFPLEtBQUssTUFBTSxFQUFFO1lBQ3BCNlIsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ2thLGNBQWMsRUFBRXZGLEdBQUcsQ0FBQztZQUMzQyxJQUFJRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUU7Y0FDWCxPQUFPQSxFQUFFO1lBQ2I7WUFDQUEsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ21hLG1CQUFtQixFQUFFeEYsR0FBRyxDQUFDO1lBQ2hELElBQUlELEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRTtjQUNYLE9BQU9BLEVBQUU7WUFDYjtZQUNBQSxFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDb2EsaUJBQWlCLEVBQUV6RixHQUFHLENBQUM7WUFDOUMsT0FBT0QsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxFQUFFLEdBQUcsSUFBSTtVQUNoQyxDQUFDLE1BQU0sSUFBSTdSLE9BQU8sS0FBSyxLQUFLLEVBQUU7WUFDMUI2UixFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDbWEsbUJBQW1CLEVBQUV4RixHQUFHLENBQUM7WUFDaEQsSUFBSUQsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO2NBQ1gsT0FBT0EsRUFBRTtZQUNiO1lBQ0FBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNrYSxjQUFjLEVBQUV2RixHQUFHLENBQUM7WUFDM0MsSUFBSUQsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO2NBQ1gsT0FBT0EsRUFBRTtZQUNiO1lBQ0FBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNvYSxpQkFBaUIsRUFBRXpGLEdBQUcsQ0FBQztZQUM5QyxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO1VBQ2hDLENBQUMsTUFBTTtZQUNIQSxFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDb2EsaUJBQWlCLEVBQUV6RixHQUFHLENBQUM7WUFDOUMsSUFBSUQsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO2NBQ1gsT0FBT0EsRUFBRTtZQUNiO1lBQ0FBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNrYSxjQUFjLEVBQUV2RixHQUFHLENBQUM7WUFDM0MsSUFBSUQsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO2NBQ1gsT0FBT0EsRUFBRTtZQUNiO1lBQ0FBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNtYSxtQkFBbUIsRUFBRXhGLEdBQUcsQ0FBQztZQUNoRCxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO1VBQ2hDO1FBQ0o7TUFDSjtNQUNBLFNBQVMyRixtQkFBbUJBLENBQUNKLFdBQVcsRUFBRXBYLE9BQU8sRUFBRUUsTUFBTSxFQUFFO1FBQ3ZELElBQUlSLENBQUMsRUFBRTBHLEdBQUcsRUFBRXVJLEtBQUs7UUFDakIsSUFBSSxJQUFJLENBQUM4SSxtQkFBbUIsRUFBRTtVQUMxQixPQUFPTixtQkFBbUIsQ0FBQ2hhLElBQUksQ0FDM0IsSUFBSSxFQUNKaWEsV0FBVyxFQUNYcFgsT0FBTyxFQUNQRSxNQUNKLENBQUM7UUFDTDtRQUNBLElBQUksQ0FBQyxJQUFJLENBQUNtWCxjQUFjLEVBQUU7VUFDdEIsSUFBSSxDQUFDQSxjQUFjLEdBQUcsRUFBRTtVQUN4QixJQUFJLENBQUNFLGlCQUFpQixHQUFHLEVBQUU7VUFDM0IsSUFBSSxDQUFDRCxtQkFBbUIsR0FBRyxFQUFFO1VBQzdCLElBQUksQ0FBQ0ksa0JBQWtCLEdBQUcsRUFBRTtRQUNoQztRQUNBLEtBQUtoWSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtVQUNwQjBHLEdBQUcsR0FBR3JHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDK1csR0FBRyxDQUFDcFgsQ0FBQyxDQUFDO1VBQ2hDLElBQUlRLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQ3dYLGtCQUFrQixDQUFDaFksQ0FBQyxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDZ1ksa0JBQWtCLENBQUNoWSxDQUFDLENBQUMsR0FBRyxJQUFJeUYsTUFBTSxDQUNuQyxHQUFHLEdBQ0MsSUFBSSxDQUFDeVEsUUFBUSxDQUFDeFAsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDNkIsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FDM0MsR0FBRyxFQUNQLEdBQ0osQ0FBQztZQUNELElBQUksQ0FBQ3FQLG1CQUFtQixDQUFDNVgsQ0FBQyxDQUFDLEdBQUcsSUFBSXlGLE1BQU0sQ0FDcEMsR0FBRyxHQUNDLElBQUksQ0FBQ3dRLGFBQWEsQ0FBQ3ZQLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzZCLE9BQU8sQ0FDL0IsR0FBRyxFQUNILE1BQ0osQ0FBQyxHQUNELEdBQUcsRUFDUCxHQUNKLENBQUM7WUFDRCxJQUFJLENBQUNzUCxpQkFBaUIsQ0FBQzdYLENBQUMsQ0FBQyxHQUFHLElBQUl5RixNQUFNLENBQ2xDLEdBQUcsR0FDQyxJQUFJLENBQUN1USxXQUFXLENBQUN0UCxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM2QixPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUM5QyxHQUFHLEVBQ1AsR0FDSixDQUFDO1VBQ0w7VUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDb1AsY0FBYyxDQUFDM1gsQ0FBQyxDQUFDLEVBQUU7WUFDekJpUCxLQUFLLEdBQ0QsR0FBRyxHQUNILElBQUksQ0FBQ2lILFFBQVEsQ0FBQ3hQLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FDdEIsSUFBSSxHQUNKLElBQUksQ0FBQ3VQLGFBQWEsQ0FBQ3ZQLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FDM0IsSUFBSSxHQUNKLElBQUksQ0FBQ3NQLFdBQVcsQ0FBQ3RQLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDaVIsY0FBYyxDQUFDM1gsQ0FBQyxDQUFDLEdBQUcsSUFBSXlGLE1BQU0sQ0FDL0J3SixLQUFLLENBQUMxRyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUN0QixHQUNKLENBQUM7VUFDTDtVQUNBLElBQ0kvSCxNQUFNLElBQ05GLE9BQU8sS0FBSyxNQUFNLElBQ2xCLElBQUksQ0FBQzBYLGtCQUFrQixDQUFDaFksQ0FBQyxDQUFDLENBQUNpSixJQUFJLENBQUN5TyxXQUFXLENBQUMsRUFDOUM7WUFDRSxPQUFPMVgsQ0FBQztVQUNaLENBQUMsTUFBTSxJQUNIUSxNQUFNLElBQ05GLE9BQU8sS0FBSyxLQUFLLElBQ2pCLElBQUksQ0FBQ3NYLG1CQUFtQixDQUFDNVgsQ0FBQyxDQUFDLENBQUNpSixJQUFJLENBQUN5TyxXQUFXLENBQUMsRUFDL0M7WUFDRSxPQUFPMVgsQ0FBQztVQUNaLENBQUMsTUFBTSxJQUNIUSxNQUFNLElBQ05GLE9BQU8sS0FBSyxJQUFJLElBQ2hCLElBQUksQ0FBQ3VYLGlCQUFpQixDQUFDN1gsQ0FBQyxDQUFDLENBQUNpSixJQUFJLENBQUN5TyxXQUFXLENBQUMsRUFDN0M7WUFDRSxPQUFPMVgsQ0FBQztVQUNaLENBQUMsTUFBTSxJQUNILENBQUNRLE1BQU0sSUFDUCxJQUFJLENBQUNtWCxjQUFjLENBQUMzWCxDQUFDLENBQUMsQ0FBQ2lKLElBQUksQ0FBQ3lPLFdBQVcsQ0FBQyxFQUMxQztZQUNFLE9BQU8xWCxDQUFDO1VBQ1o7UUFDSjtNQUNKO01BQ0EsU0FBU2lZLGVBQWVBLENBQUNoWixLQUFLLEVBQUU7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQ2tELE9BQU8sQ0FBQyxDQUFDLEVBQUU7VUFDakIsT0FBT2xELEtBQUssSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHK0QsR0FBRztRQUNyQztRQUNBLElBQUlvVSxHQUFHLEdBQUcsSUFBSSxDQUFDdFQsTUFBTSxHQUFHLElBQUksQ0FBQ3JCLEVBQUUsQ0FBQ2tTLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDbFMsRUFBRSxDQUFDeVYsTUFBTSxDQUFDLENBQUM7UUFDOUQsSUFBSWpaLEtBQUssSUFBSSxJQUFJLEVBQUU7VUFDZkEsS0FBSyxHQUFHc1gsWUFBWSxDQUFDdFgsS0FBSyxFQUFFLElBQUksQ0FBQ2tKLFVBQVUsQ0FBQyxDQUFDLENBQUM7VUFDOUMsT0FBTyxJQUFJLENBQUMyTixHQUFHLENBQUM3VyxLQUFLLEdBQUdtWSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQ3JDLENBQUMsTUFBTTtVQUNILE9BQU9BLEdBQUc7UUFDZDtNQUNKO01BQ0EsU0FBU2UscUJBQXFCQSxDQUFDbFosS0FBSyxFQUFFO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUNrRCxPQUFPLENBQUMsQ0FBQyxFQUFFO1VBQ2pCLE9BQU9sRCxLQUFLLElBQUksSUFBSSxHQUFHLElBQUksR0FBRytELEdBQUc7UUFDckM7UUFDQSxJQUFJOFIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDc0MsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDalAsVUFBVSxDQUFDLENBQUMsQ0FBQ3NOLEtBQUssQ0FBQ2xCLEdBQUcsSUFBSSxDQUFDO1FBQ2hFLE9BQU90VixLQUFLLElBQUksSUFBSSxHQUFHNlYsT0FBTyxHQUFHLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQzdXLEtBQUssR0FBRzZWLE9BQU8sRUFBRSxHQUFHLENBQUM7TUFDbkU7TUFDQSxTQUFTc0Qsa0JBQWtCQSxDQUFDblosS0FBSyxFQUFFO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUNrRCxPQUFPLENBQUMsQ0FBQyxFQUFFO1VBQ2pCLE9BQU9sRCxLQUFLLElBQUksSUFBSSxHQUFHLElBQUksR0FBRytELEdBQUc7UUFDckM7UUFDQSxJQUFJL0QsS0FBSyxJQUFJLElBQUksRUFBRTtVQUNmLElBQUk2VixPQUFPLEdBQUcwQixlQUFlLENBQUN2WCxLQUFLLEVBQUUsSUFBSSxDQUFDa0osVUFBVSxDQUFDLENBQUMsQ0FBQztVQUN2RCxPQUFPLElBQUksQ0FBQ2lQLEdBQUcsQ0FBQyxJQUFJLENBQUNBLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHdEMsT0FBTyxHQUFHQSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQzNELENBQUMsTUFBTTtVQUNILE9BQU8sSUFBSSxDQUFDc0MsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzFCO01BQ0o7TUFDQSxTQUFTZixhQUFhQSxDQUFDbEgsUUFBUSxFQUFFO1FBQzdCLElBQUksSUFBSSxDQUFDNEksbUJBQW1CLEVBQUU7VUFDMUIsSUFBSSxDQUFDMVksVUFBVSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ3JDZ1osb0JBQW9CLENBQUM1YSxJQUFJLENBQUMsSUFBSSxDQUFDO1VBQ25DO1VBQ0EsSUFBSTBSLFFBQVEsRUFBRTtZQUNWLE9BQU8sSUFBSSxDQUFDbUosb0JBQW9CO1VBQ3BDLENBQUMsTUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDQyxjQUFjO1VBQzlCO1FBQ0osQ0FBQyxNQUFNO1VBQ0gsSUFBSSxDQUFDbFosVUFBVSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQ2taLGNBQWMsR0FBR3hCLG9CQUFvQjtVQUM5QztVQUNBLE9BQU8sSUFBSSxDQUFDdUIsb0JBQW9CLElBQUluSixRQUFRLEdBQ3RDLElBQUksQ0FBQ21KLG9CQUFvQixHQUN6QixJQUFJLENBQUNDLGNBQWM7UUFDN0I7TUFDSjtNQUNBLFNBQVNuQyxrQkFBa0JBLENBQUNqSCxRQUFRLEVBQUU7UUFDbEMsSUFBSSxJQUFJLENBQUM0SSxtQkFBbUIsRUFBRTtVQUMxQixJQUFJLENBQUMxWSxVQUFVLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLEVBQUU7WUFDckNnWixvQkFBb0IsQ0FBQzVhLElBQUksQ0FBQyxJQUFJLENBQUM7VUFDbkM7VUFDQSxJQUFJMFIsUUFBUSxFQUFFO1lBQ1YsT0FBTyxJQUFJLENBQUNxSix5QkFBeUI7VUFDekMsQ0FBQyxNQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUNDLG1CQUFtQjtVQUNuQztRQUNKLENBQUMsTUFBTTtVQUNILElBQUksQ0FBQ3BaLFVBQVUsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUNvWixtQkFBbUIsR0FBR3pCLHlCQUF5QjtVQUN4RDtVQUNBLE9BQU8sSUFBSSxDQUFDd0IseUJBQXlCLElBQUlySixRQUFRLEdBQzNDLElBQUksQ0FBQ3FKLHlCQUF5QixHQUM5QixJQUFJLENBQUNDLG1CQUFtQjtRQUNsQztNQUNKO01BQ0EsU0FBU3RDLGdCQUFnQkEsQ0FBQ2hILFFBQVEsRUFBRTtRQUNoQyxJQUFJLElBQUksQ0FBQzRJLG1CQUFtQixFQUFFO1VBQzFCLElBQUksQ0FBQzFZLFVBQVUsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtZQUNyQ2daLG9CQUFvQixDQUFDNWEsSUFBSSxDQUFDLElBQUksQ0FBQztVQUNuQztVQUNBLElBQUkwUixRQUFRLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQ3VKLHVCQUF1QjtVQUN2QyxDQUFDLE1BQU07WUFDSCxPQUFPLElBQUksQ0FBQ0MsaUJBQWlCO1VBQ2pDO1FBQ0osQ0FBQyxNQUFNO1VBQ0gsSUFBSSxDQUFDdFosVUFBVSxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQ3NaLGlCQUFpQixHQUFHMUIsdUJBQXVCO1VBQ3BEO1VBQ0EsT0FBTyxJQUFJLENBQUN5Qix1QkFBdUIsSUFBSXZKLFFBQVEsR0FDekMsSUFBSSxDQUFDdUosdUJBQXVCLEdBQzVCLElBQUksQ0FBQ0MsaUJBQWlCO1FBQ2hDO01BQ0o7TUFDQSxTQUFTTixvQkFBb0JBLENBQUEsRUFBRztRQUM1QixTQUFTaEYsU0FBU0EsQ0FBQzNYLENBQUMsRUFBRUMsQ0FBQyxFQUFFO1VBQ3JCLE9BQU9BLENBQUMsQ0FBQzZELE1BQU0sR0FBRzlELENBQUMsQ0FBQzhELE1BQU07UUFDOUI7UUFDQSxJQUFJb1osU0FBUyxHQUFHLEVBQUU7VUFDZHRGLFdBQVcsR0FBRyxFQUFFO1VBQ2hCQyxVQUFVLEdBQUcsRUFBRTtVQUNmQyxXQUFXLEdBQUcsRUFBRTtVQUNoQnhULENBQUM7VUFDRDBHLEdBQUc7VUFDSG1TLElBQUk7VUFDSkMsTUFBTTtVQUNOQyxLQUFLO1FBQ1QsS0FBSy9ZLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO1VBQ3BCMEcsR0FBRyxHQUFHckcsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMrVyxHQUFHLENBQUNwWCxDQUFDLENBQUM7VUFDaEM2WSxJQUFJLEdBQUd0SixXQUFXLENBQUMsSUFBSSxDQUFDeUcsV0FBVyxDQUFDdFAsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1VBQzdDb1MsTUFBTSxHQUFHdkosV0FBVyxDQUFDLElBQUksQ0FBQzBHLGFBQWEsQ0FBQ3ZQLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztVQUNqRHFTLEtBQUssR0FBR3hKLFdBQVcsQ0FBQyxJQUFJLENBQUMyRyxRQUFRLENBQUN4UCxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7VUFDM0NrUyxTQUFTLENBQUMxWSxJQUFJLENBQUMyWSxJQUFJLENBQUM7VUFDcEJ2RixXQUFXLENBQUNwVCxJQUFJLENBQUM0WSxNQUFNLENBQUM7VUFDeEJ2RixVQUFVLENBQUNyVCxJQUFJLENBQUM2WSxLQUFLLENBQUM7VUFDdEJ2RixXQUFXLENBQUN0VCxJQUFJLENBQUMyWSxJQUFJLENBQUM7VUFDdEJyRixXQUFXLENBQUN0VCxJQUFJLENBQUM0WSxNQUFNLENBQUM7VUFDeEJ0RixXQUFXLENBQUN0VCxJQUFJLENBQUM2WSxLQUFLLENBQUM7UUFDM0I7UUFDQUgsU0FBUyxDQUFDbE0sSUFBSSxDQUFDMkcsU0FBUyxDQUFDO1FBQ3pCQyxXQUFXLENBQUM1RyxJQUFJLENBQUMyRyxTQUFTLENBQUM7UUFDM0JFLFVBQVUsQ0FBQzdHLElBQUksQ0FBQzJHLFNBQVMsQ0FBQztRQUMxQkcsV0FBVyxDQUFDOUcsSUFBSSxDQUFDMkcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQ2tGLGNBQWMsR0FBRyxJQUFJOVMsTUFBTSxDQUM1QixJQUFJLEdBQUcrTixXQUFXLENBQUN4TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNsQyxHQUNKLENBQUM7UUFDRCxJQUFJLENBQUN5VCxtQkFBbUIsR0FBRyxJQUFJLENBQUNGLGNBQWM7UUFDOUMsSUFBSSxDQUFDSSxpQkFBaUIsR0FBRyxJQUFJLENBQUNKLGNBQWM7UUFDNUMsSUFBSSxDQUFDRCxvQkFBb0IsR0FBRyxJQUFJN1MsTUFBTSxDQUNsQyxJQUFJLEdBQUc4TixVQUFVLENBQUN2TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNqQyxHQUNKLENBQUM7UUFDRCxJQUFJLENBQUN3VCx5QkFBeUIsR0FBRyxJQUFJL1MsTUFBTSxDQUN2QyxJQUFJLEdBQUc2TixXQUFXLENBQUN0TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNsQyxHQUNKLENBQUM7UUFDRCxJQUFJLENBQUMwVCx1QkFBdUIsR0FBRyxJQUFJalQsTUFBTSxDQUNyQyxJQUFJLEdBQUdtVCxTQUFTLENBQUM1VCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNoQyxHQUNKLENBQUM7TUFDTDtNQUNBLFNBQVNnVSxPQUFPQSxDQUFBLEVBQUc7UUFDZixPQUFPLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtNQUNsQztNQUNBLFNBQVNDLE9BQU9BLENBQUEsRUFBRztRQUNmLE9BQU8sSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUU7TUFDN0I7TUFDQW5SLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQztNQUN6Q0EsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVrUixPQUFPLENBQUM7TUFDMUNsUixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRW9SLE9BQU8sQ0FBQztNQUMxQ3BSLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO1FBQ3BDLE9BQU8sRUFBRSxHQUFHa1IsT0FBTyxDQUFDcGQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHa0wsUUFBUSxDQUFDLElBQUksQ0FBQ3FTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO01BQ2pFLENBQUMsQ0FBQztNQUNGclIsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7UUFDdEMsT0FDSSxFQUFFLEdBQ0ZrUixPQUFPLENBQUNwZCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQ25Ca0wsUUFBUSxDQUFDLElBQUksQ0FBQ3FTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQzNCclMsUUFBUSxDQUFDLElBQUksQ0FBQ3NTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO01BRW5DLENBQUMsQ0FBQztNQUNGdFIsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7UUFDcEMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDbVIsS0FBSyxDQUFDLENBQUMsR0FBR25TLFFBQVEsQ0FBQyxJQUFJLENBQUNxUyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztNQUMxRCxDQUFDLENBQUM7TUFDRnJSLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO1FBQ3RDLE9BQ0ksRUFBRSxHQUNGLElBQUksQ0FBQ21SLEtBQUssQ0FBQyxDQUFDLEdBQ1puUyxRQUFRLENBQUMsSUFBSSxDQUFDcVMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FDM0JyUyxRQUFRLENBQUMsSUFBSSxDQUFDc1MsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7TUFFbkMsQ0FBQyxDQUFDO01BQ0YsU0FBUzNYLFFBQVFBLENBQUNzRyxNQUFNLEVBQUVzUixTQUFTLEVBQUU7UUFDakN2UixjQUFjLENBQUNDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7VUFDckMsT0FBTyxJQUFJLENBQUNJLFVBQVUsQ0FBQyxDQUFDLENBQUMxRyxRQUFRLENBQzdCLElBQUksQ0FBQ3dYLEtBQUssQ0FBQyxDQUFDLEVBQ1osSUFBSSxDQUFDRSxPQUFPLENBQUMsQ0FBQyxFQUNkRSxTQUNKLENBQUM7UUFDTCxDQUFDLENBQUM7TUFDTjtNQUNBNVgsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7TUFDbkJBLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO01BQ3BCZ0ssWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7TUFDekJZLGVBQWUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO01BQzNCLFNBQVNpTixhQUFhQSxDQUFDbkssUUFBUSxFQUFFNU8sT0FBTyxFQUFFO1FBQ3RDLE9BQU9BLE9BQU8sQ0FBQ2daLGNBQWM7TUFDakM7TUFDQXZLLGFBQWEsQ0FBQyxHQUFHLEVBQUVzSyxhQUFhLENBQUM7TUFDakN0SyxhQUFhLENBQUMsR0FBRyxFQUFFc0ssYUFBYSxDQUFDO01BQ2pDdEssYUFBYSxDQUFDLEdBQUcsRUFBRWIsU0FBUyxDQUFDO01BQzdCYSxhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7TUFDN0JhLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztNQUM3QmEsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7TUFDdENpQixhQUFhLENBQUMsSUFBSSxFQUFFYixTQUFTLEVBQUVKLE1BQU0sQ0FBQztNQUN0Q2lCLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO01BQ3RDaUIsYUFBYSxDQUFDLEtBQUssRUFBRVosU0FBUyxDQUFDO01BQy9CWSxhQUFhLENBQUMsT0FBTyxFQUFFWCxTQUFTLENBQUM7TUFDakNXLGFBQWEsQ0FBQyxLQUFLLEVBQUVaLFNBQVMsQ0FBQztNQUMvQlksYUFBYSxDQUFDLE9BQU8sRUFBRVgsU0FBUyxDQUFDO01BQ2pDeUIsYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFVSxJQUFJLENBQUM7TUFDaENWLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFdkUsTUFBTSxFQUFFO1FBQ3ZELElBQUlzVixNQUFNLEdBQUd4TSxLQUFLLENBQUMvTixLQUFLLENBQUM7UUFDekJ3SixLQUFLLENBQUMrSCxJQUFJLENBQUMsR0FBR2dKLE1BQU0sS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHQSxNQUFNO01BQzVDLENBQUMsQ0FBQztNQUNGMUosYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7UUFDdERBLE1BQU0sQ0FBQ3VWLEtBQUssR0FBR3ZWLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDMFYsSUFBSSxDQUFDemEsS0FBSyxDQUFDO1FBQ3pDaUYsTUFBTSxDQUFDeVYsU0FBUyxHQUFHMWEsS0FBSztNQUM1QixDQUFDLENBQUM7TUFDRjZRLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFdkUsTUFBTSxFQUFFO1FBQ3ZEdUUsS0FBSyxDQUFDK0gsSUFBSSxDQUFDLEdBQUd4RCxLQUFLLENBQUMvTixLQUFLLENBQUM7UUFDMUIyQyxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3JCLE9BQU8sR0FBRyxJQUFJO01BQzFDLENBQUMsQ0FBQztNQUNGaU4sYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFdkUsTUFBTSxFQUFFO1FBQ2pELElBQUkwVixHQUFHLEdBQUczYSxLQUFLLENBQUNPLE1BQU0sR0FBRyxDQUFDO1FBQzFCaUosS0FBSyxDQUFDK0gsSUFBSSxDQUFDLEdBQUd4RCxLQUFLLENBQUMvTixLQUFLLENBQUN3SSxNQUFNLENBQUMsQ0FBQyxFQUFFbVMsR0FBRyxDQUFDLENBQUM7UUFDekNuUixLQUFLLENBQUNnSSxNQUFNLENBQUMsR0FBR3pELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3dJLE1BQU0sQ0FBQ21TLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDaFksZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNyQixPQUFPLEdBQUcsSUFBSTtNQUMxQyxDQUFDLENBQUM7TUFDRmlOLGFBQWEsQ0FBQyxPQUFPLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTtRQUNuRCxJQUFJMlYsSUFBSSxHQUFHNWEsS0FBSyxDQUFDTyxNQUFNLEdBQUcsQ0FBQztVQUN2QnNhLElBQUksR0FBRzdhLEtBQUssQ0FBQ08sTUFBTSxHQUFHLENBQUM7UUFDM0JpSixLQUFLLENBQUMrSCxJQUFJLENBQUMsR0FBR3hELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3dJLE1BQU0sQ0FBQyxDQUFDLEVBQUVvUyxJQUFJLENBQUMsQ0FBQztRQUMxQ3BSLEtBQUssQ0FBQ2dJLE1BQU0sQ0FBQyxHQUFHekQsS0FBSyxDQUFDL04sS0FBSyxDQUFDd0ksTUFBTSxDQUFDb1MsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDcFIsS0FBSyxDQUFDaUksTUFBTSxDQUFDLEdBQUcxRCxLQUFLLENBQUMvTixLQUFLLENBQUN3SSxNQUFNLENBQUNxUyxJQUFJLENBQUMsQ0FBQztRQUN6Q2xZLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDckIsT0FBTyxHQUFHLElBQUk7TUFDMUMsQ0FBQyxDQUFDO01BQ0ZpTixhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7UUFDakQsSUFBSTBWLEdBQUcsR0FBRzNhLEtBQUssQ0FBQ08sTUFBTSxHQUFHLENBQUM7UUFDMUJpSixLQUFLLENBQUMrSCxJQUFJLENBQUMsR0FBR3hELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3dJLE1BQU0sQ0FBQyxDQUFDLEVBQUVtUyxHQUFHLENBQUMsQ0FBQztRQUN6Q25SLEtBQUssQ0FBQ2dJLE1BQU0sQ0FBQyxHQUFHekQsS0FBSyxDQUFDL04sS0FBSyxDQUFDd0ksTUFBTSxDQUFDbVMsR0FBRyxDQUFDLENBQUM7TUFDNUMsQ0FBQyxDQUFDO01BQ0Y5SixhQUFhLENBQUMsT0FBTyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7UUFDbkQsSUFBSTJWLElBQUksR0FBRzVhLEtBQUssQ0FBQ08sTUFBTSxHQUFHLENBQUM7VUFDdkJzYSxJQUFJLEdBQUc3YSxLQUFLLENBQUNPLE1BQU0sR0FBRyxDQUFDO1FBQzNCaUosS0FBSyxDQUFDK0gsSUFBSSxDQUFDLEdBQUd4RCxLQUFLLENBQUMvTixLQUFLLENBQUN3SSxNQUFNLENBQUMsQ0FBQyxFQUFFb1MsSUFBSSxDQUFDLENBQUM7UUFDMUNwUixLQUFLLENBQUNnSSxNQUFNLENBQUMsR0FBR3pELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3dJLE1BQU0sQ0FBQ29TLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1Q3BSLEtBQUssQ0FBQ2lJLE1BQU0sQ0FBQyxHQUFHMUQsS0FBSyxDQUFDL04sS0FBSyxDQUFDd0ksTUFBTSxDQUFDcVMsSUFBSSxDQUFDLENBQUM7TUFDN0MsQ0FBQyxDQUFDO01BQ0YsU0FBU0MsVUFBVUEsQ0FBQzlhLEtBQUssRUFBRTtRQUN2QixPQUFPLENBQUNBLEtBQUssR0FBRyxFQUFFLEVBQUU0TSxXQUFXLENBQUMsQ0FBQyxDQUFDbU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7TUFDdkQ7TUFDQSxJQUFJQywwQkFBMEIsR0FBRyxlQUFlO1FBQzVDQyxVQUFVLEdBQUc5TSxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztNQUMxQyxTQUFTK00sY0FBY0EsQ0FBQ0MsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRTtRQUMvQyxJQUFJRixNQUFNLEdBQUcsRUFBRSxFQUFFO1VBQ2IsT0FBT0UsT0FBTyxHQUFHLElBQUksR0FBRyxJQUFJO1FBQ2hDLENBQUMsTUFBTTtVQUNILE9BQU9BLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSTtRQUNoQztNQUNKO01BQ0EsSUFBSUMsVUFBVSxHQUFHO1FBQ2I5VCxRQUFRLEVBQUVQLGVBQWU7UUFDekI2QyxjQUFjLEVBQUVHLHFCQUFxQjtRQUNyQ04sV0FBVyxFQUFFaUIsa0JBQWtCO1FBQy9CekIsT0FBTyxFQUFFMkIsY0FBYztRQUN2QnlRLHNCQUFzQixFQUFFeFEsNkJBQTZCO1FBQ3JEaUIsWUFBWSxFQUFFZixtQkFBbUI7UUFDakNnSCxNQUFNLEVBQUVJLG1CQUFtQjtRQUMzQkwsV0FBVyxFQUFFTyx3QkFBd0I7UUFDckNxRCxJQUFJLEVBQUVhLGlCQUFpQjtRQUN2QlEsUUFBUSxFQUFFVSxxQkFBcUI7UUFDL0JaLFdBQVcsRUFBRWMsd0JBQXdCO1FBQ3JDYixhQUFhLEVBQUVZLDBCQUEwQjtRQUN6QzRELGFBQWEsRUFBRVI7TUFDbkIsQ0FBQztNQUNELElBQUlTLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDWkMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUNuQkMsWUFBWTtNQUNoQixTQUFTQyxZQUFZQSxDQUFDQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJL2EsQ0FBQztVQUNEZ2IsSUFBSSxHQUFHN1QsSUFBSSxDQUFDMEwsR0FBRyxDQUFDaUksSUFBSSxDQUFDdGIsTUFBTSxFQUFFdWIsSUFBSSxDQUFDdmIsTUFBTSxDQUFDO1FBQzdDLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2diLElBQUksRUFBRWhiLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDMUIsSUFBSThhLElBQUksQ0FBQzlhLENBQUMsQ0FBQyxLQUFLK2EsSUFBSSxDQUFDL2EsQ0FBQyxDQUFDLEVBQUU7WUFDckIsT0FBT0EsQ0FBQztVQUNaO1FBQ0o7UUFDQSxPQUFPZ2IsSUFBSTtNQUNmO01BQ0EsU0FBU0MsZUFBZUEsQ0FBQzFkLEdBQUcsRUFBRTtRQUMxQixPQUFPQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ3NPLFdBQVcsQ0FBQyxDQUFDLENBQUN0RCxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHaEwsR0FBRztNQUMxRDtNQUNBLFNBQVMyZCxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7UUFDekIsSUFBSW5iLENBQUMsR0FBRyxDQUFDO1VBQ0xvYixDQUFDO1VBQ0RDLElBQUk7VUFDSjlhLE9BQU87VUFDUGdSLEtBQUs7UUFDVCxPQUFPdlIsQ0FBQyxHQUFHbWIsS0FBSyxDQUFDM2IsTUFBTSxFQUFFO1VBQ3JCK1IsS0FBSyxHQUFHMEosZUFBZSxDQUFDRSxLQUFLLENBQUNuYixDQUFDLENBQUMsQ0FBQyxDQUFDdVIsS0FBSyxDQUFDLEdBQUcsQ0FBQztVQUM1QzZKLENBQUMsR0FBRzdKLEtBQUssQ0FBQy9SLE1BQU07VUFDaEI2YixJQUFJLEdBQUdKLGVBQWUsQ0FBQ0UsS0FBSyxDQUFDbmIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1VBQ3BDcWIsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUksQ0FBQzlKLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJO1VBQ3BDLE9BQU82SixDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1Y3YSxPQUFPLEdBQUcrYSxVQUFVLENBQUMvSixLQUFLLENBQUN4TSxLQUFLLENBQUMsQ0FBQyxFQUFFcVcsQ0FBQyxDQUFDLENBQUNwVyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakQsSUFBSXpFLE9BQU8sRUFBRTtjQUNULE9BQU9BLE9BQU87WUFDbEI7WUFDQSxJQUNJOGEsSUFBSSxJQUNKQSxJQUFJLENBQUM3YixNQUFNLElBQUk0YixDQUFDLElBQ2hCUCxZQUFZLENBQUN0SixLQUFLLEVBQUU4SixJQUFJLENBQUMsSUFBSUQsQ0FBQyxHQUFHLENBQUMsRUFDcEM7Y0FDRTtZQUNKO1lBQ0FBLENBQUMsRUFBRTtVQUNQO1VBQ0FwYixDQUFDLEVBQUU7UUFDUDtRQUNBLE9BQU80YSxZQUFZO01BQ3ZCO01BQ0EsU0FBU1csZ0JBQWdCQSxDQUFDNWUsSUFBSSxFQUFFO1FBQzVCLE9BQU9BLElBQUksQ0FBQzJMLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJO01BQzVDO01BQ0EsU0FBU2dULFVBQVVBLENBQUMzZSxJQUFJLEVBQUU7UUFDdEIsSUFBSTZlLFNBQVMsR0FBRyxJQUFJO1VBQ2hCQyxjQUFjO1FBQ2xCLElBQ0lmLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUN4QixPQUFPMkIsTUFBTSxLQUFLLFdBQVcsSUFDN0JBLE1BQU0sSUFDTkEsTUFBTSxDQUFDdkMsT0FBTyxJQUNkd2YsZ0JBQWdCLENBQUM1ZSxJQUFJLENBQUMsRUFDeEI7VUFDRSxJQUFJO1lBQ0E2ZSxTQUFTLEdBQUdaLFlBQVksQ0FBQ2MsS0FBSztZQUM5QkQsY0FBYyxHQUFHcGdCLFNBQVM7WUFDMUJvZ0IsY0FBYyxDQUFDLFdBQVcsR0FBRzllLElBQUksQ0FBQztZQUNsQ2dmLGtCQUFrQixDQUFDSCxTQUFTLENBQUM7VUFDakMsQ0FBQyxDQUFDLE9BQU8xZCxDQUFDLEVBQUU7WUFDUjRjLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxHQUFHLElBQUk7VUFDeEI7UUFDSjtRQUNBLE9BQU8rZCxPQUFPLENBQUMvZCxJQUFJLENBQUM7TUFDeEI7TUFDQSxTQUFTZ2Ysa0JBQWtCQSxDQUFDcGUsR0FBRyxFQUFFcWUsTUFBTSxFQUFFO1FBQ3JDLElBQUlDLElBQUk7UUFDUixJQUFJdGUsR0FBRyxFQUFFO1VBQ0wsSUFBSW1DLFdBQVcsQ0FBQ2tjLE1BQU0sQ0FBQyxFQUFFO1lBQ3JCQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ3ZlLEdBQUcsQ0FBQztVQUN6QixDQUFDLE1BQU07WUFDSHNlLElBQUksR0FBR0UsWUFBWSxDQUFDeGUsR0FBRyxFQUFFcWUsTUFBTSxDQUFDO1VBQ3BDO1VBQ0EsSUFBSUMsSUFBSSxFQUFFO1lBQ05qQixZQUFZLEdBQUdpQixJQUFJO1VBQ3ZCLENBQUMsTUFBTTtZQUNILElBQUksT0FBT3JYLE9BQU8sS0FBSyxXQUFXLElBQUlBLE9BQU8sQ0FBQ0gsSUFBSSxFQUFFO2NBQ2hERyxPQUFPLENBQUNILElBQUksQ0FDUixTQUFTLEdBQ0w5RyxHQUFHLEdBQ0gsd0NBQ1IsQ0FBQztZQUNMO1VBQ0o7UUFDSjtRQUNBLE9BQU9xZCxZQUFZLENBQUNjLEtBQUs7TUFDN0I7TUFDQSxTQUFTSyxZQUFZQSxDQUFDcGYsSUFBSSxFQUFFdUgsTUFBTSxFQUFFO1FBQ2hDLElBQUlBLE1BQU0sS0FBSyxJQUFJLEVBQUU7VUFDakIsSUFBSTNELE9BQU87WUFDUHVGLFlBQVksR0FBR3lVLFVBQVU7VUFDN0JyVyxNQUFNLENBQUM4WCxJQUFJLEdBQUdyZixJQUFJO1VBQ2xCLElBQUkrZCxPQUFPLENBQUMvZCxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDdkJ3SSxlQUFlLENBQ1gsc0JBQXNCLEVBQ3RCLHlPQUNKLENBQUM7WUFDRFcsWUFBWSxHQUFHNFUsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLENBQUM0SSxPQUFPO1VBQ3hDLENBQUMsTUFBTSxJQUFJckIsTUFBTSxDQUFDK1gsWUFBWSxJQUFJLElBQUksRUFBRTtZQUNwQyxJQUFJdkIsT0FBTyxDQUFDeFcsTUFBTSxDQUFDK1gsWUFBWSxDQUFDLElBQUksSUFBSSxFQUFFO2NBQ3RDblcsWUFBWSxHQUFHNFUsT0FBTyxDQUFDeFcsTUFBTSxDQUFDK1gsWUFBWSxDQUFDLENBQUMxVyxPQUFPO1lBQ3ZELENBQUMsTUFBTTtjQUNIaEYsT0FBTyxHQUFHK2EsVUFBVSxDQUFDcFgsTUFBTSxDQUFDK1gsWUFBWSxDQUFDO2NBQ3pDLElBQUkxYixPQUFPLElBQUksSUFBSSxFQUFFO2dCQUNqQnVGLFlBQVksR0FBR3ZGLE9BQU8sQ0FBQ2dGLE9BQU87Y0FDbEMsQ0FBQyxNQUFNO2dCQUNILElBQUksQ0FBQ29WLGNBQWMsQ0FBQ3pXLE1BQU0sQ0FBQytYLFlBQVksQ0FBQyxFQUFFO2tCQUN0Q3RCLGNBQWMsQ0FBQ3pXLE1BQU0sQ0FBQytYLFlBQVksQ0FBQyxHQUFHLEVBQUU7Z0JBQzVDO2dCQUNBdEIsY0FBYyxDQUFDelcsTUFBTSxDQUFDK1gsWUFBWSxDQUFDLENBQUMvYixJQUFJLENBQUM7a0JBQ3JDdkQsSUFBSSxFQUFKQSxJQUFJO2tCQUNKdUgsTUFBTSxFQUFOQTtnQkFDSixDQUFDLENBQUM7Z0JBQ0YsT0FBTyxJQUFJO2NBQ2Y7WUFDSjtVQUNKO1VBQ0F3VyxPQUFPLENBQUMvZCxJQUFJLENBQUMsR0FBRyxJQUFJcUosTUFBTSxDQUN0QkgsWUFBWSxDQUFDQyxZQUFZLEVBQUU1QixNQUFNLENBQ3JDLENBQUM7VUFDRCxJQUFJeVcsY0FBYyxDQUFDaGUsSUFBSSxDQUFDLEVBQUU7WUFDdEJnZSxjQUFjLENBQUNoZSxJQUFJLENBQUMsQ0FBQ3VmLE9BQU8sQ0FBQyxVQUFVNWdCLENBQUMsRUFBRTtjQUN0Q3lnQixZQUFZLENBQUN6Z0IsQ0FBQyxDQUFDcUIsSUFBSSxFQUFFckIsQ0FBQyxDQUFDNEksTUFBTSxDQUFDO1lBQ2xDLENBQUMsQ0FBQztVQUNOO1VBQ0F5WCxrQkFBa0IsQ0FBQ2hmLElBQUksQ0FBQztVQUN4QixPQUFPK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDO1FBQ3hCLENBQUMsTUFBTTtVQUNILE9BQU8rZCxPQUFPLENBQUMvZCxJQUFJLENBQUM7VUFDcEIsT0FBTyxJQUFJO1FBQ2Y7TUFDSjtNQUNBLFNBQVN3ZixZQUFZQSxDQUFDeGYsSUFBSSxFQUFFdUgsTUFBTSxFQUFFO1FBQ2hDLElBQUlBLE1BQU0sSUFBSSxJQUFJLEVBQUU7VUFDaEIsSUFBSTNELE9BQU87WUFDUDZiLFNBQVM7WUFDVHRXLFlBQVksR0FBR3lVLFVBQVU7VUFDN0IsSUFDSUcsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLElBQUksSUFBSSxJQUNyQitkLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxDQUFDc2YsWUFBWSxJQUFJLElBQUksRUFDcEM7WUFDRXZCLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxDQUFDMkksR0FBRyxDQUNiTyxZQUFZLENBQUM2VSxPQUFPLENBQUMvZCxJQUFJLENBQUMsQ0FBQzRJLE9BQU8sRUFBRXJCLE1BQU0sQ0FDOUMsQ0FBQztVQUNMLENBQUMsTUFBTTtZQUNIa1ksU0FBUyxHQUFHZCxVQUFVLENBQUMzZSxJQUFJLENBQUM7WUFDNUIsSUFBSXlmLFNBQVMsSUFBSSxJQUFJLEVBQUU7Y0FDbkJ0VyxZQUFZLEdBQUdzVyxTQUFTLENBQUM3VyxPQUFPO1lBQ3BDO1lBQ0FyQixNQUFNLEdBQUcyQixZQUFZLENBQUNDLFlBQVksRUFBRTVCLE1BQU0sQ0FBQztZQUMzQyxJQUFJa1ksU0FBUyxJQUFJLElBQUksRUFBRTtjQUNuQmxZLE1BQU0sQ0FBQzhYLElBQUksR0FBR3JmLElBQUk7WUFDdEI7WUFDQTRELE9BQU8sR0FBRyxJQUFJeUYsTUFBTSxDQUFDOUIsTUFBTSxDQUFDO1lBQzVCM0QsT0FBTyxDQUFDMGIsWUFBWSxHQUFHdkIsT0FBTyxDQUFDL2QsSUFBSSxDQUFDO1lBQ3BDK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLEdBQUc0RCxPQUFPO1VBQzNCO1VBQ0FvYixrQkFBa0IsQ0FBQ2hmLElBQUksQ0FBQztRQUM1QixDQUFDLE1BQU07VUFDSCxJQUFJK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3ZCLElBQUkrZCxPQUFPLENBQUMvZCxJQUFJLENBQUMsQ0FBQ3NmLFlBQVksSUFBSSxJQUFJLEVBQUU7Y0FDcEN2QixPQUFPLENBQUMvZCxJQUFJLENBQUMsR0FBRytkLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxDQUFDc2YsWUFBWTtjQUMxQyxJQUFJdGYsSUFBSSxLQUFLZ2Ysa0JBQWtCLENBQUMsQ0FBQyxFQUFFO2dCQUMvQkEsa0JBQWtCLENBQUNoZixJQUFJLENBQUM7Y0FDNUI7WUFDSixDQUFDLE1BQU0sSUFBSStkLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtjQUM5QixPQUFPK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDO1lBQ3hCO1VBQ0o7UUFDSjtRQUNBLE9BQU8rZCxPQUFPLENBQUMvZCxJQUFJLENBQUM7TUFDeEI7TUFDQSxTQUFTbWYsU0FBU0EsQ0FBQ3ZlLEdBQUcsRUFBRTtRQUNwQixJQUFJZ0QsT0FBTztRQUNYLElBQUloRCxHQUFHLElBQUlBLEdBQUcsQ0FBQ3lHLE9BQU8sSUFBSXpHLEdBQUcsQ0FBQ3lHLE9BQU8sQ0FBQzBYLEtBQUssRUFBRTtVQUN6Q25lLEdBQUcsR0FBR0EsR0FBRyxDQUFDeUcsT0FBTyxDQUFDMFgsS0FBSztRQUMzQjtRQUNBLElBQUksQ0FBQ25lLEdBQUcsRUFBRTtVQUNOLE9BQU9xZCxZQUFZO1FBQ3ZCO1FBQ0EsSUFBSSxDQUFDNWIsT0FBTyxDQUFDekIsR0FBRyxDQUFDLEVBQUU7VUFDZmdELE9BQU8sR0FBRythLFVBQVUsQ0FBQy9kLEdBQUcsQ0FBQztVQUN6QixJQUFJZ0QsT0FBTyxFQUFFO1lBQ1QsT0FBT0EsT0FBTztVQUNsQjtVQUNBaEQsR0FBRyxHQUFHLENBQUNBLEdBQUcsQ0FBQztRQUNmO1FBQ0EsT0FBTzJkLFlBQVksQ0FBQzNkLEdBQUcsQ0FBQztNQUM1QjtNQUNBLFNBQVM4ZSxXQUFXQSxDQUFBLEVBQUc7UUFDbkIsT0FBT3BXLElBQUksQ0FBQ3lVLE9BQU8sQ0FBQztNQUN4QjtNQUNBLFNBQVM0QixhQUFhQSxDQUFDemEsQ0FBQyxFQUFFO1FBQ3RCLElBQUlkLFFBQVE7VUFDUnJGLENBQUMsR0FBR21HLENBQUMsQ0FBQ3VPLEVBQUU7UUFDWixJQUFJMVUsQ0FBQyxJQUFJa0csZUFBZSxDQUFDQyxDQUFDLENBQUMsQ0FBQ2QsUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFO1VBQ3pDQSxRQUFRLEdBQ0pyRixDQUFDLENBQUM0VSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUk1VSxDQUFDLENBQUM0VSxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQ3ZCQSxLQUFLLEdBQ0w1VSxDQUFDLENBQUM2VSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQ1g3VSxDQUFDLENBQUM2VSxJQUFJLENBQUMsR0FBRzlDLFdBQVcsQ0FBQy9SLENBQUMsQ0FBQzJVLElBQUksQ0FBQyxFQUFFM1UsQ0FBQyxDQUFDNFUsS0FBSyxDQUFDLENBQUMsR0FDeENDLElBQUksR0FDSjdVLENBQUMsQ0FBQzhVLElBQUksQ0FBQyxHQUFHLENBQUMsSUFDWDlVLENBQUMsQ0FBQzhVLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFDWDlVLENBQUMsQ0FBQzhVLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FDVjlVLENBQUMsQ0FBQytVLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFDWi9VLENBQUMsQ0FBQ2dWLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFDZmhWLENBQUMsQ0FBQ2lWLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBRSxHQUM5QkgsSUFBSSxHQUNKOVUsQ0FBQyxDQUFDK1UsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJL1UsQ0FBQyxDQUFDK1UsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUMvQkEsTUFBTSxHQUNOL1UsQ0FBQyxDQUFDZ1YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJaFYsQ0FBQyxDQUFDZ1YsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUMvQkEsTUFBTSxHQUNOaFYsQ0FBQyxDQUFDaVYsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJalYsQ0FBQyxDQUFDaVYsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUMxQ0EsV0FBVyxHQUNYLENBQUMsQ0FBQztVQUNaLElBQ0kvTyxlQUFlLENBQUNDLENBQUMsQ0FBQyxDQUFDMGEsa0JBQWtCLEtBQ3BDeGIsUUFBUSxHQUFHc1AsSUFBSSxJQUFJdFAsUUFBUSxHQUFHd1AsSUFBSSxDQUFDLEVBQ3RDO1lBQ0V4UCxRQUFRLEdBQUd3UCxJQUFJO1VBQ25CO1VBQ0EsSUFBSTNPLGVBQWUsQ0FBQ0MsQ0FBQyxDQUFDLENBQUMyYSxjQUFjLElBQUl6YixRQUFRLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDdERBLFFBQVEsR0FBRzZQLElBQUk7VUFDbkI7VUFDQSxJQUNJaFAsZUFBZSxDQUFDQyxDQUFDLENBQUMsQ0FBQzRhLGdCQUFnQixJQUNuQzFiLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFDakI7WUFDRUEsUUFBUSxHQUFHOFAsT0FBTztVQUN0QjtVQUNBalAsZUFBZSxDQUFDQyxDQUFDLENBQUMsQ0FBQ2QsUUFBUSxHQUFHQSxRQUFRO1FBQzFDO1FBQ0EsT0FBT2MsQ0FBQztNQUNaO01BQ0EsSUFBSTZhLGdCQUFnQixHQUNaLGdKQUFnSjtRQUNwSkMsYUFBYSxHQUNULDRJQUE0STtRQUNoSkMsT0FBTyxHQUFHLHVCQUF1QjtRQUNqQ0MsUUFBUSxHQUFHLENBQ1AsQ0FBQyxjQUFjLEVBQUUscUJBQXFCLENBQUMsRUFDdkMsQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLENBQUMsRUFDakMsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsRUFDbEMsQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxFQUNwQyxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsRUFDM0IsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUNoQyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsRUFDNUIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEVBQ3JCLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxFQUM3QixDQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQ25DLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUNwQixDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQzFCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FDM0I7UUFDREMsUUFBUSxHQUFHLENBQ1AsQ0FBQyxlQUFlLEVBQUUscUJBQXFCLENBQUMsRUFDeEMsQ0FBQyxlQUFlLEVBQUUsb0JBQW9CLENBQUMsRUFDdkMsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsRUFDOUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLEVBQ3RCLENBQUMsYUFBYSxFQUFFLG1CQUFtQixDQUFDLEVBQ3BDLENBQUMsYUFBYSxFQUFFLGtCQUFrQixDQUFDLEVBQ25DLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxFQUMxQixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFDcEIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQ2pCO1FBQ0RDLGVBQWUsR0FBRyxvQkFBb0I7UUFDdENyYixPQUFPLEdBQ0gseUxBQXlMO1FBQzdMc2IsVUFBVSxHQUFHO1VBQ1RDLEVBQUUsRUFBRSxDQUFDO1VBQ0xDLEdBQUcsRUFBRSxDQUFDO1VBQ05DLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1VBQ1pDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1VBQ1pDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1VBQ1pDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1VBQ1pDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1VBQ1pDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1VBQ1pDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO1VBQ1pDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRztRQUNkLENBQUM7TUFDTCxTQUFTQyxhQUFhQSxDQUFDelosTUFBTSxFQUFFO1FBQzNCLElBQUlsRSxDQUFDO1VBQ0Q0ZCxDQUFDO1VBQ0R6UyxNQUFNLEdBQUdqSCxNQUFNLENBQUNSLEVBQUU7VUFDbEI0RSxLQUFLLEdBQ0RvVSxnQkFBZ0IsQ0FBQ21CLElBQUksQ0FBQzFTLE1BQU0sQ0FBQyxJQUM3QndSLGFBQWEsQ0FBQ2tCLElBQUksQ0FBQzFTLE1BQU0sQ0FBQztVQUM5QjJTLFNBQVM7VUFDVEMsVUFBVTtVQUNWQyxVQUFVO1VBQ1ZDLFFBQVE7VUFDUkMsV0FBVyxHQUFHckIsUUFBUSxDQUFDcmQsTUFBTTtVQUM3QjJlLFdBQVcsR0FBR3JCLFFBQVEsQ0FBQ3RkLE1BQU07UUFDakMsSUFBSThJLEtBQUssRUFBRTtVQUNQMUcsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUM1QyxHQUFHLEdBQUcsSUFBSTtVQUNsQyxLQUFLdEIsQ0FBQyxHQUFHLENBQUMsRUFBRTRkLENBQUMsR0FBR00sV0FBVyxFQUFFbGUsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFNWQsQ0FBQyxFQUFFLEVBQUU7WUFDckMsSUFBSTZjLFFBQVEsQ0FBQzdjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDNmQsSUFBSSxDQUFDdlYsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Y0FDL0J5VixVQUFVLEdBQUdsQixRQUFRLENBQUM3YyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Y0FDM0I4ZCxTQUFTLEdBQUdqQixRQUFRLENBQUM3YyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLO2NBQ3BDO1lBQ0o7VUFDSjtVQUNBLElBQUkrZCxVQUFVLElBQUksSUFBSSxFQUFFO1lBQ3BCN1osTUFBTSxDQUFDOUIsUUFBUSxHQUFHLEtBQUs7WUFDdkI7VUFDSjtVQUNBLElBQUlrRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDVixLQUFLdEksQ0FBQyxHQUFHLENBQUMsRUFBRTRkLENBQUMsR0FBR08sV0FBVyxFQUFFbmUsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFNWQsQ0FBQyxFQUFFLEVBQUU7Y0FDckMsSUFBSThjLFFBQVEsQ0FBQzljLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDNmQsSUFBSSxDQUFDdlYsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9CMFYsVUFBVSxHQUFHLENBQUMxVixLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJd1UsUUFBUSxDQUFDOWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQztjQUNKO1lBQ0o7WUFDQSxJQUFJZ2UsVUFBVSxJQUFJLElBQUksRUFBRTtjQUNwQjlaLE1BQU0sQ0FBQzlCLFFBQVEsR0FBRyxLQUFLO2NBQ3ZCO1lBQ0o7VUFDSjtVQUNBLElBQUksQ0FBQzBiLFNBQVMsSUFBSUUsVUFBVSxJQUFJLElBQUksRUFBRTtZQUNsQzlaLE1BQU0sQ0FBQzlCLFFBQVEsR0FBRyxLQUFLO1lBQ3ZCO1VBQ0o7VUFDQSxJQUFJa0csS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ1YsSUFBSXNVLE9BQU8sQ0FBQ2lCLElBQUksQ0FBQ3ZWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2NBQ3hCMlYsUUFBUSxHQUFHLEdBQUc7WUFDbEIsQ0FBQyxNQUFNO2NBQ0gvWixNQUFNLENBQUM5QixRQUFRLEdBQUcsS0FBSztjQUN2QjtZQUNKO1VBQ0o7VUFDQThCLE1BQU0sQ0FBQ1AsRUFBRSxHQUNMb2EsVUFBVSxJQUFJQyxVQUFVLElBQUksRUFBRSxDQUFDLElBQUlDLFFBQVEsSUFBSSxFQUFFLENBQUM7VUFDdERHLHlCQUF5QixDQUFDbGEsTUFBTSxDQUFDO1FBQ3JDLENBQUMsTUFBTTtVQUNIQSxNQUFNLENBQUM5QixRQUFRLEdBQUcsS0FBSztRQUMzQjtNQUNKO01BQ0EsU0FBU2ljLHlCQUF5QkEsQ0FDOUJDLE9BQU8sRUFDUEMsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLE9BQU8sRUFDUEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1g7UUFDRSxJQUFJQyxNQUFNLEdBQUcsQ0FDVEMsY0FBYyxDQUFDUCxPQUFPLENBQUMsRUFDdkI5TSx3QkFBd0IsQ0FBQ1YsT0FBTyxDQUFDeU4sUUFBUSxDQUFDLEVBQzFDN0ssUUFBUSxDQUFDOEssTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUNwQjlLLFFBQVEsQ0FBQytLLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFDckIvSyxRQUFRLENBQUNnTCxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQzFCO1FBQ0QsSUFBSUMsU0FBUyxFQUFFO1VBQ1hDLE1BQU0sQ0FBQzFlLElBQUksQ0FBQ3dULFFBQVEsQ0FBQ2lMLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QztRQUNBLE9BQU9DLE1BQU07TUFDakI7TUFDQSxTQUFTQyxjQUFjQSxDQUFDUCxPQUFPLEVBQUU7UUFDN0IsSUFBSTFSLElBQUksR0FBRzhHLFFBQVEsQ0FBQzRLLE9BQU8sRUFBRSxFQUFFLENBQUM7UUFDaEMsSUFBSTFSLElBQUksSUFBSSxFQUFFLEVBQUU7VUFDWixPQUFPLEdBQUcsR0FBR0EsSUFBSTtRQUNyQixDQUFDLE1BQU0sSUFBSUEsSUFBSSxJQUFJLEdBQUcsRUFBRTtVQUNwQixPQUFPLElBQUksR0FBR0EsSUFBSTtRQUN0QjtRQUNBLE9BQU9BLElBQUk7TUFDZjtNQUNBLFNBQVNrUyxpQkFBaUJBLENBQUNwaEIsQ0FBQyxFQUFFO1FBQzFCLE9BQU9BLENBQUMsQ0FDSDZLLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsQ0FDbENBLE9BQU8sQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQ3hCQSxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUNyQkEsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7TUFDOUI7TUFDQSxTQUFTd1csWUFBWUEsQ0FBQ0MsVUFBVSxFQUFFQyxXQUFXLEVBQUUvYSxNQUFNLEVBQUU7UUFDbkQsSUFBSThhLFVBQVUsRUFBRTtVQUNaLElBQUlFLGVBQWUsR0FDWHJJLDBCQUEwQixDQUFDL0YsT0FBTyxDQUFDa08sVUFBVSxDQUFDO1lBQ2xERyxhQUFhLEdBQUcsSUFBSXRmLElBQUksQ0FDcEJvZixXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQ2RBLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFDZEEsV0FBVyxDQUFDLENBQUMsQ0FDakIsQ0FBQyxDQUFDL0csTUFBTSxDQUFDLENBQUM7VUFDZCxJQUFJZ0gsZUFBZSxLQUFLQyxhQUFhLEVBQUU7WUFDbkN2ZCxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3ZDLGVBQWUsR0FBRyxJQUFJO1lBQzlDdUMsTUFBTSxDQUFDOUIsUUFBUSxHQUFHLEtBQUs7WUFDdkIsT0FBTyxLQUFLO1VBQ2hCO1FBQ0o7UUFDQSxPQUFPLElBQUk7TUFDZjtNQUNBLFNBQVNnZCxlQUFlQSxDQUFDQyxTQUFTLEVBQUVDLGNBQWMsRUFBRUMsU0FBUyxFQUFFO1FBQzNELElBQUlGLFNBQVMsRUFBRTtVQUNYLE9BQU9yQyxVQUFVLENBQUNxQyxTQUFTLENBQUM7UUFDaEMsQ0FBQyxNQUFNLElBQUlDLGNBQWMsRUFBRTtVQUN2QixPQUFPLENBQUM7UUFDWixDQUFDLE1BQU07VUFDSCxJQUFJRSxFQUFFLEdBQUc5TCxRQUFRLENBQUM2TCxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQzVCMWQsQ0FBQyxHQUFHMmQsRUFBRSxHQUFHLEdBQUc7WUFDWmpWLENBQUMsR0FBRyxDQUFDaVYsRUFBRSxHQUFHM2QsQ0FBQyxJQUFJLEdBQUc7VUFDdEIsT0FBTzBJLENBQUMsR0FBRyxFQUFFLEdBQUcxSSxDQUFDO1FBQ3JCO01BQ0o7TUFDQSxTQUFTNGQsaUJBQWlCQSxDQUFDdmIsTUFBTSxFQUFFO1FBQy9CLElBQUlvRSxLQUFLLEdBQUc1RyxPQUFPLENBQUNtYyxJQUFJLENBQUNpQixpQkFBaUIsQ0FBQzVhLE1BQU0sQ0FBQ1IsRUFBRSxDQUFDLENBQUM7VUFDbERnYyxXQUFXO1FBQ2YsSUFBSXBYLEtBQUssRUFBRTtVQUNQb1gsV0FBVyxHQUFHckIseUJBQXlCLENBQ25DL1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNSQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ1JBLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDUkEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNSQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ1JBLEtBQUssQ0FBQyxDQUFDLENBQ1gsQ0FBQztVQUNELElBQUksQ0FBQ3lXLFlBQVksQ0FBQ3pXLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRW9YLFdBQVcsRUFBRXhiLE1BQU0sQ0FBQyxFQUFFO1lBQzlDO1VBQ0o7VUFDQUEsTUFBTSxDQUFDa00sRUFBRSxHQUFHc1AsV0FBVztVQUN2QnhiLE1BQU0sQ0FBQ0wsSUFBSSxHQUFHdWIsZUFBZSxDQUFDOVcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztVQUM1RHBFLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBR3lSLGFBQWEsQ0FBQ3RZLEtBQUssQ0FBQyxJQUFJLEVBQUVzSSxNQUFNLENBQUNrTSxFQUFFLENBQUM7VUFDaERsTSxNQUFNLENBQUN6QixFQUFFLENBQUNrZCxhQUFhLENBQ25CemIsTUFBTSxDQUFDekIsRUFBRSxDQUFDbWQsYUFBYSxDQUFDLENBQUMsR0FBRzFiLE1BQU0sQ0FBQ0wsSUFDdkMsQ0FBQztVQUNEakMsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUN4QyxPQUFPLEdBQUcsSUFBSTtRQUMxQyxDQUFDLE1BQU07VUFDSHdDLE1BQU0sQ0FBQzlCLFFBQVEsR0FBRyxLQUFLO1FBQzNCO01BQ0o7TUFDQSxTQUFTeWQsZ0JBQWdCQSxDQUFDM2IsTUFBTSxFQUFFO1FBQzlCLElBQUlzTCxPQUFPLEdBQUd1TixlQUFlLENBQUNjLElBQUksQ0FBQzNaLE1BQU0sQ0FBQ1IsRUFBRSxDQUFDO1FBQzdDLElBQUk4TCxPQUFPLEtBQUssSUFBSSxFQUFFO1VBQ2xCdEwsTUFBTSxDQUFDekIsRUFBRSxHQUFtQixJQUFJNUMsSUFBSSxDQUFDLENBQUMyUCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7VUFDakQ7UUFDSjtRQUNBbU8sYUFBYSxDQUFDelosTUFBTSxDQUFDO1FBQ3JCLElBQUlBLE1BQU0sQ0FBQzlCLFFBQVEsS0FBSyxLQUFLLEVBQUU7VUFDM0IsT0FBTzhCLE1BQU0sQ0FBQzlCLFFBQVE7UUFDMUIsQ0FBQyxNQUFNO1VBQ0g7UUFDSjtRQUNBcWQsaUJBQWlCLENBQUN2YixNQUFNLENBQUM7UUFDekIsSUFBSUEsTUFBTSxDQUFDOUIsUUFBUSxLQUFLLEtBQUssRUFBRTtVQUMzQixPQUFPOEIsTUFBTSxDQUFDOUIsUUFBUTtRQUMxQixDQUFDLE1BQU07VUFDSDtRQUNKO1FBQ0EsSUFBSThCLE1BQU0sQ0FBQ3RCLE9BQU8sRUFBRTtVQUNoQnNCLE1BQU0sQ0FBQzlCLFFBQVEsR0FBRyxLQUFLO1FBQzNCLENBQUMsTUFBTTtVQUNIdkQsS0FBSyxDQUFDaWhCLHVCQUF1QixDQUFDNWIsTUFBTSxDQUFDO1FBQ3pDO01BQ0o7TUFDQXJGLEtBQUssQ0FBQ2loQix1QkFBdUIsR0FBR3JiLFNBQVMsQ0FDckMsK1JBQStSLEVBQy9SLFVBQVVQLE1BQU0sRUFBRTtRQUNkQSxNQUFNLENBQUN6QixFQUFFLEdBQW1CLElBQUk1QyxJQUFJLENBQ2hDcUUsTUFBTSxDQUFDUixFQUFFLElBQUlRLE1BQU0sQ0FBQzZiLE9BQU8sR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUM3QyxDQUFDO01BQ0wsQ0FDSixDQUFDO01BQ0QsU0FBU0MsUUFBUUEsQ0FBQ3RrQixDQUFDLEVBQUVDLENBQUMsRUFBRXNrQixDQUFDLEVBQUU7UUFDdkIsSUFBSXZrQixDQUFDLElBQUksSUFBSSxFQUFFO1VBQ1gsT0FBT0EsQ0FBQztRQUNaO1FBQ0EsSUFBSUMsQ0FBQyxJQUFJLElBQUksRUFBRTtVQUNYLE9BQU9BLENBQUM7UUFDWjtRQUNBLE9BQU9za0IsQ0FBQztNQUNaO01BQ0EsU0FBU0MsZ0JBQWdCQSxDQUFDaGMsTUFBTSxFQUFFO1FBQzlCLElBQUlpYyxRQUFRLEdBQUcsSUFBSXRnQixJQUFJLENBQUNoQixLQUFLLENBQUN1aEIsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJbGMsTUFBTSxDQUFDNmIsT0FBTyxFQUFFO1VBQ2hCLE9BQU8sQ0FDSEksUUFBUSxDQUFDL0wsY0FBYyxDQUFDLENBQUMsRUFDekIrTCxRQUFRLENBQUNFLFdBQVcsQ0FBQyxDQUFDLEVBQ3RCRixRQUFRLENBQUNHLFVBQVUsQ0FBQyxDQUFDLENBQ3hCO1FBQ0w7UUFDQSxPQUFPLENBQ0hILFFBQVEsQ0FBQ25NLFdBQVcsQ0FBQyxDQUFDLEVBQ3RCbU0sUUFBUSxDQUFDSSxRQUFRLENBQUMsQ0FBQyxFQUNuQkosUUFBUSxDQUFDSyxPQUFPLENBQUMsQ0FBQyxDQUNyQjtNQUNMO01BQ0EsU0FBU0MsZUFBZUEsQ0FBQ3ZjLE1BQU0sRUFBRTtRQUM3QixJQUFJbEUsQ0FBQztVQUNEd04sSUFBSTtVQUNKdk8sS0FBSyxHQUFHLEVBQUU7VUFDVnloQixXQUFXO1VBQ1hDLGVBQWU7VUFDZkMsU0FBUztRQUNiLElBQUkxYyxNQUFNLENBQUN6QixFQUFFLEVBQUU7VUFDWDtRQUNKO1FBQ0FpZSxXQUFXLEdBQUdSLGdCQUFnQixDQUFDaGMsTUFBTSxDQUFDO1FBQ3RDLElBQ0lBLE1BQU0sQ0FBQ2dNLEVBQUUsSUFDVGhNLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0csSUFBSSxDQUFDLElBQUksSUFBSSxJQUN2QnJNLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0UsS0FBSyxDQUFDLElBQUksSUFBSSxFQUMxQjtVQUNFdVEscUJBQXFCLENBQUMzYyxNQUFNLENBQUM7UUFDakM7UUFDQSxJQUFJQSxNQUFNLENBQUM0YyxVQUFVLElBQUksSUFBSSxFQUFFO1VBQzNCRixTQUFTLEdBQUdaLFFBQVEsQ0FBQzliLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLEVBQUVxUSxXQUFXLENBQUNyUSxJQUFJLENBQUMsQ0FBQztVQUN4RCxJQUNJbk0sTUFBTSxDQUFDNGMsVUFBVSxHQUFHbk4sVUFBVSxDQUFDaU4sU0FBUyxDQUFDLElBQ3pDMWMsTUFBTSxDQUFDNGMsVUFBVSxLQUFLLENBQUMsRUFDekI7WUFDRWxmLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDcVksa0JBQWtCLEdBQUcsSUFBSTtVQUNyRDtVQUNBL08sSUFBSSxHQUFHMEcsYUFBYSxDQUFDME0sU0FBUyxFQUFFLENBQUMsRUFBRTFjLE1BQU0sQ0FBQzRjLFVBQVUsQ0FBQztVQUNyRDVjLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0UsS0FBSyxDQUFDLEdBQUc5QyxJQUFJLENBQUM2UyxXQUFXLENBQUMsQ0FBQztVQUNyQ25jLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0csSUFBSSxDQUFDLEdBQUcvQyxJQUFJLENBQUM4UyxVQUFVLENBQUMsQ0FBQztRQUN2QztRQUNBLEtBQUt0Z0IsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLENBQUMsSUFBSWtFLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ3BRLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFQSxDQUFDLEVBQUU7VUFDNUNrRSxNQUFNLENBQUNrTSxFQUFFLENBQUNwUSxDQUFDLENBQUMsR0FBR2YsS0FBSyxDQUFDZSxDQUFDLENBQUMsR0FBRzBnQixXQUFXLENBQUMxZ0IsQ0FBQyxDQUFDO1FBQzVDO1FBQ0EsT0FBT0EsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7VUFDZmtFLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ3BRLENBQUMsQ0FBQyxHQUFHZixLQUFLLENBQUNlLENBQUMsQ0FBQyxHQUNuQmtFLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ3BRLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBSUEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFJa0UsTUFBTSxDQUFDa00sRUFBRSxDQUFDcFEsQ0FBQyxDQUFDO1FBQy9EO1FBQ0EsSUFDSWtFLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0ksSUFBSSxDQUFDLEtBQUssRUFBRSxJQUN0QnRNLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0ssTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUN2QnZNLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ00sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUN2QnhNLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ08sV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUM5QjtVQUNFek0sTUFBTSxDQUFDNmMsUUFBUSxHQUFHLElBQUk7VUFDdEI3YyxNQUFNLENBQUNrTSxFQUFFLENBQUNJLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDdkI7UUFDQXRNLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBRyxDQUFDeUIsTUFBTSxDQUFDNmIsT0FBTyxHQUFHN0wsYUFBYSxHQUFHSixVQUFVLEVBQUVsWSxLQUFLLENBQzNELElBQUksRUFDSnFELEtBQ0osQ0FBQztRQUNEMGhCLGVBQWUsR0FBR3pjLE1BQU0sQ0FBQzZiLE9BQU8sR0FDMUI3YixNQUFNLENBQUN6QixFQUFFLENBQUNrUyxTQUFTLENBQUMsQ0FBQyxHQUNyQnpRLE1BQU0sQ0FBQ3pCLEVBQUUsQ0FBQ3lWLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLElBQUloVSxNQUFNLENBQUNMLElBQUksSUFBSSxJQUFJLEVBQUU7VUFDckJLLE1BQU0sQ0FBQ3pCLEVBQUUsQ0FBQ2tkLGFBQWEsQ0FDbkJ6YixNQUFNLENBQUN6QixFQUFFLENBQUNtZCxhQUFhLENBQUMsQ0FBQyxHQUFHMWIsTUFBTSxDQUFDTCxJQUN2QyxDQUFDO1FBQ0w7UUFDQSxJQUFJSyxNQUFNLENBQUM2YyxRQUFRLEVBQUU7VUFDakI3YyxNQUFNLENBQUNrTSxFQUFFLENBQUNJLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDeEI7UUFDQSxJQUNJdE0sTUFBTSxDQUFDZ00sRUFBRSxJQUNULE9BQU9oTSxNQUFNLENBQUNnTSxFQUFFLENBQUN6RixDQUFDLEtBQUssV0FBVyxJQUNsQ3ZHLE1BQU0sQ0FBQ2dNLEVBQUUsQ0FBQ3pGLENBQUMsS0FBS2tXLGVBQWUsRUFDakM7VUFDRS9lLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDdkMsZUFBZSxHQUFHLElBQUk7UUFDbEQ7TUFDSjtNQUNBLFNBQVNrZixxQkFBcUJBLENBQUMzYyxNQUFNLEVBQUU7UUFDbkMsSUFBSXlHLENBQUMsRUFDRHFXLFFBQVEsRUFDUm5NLElBQUksRUFDSkMsT0FBTyxFQUNQUCxHQUFHLEVBQ0hDLEdBQUcsRUFDSHlNLElBQUksRUFDSkMsZUFBZSxFQUNmQyxPQUFPO1FBQ1h4VyxDQUFDLEdBQUd6RyxNQUFNLENBQUNnTSxFQUFFO1FBQ2IsSUFBSXZGLENBQUMsQ0FBQ3lXLEVBQUUsSUFBSSxJQUFJLElBQUl6VyxDQUFDLENBQUMwVyxDQUFDLElBQUksSUFBSSxJQUFJMVcsQ0FBQyxDQUFDMlcsQ0FBQyxJQUFJLElBQUksRUFBRTtVQUM1Qy9NLEdBQUcsR0FBRyxDQUFDO1VBQ1BDLEdBQUcsR0FBRyxDQUFDO1VBQ1B3TSxRQUFRLEdBQUdoQixRQUFRLENBQ2ZyVixDQUFDLENBQUN5VyxFQUFFLEVBQ0psZCxNQUFNLENBQUNrTSxFQUFFLENBQUNDLElBQUksQ0FBQyxFQUNmK0UsVUFBVSxDQUFDbU0sV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMzVSxJQUNwQyxDQUFDO1VBQ0RpSSxJQUFJLEdBQUdtTCxRQUFRLENBQUNyVixDQUFDLENBQUMwVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1VBQ3ZCdk0sT0FBTyxHQUFHa0wsUUFBUSxDQUFDclYsQ0FBQyxDQUFDMlcsQ0FBQyxFQUFFLENBQUMsQ0FBQztVQUMxQixJQUFJeE0sT0FBTyxHQUFHLENBQUMsSUFBSUEsT0FBTyxHQUFHLENBQUMsRUFBRTtZQUM1Qm9NLGVBQWUsR0FBRyxJQUFJO1VBQzFCO1FBQ0osQ0FBQyxNQUFNO1VBQ0gzTSxHQUFHLEdBQUdyUSxNQUFNLENBQUNGLE9BQU8sQ0FBQ3lSLEtBQUssQ0FBQ2xCLEdBQUc7VUFDOUJDLEdBQUcsR0FBR3RRLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDeVIsS0FBSyxDQUFDakIsR0FBRztVQUM5QjJNLE9BQU8sR0FBRy9MLFVBQVUsQ0FBQ21NLFdBQVcsQ0FBQyxDQUFDLEVBQUVoTixHQUFHLEVBQUVDLEdBQUcsQ0FBQztVQUM3Q3dNLFFBQVEsR0FBR2hCLFFBQVEsQ0FBQ3JWLENBQUMsQ0FBQzZXLEVBQUUsRUFBRXRkLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLEVBQUU4USxPQUFPLENBQUN2VSxJQUFJLENBQUM7VUFDeERpSSxJQUFJLEdBQUdtTCxRQUFRLENBQUNyVixDQUFDLENBQUNBLENBQUMsRUFBRXdXLE9BQU8sQ0FBQ3RNLElBQUksQ0FBQztVQUNsQyxJQUFJbEssQ0FBQyxDQUFDRixDQUFDLElBQUksSUFBSSxFQUFFO1lBQ2JxSyxPQUFPLEdBQUduSyxDQUFDLENBQUNGLENBQUM7WUFDYixJQUFJcUssT0FBTyxHQUFHLENBQUMsSUFBSUEsT0FBTyxHQUFHLENBQUMsRUFBRTtjQUM1Qm9NLGVBQWUsR0FBRyxJQUFJO1lBQzFCO1VBQ0osQ0FBQyxNQUFNLElBQUl2VyxDQUFDLENBQUM3TSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3BCZ1gsT0FBTyxHQUFHbkssQ0FBQyxDQUFDN00sQ0FBQyxHQUFHeVcsR0FBRztZQUNuQixJQUFJNUosQ0FBQyxDQUFDN00sQ0FBQyxHQUFHLENBQUMsSUFBSTZNLENBQUMsQ0FBQzdNLENBQUMsR0FBRyxDQUFDLEVBQUU7Y0FDcEJvakIsZUFBZSxHQUFHLElBQUk7WUFDMUI7VUFDSixDQUFDLE1BQU07WUFDSHBNLE9BQU8sR0FBR1AsR0FBRztVQUNqQjtRQUNKO1FBQ0EsSUFBSU0sSUFBSSxHQUFHLENBQUMsSUFBSUEsSUFBSSxHQUFHUyxXQUFXLENBQUMwTCxRQUFRLEVBQUV6TSxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxFQUFFO1VBQ3BENVMsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNzWSxjQUFjLEdBQUcsSUFBSTtRQUNqRCxDQUFDLE1BQU0sSUFBSTBFLGVBQWUsSUFBSSxJQUFJLEVBQUU7VUFDaEN0ZixlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3VZLGdCQUFnQixHQUFHLElBQUk7UUFDbkQsQ0FBQyxNQUFNO1VBQ0h3RSxJQUFJLEdBQUdyTSxrQkFBa0IsQ0FBQ29NLFFBQVEsRUFBRW5NLElBQUksRUFBRUMsT0FBTyxFQUFFUCxHQUFHLEVBQUVDLEdBQUcsQ0FBQztVQUM1RHRRLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLEdBQUc0USxJQUFJLENBQUNyVSxJQUFJO1VBQzNCMUksTUFBTSxDQUFDNGMsVUFBVSxHQUFHRyxJQUFJLENBQUNoTSxTQUFTO1FBQ3RDO01BQ0o7TUFDQXBXLEtBQUssQ0FBQzRpQixRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUM7TUFDL0I1aUIsS0FBSyxDQUFDNmlCLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQztNQUMvQixTQUFTdEQseUJBQXlCQSxDQUFDbGEsTUFBTSxFQUFFO1FBQ3ZDLElBQUlBLE1BQU0sQ0FBQ1AsRUFBRSxLQUFLOUUsS0FBSyxDQUFDNGlCLFFBQVEsRUFBRTtVQUM5QjlELGFBQWEsQ0FBQ3paLE1BQU0sQ0FBQztVQUNyQjtRQUNKO1FBQ0EsSUFBSUEsTUFBTSxDQUFDUCxFQUFFLEtBQUs5RSxLQUFLLENBQUM2aUIsUUFBUSxFQUFFO1VBQzlCakMsaUJBQWlCLENBQUN2YixNQUFNLENBQUM7VUFDekI7UUFDSjtRQUNBQSxNQUFNLENBQUNrTSxFQUFFLEdBQUcsRUFBRTtRQUNkeE8sZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUN0RCxLQUFLLEdBQUcsSUFBSTtRQUNwQyxJQUFJdUssTUFBTSxHQUFHLEVBQUUsR0FBR2pILE1BQU0sQ0FBQ1IsRUFBRTtVQUN2QjFELENBQUM7VUFDRGlmLFdBQVc7VUFDWDBDLE9BQU87VUFDUDVaLE1BQU07VUFDTjZaLE9BQU87VUFDUEMsWUFBWSxHQUFHMVcsTUFBTSxDQUFDM0wsTUFBTTtVQUM1QnNpQixzQkFBc0IsR0FBRyxDQUFDO1VBQzFCdGdCLEdBQUc7VUFDSHVPLFFBQVE7UUFDWjRSLE9BQU8sR0FDSDlZLFlBQVksQ0FBQzNFLE1BQU0sQ0FBQ1AsRUFBRSxFQUFFTyxNQUFNLENBQUNGLE9BQU8sQ0FBQyxDQUFDc0UsS0FBSyxDQUN6Q1osZ0JBQ0osQ0FBQyxJQUFJLEVBQUU7UUFDWHFJLFFBQVEsR0FBRzRSLE9BQU8sQ0FBQ25pQixNQUFNO1FBQ3pCLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRytQLFFBQVEsRUFBRS9QLENBQUMsRUFBRSxFQUFFO1VBQzNCK0gsTUFBTSxHQUFHNFosT0FBTyxDQUFDM2hCLENBQUMsQ0FBQztVQUNuQmlmLFdBQVcsR0FBRyxDQUFDOVQsTUFBTSxDQUFDN0MsS0FBSyxDQUN2QitHLHFCQUFxQixDQUFDdEgsTUFBTSxFQUFFN0QsTUFBTSxDQUN4QyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztVQUNYLElBQUkrYSxXQUFXLEVBQUU7WUFDYjJDLE9BQU8sR0FBR3pXLE1BQU0sQ0FBQzFELE1BQU0sQ0FBQyxDQUFDLEVBQUUwRCxNQUFNLENBQUMyRixPQUFPLENBQUNtTyxXQUFXLENBQUMsQ0FBQztZQUN2RCxJQUFJMkMsT0FBTyxDQUFDcGlCLE1BQU0sR0FBRyxDQUFDLEVBQUU7Y0FDcEJvQyxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3BELFdBQVcsQ0FBQ1osSUFBSSxDQUFDMGhCLE9BQU8sQ0FBQztZQUNyRDtZQUNBelcsTUFBTSxHQUFHQSxNQUFNLENBQUNwRyxLQUFLLENBQ2pCb0csTUFBTSxDQUFDMkYsT0FBTyxDQUFDbU8sV0FBVyxDQUFDLEdBQUdBLFdBQVcsQ0FBQ3pmLE1BQzlDLENBQUM7WUFDRHNpQixzQkFBc0IsSUFBSTdDLFdBQVcsQ0FBQ3pmLE1BQU07VUFDaEQ7VUFDQSxJQUFJcUksb0JBQW9CLENBQUNFLE1BQU0sQ0FBQyxFQUFFO1lBQzlCLElBQUlrWCxXQUFXLEVBQUU7Y0FDYnJkLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDdEQsS0FBSyxHQUFHLEtBQUs7WUFDekMsQ0FBQyxNQUFNO2NBQ0hnQixlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3JELFlBQVksQ0FBQ1gsSUFBSSxDQUFDNkgsTUFBTSxDQUFDO1lBQ3JEO1lBQ0FvSSx1QkFBdUIsQ0FBQ3BJLE1BQU0sRUFBRWtYLFdBQVcsRUFBRS9hLE1BQU0sQ0FBQztVQUN4RCxDQUFDLE1BQU0sSUFBSUEsTUFBTSxDQUFDdEIsT0FBTyxJQUFJLENBQUNxYyxXQUFXLEVBQUU7WUFDdkNyZCxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3JELFlBQVksQ0FBQ1gsSUFBSSxDQUFDNkgsTUFBTSxDQUFDO1VBQ3JEO1FBQ0o7UUFDQW5HLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDbEQsYUFBYSxHQUNqQzZnQixZQUFZLEdBQUdDLHNCQUFzQjtRQUN6QyxJQUFJM1csTUFBTSxDQUFDM0wsTUFBTSxHQUFHLENBQUMsRUFBRTtVQUNuQm9DLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDcEQsV0FBVyxDQUFDWixJQUFJLENBQUNpTCxNQUFNLENBQUM7UUFDcEQ7UUFDQSxJQUNJakgsTUFBTSxDQUFDa00sRUFBRSxDQUFDSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQ3JCNU8sZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNyQixPQUFPLEtBQUssSUFBSSxJQUN4Q3FCLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNyQjtVQUNFNU8sZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNyQixPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQzVDO1FBQ0FqQixlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQzNDLGVBQWUsR0FBRzJDLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ3JMLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNURuRCxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3pDLFFBQVEsR0FBR3lDLE1BQU0sQ0FBQ3lWLFNBQVM7UUFDbkR6VixNQUFNLENBQUNrTSxFQUFFLENBQUNJLElBQUksQ0FBQyxHQUFHdVIsZUFBZSxDQUM3QjdkLE1BQU0sQ0FBQ0YsT0FBTyxFQUNkRSxNQUFNLENBQUNrTSxFQUFFLENBQUNJLElBQUksQ0FBQyxFQUNmdE0sTUFBTSxDQUFDeVYsU0FDWCxDQUFDO1FBQ0RuWSxHQUFHLEdBQUdJLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDMUMsR0FBRztRQUNqQyxJQUFJQSxHQUFHLEtBQUssSUFBSSxFQUFFO1VBQ2QwQyxNQUFNLENBQUNrTSxFQUFFLENBQUNDLElBQUksQ0FBQyxHQUFHbk0sTUFBTSxDQUFDRixPQUFPLENBQUNnZSxlQUFlLENBQzVDeGdCLEdBQUcsRUFDSDBDLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0MsSUFBSSxDQUNsQixDQUFDO1FBQ0w7UUFDQW9RLGVBQWUsQ0FBQ3ZjLE1BQU0sQ0FBQztRQUN2Qm9ZLGFBQWEsQ0FBQ3BZLE1BQU0sQ0FBQztNQUN6QjtNQUNBLFNBQVM2ZCxlQUFlQSxDQUFDeGhCLE9BQU8sRUFBRTBoQixJQUFJLEVBQUVDLFNBQVMsRUFBRTtRQUMvQyxJQUFJQyxJQUFJO1FBQ1IsSUFBSUQsU0FBUyxJQUFJLElBQUksRUFBRTtVQUNuQixPQUFPRCxJQUFJO1FBQ2Y7UUFDQSxJQUFJMWhCLE9BQU8sQ0FBQzZoQixZQUFZLElBQUksSUFBSSxFQUFFO1VBQzlCLE9BQU83aEIsT0FBTyxDQUFDNmhCLFlBQVksQ0FBQ0gsSUFBSSxFQUFFQyxTQUFTLENBQUM7UUFDaEQsQ0FBQyxNQUFNLElBQUkzaEIsT0FBTyxDQUFDbVosSUFBSSxJQUFJLElBQUksRUFBRTtVQUM3QnlJLElBQUksR0FBRzVoQixPQUFPLENBQUNtWixJQUFJLENBQUN3SSxTQUFTLENBQUM7VUFDOUIsSUFBSUMsSUFBSSxJQUFJRixJQUFJLEdBQUcsRUFBRSxFQUFFO1lBQ25CQSxJQUFJLElBQUksRUFBRTtVQUNkO1VBQ0EsSUFBSSxDQUFDRSxJQUFJLElBQUlGLElBQUksS0FBSyxFQUFFLEVBQUU7WUFDdEJBLElBQUksR0FBRyxDQUFDO1VBQ1o7VUFDQSxPQUFPQSxJQUFJO1FBQ2YsQ0FBQyxNQUFNO1VBQ0gsT0FBT0EsSUFBSTtRQUNmO01BQ0o7TUFDQSxTQUFTSSx3QkFBd0JBLENBQUNuZSxNQUFNLEVBQUU7UUFDdEMsSUFBSW9lLFVBQVU7VUFDVkMsVUFBVTtVQUNWQyxXQUFXO1VBQ1h4aUIsQ0FBQztVQUNEeWlCLFlBQVk7VUFDWkMsZ0JBQWdCO1VBQ2hCQyxpQkFBaUIsR0FBRyxLQUFLO1VBQ3pCQyxVQUFVLEdBQUcxZSxNQUFNLENBQUNQLEVBQUUsQ0FBQ25FLE1BQU07UUFDakMsSUFBSW9qQixVQUFVLEtBQUssQ0FBQyxFQUFFO1VBQ2xCaGhCLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDOUMsYUFBYSxHQUFHLElBQUk7VUFDNUM4QyxNQUFNLENBQUN6QixFQUFFLEdBQW1CLElBQUk1QyxJQUFJLENBQUNtRCxHQUFHLENBQUM7VUFDekM7UUFDSjtRQUNBLEtBQUtoRCxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUc0aUIsVUFBVSxFQUFFNWlCLENBQUMsRUFBRSxFQUFFO1VBQzdCeWlCLFlBQVksR0FBRyxDQUFDO1VBQ2hCQyxnQkFBZ0IsR0FBRyxLQUFLO1VBQ3hCSixVQUFVLEdBQUduZixVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUVlLE1BQU0sQ0FBQztVQUNuQyxJQUFJQSxNQUFNLENBQUM2YixPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3hCdUMsVUFBVSxDQUFDdkMsT0FBTyxHQUFHN2IsTUFBTSxDQUFDNmIsT0FBTztVQUN2QztVQUNBdUMsVUFBVSxDQUFDM2UsRUFBRSxHQUFHTyxNQUFNLENBQUNQLEVBQUUsQ0FBQzNELENBQUMsQ0FBQztVQUM1Qm9lLHlCQUF5QixDQUFDa0UsVUFBVSxDQUFDO1VBQ3JDLElBQUluZ0IsT0FBTyxDQUFDbWdCLFVBQVUsQ0FBQyxFQUFFO1lBQ3JCSSxnQkFBZ0IsR0FBRyxJQUFJO1VBQzNCO1VBQ0FELFlBQVksSUFBSTdnQixlQUFlLENBQUMwZ0IsVUFBVSxDQUFDLENBQUN0aEIsYUFBYTtVQUN6RHloQixZQUFZLElBQ1I3Z0IsZUFBZSxDQUFDMGdCLFVBQVUsQ0FBQyxDQUFDemhCLFlBQVksQ0FBQ3JCLE1BQU0sR0FBRyxFQUFFO1VBQ3hEb0MsZUFBZSxDQUFDMGdCLFVBQVUsQ0FBQyxDQUFDTyxLQUFLLEdBQUdKLFlBQVk7VUFDaEQsSUFBSSxDQUFDRSxpQkFBaUIsRUFBRTtZQUNwQixJQUNJSCxXQUFXLElBQUksSUFBSSxJQUNuQkMsWUFBWSxHQUFHRCxXQUFXLElBQzFCRSxnQkFBZ0IsRUFDbEI7Y0FDRUYsV0FBVyxHQUFHQyxZQUFZO2NBQzFCRixVQUFVLEdBQUdELFVBQVU7Y0FDdkIsSUFBSUksZ0JBQWdCLEVBQUU7Z0JBQ2xCQyxpQkFBaUIsR0FBRyxJQUFJO2NBQzVCO1lBQ0o7VUFDSixDQUFDLE1BQU07WUFDSCxJQUFJRixZQUFZLEdBQUdELFdBQVcsRUFBRTtjQUM1QkEsV0FBVyxHQUFHQyxZQUFZO2NBQzFCRixVQUFVLEdBQUdELFVBQVU7WUFDM0I7VUFDSjtRQUNKO1FBQ0FuaUIsTUFBTSxDQUFDK0QsTUFBTSxFQUFFcWUsVUFBVSxJQUFJRCxVQUFVLENBQUM7TUFDNUM7TUFDQSxTQUFTUSxnQkFBZ0JBLENBQUM1ZSxNQUFNLEVBQUU7UUFDOUIsSUFBSUEsTUFBTSxDQUFDekIsRUFBRSxFQUFFO1VBQ1g7UUFDSjtRQUNBLElBQUl6QyxDQUFDLEdBQUdnTSxvQkFBb0IsQ0FBQzlILE1BQU0sQ0FBQ1IsRUFBRSxDQUFDO1VBQ25DcWYsU0FBUyxHQUFHL2lCLENBQUMsQ0FBQ29YLEdBQUcsS0FBSyxLQUFLLENBQUMsR0FBR3BYLENBQUMsQ0FBQ3dOLElBQUksR0FBR3hOLENBQUMsQ0FBQ29YLEdBQUc7UUFDakRsVCxNQUFNLENBQUNrTSxFQUFFLEdBQUd0USxHQUFHLENBQ1gsQ0FDSUUsQ0FBQyxDQUFDNE0sSUFBSSxFQUNONU0sQ0FBQyxDQUFDdU4sS0FBSyxFQUNQd1YsU0FBUyxFQUNUL2lCLENBQUMsQ0FBQ2lpQixJQUFJLEVBQ05qaUIsQ0FBQyxDQUFDZ2pCLE1BQU0sRUFDUmhqQixDQUFDLENBQUNpakIsTUFBTSxFQUNSampCLENBQUMsQ0FBQ2tqQixXQUFXLENBQ2hCLEVBQ0QsVUFBVTNqQixHQUFHLEVBQUU7VUFDWCxPQUFPQSxHQUFHLElBQUltVSxRQUFRLENBQUNuVSxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ25DLENBQ0osQ0FBQztRQUNEa2hCLGVBQWUsQ0FBQ3ZjLE1BQU0sQ0FBQztNQUMzQjtNQUNBLFNBQVNpZixnQkFBZ0JBLENBQUNqZixNQUFNLEVBQUU7UUFDOUIsSUFBSWhJLEdBQUcsR0FBRyxJQUFJK0gsTUFBTSxDQUFDcVksYUFBYSxDQUFDOEcsYUFBYSxDQUFDbGYsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJaEksR0FBRyxDQUFDNmtCLFFBQVEsRUFBRTtVQUNkN2tCLEdBQUcsQ0FBQzRaLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO1VBQ2Y1WixHQUFHLENBQUM2a0IsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN6QjtRQUNBLE9BQU83a0IsR0FBRztNQUNkO01BQ0EsU0FBU2tuQixhQUFhQSxDQUFDbGYsTUFBTSxFQUFFO1FBQzNCLElBQUlqRixLQUFLLEdBQUdpRixNQUFNLENBQUNSLEVBQUU7VUFDakJwRCxPQUFPLEdBQUc0RCxNQUFNLENBQUNQLEVBQUU7UUFDdkJPLE1BQU0sQ0FBQ0YsT0FBTyxHQUFHRSxNQUFNLENBQUNGLE9BQU8sSUFBSThYLFNBQVMsQ0FBQzVYLE1BQU0sQ0FBQ04sRUFBRSxDQUFDO1FBQ3ZELElBQUkzRSxLQUFLLEtBQUssSUFBSSxJQUFLcUIsT0FBTyxLQUFLLEtBQUssQ0FBQyxJQUFJckIsS0FBSyxLQUFLLEVBQUcsRUFBRTtVQUN4RCxPQUFPOEQsYUFBYSxDQUFDO1lBQUU5QixTQUFTLEVBQUU7VUFBSyxDQUFDLENBQUM7UUFDN0M7UUFDQSxJQUFJLE9BQU9oQyxLQUFLLEtBQUssUUFBUSxFQUFFO1VBQzNCaUYsTUFBTSxDQUFDUixFQUFFLEdBQUd6RSxLQUFLLEdBQUdpRixNQUFNLENBQUNGLE9BQU8sQ0FBQ3FmLFFBQVEsQ0FBQ3BrQixLQUFLLENBQUM7UUFDdEQ7UUFDQSxJQUFJbUYsUUFBUSxDQUFDbkYsS0FBSyxDQUFDLEVBQUU7VUFDakIsT0FBTyxJQUFJZ0YsTUFBTSxDQUFDcVksYUFBYSxDQUFDcmQsS0FBSyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxNQUFNLElBQUlXLE1BQU0sQ0FBQ1gsS0FBSyxDQUFDLEVBQUU7VUFDdEJpRixNQUFNLENBQUN6QixFQUFFLEdBQUd4RCxLQUFLO1FBQ3JCLENBQUMsTUFBTSxJQUFJRCxPQUFPLENBQUNzQixPQUFPLENBQUMsRUFBRTtVQUN6QitoQix3QkFBd0IsQ0FBQ25lLE1BQU0sQ0FBQztRQUNwQyxDQUFDLE1BQU0sSUFBSTVELE9BQU8sRUFBRTtVQUNoQjhkLHlCQUF5QixDQUFDbGEsTUFBTSxDQUFDO1FBQ3JDLENBQUMsTUFBTTtVQUNIb2YsZUFBZSxDQUFDcGYsTUFBTSxDQUFDO1FBQzNCO1FBQ0EsSUFBSSxDQUFDL0IsT0FBTyxDQUFDK0IsTUFBTSxDQUFDLEVBQUU7VUFDbEJBLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBRyxJQUFJO1FBQ3BCO1FBQ0EsT0FBT3lCLE1BQU07TUFDakI7TUFDQSxTQUFTb2YsZUFBZUEsQ0FBQ3BmLE1BQU0sRUFBRTtRQUM3QixJQUFJakYsS0FBSyxHQUFHaUYsTUFBTSxDQUFDUixFQUFFO1FBQ3JCLElBQUloRSxXQUFXLENBQUNULEtBQUssQ0FBQyxFQUFFO1VBQ3BCaUYsTUFBTSxDQUFDekIsRUFBRSxHQUFHLElBQUk1QyxJQUFJLENBQUNoQixLQUFLLENBQUN1aEIsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDLE1BQU0sSUFBSXhnQixNQUFNLENBQUNYLEtBQUssQ0FBQyxFQUFFO1VBQ3RCaUYsTUFBTSxDQUFDekIsRUFBRSxHQUFHLElBQUk1QyxJQUFJLENBQUNaLEtBQUssQ0FBQ21CLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQyxNQUFNLElBQUksT0FBT25CLEtBQUssS0FBSyxRQUFRLEVBQUU7VUFDbEM0Z0IsZ0JBQWdCLENBQUMzYixNQUFNLENBQUM7UUFDNUIsQ0FBQyxNQUFNLElBQUlsRixPQUFPLENBQUNDLEtBQUssQ0FBQyxFQUFFO1VBQ3ZCaUYsTUFBTSxDQUFDa00sRUFBRSxHQUFHdFEsR0FBRyxDQUFDYixLQUFLLENBQUM4RixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVXhGLEdBQUcsRUFBRTtZQUMzQyxPQUFPbVUsUUFBUSxDQUFDblUsR0FBRyxFQUFFLEVBQUUsQ0FBQztVQUM1QixDQUFDLENBQUM7VUFDRmtoQixlQUFlLENBQUN2YyxNQUFNLENBQUM7UUFDM0IsQ0FBQyxNQUFNLElBQUk5RSxRQUFRLENBQUNILEtBQUssQ0FBQyxFQUFFO1VBQ3hCNmpCLGdCQUFnQixDQUFDNWUsTUFBTSxDQUFDO1FBQzVCLENBQUMsTUFBTSxJQUFJdkUsUUFBUSxDQUFDVixLQUFLLENBQUMsRUFBRTtVQUN4QmlGLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBRyxJQUFJNUMsSUFBSSxDQUFDWixLQUFLLENBQUM7UUFDL0IsQ0FBQyxNQUFNO1VBQ0hKLEtBQUssQ0FBQ2loQix1QkFBdUIsQ0FBQzViLE1BQU0sQ0FBQztRQUN6QztNQUNKO01BQ0EsU0FBU3pELGdCQUFnQkEsQ0FBQ3hCLEtBQUssRUFBRXFCLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUUraUIsS0FBSyxFQUFFO1FBQzlELElBQUl0RCxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSTNmLE9BQU8sS0FBSyxJQUFJLElBQUlBLE9BQU8sS0FBSyxLQUFLLEVBQUU7VUFDdkNFLE1BQU0sR0FBR0YsT0FBTztVQUNoQkEsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQjtRQUNBLElBQUlDLE9BQU8sS0FBSyxJQUFJLElBQUlBLE9BQU8sS0FBSyxLQUFLLEVBQUU7VUFDdkNDLE1BQU0sR0FBR0QsT0FBTztVQUNoQkEsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQjtRQUNBLElBQ0tuQixRQUFRLENBQUNILEtBQUssQ0FBQyxJQUFJSyxhQUFhLENBQUNMLEtBQUssQ0FBQyxJQUN2Q0QsT0FBTyxDQUFDQyxLQUFLLENBQUMsSUFBSUEsS0FBSyxDQUFDTyxNQUFNLEtBQUssQ0FBRSxFQUN4QztVQUNFUCxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xCO1FBQ0FnaEIsQ0FBQyxDQUFDeGMsZ0JBQWdCLEdBQUcsSUFBSTtRQUN6QndjLENBQUMsQ0FBQ0YsT0FBTyxHQUFHRSxDQUFDLENBQUNuYyxNQUFNLEdBQUd5ZixLQUFLO1FBQzVCdEQsQ0FBQyxDQUFDcmMsRUFBRSxHQUFHckQsT0FBTztRQUNkMGYsQ0FBQyxDQUFDdmMsRUFBRSxHQUFHekUsS0FBSztRQUNaZ2hCLENBQUMsQ0FBQ3RjLEVBQUUsR0FBR3JELE9BQU87UUFDZDJmLENBQUMsQ0FBQ3JkLE9BQU8sR0FBR3BDLE1BQU07UUFDbEIsT0FBTzJpQixnQkFBZ0IsQ0FBQ2xELENBQUMsQ0FBQztNQUM5QjtNQUNBLFNBQVNzQixXQUFXQSxDQUFDdGlCLEtBQUssRUFBRXFCLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUU7UUFDbEQsT0FBT0MsZ0JBQWdCLENBQUN4QixLQUFLLEVBQUVxQixPQUFPLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFLEtBQUssQ0FBQztNQUNuRTtNQUNBLElBQUlnakIsWUFBWSxHQUFHL2UsU0FBUyxDQUNwQixvR0FBb0csRUFDcEcsWUFBWTtVQUNSLElBQUlnZixLQUFLLEdBQUdsQyxXQUFXLENBQUMzbEIsS0FBSyxDQUFDLElBQUksRUFBRUMsU0FBUyxDQUFDO1VBQzlDLElBQUksSUFBSSxDQUFDc0csT0FBTyxDQUFDLENBQUMsSUFBSXNoQixLQUFLLENBQUN0aEIsT0FBTyxDQUFDLENBQUMsRUFBRTtZQUNuQyxPQUFPc2hCLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHQSxLQUFLO1VBQ3RDLENBQUMsTUFBTTtZQUNILE9BQU8xZ0IsYUFBYSxDQUFDLENBQUM7VUFDMUI7UUFDSixDQUNKLENBQUM7UUFDRDJnQixZQUFZLEdBQUdqZixTQUFTLENBQ3BCLG9HQUFvRyxFQUNwRyxZQUFZO1VBQ1IsSUFBSWdmLEtBQUssR0FBR2xDLFdBQVcsQ0FBQzNsQixLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7VUFDOUMsSUFBSSxJQUFJLENBQUNzRyxPQUFPLENBQUMsQ0FBQyxJQUFJc2hCLEtBQUssQ0FBQ3RoQixPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQ25DLE9BQU9zaEIsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUdBLEtBQUs7VUFDdEMsQ0FBQyxNQUFNO1lBQ0gsT0FBTzFnQixhQUFhLENBQUMsQ0FBQztVQUMxQjtRQUNKLENBQ0osQ0FBQztNQUNMLFNBQVM0Z0IsTUFBTUEsQ0FBQzFuQixFQUFFLEVBQUUybkIsT0FBTyxFQUFFO1FBQ3pCLElBQUkxbkIsR0FBRyxFQUFFOEQsQ0FBQztRQUNWLElBQUk0akIsT0FBTyxDQUFDcGtCLE1BQU0sS0FBSyxDQUFDLElBQUlSLE9BQU8sQ0FBQzRrQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtVQUM3Q0EsT0FBTyxHQUFHQSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDQSxPQUFPLENBQUNwa0IsTUFBTSxFQUFFO1VBQ2pCLE9BQU8raEIsV0FBVyxDQUFDLENBQUM7UUFDeEI7UUFDQXJsQixHQUFHLEdBQUcwbkIsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNoQixLQUFLNWpCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzRqQixPQUFPLENBQUNwa0IsTUFBTSxFQUFFLEVBQUVRLENBQUMsRUFBRTtVQUNqQyxJQUFJLENBQUM0akIsT0FBTyxDQUFDNWpCLENBQUMsQ0FBQyxDQUFDbUMsT0FBTyxDQUFDLENBQUMsSUFBSXloQixPQUFPLENBQUM1akIsQ0FBQyxDQUFDLENBQUMvRCxFQUFFLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLEVBQUU7WUFDOUNBLEdBQUcsR0FBRzBuQixPQUFPLENBQUM1akIsQ0FBQyxDQUFDO1VBQ3BCO1FBQ0o7UUFDQSxPQUFPOUQsR0FBRztNQUNkO01BQ0EsU0FBUzJXLEdBQUdBLENBQUEsRUFBRztRQUNYLElBQUlqTyxJQUFJLEdBQUcsRUFBRSxDQUFDRyxLQUFLLENBQUN0SCxJQUFJLENBQUM1QixTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLE9BQU84bkIsTUFBTSxDQUFDLFVBQVUsRUFBRS9lLElBQUksQ0FBQztNQUNuQztNQUNBLFNBQVM0QyxHQUFHQSxDQUFBLEVBQUc7UUFDWCxJQUFJNUMsSUFBSSxHQUFHLEVBQUUsQ0FBQ0csS0FBSyxDQUFDdEgsSUFBSSxDQUFDNUIsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN0QyxPQUFPOG5CLE1BQU0sQ0FBQyxTQUFTLEVBQUUvZSxJQUFJLENBQUM7TUFDbEM7TUFDQSxJQUFJd2IsR0FBRyxHQUFHLFNBQU5BLEdBQUdBLENBQUEsRUFBZTtRQUNsQixPQUFPdmdCLElBQUksQ0FBQ3VnQixHQUFHLEdBQUd2Z0IsSUFBSSxDQUFDdWdCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBa0IsSUFBSXZnQixJQUFJLENBQUMsQ0FBRTtNQUNoRSxDQUFDO01BQ0QsSUFBSWdrQixRQUFRLEdBQUcsQ0FDWCxNQUFNLEVBQ04sU0FBUyxFQUNULE9BQU8sRUFDUCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixRQUFRLEVBQ1IsUUFBUSxFQUNSLGFBQWEsQ0FDaEI7TUFDRCxTQUFTQyxlQUFlQSxDQUFDamlCLENBQUMsRUFBRTtRQUN4QixJQUFJdEUsR0FBRztVQUNId21CLGNBQWMsR0FBRyxLQUFLO1VBQ3RCL2pCLENBQUM7VUFDRGdrQixRQUFRLEdBQUdILFFBQVEsQ0FBQ3JrQixNQUFNO1FBQzlCLEtBQUtqQyxHQUFHLElBQUlzRSxDQUFDLEVBQUU7VUFDWCxJQUNJeEMsVUFBVSxDQUFDd0MsQ0FBQyxFQUFFdEUsR0FBRyxDQUFDLElBQ2xCLEVBQ0l1VCxPQUFPLENBQUNyVCxJQUFJLENBQUNvbUIsUUFBUSxFQUFFdG1CLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUNqQ3NFLENBQUMsQ0FBQ3RFLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDaUYsS0FBSyxDQUFDWCxDQUFDLENBQUN0RSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3JDLEVBQ0g7WUFDRSxPQUFPLEtBQUs7VUFDaEI7UUFDSjtRQUNBLEtBQUt5QyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdna0IsUUFBUSxFQUFFLEVBQUVoa0IsQ0FBQyxFQUFFO1VBQzNCLElBQUk2QixDQUFDLENBQUNnaUIsUUFBUSxDQUFDN2pCLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEIsSUFBSStqQixjQUFjLEVBQUU7Y0FDaEIsT0FBTyxLQUFLO1lBQ2hCO1lBQ0EsSUFDSUUsVUFBVSxDQUFDcGlCLENBQUMsQ0FBQ2dpQixRQUFRLENBQUM3akIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLZ04sS0FBSyxDQUFDbkwsQ0FBQyxDQUFDZ2lCLFFBQVEsQ0FBQzdqQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3REO2NBQ0UrakIsY0FBYyxHQUFHLElBQUk7WUFDekI7VUFDSjtRQUNKO1FBQ0EsT0FBTyxJQUFJO01BQ2Y7TUFDQSxTQUFTRyxTQUFTQSxDQUFBLEVBQUc7UUFDakIsT0FBTyxJQUFJLENBQUM5aEIsUUFBUTtNQUN4QjtNQUNBLFNBQVMraEIsZUFBZUEsQ0FBQSxFQUFHO1FBQ3ZCLE9BQU9DLGNBQWMsQ0FBQ3BoQixHQUFHLENBQUM7TUFDOUI7TUFDQSxTQUFTcWhCLFFBQVFBLENBQUNDLFFBQVEsRUFBRTtRQUN4QixJQUFJcFksZUFBZSxHQUFHRixvQkFBb0IsQ0FBQ3NZLFFBQVEsQ0FBQztVQUNoREMsTUFBTSxHQUFHclksZUFBZSxDQUFDVSxJQUFJLElBQUksQ0FBQztVQUNsQzRYLFFBQVEsR0FBR3RZLGVBQWUsQ0FBQ3VZLE9BQU8sSUFBSSxDQUFDO1VBQ3ZDQyxPQUFPLEdBQUd4WSxlQUFlLENBQUNxQixLQUFLLElBQUksQ0FBQztVQUNwQ29YLE1BQU0sR0FDRnpZLGVBQWUsQ0FBQzJJLElBQUksSUFBSTNJLGVBQWUsQ0FBQzBZLE9BQU8sSUFBSSxDQUFDO1VBQ3hEQyxLQUFLLEdBQUczWSxlQUFlLENBQUNrTCxHQUFHLElBQUksQ0FBQztVQUNoQ2dELE1BQU0sR0FBR2xPLGVBQWUsQ0FBQytWLElBQUksSUFBSSxDQUFDO1VBQ2xDNUgsUUFBUSxHQUFHbk8sZUFBZSxDQUFDOFcsTUFBTSxJQUFJLENBQUM7VUFDdEM4QixRQUFRLEdBQUc1WSxlQUFlLENBQUMrVyxNQUFNLElBQUksQ0FBQztVQUN0QzhCLGFBQWEsR0FBRzdZLGVBQWUsQ0FBQ2dYLFdBQVcsSUFBSSxDQUFDO1FBQ3BELElBQUksQ0FBQzlnQixRQUFRLEdBQUcwaEIsZUFBZSxDQUFDNVgsZUFBZSxDQUFDO1FBQ2hELElBQUksQ0FBQzhZLGFBQWEsR0FDZCxDQUFDRCxhQUFhLEdBQ2RELFFBQVEsR0FBRyxHQUFHLEdBQ2R6SyxRQUFRLEdBQUcsR0FBRyxHQUNkRCxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFO1FBQzFCLElBQUksQ0FBQzZLLEtBQUssR0FBRyxDQUFDSixLQUFLLEdBQUdGLE1BQU0sR0FBRyxDQUFDO1FBQ2hDLElBQUksQ0FBQzlTLE9BQU8sR0FBRyxDQUFDNlMsT0FBTyxHQUFHRixRQUFRLEdBQUcsQ0FBQyxHQUFHRCxNQUFNLEdBQUcsRUFBRTtRQUNwRCxJQUFJLENBQUNXLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUNsaEIsT0FBTyxHQUFHOFgsU0FBUyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDcUosT0FBTyxDQUFDLENBQUM7TUFDbEI7TUFDQSxTQUFTQyxVQUFVQSxDQUFDN2xCLEdBQUcsRUFBRTtRQUNyQixPQUFPQSxHQUFHLFlBQVk4a0IsUUFBUTtNQUNsQztNQUNBLFNBQVNnQixRQUFRQSxDQUFDdGUsTUFBTSxFQUFFO1FBQ3RCLElBQUlBLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDWixPQUFPSSxJQUFJLENBQUNtZSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUd2ZSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxNQUFNO1VBQ0gsT0FBT0ksSUFBSSxDQUFDbWUsS0FBSyxDQUFDdmUsTUFBTSxDQUFDO1FBQzdCO01BQ0o7TUFDQSxTQUFTd2UsYUFBYUEsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRTtRQUNoRCxJQUFJeGpCLEdBQUcsR0FBR2lGLElBQUksQ0FBQzBMLEdBQUcsQ0FBQzJTLE1BQU0sQ0FBQ2htQixNQUFNLEVBQUVpbUIsTUFBTSxDQUFDam1CLE1BQU0sQ0FBQztVQUM1Q21tQixVQUFVLEdBQUd4ZSxJQUFJLENBQUNDLEdBQUcsQ0FBQ29lLE1BQU0sQ0FBQ2htQixNQUFNLEdBQUdpbUIsTUFBTSxDQUFDam1CLE1BQU0sQ0FBQztVQUNwRG9tQixLQUFLLEdBQUcsQ0FBQztVQUNUNWxCLENBQUM7UUFDTCxLQUFLQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdrQyxHQUFHLEVBQUVsQyxDQUFDLEVBQUUsRUFBRTtVQUN0QixJQUNLMGxCLFdBQVcsSUFBSUYsTUFBTSxDQUFDeGxCLENBQUMsQ0FBQyxLQUFLeWxCLE1BQU0sQ0FBQ3psQixDQUFDLENBQUMsSUFDdEMsQ0FBQzBsQixXQUFXLElBQUkxWSxLQUFLLENBQUN3WSxNQUFNLENBQUN4bEIsQ0FBQyxDQUFDLENBQUMsS0FBS2dOLEtBQUssQ0FBQ3lZLE1BQU0sQ0FBQ3psQixDQUFDLENBQUMsQ0FBRSxFQUN6RDtZQUNFNGxCLEtBQUssRUFBRTtVQUNYO1FBQ0o7UUFDQSxPQUFPQSxLQUFLLEdBQUdELFVBQVU7TUFDN0I7TUFDQSxTQUFTRSxNQUFNQSxDQUFDOWQsTUFBTSxFQUFFK2QsU0FBUyxFQUFFO1FBQy9CaGUsY0FBYyxDQUFDQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO1VBQ3JDLElBQUlnZSxPQUFPLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUMsQ0FBQztZQUMxQjFlLEtBQUssR0FBRyxHQUFHO1VBQ2YsSUFBSXllLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDYkEsT0FBTyxHQUFHLENBQUNBLE9BQU87WUFDbEJ6ZSxLQUFLLEdBQUcsR0FBRztVQUNmO1VBQ0EsT0FDSUEsS0FBSyxHQUNMUixRQUFRLENBQUMsQ0FBQyxFQUFFaWYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUM3QkQsU0FBUyxHQUNUaGYsUUFBUSxDQUFDLENBQUMsQ0FBQ2lmLE9BQU8sR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRW5DLENBQUMsQ0FBQztNQUNOO01BQ0FGLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO01BQ2hCQSxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztNQUNoQjdXLGFBQWEsQ0FBQyxHQUFHLEVBQUVKLGdCQUFnQixDQUFDO01BQ3BDSSxhQUFhLENBQUMsSUFBSSxFQUFFSixnQkFBZ0IsQ0FBQztNQUNyQ2tCLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFdkUsTUFBTSxFQUFFO1FBQ3ZEQSxNQUFNLENBQUM2YixPQUFPLEdBQUcsSUFBSTtRQUNyQjdiLE1BQU0sQ0FBQ0wsSUFBSSxHQUFHb2lCLGdCQUFnQixDQUFDclgsZ0JBQWdCLEVBQUUzUCxLQUFLLENBQUM7TUFDM0QsQ0FBQyxDQUFDO01BQ0YsSUFBSWluQixXQUFXLEdBQUcsaUJBQWlCO01BQ25DLFNBQVNELGdCQUFnQkEsQ0FBQ0UsT0FBTyxFQUFFaGIsTUFBTSxFQUFFO1FBQ3ZDLElBQUlpYixPQUFPLEdBQUcsQ0FBQ2piLE1BQU0sSUFBSSxFQUFFLEVBQUU3QyxLQUFLLENBQUM2ZCxPQUFPLENBQUM7VUFDdkNFLEtBQUs7VUFDTEMsS0FBSztVQUNMak0sUUFBUTtRQUNaLElBQUkrTCxPQUFPLEtBQUssSUFBSSxFQUFFO1VBQ2xCLE9BQU8sSUFBSTtRQUNmO1FBQ0FDLEtBQUssR0FBR0QsT0FBTyxDQUFDQSxPQUFPLENBQUM1bUIsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUU7UUFDekM4bUIsS0FBSyxHQUFHLENBQUNELEtBQUssR0FBRyxFQUFFLEVBQUUvZCxLQUFLLENBQUM0ZCxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3REN0wsUUFBUSxHQUFHLEVBQUVpTSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUd0WixLQUFLLENBQUNzWixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsT0FBT2pNLFFBQVEsS0FBSyxDQUFDLEdBQ2YsQ0FBQyxHQUNEaU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FDaEJqTSxRQUFRLEdBQ1IsQ0FBQ0EsUUFBUTtNQUNuQjtNQUNBLFNBQVNrTSxlQUFlQSxDQUFDdG5CLEtBQUssRUFBRXVuQixLQUFLLEVBQUU7UUFDbkMsSUFBSXRxQixHQUFHLEVBQUVxUCxLQUFLO1FBQ2QsSUFBSWliLEtBQUssQ0FBQzFpQixNQUFNLEVBQUU7VUFDZDVILEdBQUcsR0FBR3NxQixLQUFLLENBQUNDLEtBQUssQ0FBQyxDQUFDO1VBQ25CbGIsS0FBSyxHQUNELENBQUNuSCxRQUFRLENBQUNuRixLQUFLLENBQUMsSUFBSVcsTUFBTSxDQUFDWCxLQUFLLENBQUMsR0FDM0JBLEtBQUssQ0FBQ21CLE9BQU8sQ0FBQyxDQUFDLEdBQ2ZtaEIsV0FBVyxDQUFDdGlCLEtBQUssQ0FBQyxDQUFDbUIsT0FBTyxDQUFDLENBQUMsSUFBSWxFLEdBQUcsQ0FBQ2tFLE9BQU8sQ0FBQyxDQUFDO1VBQ3ZEbEUsR0FBRyxDQUFDdUcsRUFBRSxDQUFDaWtCLE9BQU8sQ0FBQ3hxQixHQUFHLENBQUN1RyxFQUFFLENBQUNyQyxPQUFPLENBQUMsQ0FBQyxHQUFHbUwsS0FBSyxDQUFDO1VBQ3hDMU0sS0FBSyxDQUFDc0YsWUFBWSxDQUFDakksR0FBRyxFQUFFLEtBQUssQ0FBQztVQUM5QixPQUFPQSxHQUFHO1FBQ2QsQ0FBQyxNQUFNO1VBQ0gsT0FBT3FsQixXQUFXLENBQUN0aUIsS0FBSyxDQUFDLENBQUMwbkIsS0FBSyxDQUFDLENBQUM7UUFDckM7TUFDSjtNQUNBLFNBQVNDLGFBQWFBLENBQUMva0IsQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sQ0FBQ3NGLElBQUksQ0FBQ21lLEtBQUssQ0FBQ3pqQixDQUFDLENBQUNZLEVBQUUsQ0FBQ29rQixpQkFBaUIsQ0FBQyxDQUFDLENBQUM7TUFDaEQ7TUFDQWhvQixLQUFLLENBQUNzRixZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUM7TUFDbkMsU0FBUzJpQixZQUFZQSxDQUFDN25CLEtBQUssRUFBRThuQixhQUFhLEVBQUVDLFdBQVcsRUFBRTtRQUNyRCxJQUFJakIsT0FBTyxHQUFHLElBQUksQ0FBQ2hpQixPQUFPLElBQUksQ0FBQztVQUMzQmtqQixXQUFXO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQzlrQixPQUFPLENBQUMsQ0FBQyxFQUFFO1VBQ2pCLE9BQU9sRCxLQUFLLElBQUksSUFBSSxHQUFHLElBQUksR0FBRytELEdBQUc7UUFDckM7UUFDQSxJQUFJL0QsS0FBSyxJQUFJLElBQUksRUFBRTtVQUNmLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUMzQkEsS0FBSyxHQUFHZ25CLGdCQUFnQixDQUFDclgsZ0JBQWdCLEVBQUUzUCxLQUFLLENBQUM7WUFDakQsSUFBSUEsS0FBSyxLQUFLLElBQUksRUFBRTtjQUNoQixPQUFPLElBQUk7WUFDZjtVQUNKLENBQUMsTUFBTSxJQUFJa0ksSUFBSSxDQUFDQyxHQUFHLENBQUNuSSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQytuQixXQUFXLEVBQUU7WUFDN0MvbkIsS0FBSyxHQUFHQSxLQUFLLEdBQUcsRUFBRTtVQUN0QjtVQUNBLElBQUksQ0FBQyxJQUFJLENBQUM2RSxNQUFNLElBQUlpakIsYUFBYSxFQUFFO1lBQy9CRSxXQUFXLEdBQUdMLGFBQWEsQ0FBQyxJQUFJLENBQUM7VUFDckM7VUFDQSxJQUFJLENBQUM3aUIsT0FBTyxHQUFHOUUsS0FBSztVQUNwQixJQUFJLENBQUM2RSxNQUFNLEdBQUcsSUFBSTtVQUNsQixJQUFJbWpCLFdBQVcsSUFBSSxJQUFJLEVBQUU7WUFDckIsSUFBSSxDQUFDblIsR0FBRyxDQUFDbVIsV0FBVyxFQUFFLEdBQUcsQ0FBQztVQUM5QjtVQUNBLElBQUlsQixPQUFPLEtBQUs5bUIsS0FBSyxFQUFFO1lBQ25CLElBQUksQ0FBQzhuQixhQUFhLElBQUksSUFBSSxDQUFDRyxpQkFBaUIsRUFBRTtjQUMxQ0MsV0FBVyxDQUNQLElBQUksRUFDSi9DLGNBQWMsQ0FBQ25sQixLQUFLLEdBQUc4bUIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUNwQyxDQUFDLEVBQ0QsS0FDSixDQUFDO1lBQ0wsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUNtQixpQkFBaUIsRUFBRTtjQUNoQyxJQUFJLENBQUNBLGlCQUFpQixHQUFHLElBQUk7Y0FDN0Jyb0IsS0FBSyxDQUFDc0YsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Y0FDOUIsSUFBSSxDQUFDK2lCLGlCQUFpQixHQUFHLElBQUk7WUFDakM7VUFDSjtVQUNBLE9BQU8sSUFBSTtRQUNmLENBQUMsTUFBTTtVQUNILE9BQU8sSUFBSSxDQUFDcGpCLE1BQU0sR0FBR2lpQixPQUFPLEdBQUdhLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDdEQ7TUFDSjtNQUNBLFNBQVNRLFVBQVVBLENBQUNub0IsS0FBSyxFQUFFOG5CLGFBQWEsRUFBRTtRQUN0QyxJQUFJOW5CLEtBQUssSUFBSSxJQUFJLEVBQUU7VUFDZixJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0JBLEtBQUssR0FBRyxDQUFDQSxLQUFLO1VBQ2xCO1VBQ0EsSUFBSSxDQUFDK21CLFNBQVMsQ0FBQy9tQixLQUFLLEVBQUU4bkIsYUFBYSxDQUFDO1VBQ3BDLE9BQU8sSUFBSTtRQUNmLENBQUMsTUFBTTtVQUNILE9BQU8sQ0FBQyxJQUFJLENBQUNmLFNBQVMsQ0FBQyxDQUFDO1FBQzVCO01BQ0o7TUFDQSxTQUFTcUIsY0FBY0EsQ0FBQ04sYUFBYSxFQUFFO1FBQ25DLE9BQU8sSUFBSSxDQUFDZixTQUFTLENBQUMsQ0FBQyxFQUFFZSxhQUFhLENBQUM7TUFDM0M7TUFDQSxTQUFTTyxnQkFBZ0JBLENBQUNQLGFBQWEsRUFBRTtRQUNyQyxJQUFJLElBQUksQ0FBQ2pqQixNQUFNLEVBQUU7VUFDYixJQUFJLENBQUNraUIsU0FBUyxDQUFDLENBQUMsRUFBRWUsYUFBYSxDQUFDO1VBQ2hDLElBQUksQ0FBQ2pqQixNQUFNLEdBQUcsS0FBSztVQUNuQixJQUFJaWpCLGFBQWEsRUFBRTtZQUNmLElBQUksQ0FBQ1EsUUFBUSxDQUFDWCxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDO1VBQzNDO1FBQ0o7UUFDQSxPQUFPLElBQUk7TUFDZjtNQUNBLFNBQVNZLHVCQUF1QkEsQ0FBQSxFQUFHO1FBQy9CLElBQUksSUFBSSxDQUFDM2pCLElBQUksSUFBSSxJQUFJLEVBQUU7VUFDbkIsSUFBSSxDQUFDbWlCLFNBQVMsQ0FBQyxJQUFJLENBQUNuaUIsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUM7UUFDMUMsQ0FBQyxNQUFNLElBQUksT0FBTyxJQUFJLENBQUNILEVBQUUsS0FBSyxRQUFRLEVBQUU7VUFDcEMsSUFBSStqQixLQUFLLEdBQUd4QixnQkFBZ0IsQ0FBQ3RYLFdBQVcsRUFBRSxJQUFJLENBQUNqTCxFQUFFLENBQUM7VUFDbEQsSUFBSStqQixLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2YsSUFBSSxDQUFDekIsU0FBUyxDQUFDeUIsS0FBSyxDQUFDO1VBQ3pCLENBQUMsTUFBTTtZQUNILElBQUksQ0FBQ3pCLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDO1VBQzNCO1FBQ0o7UUFDQSxPQUFPLElBQUk7TUFDZjtNQUNBLFNBQVMwQixvQkFBb0JBLENBQUN6b0IsS0FBSyxFQUFFO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUNrRCxPQUFPLENBQUMsQ0FBQyxFQUFFO1VBQ2pCLE9BQU8sS0FBSztRQUNoQjtRQUNBbEQsS0FBSyxHQUFHQSxLQUFLLEdBQUdzaUIsV0FBVyxDQUFDdGlCLEtBQUssQ0FBQyxDQUFDK21CLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNsRCxPQUFPLENBQUMsSUFBSSxDQUFDQSxTQUFTLENBQUMsQ0FBQyxHQUFHL21CLEtBQUssSUFBSSxFQUFFLEtBQUssQ0FBQztNQUNoRDtNQUNBLFNBQVMwb0Isb0JBQW9CQSxDQUFBLEVBQUc7UUFDNUIsT0FDSSxJQUFJLENBQUMzQixTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ1MsS0FBSyxDQUFDLENBQUMsQ0FBQ2xaLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ3lZLFNBQVMsQ0FBQyxDQUFDLElBQ3BELElBQUksQ0FBQ0EsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNTLEtBQUssQ0FBQyxDQUFDLENBQUNsWixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUN5WSxTQUFTLENBQUMsQ0FBQztNQUU1RDtNQUNBLFNBQVM0QiwyQkFBMkJBLENBQUEsRUFBRztRQUNuQyxJQUFJLENBQUNsb0IsV0FBVyxDQUFDLElBQUksQ0FBQ21vQixhQUFhLENBQUMsRUFBRTtVQUNsQyxPQUFPLElBQUksQ0FBQ0EsYUFBYTtRQUM3QjtRQUNBLElBQUk1SCxDQUFDLEdBQUcsQ0FBQyxDQUFDO1VBQ053RCxLQUFLO1FBQ1R0Z0IsVUFBVSxDQUFDOGMsQ0FBQyxFQUFFLElBQUksQ0FBQztRQUNuQkEsQ0FBQyxHQUFHbUQsYUFBYSxDQUFDbkQsQ0FBQyxDQUFDO1FBQ3BCLElBQUlBLENBQUMsQ0FBQzdQLEVBQUUsRUFBRTtVQUNOcVQsS0FBSyxHQUFHeEQsQ0FBQyxDQUFDbmMsTUFBTSxHQUFHekQsU0FBUyxDQUFDNGYsQ0FBQyxDQUFDN1AsRUFBRSxDQUFDLEdBQUdtUixXQUFXLENBQUN0QixDQUFDLENBQUM3UCxFQUFFLENBQUM7VUFDdEQsSUFBSSxDQUFDeVgsYUFBYSxHQUNkLElBQUksQ0FBQzFsQixPQUFPLENBQUMsQ0FBQyxJQUNkb2pCLGFBQWEsQ0FBQ3RGLENBQUMsQ0FBQzdQLEVBQUUsRUFBRXFULEtBQUssQ0FBQ3FFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ2hELENBQUMsTUFBTTtVQUNILElBQUksQ0FBQ0QsYUFBYSxHQUFHLEtBQUs7UUFDOUI7UUFDQSxPQUFPLElBQUksQ0FBQ0EsYUFBYTtNQUM3QjtNQUNBLFNBQVNFLE9BQU9BLENBQUEsRUFBRztRQUNmLE9BQU8sSUFBSSxDQUFDNWxCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMyQixNQUFNLEdBQUcsS0FBSztNQUNoRDtNQUNBLFNBQVNra0IsV0FBV0EsQ0FBQSxFQUFHO1FBQ25CLE9BQU8sSUFBSSxDQUFDN2xCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDMkIsTUFBTSxHQUFHLEtBQUs7TUFDL0M7TUFDQSxTQUFTbWtCLEtBQUtBLENBQUEsRUFBRztRQUNiLE9BQU8sSUFBSSxDQUFDOWxCLE9BQU8sQ0FBQyxDQUFDLEdBQ2YsSUFBSSxDQUFDMkIsTUFBTSxJQUFJLElBQUksQ0FBQ0MsT0FBTyxLQUFLLENBQUMsR0FDakMsS0FBSztNQUNmO01BQ0EsSUFBSW1rQixXQUFXLEdBQ1AsdURBQXVEO1FBQzNEQyxRQUFRLEdBQ0oscUtBQXFLO01BQzdLLFNBQVMvRCxjQUFjQSxDQUFDbmxCLEtBQUssRUFBRTFCLEdBQUcsRUFBRTtRQUNoQyxJQUFJK21CLFFBQVEsR0FBR3JsQixLQUFLO1VBQ2hCcUosS0FBSyxHQUFHLElBQUk7VUFDWmhCLEtBQUs7VUFDTDhnQixHQUFHO1VBQ0hDLE9BQU87UUFDWCxJQUFJakQsVUFBVSxDQUFDbm1CLEtBQUssQ0FBQyxFQUFFO1VBQ25CcWxCLFFBQVEsR0FBRztZQUNQdlEsRUFBRSxFQUFFOVUsS0FBSyxDQUFDK2xCLGFBQWE7WUFDdkJ2YSxDQUFDLEVBQUV4TCxLQUFLLENBQUNnbUIsS0FBSztZQUNkcGEsQ0FBQyxFQUFFNUwsS0FBSyxDQUFDNFM7VUFDYixDQUFDO1FBQ0wsQ0FBQyxNQUFNLElBQUlsUyxRQUFRLENBQUNWLEtBQUssQ0FBQyxJQUFJLENBQUN1RCxLQUFLLENBQUMsQ0FBQ3ZELEtBQUssQ0FBQyxFQUFFO1VBQzFDcWxCLFFBQVEsR0FBRyxDQUFDLENBQUM7VUFDYixJQUFJL21CLEdBQUcsRUFBRTtZQUNMK21CLFFBQVEsQ0FBQy9tQixHQUFHLENBQUMsR0FBRyxDQUFDMEIsS0FBSztVQUMxQixDQUFDLE1BQU07WUFDSHFsQixRQUFRLENBQUNnRSxZQUFZLEdBQUcsQ0FBQ3JwQixLQUFLO1VBQ2xDO1FBQ0osQ0FBQyxNQUFNLElBQUtxSixLQUFLLEdBQUc0ZixXQUFXLENBQUNySyxJQUFJLENBQUM1ZSxLQUFLLENBQUMsRUFBRztVQUMxQ3FJLEtBQUssR0FBR2dCLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztVQUNqQ2djLFFBQVEsR0FBRztZQUNQdlosQ0FBQyxFQUFFLENBQUM7WUFDSk4sQ0FBQyxFQUFFdUMsS0FBSyxDQUFDMUUsS0FBSyxDQUFDaUksSUFBSSxDQUFDLENBQUMsR0FBR2pKLEtBQUs7WUFDN0JpRCxDQUFDLEVBQUV5QyxLQUFLLENBQUMxRSxLQUFLLENBQUNrSSxJQUFJLENBQUMsQ0FBQyxHQUFHbEosS0FBSztZQUM3QnpGLENBQUMsRUFBRW1MLEtBQUssQ0FBQzFFLEtBQUssQ0FBQ21JLE1BQU0sQ0FBQyxDQUFDLEdBQUduSixLQUFLO1lBQy9CNUosQ0FBQyxFQUFFc1AsS0FBSyxDQUFDMUUsS0FBSyxDQUFDb0ksTUFBTSxDQUFDLENBQUMsR0FBR3BKLEtBQUs7WUFDL0J5TSxFQUFFLEVBQUUvRyxLQUFLLENBQUNxWSxRQUFRLENBQUMvYyxLQUFLLENBQUNxSSxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHcko7VUFFcEQsQ0FBQztRQUNMLENBQUMsTUFBTSxJQUFLZ0IsS0FBSyxHQUFHNmYsUUFBUSxDQUFDdEssSUFBSSxDQUFDNWUsS0FBSyxDQUFDLEVBQUc7VUFDdkNxSSxLQUFLLEdBQUdnQixLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7VUFDakNnYyxRQUFRLEdBQUc7WUFDUHZaLENBQUMsRUFBRXdkLFFBQVEsQ0FBQ2pnQixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVoQixLQUFLLENBQUM7WUFDNUJ1RCxDQUFDLEVBQUUwZCxRQUFRLENBQUNqZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFaEIsS0FBSyxDQUFDO1lBQzVCcUQsQ0FBQyxFQUFFNGQsUUFBUSxDQUFDamdCLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRWhCLEtBQUssQ0FBQztZQUM1Qm1ELENBQUMsRUFBRThkLFFBQVEsQ0FBQ2pnQixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVoQixLQUFLLENBQUM7WUFDNUJpRCxDQUFDLEVBQUVnZSxRQUFRLENBQUNqZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFaEIsS0FBSyxDQUFDO1lBQzVCekYsQ0FBQyxFQUFFMG1CLFFBQVEsQ0FBQ2pnQixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVoQixLQUFLLENBQUM7WUFDNUI1SixDQUFDLEVBQUU2cUIsUUFBUSxDQUFDamdCLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRWhCLEtBQUs7VUFDL0IsQ0FBQztRQUNMLENBQUMsTUFBTSxJQUFJZ2QsUUFBUSxJQUFJLElBQUksRUFBRTtVQUN6QkEsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNqQixDQUFDLE1BQU0sSUFDSHBuQixPQUFBLENBQU9vbkIsUUFBUSxNQUFLLFFBQVEsS0FDM0IsTUFBTSxJQUFJQSxRQUFRLElBQUksSUFBSSxJQUFJQSxRQUFRLENBQUMsRUFDMUM7VUFDRStELE9BQU8sR0FBR0csaUJBQWlCLENBQ3ZCakgsV0FBVyxDQUFDK0MsUUFBUSxDQUFDdm5CLElBQUksQ0FBQyxFQUMxQndrQixXQUFXLENBQUMrQyxRQUFRLENBQUN4bkIsRUFBRSxDQUMzQixDQUFDO1VBQ0R3bkIsUUFBUSxHQUFHLENBQUMsQ0FBQztVQUNiQSxRQUFRLENBQUN2USxFQUFFLEdBQUdzVSxPQUFPLENBQUNDLFlBQVk7VUFDbENoRSxRQUFRLENBQUN6WixDQUFDLEdBQUd3ZCxPQUFPLENBQUNuWCxNQUFNO1FBQy9CO1FBQ0FrWCxHQUFHLEdBQUcsSUFBSS9ELFFBQVEsQ0FBQ0MsUUFBUSxDQUFDO1FBQzVCLElBQUljLFVBQVUsQ0FBQ25tQixLQUFLLENBQUMsSUFBSUksVUFBVSxDQUFDSixLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQUU7VUFDbkRtcEIsR0FBRyxDQUFDcGtCLE9BQU8sR0FBRy9FLEtBQUssQ0FBQytFLE9BQU87UUFDL0I7UUFDQSxJQUFJb2hCLFVBQVUsQ0FBQ25tQixLQUFLLENBQUMsSUFBSUksVUFBVSxDQUFDSixLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUU7VUFDcERtcEIsR0FBRyxDQUFDaG1CLFFBQVEsR0FBR25ELEtBQUssQ0FBQ21ELFFBQVE7UUFDakM7UUFDQSxPQUFPZ21CLEdBQUc7TUFDZDtNQUNBaEUsY0FBYyxDQUFDbm9CLEVBQUUsR0FBR29vQixRQUFRLENBQUNscEIsU0FBUztNQUN0Q2lwQixjQUFjLENBQUNxRSxPQUFPLEdBQUd0RSxlQUFlO01BQ3hDLFNBQVNvRSxRQUFRQSxDQUFDRyxHQUFHLEVBQUVwaEIsS0FBSyxFQUFFO1FBQzFCLElBQUlwTCxHQUFHLEdBQUd3c0IsR0FBRyxJQUFJekUsVUFBVSxDQUFDeUUsR0FBRyxDQUFDbmdCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsT0FBTyxDQUFDL0YsS0FBSyxDQUFDdEcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHQSxHQUFHLElBQUlvTCxLQUFLO01BQ3pDO01BQ0EsU0FBU3FoQix5QkFBeUJBLENBQUNDLElBQUksRUFBRW5GLEtBQUssRUFBRTtRQUM1QyxJQUFJdm5CLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDWkEsR0FBRyxDQUFDZ1YsTUFBTSxHQUNOdVMsS0FBSyxDQUFDbFcsS0FBSyxDQUFDLENBQUMsR0FDYnFiLElBQUksQ0FBQ3JiLEtBQUssQ0FBQyxDQUFDLEdBQ1osQ0FBQ2tXLEtBQUssQ0FBQzdXLElBQUksQ0FBQyxDQUFDLEdBQUdnYyxJQUFJLENBQUNoYyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7UUFDckMsSUFBSWdjLElBQUksQ0FBQ25DLEtBQUssQ0FBQyxDQUFDLENBQUMzUSxHQUFHLENBQUM1WixHQUFHLENBQUNnVixNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMyWCxPQUFPLENBQUNwRixLQUFLLENBQUMsRUFBRTtVQUNsRCxFQUFFdm5CLEdBQUcsQ0FBQ2dWLE1BQU07UUFDaEI7UUFDQWhWLEdBQUcsQ0FBQ29zQixZQUFZLEdBQUcsQ0FBQzdFLEtBQUssR0FBRyxDQUFDbUYsSUFBSSxDQUFDbkMsS0FBSyxDQUFDLENBQUMsQ0FBQzNRLEdBQUcsQ0FBQzVaLEdBQUcsQ0FBQ2dWLE1BQU0sRUFBRSxHQUFHLENBQUM7UUFDOUQsT0FBT2hWLEdBQUc7TUFDZDtNQUNBLFNBQVNzc0IsaUJBQWlCQSxDQUFDSSxJQUFJLEVBQUVuRixLQUFLLEVBQUU7UUFDcEMsSUFBSXZuQixHQUFHO1FBQ1AsSUFBSSxFQUFFMHNCLElBQUksQ0FBQ3ptQixPQUFPLENBQUMsQ0FBQyxJQUFJc2hCLEtBQUssQ0FBQ3RoQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7VUFDdEMsT0FBTztZQUFFbW1CLFlBQVksRUFBRSxDQUFDO1lBQUVwWCxNQUFNLEVBQUU7VUFBRSxDQUFDO1FBQ3pDO1FBQ0F1UyxLQUFLLEdBQUc4QyxlQUFlLENBQUM5QyxLQUFLLEVBQUVtRixJQUFJLENBQUM7UUFDcEMsSUFBSUEsSUFBSSxDQUFDRSxRQUFRLENBQUNyRixLQUFLLENBQUMsRUFBRTtVQUN0QnZuQixHQUFHLEdBQUd5c0IseUJBQXlCLENBQUNDLElBQUksRUFBRW5GLEtBQUssQ0FBQztRQUNoRCxDQUFDLE1BQU07VUFDSHZuQixHQUFHLEdBQUd5c0IseUJBQXlCLENBQUNsRixLQUFLLEVBQUVtRixJQUFJLENBQUM7VUFDNUMxc0IsR0FBRyxDQUFDb3NCLFlBQVksR0FBRyxDQUFDcHNCLEdBQUcsQ0FBQ29zQixZQUFZO1VBQ3BDcHNCLEdBQUcsQ0FBQ2dWLE1BQU0sR0FBRyxDQUFDaFYsR0FBRyxDQUFDZ1YsTUFBTTtRQUM1QjtRQUNBLE9BQU9oVixHQUFHO01BQ2Q7TUFDQSxTQUFTNnNCLFdBQVdBLENBQUNDLFNBQVMsRUFBRXJzQixJQUFJLEVBQUU7UUFDbEMsT0FBTyxVQUFVNEcsR0FBRyxFQUFFMGxCLE1BQU0sRUFBRTtVQUMxQixJQUFJQyxHQUFHLEVBQUVDLEdBQUc7VUFDWixJQUFJRixNQUFNLEtBQUssSUFBSSxJQUFJLENBQUN6bUIsS0FBSyxDQUFDLENBQUN5bUIsTUFBTSxDQUFDLEVBQUU7WUFDcEM5akIsZUFBZSxDQUNYeEksSUFBSSxFQUNKLFdBQVcsR0FDUEEsSUFBSSxHQUNKLHNEQUFzRCxHQUN0REEsSUFBSSxHQUNKLGdHQUNSLENBQUM7WUFDRHdzQixHQUFHLEdBQUc1bEIsR0FBRztZQUNUQSxHQUFHLEdBQUcwbEIsTUFBTTtZQUNaQSxNQUFNLEdBQUdFLEdBQUc7VUFDaEI7VUFDQUQsR0FBRyxHQUFHOUUsY0FBYyxDQUFDN2dCLEdBQUcsRUFBRTBsQixNQUFNLENBQUM7VUFDakM5QixXQUFXLENBQUMsSUFBSSxFQUFFK0IsR0FBRyxFQUFFRixTQUFTLENBQUM7VUFDakMsT0FBTyxJQUFJO1FBQ2YsQ0FBQztNQUNMO01BQ0EsU0FBUzdCLFdBQVdBLENBQUN6Z0IsR0FBRyxFQUFFNGQsUUFBUSxFQUFFOEUsUUFBUSxFQUFFamxCLFlBQVksRUFBRTtRQUN4RCxJQUFJNGdCLGFBQWEsR0FBR1QsUUFBUSxDQUFDVSxhQUFhO1VBQ3RDSCxLQUFLLEdBQUdRLFFBQVEsQ0FBQ2YsUUFBUSxDQUFDVyxLQUFLLENBQUM7VUFDaENQLE9BQU8sR0FBR1csUUFBUSxDQUFDZixRQUFRLENBQUN6UyxPQUFPLENBQUM7UUFDeEMsSUFBSSxDQUFDbkwsR0FBRyxDQUFDdkUsT0FBTyxDQUFDLENBQUMsRUFBRTtVQUNoQjtRQUNKO1FBQ0FnQyxZQUFZLEdBQUdBLFlBQVksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHQSxZQUFZO1FBQ3pELElBQUl1Z0IsT0FBTyxFQUFFO1VBQ1QvUixRQUFRLENBQUNqTSxHQUFHLEVBQUVqTCxHQUFHLENBQUNpTCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUdnZSxPQUFPLEdBQUcwRSxRQUFRLENBQUM7UUFDekQ7UUFDQSxJQUFJdkUsS0FBSyxFQUFFO1VBQ1B2WCxLQUFLLENBQUM1RyxHQUFHLEVBQUUsTUFBTSxFQUFFakwsR0FBRyxDQUFDaUwsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHbWUsS0FBSyxHQUFHdUUsUUFBUSxDQUFDO1FBQzNEO1FBQ0EsSUFBSXJFLGFBQWEsRUFBRTtVQUNmcmUsR0FBRyxDQUFDakUsRUFBRSxDQUFDaWtCLE9BQU8sQ0FBQ2hnQixHQUFHLENBQUNqRSxFQUFFLENBQUNyQyxPQUFPLENBQUMsQ0FBQyxHQUFHMmtCLGFBQWEsR0FBR3FFLFFBQVEsQ0FBQztRQUMvRDtRQUNBLElBQUlqbEIsWUFBWSxFQUFFO1VBQ2R0RixLQUFLLENBQUNzRixZQUFZLENBQUN1QyxHQUFHLEVBQUVtZSxLQUFLLElBQUlILE9BQU8sQ0FBQztRQUM3QztNQUNKO01BQ0EsSUFBSTVPLEdBQUcsR0FBR2lULFdBQVcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO1FBQzNCeEIsUUFBUSxHQUFHd0IsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQztNQUMxQyxTQUFTTSxRQUFRQSxDQUFDcHFCLEtBQUssRUFBRTtRQUNyQixPQUFPLE9BQU9BLEtBQUssS0FBSyxRQUFRLElBQUlBLEtBQUssWUFBWXFxQixNQUFNO01BQy9EO01BQ0EsU0FBU0MsYUFBYUEsQ0FBQ3RxQixLQUFLLEVBQUU7UUFDMUIsT0FDSW1GLFFBQVEsQ0FBQ25GLEtBQUssQ0FBQyxJQUNmVyxNQUFNLENBQUNYLEtBQUssQ0FBQyxJQUNib3FCLFFBQVEsQ0FBQ3BxQixLQUFLLENBQUMsSUFDZlUsUUFBUSxDQUFDVixLQUFLLENBQUMsSUFDZnVxQixxQkFBcUIsQ0FBQ3ZxQixLQUFLLENBQUMsSUFDNUJ3cUIsbUJBQW1CLENBQUN4cUIsS0FBSyxDQUFDLElBQzFCQSxLQUFLLEtBQUssSUFBSSxJQUNkQSxLQUFLLEtBQUssS0FBSyxDQUFDO01BRXhCO01BQ0EsU0FBU3dxQixtQkFBbUJBLENBQUN4cUIsS0FBSyxFQUFFO1FBQ2hDLElBQUl5cUIsVUFBVSxHQUFHdHFCLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDLElBQUksQ0FBQ0ssYUFBYSxDQUFDTCxLQUFLLENBQUM7VUFDckQwcUIsWUFBWSxHQUFHLEtBQUs7VUFDcEJDLFVBQVUsR0FBRyxDQUNULE9BQU8sRUFDUCxNQUFNLEVBQ04sR0FBRyxFQUNILFFBQVEsRUFDUixPQUFPLEVBQ1AsR0FBRyxFQUNILE1BQU0sRUFDTixLQUFLLEVBQ0wsR0FBRyxFQUNILE9BQU8sRUFDUCxNQUFNLEVBQ04sR0FBRyxFQUNILE9BQU8sRUFDUCxNQUFNLEVBQ04sR0FBRyxFQUNILFNBQVMsRUFDVCxRQUFRLEVBQ1IsR0FBRyxFQUNILFNBQVMsRUFDVCxRQUFRLEVBQ1IsR0FBRyxFQUNILGNBQWMsRUFDZCxhQUFhLEVBQ2IsSUFBSSxDQUNQO1VBQ0Q1cEIsQ0FBQztVQUNENnBCLFFBQVE7VUFDUkMsV0FBVyxHQUFHRixVQUFVLENBQUNwcUIsTUFBTTtRQUNuQyxLQUFLUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUc4cEIsV0FBVyxFQUFFOXBCLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDakM2cEIsUUFBUSxHQUFHRCxVQUFVLENBQUM1cEIsQ0FBQyxDQUFDO1VBQ3hCMnBCLFlBQVksR0FBR0EsWUFBWSxJQUFJdHFCLFVBQVUsQ0FBQ0osS0FBSyxFQUFFNHFCLFFBQVEsQ0FBQztRQUM5RDtRQUNBLE9BQU9ILFVBQVUsSUFBSUMsWUFBWTtNQUNyQztNQUNBLFNBQVNILHFCQUFxQkEsQ0FBQ3ZxQixLQUFLLEVBQUU7UUFDbEMsSUFBSThxQixTQUFTLEdBQUcvcUIsT0FBTyxDQUFDQyxLQUFLLENBQUM7VUFDMUIrcUIsWUFBWSxHQUFHLEtBQUs7UUFDeEIsSUFBSUQsU0FBUyxFQUFFO1VBQ1hDLFlBQVksR0FDUi9xQixLQUFLLENBQUNnckIsTUFBTSxDQUFDLFVBQVVDLElBQUksRUFBRTtZQUN6QixPQUFPLENBQUN2cUIsUUFBUSxDQUFDdXFCLElBQUksQ0FBQyxJQUFJYixRQUFRLENBQUNwcUIsS0FBSyxDQUFDO1VBQzdDLENBQUMsQ0FBQyxDQUFDTyxNQUFNLEtBQUssQ0FBQztRQUN2QjtRQUNBLE9BQU91cUIsU0FBUyxJQUFJQyxZQUFZO01BQ3BDO01BQ0EsU0FBU0csY0FBY0EsQ0FBQ2xyQixLQUFLLEVBQUU7UUFDM0IsSUFBSXlxQixVQUFVLEdBQUd0cUIsUUFBUSxDQUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDSyxhQUFhLENBQUNMLEtBQUssQ0FBQztVQUNyRDBxQixZQUFZLEdBQUcsS0FBSztVQUNwQkMsVUFBVSxHQUFHLENBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLENBQ2I7VUFDRDVwQixDQUFDO1VBQ0Q2cEIsUUFBUTtRQUNaLEtBQUs3cEIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHNHBCLFVBQVUsQ0FBQ3BxQixNQUFNLEVBQUVRLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDdkM2cEIsUUFBUSxHQUFHRCxVQUFVLENBQUM1cEIsQ0FBQyxDQUFDO1VBQ3hCMnBCLFlBQVksR0FBR0EsWUFBWSxJQUFJdHFCLFVBQVUsQ0FBQ0osS0FBSyxFQUFFNHFCLFFBQVEsQ0FBQztRQUM5RDtRQUNBLE9BQU9ILFVBQVUsSUFBSUMsWUFBWTtNQUNyQztNQUNBLFNBQVNTLGlCQUFpQkEsQ0FBQ0MsUUFBUSxFQUFFMWpCLElBQUksRUFBRTtRQUN2QyxJQUFJNEUsS0FBSyxHQUFHOGUsUUFBUSxDQUFDQyxJQUFJLENBQUMzakIsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUM7UUFDN0MsT0FBTzRFLEtBQUssR0FBRyxDQUFDLENBQUMsR0FDWCxVQUFVLEdBQ1ZBLEtBQUssR0FBRyxDQUFDLENBQUMsR0FDVixVQUFVLEdBQ1ZBLEtBQUssR0FBRyxDQUFDLEdBQ1QsU0FBUyxHQUNUQSxLQUFLLEdBQUcsQ0FBQyxHQUNULFNBQVMsR0FDVEEsS0FBSyxHQUFHLENBQUMsR0FDVCxTQUFTLEdBQ1RBLEtBQUssR0FBRyxDQUFDLEdBQ1QsVUFBVSxHQUNWLFVBQVU7TUFDcEI7TUFDQSxTQUFTZ2YsVUFBVUEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDL0IsSUFBSTV1QixTQUFTLENBQUMyRCxNQUFNLEtBQUssQ0FBQyxFQUFFO1VBQ3hCLElBQUksQ0FBQzNELFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNmMnVCLElBQUksR0FBRyxLQUFLLENBQUM7WUFDYkMsT0FBTyxHQUFHLEtBQUssQ0FBQztVQUNwQixDQUFDLE1BQU0sSUFBSWxCLGFBQWEsQ0FBQzF0QixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNwQzJ1QixJQUFJLEdBQUczdUIsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNuQjR1QixPQUFPLEdBQUcsS0FBSyxDQUFDO1VBQ3BCLENBQUMsTUFBTSxJQUFJTixjQUFjLENBQUN0dUIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDckM0dUIsT0FBTyxHQUFHNXVCLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdEIydUIsSUFBSSxHQUFHLEtBQUssQ0FBQztVQUNqQjtRQUNKO1FBQ0EsSUFBSTdqQixJQUFJLEdBQUc2akIsSUFBSSxJQUFJakosV0FBVyxDQUFDLENBQUM7VUFDNUJtSixHQUFHLEdBQUduRSxlQUFlLENBQUM1ZixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUNna0IsT0FBTyxDQUFDLEtBQUssQ0FBQztVQUNoRHJxQixPQUFPLEdBQUd6QixLQUFLLENBQUMrckIsY0FBYyxDQUFDLElBQUksRUFBRUYsR0FBRyxDQUFDLElBQUksVUFBVTtVQUN2RDlqQixNQUFNLEdBQ0Y2akIsT0FBTyxLQUNOcmxCLFVBQVUsQ0FBQ3FsQixPQUFPLENBQUNucUIsT0FBTyxDQUFDLENBQUMsR0FDdkJtcUIsT0FBTyxDQUFDbnFCLE9BQU8sQ0FBQyxDQUFDN0MsSUFBSSxDQUFDLElBQUksRUFBRWtKLElBQUksQ0FBQyxHQUNqQzhqQixPQUFPLENBQUNucUIsT0FBTyxDQUFDLENBQUM7UUFDL0IsT0FBTyxJQUFJLENBQUN1cUIsTUFBTSxDQUNkamtCLE1BQU0sSUFDRixJQUFJLENBQUN1QixVQUFVLENBQUMsQ0FBQyxDQUFDMUIsUUFBUSxDQUN0Qm5HLE9BQU8sRUFDUCxJQUFJLEVBQ0ppaEIsV0FBVyxDQUFDNWEsSUFBSSxDQUNwQixDQUNSLENBQUM7TUFDTDtNQUNBLFNBQVM4ZixLQUFLQSxDQUFBLEVBQUc7UUFDYixPQUFPLElBQUl4aUIsTUFBTSxDQUFDLElBQUksQ0FBQztNQUMzQjtNQUNBLFNBQVM0a0IsT0FBT0EsQ0FBQzVwQixLQUFLLEVBQUU4TSxLQUFLLEVBQUU7UUFDM0IsSUFBSStlLFVBQVUsR0FBRzFtQixRQUFRLENBQUNuRixLQUFLLENBQUMsR0FBR0EsS0FBSyxHQUFHc2lCLFdBQVcsQ0FBQ3RpQixLQUFLLENBQUM7UUFDN0QsSUFBSSxFQUFFLElBQUksQ0FBQ2tELE9BQU8sQ0FBQyxDQUFDLElBQUkyb0IsVUFBVSxDQUFDM29CLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtVQUMzQyxPQUFPLEtBQUs7UUFDaEI7UUFDQTRKLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUMsSUFBSSxhQUFhO1FBQzlDLElBQUlBLEtBQUssS0FBSyxhQUFhLEVBQUU7VUFDekIsT0FBTyxJQUFJLENBQUMzTCxPQUFPLENBQUMsQ0FBQyxHQUFHMHFCLFVBQVUsQ0FBQzFxQixPQUFPLENBQUMsQ0FBQztRQUNoRCxDQUFDLE1BQU07VUFDSCxPQUNJMHFCLFVBQVUsQ0FBQzFxQixPQUFPLENBQUMsQ0FBQyxHQUNwQixJQUFJLENBQUNxbUIsS0FBSyxDQUFDLENBQUMsQ0FBQ2tFLE9BQU8sQ0FBQzVlLEtBQUssQ0FBQyxDQUFDM0wsT0FBTyxDQUFDLENBQUM7UUFFN0M7TUFDSjtNQUNBLFNBQVMwb0IsUUFBUUEsQ0FBQzdwQixLQUFLLEVBQUU4TSxLQUFLLEVBQUU7UUFDNUIsSUFBSStlLFVBQVUsR0FBRzFtQixRQUFRLENBQUNuRixLQUFLLENBQUMsR0FBR0EsS0FBSyxHQUFHc2lCLFdBQVcsQ0FBQ3RpQixLQUFLLENBQUM7UUFDN0QsSUFBSSxFQUFFLElBQUksQ0FBQ2tELE9BQU8sQ0FBQyxDQUFDLElBQUkyb0IsVUFBVSxDQUFDM29CLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtVQUMzQyxPQUFPLEtBQUs7UUFDaEI7UUFDQTRKLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUMsSUFBSSxhQUFhO1FBQzlDLElBQUlBLEtBQUssS0FBSyxhQUFhLEVBQUU7VUFDekIsT0FBTyxJQUFJLENBQUMzTCxPQUFPLENBQUMsQ0FBQyxHQUFHMHFCLFVBQVUsQ0FBQzFxQixPQUFPLENBQUMsQ0FBQztRQUNoRCxDQUFDLE1BQU07VUFDSCxPQUNJLElBQUksQ0FBQ3FtQixLQUFLLENBQUMsQ0FBQyxDQUFDc0UsS0FBSyxDQUFDaGYsS0FBSyxDQUFDLENBQUMzTCxPQUFPLENBQUMsQ0FBQyxHQUNuQzBxQixVQUFVLENBQUMxcUIsT0FBTyxDQUFDLENBQUM7UUFFNUI7TUFDSjtNQUNBLFNBQVM0cUIsU0FBU0EsQ0FBQzNuQixLQUFLLEVBQUVELEdBQUcsRUFBRTJJLEtBQUssRUFBRWtmLFdBQVcsRUFBRTtRQUMvQyxJQUFJQyxTQUFTLEdBQUc5bUIsUUFBUSxDQUFDZixLQUFLLENBQUMsR0FBR0EsS0FBSyxHQUFHa2UsV0FBVyxDQUFDbGUsS0FBSyxDQUFDO1VBQ3hEOG5CLE9BQU8sR0FBRy9tQixRQUFRLENBQUNoQixHQUFHLENBQUMsR0FBR0EsR0FBRyxHQUFHbWUsV0FBVyxDQUFDbmUsR0FBRyxDQUFDO1FBQ3BELElBQ0ksRUFDSSxJQUFJLENBQUNqQixPQUFPLENBQUMsQ0FBQyxJQUNkK29CLFNBQVMsQ0FBQy9vQixPQUFPLENBQUMsQ0FBQyxJQUNuQmdwQixPQUFPLENBQUNocEIsT0FBTyxDQUFDLENBQUMsQ0FDcEIsRUFDSDtVQUNFLE9BQU8sS0FBSztRQUNoQjtRQUNBOG9CLFdBQVcsR0FBR0EsV0FBVyxJQUFJLElBQUk7UUFDakMsT0FDSSxDQUFDQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUNqQixJQUFJLENBQUNwQyxPQUFPLENBQUNxQyxTQUFTLEVBQUVuZixLQUFLLENBQUMsR0FDOUIsQ0FBQyxJQUFJLENBQUMrYyxRQUFRLENBQUNvQyxTQUFTLEVBQUVuZixLQUFLLENBQUMsTUFDckNrZixXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUNqQixJQUFJLENBQUNuQyxRQUFRLENBQUNxQyxPQUFPLEVBQUVwZixLQUFLLENBQUMsR0FDN0IsQ0FBQyxJQUFJLENBQUM4YyxPQUFPLENBQUNzQyxPQUFPLEVBQUVwZixLQUFLLENBQUMsQ0FBQztNQUU1QztNQUNBLFNBQVNxZixNQUFNQSxDQUFDbnNCLEtBQUssRUFBRThNLEtBQUssRUFBRTtRQUMxQixJQUFJK2UsVUFBVSxHQUFHMW1CLFFBQVEsQ0FBQ25GLEtBQUssQ0FBQyxHQUFHQSxLQUFLLEdBQUdzaUIsV0FBVyxDQUFDdGlCLEtBQUssQ0FBQztVQUN6RG9zQixPQUFPO1FBQ1gsSUFBSSxFQUFFLElBQUksQ0FBQ2xwQixPQUFPLENBQUMsQ0FBQyxJQUFJMm9CLFVBQVUsQ0FBQzNvQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7VUFDM0MsT0FBTyxLQUFLO1FBQ2hCO1FBQ0E0SixLQUFLLEdBQUdELGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksYUFBYTtRQUM5QyxJQUFJQSxLQUFLLEtBQUssYUFBYSxFQUFFO1VBQ3pCLE9BQU8sSUFBSSxDQUFDM0wsT0FBTyxDQUFDLENBQUMsS0FBSzBxQixVQUFVLENBQUMxcUIsT0FBTyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxNQUFNO1VBQ0hpckIsT0FBTyxHQUFHUCxVQUFVLENBQUMxcUIsT0FBTyxDQUFDLENBQUM7VUFDOUIsT0FDSSxJQUFJLENBQUNxbUIsS0FBSyxDQUFDLENBQUMsQ0FBQ2tFLE9BQU8sQ0FBQzVlLEtBQUssQ0FBQyxDQUFDM0wsT0FBTyxDQUFDLENBQUMsSUFBSWlyQixPQUFPLElBQ2hEQSxPQUFPLElBQUksSUFBSSxDQUFDNUUsS0FBSyxDQUFDLENBQUMsQ0FBQ3NFLEtBQUssQ0FBQ2hmLEtBQUssQ0FBQyxDQUFDM0wsT0FBTyxDQUFDLENBQUM7UUFFdEQ7TUFDSjtNQUNBLFNBQVNrckIsYUFBYUEsQ0FBQ3JzQixLQUFLLEVBQUU4TSxLQUFLLEVBQUU7UUFDakMsT0FBTyxJQUFJLENBQUNxZixNQUFNLENBQUNuc0IsS0FBSyxFQUFFOE0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDOGMsT0FBTyxDQUFDNXBCLEtBQUssRUFBRThNLEtBQUssQ0FBQztNQUNsRTtNQUNBLFNBQVN3ZixjQUFjQSxDQUFDdHNCLEtBQUssRUFBRThNLEtBQUssRUFBRTtRQUNsQyxPQUFPLElBQUksQ0FBQ3FmLE1BQU0sQ0FBQ25zQixLQUFLLEVBQUU4TSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMrYyxRQUFRLENBQUM3cEIsS0FBSyxFQUFFOE0sS0FBSyxDQUFDO01BQ25FO01BQ0EsU0FBU3VlLElBQUlBLENBQUNyckIsS0FBSyxFQUFFOE0sS0FBSyxFQUFFeWYsT0FBTyxFQUFFO1FBQ2pDLElBQUlDLElBQUksRUFBRUMsU0FBUyxFQUFFOWtCLE1BQU07UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQ3pFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7VUFDakIsT0FBT2EsR0FBRztRQUNkO1FBQ0F5b0IsSUFBSSxHQUFHbEYsZUFBZSxDQUFDdG5CLEtBQUssRUFBRSxJQUFJLENBQUM7UUFDbkMsSUFBSSxDQUFDd3NCLElBQUksQ0FBQ3RwQixPQUFPLENBQUMsQ0FBQyxFQUFFO1VBQ2pCLE9BQU9hLEdBQUc7UUFDZDtRQUNBMG9CLFNBQVMsR0FBRyxDQUFDRCxJQUFJLENBQUN6RixTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0EsU0FBUyxDQUFDLENBQUMsSUFBSSxHQUFHO1FBQ3ZEamEsS0FBSyxHQUFHRCxjQUFjLENBQUNDLEtBQUssQ0FBQztRQUM3QixRQUFRQSxLQUFLO1VBQ1QsS0FBSyxNQUFNO1lBQ1BuRixNQUFNLEdBQUcra0IsU0FBUyxDQUFDLElBQUksRUFBRUYsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNuQztVQUNKLEtBQUssT0FBTztZQUNSN2tCLE1BQU0sR0FBRytrQixTQUFTLENBQUMsSUFBSSxFQUFFRixJQUFJLENBQUM7WUFDOUI7VUFDSixLQUFLLFNBQVM7WUFDVjdrQixNQUFNLEdBQUcra0IsU0FBUyxDQUFDLElBQUksRUFBRUYsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNsQztVQUNKLEtBQUssUUFBUTtZQUNUN2tCLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRzZrQixJQUFJLElBQUksR0FBRztZQUM1QjtVQUNKLEtBQUssUUFBUTtZQUNUN2tCLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRzZrQixJQUFJLElBQUksR0FBRztZQUM1QjtVQUNKLEtBQUssTUFBTTtZQUNQN2tCLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRzZrQixJQUFJLElBQUksSUFBSTtZQUM3QjtVQUNKLEtBQUssS0FBSztZQUNON2tCLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRzZrQixJQUFJLEdBQUdDLFNBQVMsSUFBSSxLQUFLO1lBQzFDO1VBQ0osS0FBSyxNQUFNO1lBQ1A5a0IsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHNmtCLElBQUksR0FBR0MsU0FBUyxJQUFJLE1BQU07WUFDM0M7VUFDSjtZQUNJOWtCLE1BQU0sR0FBRyxJQUFJLEdBQUc2a0IsSUFBSTtRQUM1QjtRQUNBLE9BQU9ELE9BQU8sR0FBRzVrQixNQUFNLEdBQUdpRyxRQUFRLENBQUNqRyxNQUFNLENBQUM7TUFDOUM7TUFDQSxTQUFTK2tCLFNBQVNBLENBQUNqd0IsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7UUFDckIsSUFBSUQsQ0FBQyxDQUFDOFIsSUFBSSxDQUFDLENBQUMsR0FBRzdSLENBQUMsQ0FBQzZSLElBQUksQ0FBQyxDQUFDLEVBQUU7VUFDckIsT0FBTyxDQUFDbWUsU0FBUyxDQUFDaHdCLENBQUMsRUFBRUQsQ0FBQyxDQUFDO1FBQzNCO1FBQ0EsSUFBSWt3QixjQUFjLEdBQ1YsQ0FBQ2p3QixDQUFDLENBQUNpUixJQUFJLENBQUMsQ0FBQyxHQUFHbFIsQ0FBQyxDQUFDa1IsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUlqUixDQUFDLENBQUM0UixLQUFLLENBQUMsQ0FBQyxHQUFHN1IsQ0FBQyxDQUFDNlIsS0FBSyxDQUFDLENBQUMsQ0FBQztVQUN4RHNlLE1BQU0sR0FBR253QixDQUFDLENBQUMrcUIsS0FBSyxDQUFDLENBQUMsQ0FBQzNRLEdBQUcsQ0FBQzhWLGNBQWMsRUFBRSxRQUFRLENBQUM7VUFDaERFLE9BQU87VUFDUEMsTUFBTTtRQUNWLElBQUlwd0IsQ0FBQyxHQUFHa3dCLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDaEJDLE9BQU8sR0FBR3B3QixDQUFDLENBQUMrcUIsS0FBSyxDQUFDLENBQUMsQ0FBQzNRLEdBQUcsQ0FBQzhWLGNBQWMsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDO1VBQ3JERyxNQUFNLEdBQUcsQ0FBQ3B3QixDQUFDLEdBQUdrd0IsTUFBTSxLQUFLQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQztRQUM5QyxDQUFDLE1BQU07VUFDSEEsT0FBTyxHQUFHcHdCLENBQUMsQ0FBQytxQixLQUFLLENBQUMsQ0FBQyxDQUFDM1EsR0FBRyxDQUFDOFYsY0FBYyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUM7VUFDckRHLE1BQU0sR0FBRyxDQUFDcHdCLENBQUMsR0FBR2t3QixNQUFNLEtBQUtDLE9BQU8sR0FBR0QsTUFBTSxDQUFDO1FBQzlDO1FBQ0EsT0FBTyxFQUFFRCxjQUFjLEdBQUdHLE1BQU0sQ0FBQyxJQUFJLENBQUM7TUFDMUM7TUFDQWx0QixLQUFLLENBQUNtdEIsYUFBYSxHQUFHLHNCQUFzQjtNQUM1Q250QixLQUFLLENBQUNvdEIsZ0JBQWdCLEdBQUcsd0JBQXdCO01BQ2pELFNBQVM5c0IsUUFBUUEsQ0FBQSxFQUFHO1FBQ2hCLE9BQU8sSUFBSSxDQUFDc25CLEtBQUssQ0FBQyxDQUFDLENBQ2R5RixNQUFNLENBQUMsSUFBSSxDQUFDLENBQ1pyQixNQUFNLENBQUMsa0NBQWtDLENBQUM7TUFDbkQ7TUFDQSxTQUFTc0IsV0FBV0EsQ0FBQ0MsVUFBVSxFQUFFO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUNqcUIsT0FBTyxDQUFDLENBQUMsRUFBRTtVQUNqQixPQUFPLElBQUk7UUFDZjtRQUNBLElBQUl6QixHQUFHLEdBQUcwckIsVUFBVSxLQUFLLElBQUk7VUFDekJ2cUIsQ0FBQyxHQUFHbkIsR0FBRyxHQUFHLElBQUksQ0FBQytsQixLQUFLLENBQUMsQ0FBQyxDQUFDL2xCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSTtRQUN2QyxJQUFJbUIsQ0FBQyxDQUFDK0ssSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUkvSyxDQUFDLENBQUMrSyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRTtVQUNqQyxPQUFPakUsWUFBWSxDQUNmOUcsQ0FBQyxFQUNEbkIsR0FBRyxHQUNHLGdDQUFnQyxHQUNoQyw4QkFDVixDQUFDO1FBQ0w7UUFDQSxJQUFJMEUsVUFBVSxDQUFDdkYsSUFBSSxDQUFDMUUsU0FBUyxDQUFDZ3hCLFdBQVcsQ0FBQyxFQUFFO1VBQ3hDLElBQUl6ckIsR0FBRyxFQUFFO1lBQ0wsT0FBTyxJQUFJLENBQUMyckIsTUFBTSxDQUFDLENBQUMsQ0FBQ0YsV0FBVyxDQUFDLENBQUM7VUFDdEMsQ0FBQyxNQUFNO1lBQ0gsT0FBTyxJQUFJdHNCLElBQUksQ0FDWCxJQUFJLENBQUNPLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDNGxCLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQzdDLENBQUMsQ0FDSW1HLFdBQVcsQ0FBQyxDQUFDLENBQ2I1akIsT0FBTyxDQUFDLEdBQUcsRUFBRUksWUFBWSxDQUFDOUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1VBQzNDO1FBQ0o7UUFDQSxPQUFPOEcsWUFBWSxDQUNmOUcsQ0FBQyxFQUNEbkIsR0FBRyxHQUNHLDhCQUE4QixHQUM5Qiw0QkFDVixDQUFDO01BQ0w7TUFDQSxTQUFTNHJCLE9BQU9BLENBQUEsRUFBRztRQUNmLElBQUksQ0FBQyxJQUFJLENBQUNucUIsT0FBTyxDQUFDLENBQUMsRUFBRTtVQUNqQixPQUFPLG9CQUFvQixHQUFHLElBQUksQ0FBQ3VCLEVBQUUsR0FBRyxNQUFNO1FBQ2xEO1FBQ0EsSUFBSXdFLElBQUksR0FBRyxRQUFRO1VBQ2Zxa0IsSUFBSSxHQUFHLEVBQUU7VUFDVEMsTUFBTTtVQUNONWYsSUFBSTtVQUNKNmYsUUFBUTtVQUNSQyxNQUFNO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQzNFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7VUFDakI3ZixJQUFJLEdBQ0EsSUFBSSxDQUFDOGQsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQ2hCLFlBQVksR0FDWixrQkFBa0I7VUFDNUJ1RyxJQUFJLEdBQUcsR0FBRztRQUNkO1FBQ0FDLE1BQU0sR0FBRyxHQUFHLEdBQUd0a0IsSUFBSSxHQUFHLEtBQUs7UUFDM0IwRSxJQUFJLEdBQ0EsQ0FBQyxJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLE1BQU0sR0FBRyxRQUFRO1FBQy9ENmYsUUFBUSxHQUFHLHVCQUF1QjtRQUNsQ0MsTUFBTSxHQUFHSCxJQUFJLEdBQUcsTUFBTTtRQUN0QixPQUFPLElBQUksQ0FBQzFCLE1BQU0sQ0FBQzJCLE1BQU0sR0FBRzVmLElBQUksR0FBRzZmLFFBQVEsR0FBR0MsTUFBTSxDQUFDO01BQ3pEO01BQ0EsU0FBUzdCLE1BQU1BLENBQUM4QixXQUFXLEVBQUU7UUFDekIsSUFBSSxDQUFDQSxXQUFXLEVBQUU7VUFDZEEsV0FBVyxHQUFHLElBQUksQ0FBQzFFLEtBQUssQ0FBQyxDQUFDLEdBQ3BCcHBCLEtBQUssQ0FBQ290QixnQkFBZ0IsR0FDdEJwdEIsS0FBSyxDQUFDbXRCLGFBQWE7UUFDN0I7UUFDQSxJQUFJcGxCLE1BQU0sR0FBRytCLFlBQVksQ0FBQyxJQUFJLEVBQUVna0IsV0FBVyxDQUFDO1FBQzVDLE9BQU8sSUFBSSxDQUFDeGtCLFVBQVUsQ0FBQyxDQUFDLENBQUN5a0IsVUFBVSxDQUFDaG1CLE1BQU0sQ0FBQztNQUMvQztNQUNBLFNBQVM3SixJQUFJQSxDQUFDeXRCLElBQUksRUFBRXRmLGFBQWEsRUFBRTtRQUMvQixJQUNJLElBQUksQ0FBQy9JLE9BQU8sQ0FBQyxDQUFDLEtBQ1ppQyxRQUFRLENBQUNvbUIsSUFBSSxDQUFDLElBQUlBLElBQUksQ0FBQ3JvQixPQUFPLENBQUMsQ0FBQyxJQUM5Qm9mLFdBQVcsQ0FBQ2lKLElBQUksQ0FBQyxDQUFDcm9CLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDbEM7VUFDRSxPQUFPaWlCLGNBQWMsQ0FBQztZQUFFdG5CLEVBQUUsRUFBRSxJQUFJO1lBQUVDLElBQUksRUFBRXl0QjtVQUFLLENBQUMsQ0FBQyxDQUMxQzBCLE1BQU0sQ0FBQyxJQUFJLENBQUNBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDckJXLFFBQVEsQ0FBQyxDQUFDM2hCLGFBQWEsQ0FBQztRQUNqQyxDQUFDLE1BQU07VUFDSCxPQUFPLElBQUksQ0FBQy9DLFVBQVUsQ0FBQyxDQUFDLENBQUNTLFdBQVcsQ0FBQyxDQUFDO1FBQzFDO01BQ0o7TUFDQSxTQUFTa2tCLE9BQU9BLENBQUM1aEIsYUFBYSxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDbk8sSUFBSSxDQUFDd2tCLFdBQVcsQ0FBQyxDQUFDLEVBQUVyVyxhQUFhLENBQUM7TUFDbEQ7TUFDQSxTQUFTcE8sRUFBRUEsQ0FBQzB0QixJQUFJLEVBQUV0ZixhQUFhLEVBQUU7UUFDN0IsSUFDSSxJQUFJLENBQUMvSSxPQUFPLENBQUMsQ0FBQyxLQUNaaUMsUUFBUSxDQUFDb21CLElBQUksQ0FBQyxJQUFJQSxJQUFJLENBQUNyb0IsT0FBTyxDQUFDLENBQUMsSUFDOUJvZixXQUFXLENBQUNpSixJQUFJLENBQUMsQ0FBQ3JvQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2xDO1VBQ0UsT0FBT2lpQixjQUFjLENBQUM7WUFBRXJuQixJQUFJLEVBQUUsSUFBSTtZQUFFRCxFQUFFLEVBQUUwdEI7VUFBSyxDQUFDLENBQUMsQ0FDMUMwQixNQUFNLENBQUMsSUFBSSxDQUFDQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQ3JCVyxRQUFRLENBQUMsQ0FBQzNoQixhQUFhLENBQUM7UUFDakMsQ0FBQyxNQUFNO1VBQ0gsT0FBTyxJQUFJLENBQUMvQyxVQUFVLENBQUMsQ0FBQyxDQUFDUyxXQUFXLENBQUMsQ0FBQztRQUMxQztNQUNKO01BQ0EsU0FBU21rQixLQUFLQSxDQUFDN2hCLGFBQWEsRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQ3BPLEVBQUUsQ0FBQ3lrQixXQUFXLENBQUMsQ0FBQyxFQUFFclcsYUFBYSxDQUFDO01BQ2hEO01BQ0EsU0FBU2doQixNQUFNQSxDQUFDM3VCLEdBQUcsRUFBRTtRQUNqQixJQUFJeXZCLGFBQWE7UUFDakIsSUFBSXp2QixHQUFHLEtBQUssS0FBSyxDQUFDLEVBQUU7VUFDaEIsT0FBTyxJQUFJLENBQUN5RyxPQUFPLENBQUMwWCxLQUFLO1FBQzdCLENBQUMsTUFBTTtVQUNIc1IsYUFBYSxHQUFHbFIsU0FBUyxDQUFDdmUsR0FBRyxDQUFDO1VBQzlCLElBQUl5dkIsYUFBYSxJQUFJLElBQUksRUFBRTtZQUN2QixJQUFJLENBQUNocEIsT0FBTyxHQUFHZ3BCLGFBQWE7VUFDaEM7VUFDQSxPQUFPLElBQUk7UUFDZjtNQUNKO01BQ0EsSUFBSUMsSUFBSSxHQUFHeG9CLFNBQVMsQ0FDaEIsaUpBQWlKLEVBQ2pKLFVBQVVsSCxHQUFHLEVBQUU7UUFDWCxJQUFJQSxHQUFHLEtBQUssS0FBSyxDQUFDLEVBQUU7VUFDaEIsT0FBTyxJQUFJLENBQUM0SyxVQUFVLENBQUMsQ0FBQztRQUM1QixDQUFDLE1BQU07VUFDSCxPQUFPLElBQUksQ0FBQytqQixNQUFNLENBQUMzdUIsR0FBRyxDQUFDO1FBQzNCO01BQ0osQ0FDSixDQUFDO01BQ0QsU0FBUzRLLFVBQVVBLENBQUEsRUFBRztRQUNsQixPQUFPLElBQUksQ0FBQ25FLE9BQU87TUFDdkI7TUFDQSxJQUFJa3BCLGFBQWEsR0FBRyxHQUFHO1FBQ25CQyxhQUFhLEdBQUcsRUFBRSxHQUFHRCxhQUFhO1FBQ2xDRSxXQUFXLEdBQUcsRUFBRSxHQUFHRCxhQUFhO1FBQ2hDRSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBR0QsV0FBVztNQUMxRCxTQUFTRSxLQUFLQSxDQUFDQyxRQUFRLEVBQUVDLE9BQU8sRUFBRTtRQUM5QixPQUFPLENBQUVELFFBQVEsR0FBR0MsT0FBTyxHQUFJQSxPQUFPLElBQUlBLE9BQU87TUFDckQ7TUFDQSxTQUFTQyxnQkFBZ0JBLENBQUMxaUIsQ0FBQyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxFQUFFO1FBQy9CLElBQUlNLENBQUMsR0FBRyxHQUFHLElBQUlBLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDbkIsT0FBTyxJQUFJbEwsSUFBSSxDQUFDa0wsQ0FBQyxHQUFHLEdBQUcsRUFBRWxKLENBQUMsRUFBRTRJLENBQUMsQ0FBQyxHQUFHNGlCLGdCQUFnQjtRQUNyRCxDQUFDLE1BQU07VUFDSCxPQUFPLElBQUl4dEIsSUFBSSxDQUFDa0wsQ0FBQyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxDQUFDLENBQUNySyxPQUFPLENBQUMsQ0FBQztRQUN0QztNQUNKO01BQ0EsU0FBU3N0QixjQUFjQSxDQUFDM2lCLENBQUMsRUFBRWxKLENBQUMsRUFBRTRJLENBQUMsRUFBRTtRQUM3QixJQUFJTSxDQUFDLEdBQUcsR0FBRyxJQUFJQSxDQUFDLElBQUksQ0FBQyxFQUFFO1VBQ25CLE9BQU9sTCxJQUFJLENBQUNzVSxHQUFHLENBQUNwSixDQUFDLEdBQUcsR0FBRyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxDQUFDLEdBQUc0aUIsZ0JBQWdCO1FBQ3JELENBQUMsTUFBTTtVQUNILE9BQU94dEIsSUFBSSxDQUFDc1UsR0FBRyxDQUFDcEosQ0FBQyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxDQUFDO1FBQzVCO01BQ0o7TUFDQSxTQUFTa2dCLE9BQU9BLENBQUM1ZSxLQUFLLEVBQUU7UUFDcEIsSUFBSXllLElBQUksRUFBRW1ELFdBQVc7UUFDckI1aEIsS0FBSyxHQUFHRCxjQUFjLENBQUNDLEtBQUssQ0FBQztRQUM3QixJQUNJQSxLQUFLLEtBQUssS0FBSyxDQUFDLElBQ2hCQSxLQUFLLEtBQUssYUFBYSxJQUN2QixDQUFDLElBQUksQ0FBQzVKLE9BQU8sQ0FBQyxDQUFDLEVBQ2pCO1VBQ0UsT0FBTyxJQUFJO1FBQ2Y7UUFDQXdyQixXQUFXLEdBQUcsSUFBSSxDQUFDN3BCLE1BQU0sR0FBRzRwQixjQUFjLEdBQUdELGdCQUFnQjtRQUM3RCxRQUFRMWhCLEtBQUs7VUFDVCxLQUFLLE1BQU07WUFDUHllLElBQUksR0FBR21ELFdBQVcsQ0FBQyxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDO1VBQ0osS0FBSyxTQUFTO1lBQ1Y0ZCxJQUFJLEdBQUdtRCxXQUFXLENBQ2QsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEVBQ1gsSUFBSSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxHQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFFLEVBQ2pDLENBQ0osQ0FBQztZQUNEO1VBQ0osS0FBSyxPQUFPO1lBQ1JpZCxJQUFJLEdBQUdtRCxXQUFXLENBQUMsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRDtVQUNKLEtBQUssTUFBTTtZQUNQaWQsSUFBSSxHQUFHbUQsV0FBVyxDQUNkLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxFQUNYLElBQUksQ0FBQ1csS0FBSyxDQUFDLENBQUMsRUFDWixJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDc0gsT0FBTyxDQUFDLENBQy9CLENBQUM7WUFDRDtVQUNKLEtBQUssU0FBUztZQUNWMFYsSUFBSSxHQUFHbUQsV0FBVyxDQUNkLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxFQUNYLElBQUksQ0FBQ1csS0FBSyxDQUFDLENBQUMsRUFDWixJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDb2dCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUN4QyxDQUFDO1lBQ0Q7VUFDSixLQUFLLEtBQUs7VUFDVixLQUFLLE1BQU07WUFDUHBELElBQUksR0FBR21ELFdBQVcsQ0FDZCxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFDWCxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLEVBQ1osSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FDZCxDQUFDO1lBQ0Q7VUFDSixLQUFLLE1BQU07WUFDUGdkLElBQUksR0FBRyxJQUFJLENBQUMvbkIsRUFBRSxDQUFDckMsT0FBTyxDQUFDLENBQUM7WUFDeEJvcUIsSUFBSSxJQUFJOEMsS0FBSyxDQUNUOUMsSUFBSSxJQUNDLElBQUksQ0FBQzFtQixNQUFNLEdBQ04sQ0FBQyxHQUNELElBQUksQ0FBQ2tpQixTQUFTLENBQUMsQ0FBQyxHQUFHbUgsYUFBYSxDQUFDLEVBQzNDQyxXQUNKLENBQUM7WUFDRDtVQUNKLEtBQUssUUFBUTtZQUNUNUMsSUFBSSxHQUFHLElBQUksQ0FBQy9uQixFQUFFLENBQUNyQyxPQUFPLENBQUMsQ0FBQztZQUN4Qm9xQixJQUFJLElBQUk4QyxLQUFLLENBQUM5QyxJQUFJLEVBQUUyQyxhQUFhLENBQUM7WUFDbEM7VUFDSixLQUFLLFFBQVE7WUFDVDNDLElBQUksR0FBRyxJQUFJLENBQUMvbkIsRUFBRSxDQUFDckMsT0FBTyxDQUFDLENBQUM7WUFDeEJvcUIsSUFBSSxJQUFJOEMsS0FBSyxDQUFDOUMsSUFBSSxFQUFFMEMsYUFBYSxDQUFDO1lBQ2xDO1FBQ1I7UUFDQSxJQUFJLENBQUN6cUIsRUFBRSxDQUFDaWtCLE9BQU8sQ0FBQzhELElBQUksQ0FBQztRQUNyQjNyQixLQUFLLENBQUNzRixZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztRQUM5QixPQUFPLElBQUk7TUFDZjtNQUNBLFNBQVM0bUIsS0FBS0EsQ0FBQ2hmLEtBQUssRUFBRTtRQUNsQixJQUFJeWUsSUFBSSxFQUFFbUQsV0FBVztRQUNyQjVoQixLQUFLLEdBQUdELGNBQWMsQ0FBQ0MsS0FBSyxDQUFDO1FBQzdCLElBQ0lBLEtBQUssS0FBSyxLQUFLLENBQUMsSUFDaEJBLEtBQUssS0FBSyxhQUFhLElBQ3ZCLENBQUMsSUFBSSxDQUFDNUosT0FBTyxDQUFDLENBQUMsRUFDakI7VUFDRSxPQUFPLElBQUk7UUFDZjtRQUNBd3JCLFdBQVcsR0FBRyxJQUFJLENBQUM3cEIsTUFBTSxHQUFHNHBCLGNBQWMsR0FBR0QsZ0JBQWdCO1FBQzdELFFBQVExaEIsS0FBSztVQUNULEtBQUssTUFBTTtZQUNQeWUsSUFBSSxHQUFHbUQsV0FBVyxDQUFDLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUM3QztVQUNKLEtBQUssU0FBUztZQUNWNGQsSUFBSSxHQUNBbUQsV0FBVyxDQUNQLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxFQUNYLElBQUksQ0FBQ1csS0FBSyxDQUFDLENBQUMsR0FBSSxJQUFJLENBQUNBLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUMsRUFDckMsQ0FDSixDQUFDLEdBQUcsQ0FBQztZQUNUO1VBQ0osS0FBSyxPQUFPO1lBQ1JpZCxJQUFJLEdBQUdtRCxXQUFXLENBQUMsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ3hEO1VBQ0osS0FBSyxNQUFNO1lBQ1BpZCxJQUFJLEdBQ0FtRCxXQUFXLENBQ1AsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEVBQ1gsSUFBSSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxFQUNaLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNzSCxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQ25DLENBQUMsR0FBRyxDQUFDO1lBQ1Q7VUFDSixLQUFLLFNBQVM7WUFDVjBWLElBQUksR0FDQW1ELFdBQVcsQ0FDUCxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFDWCxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLEVBQ1osSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQ29nQixVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQzVDLENBQUMsR0FBRyxDQUFDO1lBQ1Q7VUFDSixLQUFLLEtBQUs7VUFDVixLQUFLLE1BQU07WUFDUHBELElBQUksR0FDQW1ELFdBQVcsQ0FDUCxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFDWCxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLEVBQ1osSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQ2xCLENBQUMsR0FBRyxDQUFDO1lBQ1Q7VUFDSixLQUFLLE1BQU07WUFDUGdkLElBQUksR0FBRyxJQUFJLENBQUMvbkIsRUFBRSxDQUFDckMsT0FBTyxDQUFDLENBQUM7WUFDeEJvcUIsSUFBSSxJQUNBNEMsV0FBVyxHQUNYRSxLQUFLLENBQ0Q5QyxJQUFJLElBQ0MsSUFBSSxDQUFDMW1CLE1BQU0sR0FDTixDQUFDLEdBQ0QsSUFBSSxDQUFDa2lCLFNBQVMsQ0FBQyxDQUFDLEdBQUdtSCxhQUFhLENBQUMsRUFDM0NDLFdBQ0osQ0FBQyxHQUNELENBQUM7WUFDTDtVQUNKLEtBQUssUUFBUTtZQUNUNUMsSUFBSSxHQUFHLElBQUksQ0FBQy9uQixFQUFFLENBQUNyQyxPQUFPLENBQUMsQ0FBQztZQUN4Qm9xQixJQUFJLElBQUkyQyxhQUFhLEdBQUdHLEtBQUssQ0FBQzlDLElBQUksRUFBRTJDLGFBQWEsQ0FBQyxHQUFHLENBQUM7WUFDdEQ7VUFDSixLQUFLLFFBQVE7WUFDVDNDLElBQUksR0FBRyxJQUFJLENBQUMvbkIsRUFBRSxDQUFDckMsT0FBTyxDQUFDLENBQUM7WUFDeEJvcUIsSUFBSSxJQUFJMEMsYUFBYSxHQUFHSSxLQUFLLENBQUM5QyxJQUFJLEVBQUUwQyxhQUFhLENBQUMsR0FBRyxDQUFDO1lBQ3REO1FBQ1I7UUFDQSxJQUFJLENBQUN6cUIsRUFBRSxDQUFDaWtCLE9BQU8sQ0FBQzhELElBQUksQ0FBQztRQUNyQjNyQixLQUFLLENBQUNzRixZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztRQUM5QixPQUFPLElBQUk7TUFDZjtNQUNBLFNBQVMvRCxPQUFPQSxDQUFBLEVBQUc7UUFDZixPQUFPLElBQUksQ0FBQ3FDLEVBQUUsQ0FBQ3JDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMyRCxPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUc7TUFDeEQ7TUFDQSxTQUFTOHBCLElBQUlBLENBQUEsRUFBRztRQUNaLE9BQU8xbUIsSUFBSSxDQUFDNEYsS0FBSyxDQUFDLElBQUksQ0FBQzNNLE9BQU8sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO01BQzNDO01BQ0EsU0FBU2lzQixNQUFNQSxDQUFBLEVBQUc7UUFDZCxPQUFPLElBQUl4c0IsSUFBSSxDQUFDLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUMsQ0FBQztNQUNuQztNQUNBLFNBQVMwbkIsT0FBT0EsQ0FBQSxFQUFHO1FBQ2YsSUFBSWptQixDQUFDLEdBQUcsSUFBSTtRQUNaLE9BQU8sQ0FDSEEsQ0FBQyxDQUFDK0ssSUFBSSxDQUFDLENBQUMsRUFDUi9LLENBQUMsQ0FBQzBMLEtBQUssQ0FBQyxDQUFDLEVBQ1QxTCxDQUFDLENBQUMyTCxJQUFJLENBQUMsQ0FBQyxFQUNSM0wsQ0FBQyxDQUFDb2dCLElBQUksQ0FBQyxDQUFDLEVBQ1JwZ0IsQ0FBQyxDQUFDbWhCLE1BQU0sQ0FBQyxDQUFDLEVBQ1ZuaEIsQ0FBQyxDQUFDb2hCLE1BQU0sQ0FBQyxDQUFDLEVBQ1ZwaEIsQ0FBQyxDQUFDcWhCLFdBQVcsQ0FBQyxDQUFDLENBQ2xCO01BQ0w7TUFDQSxTQUFTNEssUUFBUUEsQ0FBQSxFQUFHO1FBQ2hCLElBQUlqc0IsQ0FBQyxHQUFHLElBQUk7UUFDWixPQUFPO1VBQ0hrc0IsS0FBSyxFQUFFbHNCLENBQUMsQ0FBQytLLElBQUksQ0FBQyxDQUFDO1VBQ2ZzRSxNQUFNLEVBQUVyUCxDQUFDLENBQUMwTCxLQUFLLENBQUMsQ0FBQztVQUNqQkMsSUFBSSxFQUFFM0wsQ0FBQyxDQUFDMkwsSUFBSSxDQUFDLENBQUM7VUFDZHlMLEtBQUssRUFBRXBYLENBQUMsQ0FBQ29YLEtBQUssQ0FBQyxDQUFDO1VBQ2hCRSxPQUFPLEVBQUV0WCxDQUFDLENBQUNzWCxPQUFPLENBQUMsQ0FBQztVQUNwQkMsT0FBTyxFQUFFdlgsQ0FBQyxDQUFDdVgsT0FBTyxDQUFDLENBQUM7VUFDcEJrUCxZQUFZLEVBQUV6bUIsQ0FBQyxDQUFDeW1CLFlBQVksQ0FBQztRQUNqQyxDQUFDO01BQ0w7TUFDQSxTQUFTMEYsTUFBTUEsQ0FBQSxFQUFHO1FBQ2QsT0FBTyxJQUFJLENBQUM3ckIsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNncUIsV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJO01BQ3JEO01BQ0EsU0FBUzhCLFNBQVNBLENBQUEsRUFBRztRQUNqQixPQUFPOXJCLE9BQU8sQ0FBQyxJQUFJLENBQUM7TUFDeEI7TUFDQSxTQUFTK3JCLFlBQVlBLENBQUEsRUFBRztRQUNwQixPQUFPL3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRXlCLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUM1QztNQUNBLFNBQVN1c0IsU0FBU0EsQ0FBQSxFQUFHO1FBQ2pCLE9BQU92c0IsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDYixRQUFRO01BQ3pDO01BQ0EsU0FBU3F0QixZQUFZQSxDQUFBLEVBQUc7UUFDcEIsT0FBTztVQUNIbnZCLEtBQUssRUFBRSxJQUFJLENBQUN5RSxFQUFFO1VBQ2RtbkIsTUFBTSxFQUFFLElBQUksQ0FBQ2xuQixFQUFFO1VBQ2Z1b0IsTUFBTSxFQUFFLElBQUksQ0FBQ2xvQixPQUFPO1VBQ3BCdWYsS0FBSyxFQUFFLElBQUksQ0FBQ3pmLE1BQU07VUFDbEJ0RCxNQUFNLEVBQUUsSUFBSSxDQUFDb0M7UUFDakIsQ0FBQztNQUNMO01BQ0FrRixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO01BQ3BDQSxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO01BQ3JDQSxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO01BQ3RDQSxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO01BQ3ZDQSxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDO01BQzFDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUM7TUFDOUNBLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQztNQUM1Q0EsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO01BQzdDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7TUFDOUNrSCxhQUFhLENBQUMsR0FBRyxFQUFFcWYsWUFBWSxDQUFDO01BQ2hDcmYsYUFBYSxDQUFDLElBQUksRUFBRXFmLFlBQVksQ0FBQztNQUNqQ3JmLGFBQWEsQ0FBQyxLQUFLLEVBQUVxZixZQUFZLENBQUM7TUFDbENyZixhQUFhLENBQUMsTUFBTSxFQUFFc2YsWUFBWSxDQUFDO01BQ25DdGYsYUFBYSxDQUFDLE9BQU8sRUFBRXVmLGNBQWMsQ0FBQztNQUN0Q3plLGFBQWEsQ0FDVCxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDbkMsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtRQUNwQyxJQUFJdkcsR0FBRyxHQUFHMEMsTUFBTSxDQUFDRixPQUFPLENBQUN3cUIsU0FBUyxDQUM5QnZ2QixLQUFLLEVBQ0w4SSxNQUFNLEVBQ043RCxNQUFNLENBQUN0QixPQUNYLENBQUM7UUFDRCxJQUFJcEIsR0FBRyxFQUFFO1VBQ0xJLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDMUMsR0FBRyxHQUFHQSxHQUFHO1FBQ3JDLENBQUMsTUFBTTtVQUNISSxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ2hELFVBQVUsR0FBR2pDLEtBQUs7UUFDOUM7TUFDSixDQUNKLENBQUM7TUFDRCtQLGFBQWEsQ0FBQyxHQUFHLEVBQUVQLGFBQWEsQ0FBQztNQUNqQ08sYUFBYSxDQUFDLElBQUksRUFBRVAsYUFBYSxDQUFDO01BQ2xDTyxhQUFhLENBQUMsS0FBSyxFQUFFUCxhQUFhLENBQUM7TUFDbkNPLGFBQWEsQ0FBQyxNQUFNLEVBQUVQLGFBQWEsQ0FBQztNQUNwQ08sYUFBYSxDQUFDLElBQUksRUFBRXlmLG1CQUFtQixDQUFDO01BQ3hDM2UsYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUVPLElBQUksQ0FBQztNQUMvQ1AsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtRQUMxRCxJQUFJTyxLQUFLO1FBQ1QsSUFBSXBFLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDMHFCLG9CQUFvQixFQUFFO1VBQ3JDcG1CLEtBQUssR0FBR3JKLEtBQUssQ0FBQ3FKLEtBQUssQ0FBQ3BFLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDMHFCLG9CQUFvQixDQUFDO1FBQzVEO1FBQ0EsSUFBSXhxQixNQUFNLENBQUNGLE9BQU8sQ0FBQzJxQixtQkFBbUIsRUFBRTtVQUNwQ2xtQixLQUFLLENBQUM0SCxJQUFJLENBQUMsR0FBR25NLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDMnFCLG1CQUFtQixDQUM1QzF2QixLQUFLLEVBQ0xxSixLQUNKLENBQUM7UUFDTCxDQUFDLE1BQU07VUFDSEcsS0FBSyxDQUFDNEgsSUFBSSxDQUFDLEdBQUdxRCxRQUFRLENBQUN6VSxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQ3JDO01BQ0osQ0FBQyxDQUFDO01BQ0YsU0FBUzJ2QixVQUFVQSxDQUFDL3NCLENBQUMsRUFBRXZCLE9BQU8sRUFBRTtRQUM1QixJQUFJTixDQUFDO1VBQ0Q0ZCxDQUFDO1VBQ0RwUSxJQUFJO1VBQ0pxaEIsSUFBSSxHQUFHLElBQUksQ0FBQ0MsS0FBSyxJQUFJaFQsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDZ1QsS0FBSztRQUM5QyxLQUFLOXVCLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdpUixJQUFJLENBQUNydkIsTUFBTSxFQUFFUSxDQUFDLEdBQUc0ZCxDQUFDLEVBQUUsRUFBRTVkLENBQUMsRUFBRTtVQUNyQyxRQUFBOUMsT0FBQSxDQUFlMnhCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLO1lBQ3hCLEtBQUssUUFBUTtjQUNUdmhCLElBQUksR0FBRzNPLEtBQUssQ0FBQ2d3QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxDQUFDLENBQUNwRSxPQUFPLENBQUMsS0FBSyxDQUFDO2NBQzFDa0UsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDK3VCLEtBQUssR0FBR3ZoQixJQUFJLENBQUNwTixPQUFPLENBQUMsQ0FBQztjQUM5QjtVQUNSO1VBQ0EsUUFBQWxELE9BQUEsQ0FBZTJ4QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSztZQUN4QixLQUFLLFdBQVc7Y0FDWkgsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ3ZCLEtBQUssR0FBR0MsUUFBUTtjQUN4QjtZQUNKLEtBQUssUUFBUTtjQUNUemhCLElBQUksR0FBRzNPLEtBQUssQ0FBQ2d3QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxDQUFDLENBQUNyRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUN2cUIsT0FBTyxDQUFDLENBQUM7Y0FDcER5dUIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ3ZCLEtBQUssR0FBR3hoQixJQUFJLENBQUNwTixPQUFPLENBQUMsQ0FBQztjQUM5QjtVQUNSO1FBQ0o7UUFDQSxPQUFPeXVCLElBQUk7TUFDZjtNQUNBLFNBQVNLLGVBQWVBLENBQUNDLE9BQU8sRUFBRTd1QixPQUFPLEVBQUVFLE1BQU0sRUFBRTtRQUMvQyxJQUFJUixDQUFDO1VBQ0Q0ZCxDQUFDO1VBQ0RpUixJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLENBQUMsQ0FBQztVQUNsQmx5QixJQUFJO1VBQ0pxZixJQUFJO1VBQ0pvVCxNQUFNO1FBQ1ZELE9BQU8sR0FBR0EsT0FBTyxDQUFDeGxCLFdBQVcsQ0FBQyxDQUFDO1FBQy9CLEtBQUszSixDQUFDLEdBQUcsQ0FBQyxFQUFFNGQsQ0FBQyxHQUFHaVIsSUFBSSxDQUFDcnZCLE1BQU0sRUFBRVEsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFLEVBQUU1ZCxDQUFDLEVBQUU7VUFDckNyRCxJQUFJLEdBQUdreUIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDckQsSUFBSSxDQUFDZ04sV0FBVyxDQUFDLENBQUM7VUFDakNxUyxJQUFJLEdBQUc2UyxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNnYyxJQUFJLENBQUNyUyxXQUFXLENBQUMsQ0FBQztVQUNqQ3lsQixNQUFNLEdBQUdQLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ292QixNQUFNLENBQUN6bEIsV0FBVyxDQUFDLENBQUM7VUFDckMsSUFBSW5KLE1BQU0sRUFBRTtZQUNSLFFBQVFGLE9BQU87Y0FDWCxLQUFLLEdBQUc7Y0FDUixLQUFLLElBQUk7Y0FDVCxLQUFLLEtBQUs7Z0JBQ04sSUFBSTBiLElBQUksS0FBS21ULE9BQU8sRUFBRTtrQkFDbEIsT0FBT04sSUFBSSxDQUFDN3VCLENBQUMsQ0FBQztnQkFDbEI7Z0JBQ0E7Y0FDSixLQUFLLE1BQU07Z0JBQ1AsSUFBSXJELElBQUksS0FBS3d5QixPQUFPLEVBQUU7a0JBQ2xCLE9BQU9OLElBQUksQ0FBQzd1QixDQUFDLENBQUM7Z0JBQ2xCO2dCQUNBO2NBQ0osS0FBSyxPQUFPO2dCQUNSLElBQUlvdkIsTUFBTSxLQUFLRCxPQUFPLEVBQUU7a0JBQ3BCLE9BQU9OLElBQUksQ0FBQzd1QixDQUFDLENBQUM7Z0JBQ2xCO2dCQUNBO1lBQ1I7VUFDSixDQUFDLE1BQU0sSUFBSSxDQUFDckQsSUFBSSxFQUFFcWYsSUFBSSxFQUFFb1QsTUFBTSxDQUFDLENBQUN0ZSxPQUFPLENBQUNxZSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkQsT0FBT04sSUFBSSxDQUFDN3VCLENBQUMsQ0FBQztVQUNsQjtRQUNKO01BQ0o7TUFDQSxTQUFTcXZCLHFCQUFxQkEsQ0FBQzd0QixHQUFHLEVBQUVvTCxJQUFJLEVBQUU7UUFDdEMsSUFBSTBpQixHQUFHLEdBQUc5dEIsR0FBRyxDQUFDdXRCLEtBQUssSUFBSXZ0QixHQUFHLENBQUN3dEIsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsSUFBSXBpQixJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7VUFDakIsT0FBTy9OLEtBQUssQ0FBQzJDLEdBQUcsQ0FBQ3V0QixLQUFLLENBQUMsQ0FBQ25pQixJQUFJLENBQUMsQ0FBQztRQUNsQyxDQUFDLE1BQU07VUFDSCxPQUFPL04sS0FBSyxDQUFDMkMsR0FBRyxDQUFDdXRCLEtBQUssQ0FBQyxDQUFDbmlCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQ0EsSUFBSSxHQUFHcEwsR0FBRyxDQUFDcWtCLE1BQU0sSUFBSXlKLEdBQUc7UUFDOUQ7TUFDSjtNQUNBLFNBQVNDLFVBQVVBLENBQUEsRUFBRztRQUNsQixJQUFJdnZCLENBQUM7VUFDRDRkLENBQUM7VUFDRHJhLEdBQUc7VUFDSHNyQixJQUFJLEdBQUcsSUFBSSxDQUFDMW1CLFVBQVUsQ0FBQyxDQUFDLENBQUMwbUIsSUFBSSxDQUFDLENBQUM7UUFDbkMsS0FBSzd1QixDQUFDLEdBQUcsQ0FBQyxFQUFFNGQsQ0FBQyxHQUFHaVIsSUFBSSxDQUFDcnZCLE1BQU0sRUFBRVEsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFLEVBQUU1ZCxDQUFDLEVBQUU7VUFDckN1RCxHQUFHLEdBQUcsSUFBSSxDQUFDa2pCLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUN2cUIsT0FBTyxDQUFDLENBQUM7VUFDM0MsSUFBSXl1QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxJQUFJeHJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLLEVBQUU7WUFDOUMsT0FBT0gsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDckQsSUFBSTtVQUN2QjtVQUNBLElBQUlreUIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ3ZCLEtBQUssSUFBSXpyQixHQUFHLElBQUlBLEdBQUcsSUFBSXNyQixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxFQUFFO1lBQzlDLE9BQU9GLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ3JELElBQUk7VUFDdkI7UUFDSjtRQUNBLE9BQU8sRUFBRTtNQUNiO01BQ0EsU0FBUzZ5QixZQUFZQSxDQUFBLEVBQUc7UUFDcEIsSUFBSXh2QixDQUFDO1VBQ0Q0ZCxDQUFDO1VBQ0RyYSxHQUFHO1VBQ0hzckIsSUFBSSxHQUFHLElBQUksQ0FBQzFtQixVQUFVLENBQUMsQ0FBQyxDQUFDMG1CLElBQUksQ0FBQyxDQUFDO1FBQ25DLEtBQUs3dUIsQ0FBQyxHQUFHLENBQUMsRUFBRTRkLENBQUMsR0FBR2lSLElBQUksQ0FBQ3J2QixNQUFNLEVBQUVRLENBQUMsR0FBRzRkLENBQUMsRUFBRSxFQUFFNWQsQ0FBQyxFQUFFO1VBQ3JDdUQsR0FBRyxHQUFHLElBQUksQ0FBQ2tqQixLQUFLLENBQUMsQ0FBQyxDQUFDa0UsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDdnFCLE9BQU8sQ0FBQyxDQUFDO1VBQzNDLElBQUl5dUIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDK3VCLEtBQUssSUFBSXhyQixHQUFHLElBQUlBLEdBQUcsSUFBSXNyQixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxFQUFFO1lBQzlDLE9BQU9ILElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ292QixNQUFNO1VBQ3pCO1VBQ0EsSUFBSVAsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ3ZCLEtBQUssSUFBSXpyQixHQUFHLElBQUlBLEdBQUcsSUFBSXNyQixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxFQUFFO1lBQzlDLE9BQU9GLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ292QixNQUFNO1VBQ3pCO1FBQ0o7UUFDQSxPQUFPLEVBQUU7TUFDYjtNQUNBLFNBQVNLLFVBQVVBLENBQUEsRUFBRztRQUNsQixJQUFJenZCLENBQUM7VUFDRDRkLENBQUM7VUFDRHJhLEdBQUc7VUFDSHNyQixJQUFJLEdBQUcsSUFBSSxDQUFDMW1CLFVBQVUsQ0FBQyxDQUFDLENBQUMwbUIsSUFBSSxDQUFDLENBQUM7UUFDbkMsS0FBSzd1QixDQUFDLEdBQUcsQ0FBQyxFQUFFNGQsQ0FBQyxHQUFHaVIsSUFBSSxDQUFDcnZCLE1BQU0sRUFBRVEsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFLEVBQUU1ZCxDQUFDLEVBQUU7VUFDckN1RCxHQUFHLEdBQUcsSUFBSSxDQUFDa2pCLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUN2cUIsT0FBTyxDQUFDLENBQUM7VUFDM0MsSUFBSXl1QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxJQUFJeHJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLLEVBQUU7WUFDOUMsT0FBT0gsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ2MsSUFBSTtVQUN2QjtVQUNBLElBQUk2UyxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxJQUFJenJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLEVBQUU7WUFDOUMsT0FBT0YsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ2MsSUFBSTtVQUN2QjtRQUNKO1FBQ0EsT0FBTyxFQUFFO01BQ2I7TUFDQSxTQUFTMFQsVUFBVUEsQ0FBQSxFQUFHO1FBQ2xCLElBQUkxdkIsQ0FBQztVQUNENGQsQ0FBQztVQUNEMFIsR0FBRztVQUNIL3JCLEdBQUc7VUFDSHNyQixJQUFJLEdBQUcsSUFBSSxDQUFDMW1CLFVBQVUsQ0FBQyxDQUFDLENBQUMwbUIsSUFBSSxDQUFDLENBQUM7UUFDbkMsS0FBSzd1QixDQUFDLEdBQUcsQ0FBQyxFQUFFNGQsQ0FBQyxHQUFHaVIsSUFBSSxDQUFDcnZCLE1BQU0sRUFBRVEsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFLEVBQUU1ZCxDQUFDLEVBQUU7VUFDckNzdkIsR0FBRyxHQUFHVCxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxJQUFJRixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7VUFDN0N6ckIsR0FBRyxHQUFHLElBQUksQ0FBQ2tqQixLQUFLLENBQUMsQ0FBQyxDQUFDa0UsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDdnFCLE9BQU8sQ0FBQyxDQUFDO1VBQzNDLElBQ0t5dUIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDK3VCLEtBQUssSUFBSXhyQixHQUFHLElBQUlBLEdBQUcsSUFBSXNyQixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxJQUM1Q0gsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ3ZCLEtBQUssSUFBSXpyQixHQUFHLElBQUlBLEdBQUcsSUFBSXNyQixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBTSxFQUNoRDtZQUNFLE9BQ0ksQ0FBQyxJQUFJLENBQUNuaUIsSUFBSSxDQUFDLENBQUMsR0FBRy9OLEtBQUssQ0FBQ2d3QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxDQUFDLENBQUNuaUIsSUFBSSxDQUFDLENBQUMsSUFBSTBpQixHQUFHLEdBQ2pEVCxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUM2bEIsTUFBTTtVQUV0QjtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUNqWixJQUFJLENBQUMsQ0FBQztNQUN0QjtNQUNBLFNBQVMraUIsYUFBYUEsQ0FBQ3hnQixRQUFRLEVBQUU7UUFDN0IsSUFBSSxDQUFDOVAsVUFBVSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO1VBQ3JDdXdCLGdCQUFnQixDQUFDbnlCLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDL0I7UUFDQSxPQUFPMFIsUUFBUSxHQUFHLElBQUksQ0FBQzBnQixjQUFjLEdBQUcsSUFBSSxDQUFDQyxVQUFVO01BQzNEO01BQ0EsU0FBU0MsYUFBYUEsQ0FBQzVnQixRQUFRLEVBQUU7UUFDN0IsSUFBSSxDQUFDOVAsVUFBVSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO1VBQ3JDdXdCLGdCQUFnQixDQUFDbnlCLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDL0I7UUFDQSxPQUFPMFIsUUFBUSxHQUFHLElBQUksQ0FBQzZnQixjQUFjLEdBQUcsSUFBSSxDQUFDRixVQUFVO01BQzNEO01BQ0EsU0FBU0csZUFBZUEsQ0FBQzlnQixRQUFRLEVBQUU7UUFDL0IsSUFBSSxDQUFDOVAsVUFBVSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxFQUFFO1VBQ3ZDdXdCLGdCQUFnQixDQUFDbnlCLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDL0I7UUFDQSxPQUFPMFIsUUFBUSxHQUFHLElBQUksQ0FBQytnQixnQkFBZ0IsR0FBRyxJQUFJLENBQUNKLFVBQVU7TUFDN0Q7TUFDQSxTQUFTekIsWUFBWUEsQ0FBQ2xmLFFBQVEsRUFBRTVPLE9BQU8sRUFBRTtRQUNyQyxPQUFPQSxPQUFPLENBQUN3dkIsYUFBYSxDQUFDNWdCLFFBQVEsQ0FBQztNQUMxQztNQUNBLFNBQVNtZixZQUFZQSxDQUFDbmYsUUFBUSxFQUFFNU8sT0FBTyxFQUFFO1FBQ3JDLE9BQU9BLE9BQU8sQ0FBQ292QixhQUFhLENBQUN4Z0IsUUFBUSxDQUFDO01BQzFDO01BQ0EsU0FBU29mLGNBQWNBLENBQUNwZixRQUFRLEVBQUU1TyxPQUFPLEVBQUU7UUFDdkMsT0FBT0EsT0FBTyxDQUFDMHZCLGVBQWUsQ0FBQzlnQixRQUFRLENBQUM7TUFDNUM7TUFDQSxTQUFTc2YsbUJBQW1CQSxDQUFDdGYsUUFBUSxFQUFFNU8sT0FBTyxFQUFFO1FBQzVDLE9BQU9BLE9BQU8sQ0FBQ211QixvQkFBb0IsSUFBSWpnQixhQUFhO01BQ3hEO01BQ0EsU0FBU21oQixnQkFBZ0JBLENBQUEsRUFBRztRQUN4QixJQUFJTyxVQUFVLEdBQUcsRUFBRTtVQUNmQyxVQUFVLEdBQUcsRUFBRTtVQUNmQyxZQUFZLEdBQUcsRUFBRTtVQUNqQjdjLFdBQVcsR0FBRyxFQUFFO1VBQ2hCeFQsQ0FBQztVQUNENGQsQ0FBQztVQUNEaVIsSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDLENBQUM7UUFDdEIsS0FBSzd1QixDQUFDLEdBQUcsQ0FBQyxFQUFFNGQsQ0FBQyxHQUFHaVIsSUFBSSxDQUFDcnZCLE1BQU0sRUFBRVEsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFLEVBQUU1ZCxDQUFDLEVBQUU7VUFDckNvd0IsVUFBVSxDQUFDbHdCLElBQUksQ0FBQ3FQLFdBQVcsQ0FBQ3NmLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ3JELElBQUksQ0FBQyxDQUFDO1VBQzFDd3pCLFVBQVUsQ0FBQ2p3QixJQUFJLENBQUNxUCxXQUFXLENBQUNzZixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNnYyxJQUFJLENBQUMsQ0FBQztVQUMxQ3FVLFlBQVksQ0FBQ253QixJQUFJLENBQUNxUCxXQUFXLENBQUNzZixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNvdkIsTUFBTSxDQUFDLENBQUM7VUFDOUM1YixXQUFXLENBQUN0VCxJQUFJLENBQUNxUCxXQUFXLENBQUNzZixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNyRCxJQUFJLENBQUMsQ0FBQztVQUMzQzZXLFdBQVcsQ0FBQ3RULElBQUksQ0FBQ3FQLFdBQVcsQ0FBQ3NmLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2djLElBQUksQ0FBQyxDQUFDO1VBQzNDeEksV0FBVyxDQUFDdFQsSUFBSSxDQUFDcVAsV0FBVyxDQUFDc2YsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDb3ZCLE1BQU0sQ0FBQyxDQUFDO1FBQ2pEO1FBQ0EsSUFBSSxDQUFDVSxVQUFVLEdBQUcsSUFBSXJxQixNQUFNLENBQ3hCLElBQUksR0FBRytOLFdBQVcsQ0FBQ3hPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQ2xDLEdBQ0osQ0FBQztRQUNELElBQUksQ0FBQzZxQixjQUFjLEdBQUcsSUFBSXBxQixNQUFNLENBQzVCLElBQUksR0FBRzJxQixVQUFVLENBQUNwckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFDakMsR0FDSixDQUFDO1FBQ0QsSUFBSSxDQUFDZ3JCLGNBQWMsR0FBRyxJQUFJdnFCLE1BQU0sQ0FDNUIsSUFBSSxHQUFHMHFCLFVBQVUsQ0FBQ25yQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNqQyxHQUNKLENBQUM7UUFDRCxJQUFJLENBQUNrckIsZ0JBQWdCLEdBQUcsSUFBSXpxQixNQUFNLENBQzlCLElBQUksR0FBRzRxQixZQUFZLENBQUNyckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFDbkMsR0FDSixDQUFDO01BQ0w7TUFDQThDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7UUFDeEMsT0FBTyxJQUFJLENBQUNrWixRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUc7TUFDaEMsQ0FBQyxDQUFDO01BQ0ZsWixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO1FBQ3hDLE9BQU8sSUFBSSxDQUFDd29CLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRztNQUNuQyxDQUFDLENBQUM7TUFDRixTQUFTQyxzQkFBc0JBLENBQUN4b0IsTUFBTSxFQUFFeW9CLE1BQU0sRUFBRTtRQUM1QzFvQixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUNDLE1BQU0sRUFBRUEsTUFBTSxDQUFDdkksTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFZ3hCLE1BQU0sQ0FBQztNQUN6RDtNQUNBRCxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDO01BQzFDQSxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDO01BQzNDQSxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDO01BQzdDQSxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDO01BQzlDOWtCLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDO01BQzlCQSxZQUFZLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQztNQUNqQ1ksZUFBZSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7TUFDOUJBLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO01BQ2pDMkMsYUFBYSxDQUFDLEdBQUcsRUFBRU4sV0FBVyxDQUFDO01BQy9CTSxhQUFhLENBQUMsR0FBRyxFQUFFTixXQUFXLENBQUM7TUFDL0JNLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO01BQ3RDaUIsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7TUFDdENpQixhQUFhLENBQUMsTUFBTSxFQUFFVCxTQUFTLEVBQUVOLE1BQU0sQ0FBQztNQUN4Q2UsYUFBYSxDQUFDLE1BQU0sRUFBRVQsU0FBUyxFQUFFTixNQUFNLENBQUM7TUFDeENlLGFBQWEsQ0FBQyxPQUFPLEVBQUVSLFNBQVMsRUFBRU4sTUFBTSxDQUFDO01BQ3pDYyxhQUFhLENBQUMsT0FBTyxFQUFFUixTQUFTLEVBQUVOLE1BQU0sQ0FBQztNQUN6QzhCLGlCQUFpQixDQUNiLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQ2xDLFVBQVUvUSxLQUFLLEVBQUU0VixJQUFJLEVBQUUzUSxNQUFNLEVBQUU2RCxNQUFNLEVBQUU7UUFDbkM4TSxJQUFJLENBQUM5TSxNQUFNLENBQUNOLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBR3VGLEtBQUssQ0FBQy9OLEtBQUssQ0FBQztNQUM1QyxDQUNKLENBQUM7TUFDRCtRLGlCQUFpQixDQUNiLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUNaLFVBQVUvUSxLQUFLLEVBQUU0VixJQUFJLEVBQUUzUSxNQUFNLEVBQUU2RCxNQUFNLEVBQUU7UUFDbkM4TSxJQUFJLENBQUM5TSxNQUFNLENBQUMsR0FBR2xKLEtBQUssQ0FBQzRVLGlCQUFpQixDQUFDeFUsS0FBSyxDQUFDO01BQ2pELENBQ0osQ0FBQztNQUNELFNBQVN3eEIsY0FBY0EsQ0FBQ3h4QixLQUFLLEVBQUU7UUFDM0IsT0FBT3l4QixvQkFBb0IsQ0FBQ2p6QixJQUFJLENBQzVCLElBQUksRUFDSndCLEtBQUssRUFDTCxJQUFJLENBQUM0VixJQUFJLENBQUMsQ0FBQyxFQUNYLElBQUksQ0FBQ0MsT0FBTyxDQUFDLENBQUMsRUFDZCxJQUFJLENBQUMzTSxVQUFVLENBQUMsQ0FBQyxDQUFDc04sS0FBSyxDQUFDbEIsR0FBRyxFQUMzQixJQUFJLENBQUNwTSxVQUFVLENBQUMsQ0FBQyxDQUFDc04sS0FBSyxDQUFDakIsR0FDNUIsQ0FBQztNQUNMO01BQ0EsU0FBU21jLGlCQUFpQkEsQ0FBQzF4QixLQUFLLEVBQUU7UUFDOUIsT0FBT3l4QixvQkFBb0IsQ0FBQ2p6QixJQUFJLENBQzVCLElBQUksRUFDSndCLEtBQUssRUFDTCxJQUFJLENBQUMybEIsT0FBTyxDQUFDLENBQUMsRUFDZCxJQUFJLENBQUNnSixVQUFVLENBQUMsQ0FBQyxFQUNqQixDQUFDLEVBQ0QsQ0FDSixDQUFDO01BQ0w7TUFDQSxTQUFTZ0QsaUJBQWlCQSxDQUFBLEVBQUc7UUFDekIsT0FBT3RiLFdBQVcsQ0FBQyxJQUFJLENBQUMxSSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7TUFDekM7TUFDQSxTQUFTaWtCLHdCQUF3QkEsQ0FBQSxFQUFHO1FBQ2hDLE9BQU92YixXQUFXLENBQUMsSUFBSSxDQUFDZ2IsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO01BQ2hEO01BQ0EsU0FBU1EsY0FBY0EsQ0FBQSxFQUFHO1FBQ3RCLElBQUlDLFFBQVEsR0FBRyxJQUFJLENBQUM1b0IsVUFBVSxDQUFDLENBQUMsQ0FBQ3NOLEtBQUs7UUFDdEMsT0FBT0gsV0FBVyxDQUFDLElBQUksQ0FBQzFJLElBQUksQ0FBQyxDQUFDLEVBQUVta0IsUUFBUSxDQUFDeGMsR0FBRyxFQUFFd2MsUUFBUSxDQUFDdmMsR0FBRyxDQUFDO01BQy9EO01BQ0EsU0FBU3djLGtCQUFrQkEsQ0FBQSxFQUFHO1FBQzFCLElBQUlELFFBQVEsR0FBRyxJQUFJLENBQUM1b0IsVUFBVSxDQUFDLENBQUMsQ0FBQ3NOLEtBQUs7UUFDdEMsT0FBT0gsV0FBVyxDQUFDLElBQUksQ0FBQzBMLFFBQVEsQ0FBQyxDQUFDLEVBQUUrUCxRQUFRLENBQUN4YyxHQUFHLEVBQUV3YyxRQUFRLENBQUN2YyxHQUFHLENBQUM7TUFDbkU7TUFDQSxTQUFTa2Msb0JBQW9CQSxDQUFDenhCLEtBQUssRUFBRTRWLElBQUksRUFBRUMsT0FBTyxFQUFFUCxHQUFHLEVBQUVDLEdBQUcsRUFBRTtRQUMxRCxJQUFJeWMsV0FBVztRQUNmLElBQUloeUIsS0FBSyxJQUFJLElBQUksRUFBRTtVQUNmLE9BQU9tVyxVQUFVLENBQUMsSUFBSSxFQUFFYixHQUFHLEVBQUVDLEdBQUcsQ0FBQyxDQUFDNUgsSUFBSTtRQUMxQyxDQUFDLE1BQU07VUFDSHFrQixXQUFXLEdBQUczYixXQUFXLENBQUNyVyxLQUFLLEVBQUVzVixHQUFHLEVBQUVDLEdBQUcsQ0FBQztVQUMxQyxJQUFJSyxJQUFJLEdBQUdvYyxXQUFXLEVBQUU7WUFDcEJwYyxJQUFJLEdBQUdvYyxXQUFXO1VBQ3RCO1VBQ0EsT0FBT0MsVUFBVSxDQUFDenpCLElBQUksQ0FBQyxJQUFJLEVBQUV3QixLQUFLLEVBQUU0VixJQUFJLEVBQUVDLE9BQU8sRUFBRVAsR0FBRyxFQUFFQyxHQUFHLENBQUM7UUFDaEU7TUFDSjtNQUNBLFNBQVMwYyxVQUFVQSxDQUFDbFEsUUFBUSxFQUFFbk0sSUFBSSxFQUFFQyxPQUFPLEVBQUVQLEdBQUcsRUFBRUMsR0FBRyxFQUFFO1FBQ25ELElBQUkyYyxhQUFhLEdBQUd2YyxrQkFBa0IsQ0FDOUJvTSxRQUFRLEVBQ1JuTSxJQUFJLEVBQ0pDLE9BQU8sRUFDUFAsR0FBRyxFQUNIQyxHQUNKLENBQUM7VUFDRGhILElBQUksR0FBRzBHLGFBQWEsQ0FDaEJpZCxhQUFhLENBQUN2a0IsSUFBSSxFQUNsQixDQUFDLEVBQ0R1a0IsYUFBYSxDQUFDbGMsU0FDbEIsQ0FBQztRQUNMLElBQUksQ0FBQ3JJLElBQUksQ0FBQ1ksSUFBSSxDQUFDNEcsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUM3RyxLQUFLLENBQUNDLElBQUksQ0FBQzZTLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDN1MsSUFBSSxDQUFDQSxJQUFJLENBQUM4UyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sSUFBSTtNQUNmO01BQ0F4WSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDO01BQ3ZDMkQsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUM7TUFDNUJZLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO01BQzdCMkMsYUFBYSxDQUFDLEdBQUcsRUFBRWxCLE1BQU0sQ0FBQztNQUMxQmdDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtRQUN2Q0EsS0FBSyxDQUFDNkgsS0FBSyxDQUFDLEdBQUcsQ0FBQ3RELEtBQUssQ0FBQy9OLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO01BQ3pDLENBQUMsQ0FBQztNQUNGLFNBQVNteUIsYUFBYUEsQ0FBQ255QixLQUFLLEVBQUU7UUFDMUIsT0FBT0EsS0FBSyxJQUFJLElBQUksR0FDZGtJLElBQUksQ0FBQzJGLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQ1MsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQ2pDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUN0TyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBSSxJQUFJLENBQUNzTyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUUsQ0FBQztNQUMxRDtNQUNBekYsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDO01BQzVDMkQsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7TUFDekJZLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO01BQzFCMkMsYUFBYSxDQUFDLEdBQUcsRUFBRWIsU0FBUyxDQUFDO01BQzdCYSxhQUFhLENBQUMsSUFBSSxFQUFFYixTQUFTLEVBQUVKLE1BQU0sQ0FBQztNQUN0Q2lCLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVUcsUUFBUSxFQUFFNU8sT0FBTyxFQUFFO1FBQzdDLE9BQU80TyxRQUFRLEdBQ1Q1TyxPQUFPLENBQUNtRix1QkFBdUIsSUFBSW5GLE9BQU8sQ0FBQ3FGLGFBQWEsR0FDeERyRixPQUFPLENBQUNpRiw4QkFBOEI7TUFDaEQsQ0FBQyxDQUFDO01BQ0ZzSyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUVTLElBQUksQ0FBQztNQUNoQ1QsYUFBYSxDQUFDLElBQUksRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFO1FBQ3hDQSxLQUFLLENBQUM4SCxJQUFJLENBQUMsR0FBR3ZELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3FKLEtBQUssQ0FBQzZGLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ2xELENBQUMsQ0FBQztNQUNGLElBQUlrakIsZ0JBQWdCLEdBQUdqa0IsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7TUFDL0N0RixjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUM7TUFDdkQyRCxZQUFZLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQztNQUNoQ1ksZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7TUFDL0IyQyxhQUFhLENBQUMsS0FBSyxFQUFFVixTQUFTLENBQUM7TUFDL0JVLGFBQWEsQ0FBQyxNQUFNLEVBQUVoQixNQUFNLENBQUM7TUFDN0I4QixhQUFhLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTtRQUMzREEsTUFBTSxDQUFDNGMsVUFBVSxHQUFHOVQsS0FBSyxDQUFDL04sS0FBSyxDQUFDO01BQ3BDLENBQUMsQ0FBQztNQUNGLFNBQVNxeUIsZUFBZUEsQ0FBQ3J5QixLQUFLLEVBQUU7UUFDNUIsSUFBSWdXLFNBQVMsR0FDVDlOLElBQUksQ0FBQ21lLEtBQUssQ0FDTixDQUFDLElBQUksQ0FBQ21CLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQ3hCLElBQUksQ0FBQ2xFLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQzVCLEtBQ1IsQ0FBQyxHQUFHLENBQUM7UUFDVCxPQUFPMXJCLEtBQUssSUFBSSxJQUFJLEdBQ2RnVyxTQUFTLEdBQ1QsSUFBSSxDQUFDYSxHQUFHLENBQUM3VyxLQUFLLEdBQUdnVyxTQUFTLEVBQUUsR0FBRyxDQUFDO01BQzFDO01BQ0FuTixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUM7TUFDM0MyRCxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztNQUMzQlksZUFBZSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7TUFDN0IyQyxhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7TUFDN0JhLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO01BQ3RDK0IsYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFVyxNQUFNLENBQUM7TUFDbEMsSUFBSThnQixZQUFZLEdBQUdua0IsVUFBVSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7TUFDL0N0RixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUM7TUFDM0MyRCxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztNQUMzQlksZUFBZSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7TUFDN0IyQyxhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7TUFDN0JhLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO01BQ3RDK0IsYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFWSxNQUFNLENBQUM7TUFDbEMsSUFBSThnQixZQUFZLEdBQUdwa0IsVUFBVSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7TUFDL0N0RixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWTtRQUNsQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUNvYixXQUFXLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztNQUN2QyxDQUFDLENBQUM7TUFDRnBiLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7UUFDeEMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDb2IsV0FBVyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7TUFDdEMsQ0FBQyxDQUFDO01BQ0ZwYixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFhLENBQUM7TUFDL0NBLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7UUFDMUMsT0FBTyxJQUFJLENBQUNvYixXQUFXLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDbEMsQ0FBQyxDQUFDO01BQ0ZwYixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO1FBQzNDLE9BQU8sSUFBSSxDQUFDb2IsV0FBVyxDQUFDLENBQUMsR0FBRyxHQUFHO01BQ25DLENBQUMsQ0FBQztNQUNGcGIsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWTtRQUM1QyxPQUFPLElBQUksQ0FBQ29iLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRztNQUNuQyxDQUFDLENBQUM7TUFDRnBiLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7UUFDN0MsT0FBTyxJQUFJLENBQUNvYixXQUFXLENBQUMsQ0FBQyxHQUFHLEdBQUc7TUFDbkMsQ0FBQyxDQUFDO01BQ0ZwYixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO1FBQzlDLE9BQU8sSUFBSSxDQUFDb2IsV0FBVyxDQUFDLENBQUMsR0FBRyxHQUFHO01BQ25DLENBQUMsQ0FBQztNQUNGcGIsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWTtRQUMvQyxPQUFPLElBQUksQ0FBQ29iLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRztNQUNuQyxDQUFDLENBQUM7TUFDRnpYLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO01BQ2pDWSxlQUFlLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztNQUNsQzJDLGFBQWEsQ0FBQyxHQUFHLEVBQUVWLFNBQVMsRUFBRVIsTUFBTSxDQUFDO01BQ3JDa0IsYUFBYSxDQUFDLElBQUksRUFBRVYsU0FBUyxFQUFFUCxNQUFNLENBQUM7TUFDdENpQixhQUFhLENBQUMsS0FBSyxFQUFFVixTQUFTLEVBQUVOLE1BQU0sQ0FBQztNQUN2QyxJQUFJeWpCLEtBQUssRUFBRUMsaUJBQWlCO01BQzVCLEtBQUtELEtBQUssR0FBRyxNQUFNLEVBQUVBLEtBQUssQ0FBQ2p5QixNQUFNLElBQUksQ0FBQyxFQUFFaXlCLEtBQUssSUFBSSxHQUFHLEVBQUU7UUFDbER6aUIsYUFBYSxDQUFDeWlCLEtBQUssRUFBRWhqQixhQUFhLENBQUM7TUFDdkM7TUFDQSxTQUFTa2pCLE9BQU9BLENBQUMxeUIsS0FBSyxFQUFFd0osS0FBSyxFQUFFO1FBQzNCQSxLQUFLLENBQUNrSSxXQUFXLENBQUMsR0FBRzNELEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRy9OLEtBQUssSUFBSSxHQUFHLENBQUM7TUFDcEQ7TUFDQSxLQUFLd3lCLEtBQUssR0FBRyxHQUFHLEVBQUVBLEtBQUssQ0FBQ2p5QixNQUFNLElBQUksQ0FBQyxFQUFFaXlCLEtBQUssSUFBSSxHQUFHLEVBQUU7UUFDL0MzaEIsYUFBYSxDQUFDMmhCLEtBQUssRUFBRUUsT0FBTyxDQUFDO01BQ2pDO01BQ0FELGlCQUFpQixHQUFHdGtCLFVBQVUsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDO01BQ3JEdEYsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQztNQUNyQ0EsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQztNQUN0QyxTQUFTOHBCLFdBQVdBLENBQUEsRUFBRztRQUNuQixPQUFPLElBQUksQ0FBQzl0QixNQUFNLEdBQUcsS0FBSyxHQUFHLEVBQUU7TUFDbkM7TUFDQSxTQUFTK3RCLFdBQVdBLENBQUEsRUFBRztRQUNuQixPQUFPLElBQUksQ0FBQy90QixNQUFNLEdBQUcsNEJBQTRCLEdBQUcsRUFBRTtNQUMxRDtNQUNBLElBQUlndUIsS0FBSyxHQUFHN3RCLE1BQU0sQ0FBQzlJLFNBQVM7TUFDNUIyMkIsS0FBSyxDQUFDaGMsR0FBRyxHQUFHQSxHQUFHO01BQ2ZnYyxLQUFLLENBQUNyckIsUUFBUSxHQUFHOGpCLFVBQVU7TUFDM0J1SCxLQUFLLENBQUNyTCxLQUFLLEdBQUdBLEtBQUs7TUFDbkJxTCxLQUFLLENBQUN4SCxJQUFJLEdBQUdBLElBQUk7TUFDakJ3SCxLQUFLLENBQUMvRyxLQUFLLEdBQUdBLEtBQUs7TUFDbkIrRyxLQUFLLENBQUNqSCxNQUFNLEdBQUdBLE1BQU07TUFDckJpSCxLQUFLLENBQUMvMEIsSUFBSSxHQUFHQSxJQUFJO01BQ2pCKzBCLEtBQUssQ0FBQ2hGLE9BQU8sR0FBR0EsT0FBTztNQUN2QmdGLEtBQUssQ0FBQ2gxQixFQUFFLEdBQUdBLEVBQUU7TUFDYmcxQixLQUFLLENBQUMvRSxLQUFLLEdBQUdBLEtBQUs7TUFDbkIrRSxLQUFLLENBQUNyMkIsR0FBRyxHQUFHaVMsU0FBUztNQUNyQm9rQixLQUFLLENBQUMzRCxTQUFTLEdBQUdBLFNBQVM7TUFDM0IyRCxLQUFLLENBQUNqSixPQUFPLEdBQUdBLE9BQU87TUFDdkJpSixLQUFLLENBQUNoSixRQUFRLEdBQUdBLFFBQVE7TUFDekJnSixLQUFLLENBQUM5RyxTQUFTLEdBQUdBLFNBQVM7TUFDM0I4RyxLQUFLLENBQUMxRyxNQUFNLEdBQUdBLE1BQU07TUFDckIwRyxLQUFLLENBQUN4RyxhQUFhLEdBQUdBLGFBQWE7TUFDbkN3RyxLQUFLLENBQUN2RyxjQUFjLEdBQUdBLGNBQWM7TUFDckN1RyxLQUFLLENBQUMzdkIsT0FBTyxHQUFHOHJCLFNBQVM7TUFDekI2RCxLQUFLLENBQUM3RSxJQUFJLEdBQUdBLElBQUk7TUFDakI2RSxLQUFLLENBQUM1RixNQUFNLEdBQUdBLE1BQU07TUFDckI0RixLQUFLLENBQUMzcEIsVUFBVSxHQUFHQSxVQUFVO01BQzdCMnBCLEtBQUssQ0FBQ3RxQixHQUFHLEdBQUdrYyxZQUFZO01BQ3hCb08sS0FBSyxDQUFDamYsR0FBRyxHQUFHMlEsWUFBWTtNQUN4QnNPLEtBQUssQ0FBQzVELFlBQVksR0FBR0EsWUFBWTtNQUNqQzRELEtBQUssQ0FBQ3hzQixHQUFHLEdBQUdxSSxTQUFTO01BQ3JCbWtCLEtBQUssQ0FBQ25ILE9BQU8sR0FBR0EsT0FBTztNQUN2Qm1ILEtBQUssQ0FBQ3ZLLFFBQVEsR0FBR0EsUUFBUTtNQUN6QnVLLEtBQUssQ0FBQ2hLLE9BQU8sR0FBR0EsT0FBTztNQUN2QmdLLEtBQUssQ0FBQ2hFLFFBQVEsR0FBR0EsUUFBUTtNQUN6QmdFLEtBQUssQ0FBQ3pGLE1BQU0sR0FBR0EsTUFBTTtNQUNyQnlGLEtBQUssQ0FBQzNGLFdBQVcsR0FBR0EsV0FBVztNQUMvQjJGLEtBQUssQ0FBQ3hGLE9BQU8sR0FBR0EsT0FBTztNQUN2QixJQUFJLE9BQU95RixNQUFNLEtBQUssV0FBVyxJQUFJQSxNQUFNLE9BQUksSUFBSSxJQUFJLEVBQUU7UUFDckRELEtBQUssQ0FBQ0MsTUFBTSxPQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxHQUFHLFlBQVk7VUFDMUQsT0FBTyxTQUFTLEdBQUcsSUFBSSxDQUFDbEgsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHO1FBQzFDLENBQUM7TUFDTDtNQUNBaUgsS0FBSyxDQUFDOUQsTUFBTSxHQUFHQSxNQUFNO01BQ3JCOEQsS0FBSyxDQUFDM3lCLFFBQVEsR0FBR0EsUUFBUTtNQUN6QjJ5QixLQUFLLENBQUNqRSxJQUFJLEdBQUdBLElBQUk7TUFDakJpRSxLQUFLLENBQUMxeEIsT0FBTyxHQUFHQSxPQUFPO01BQ3ZCMHhCLEtBQUssQ0FBQzFELFlBQVksR0FBR0EsWUFBWTtNQUNqQzBELEtBQUssQ0FBQzNDLE9BQU8sR0FBR0ksVUFBVTtNQUMxQnVDLEtBQUssQ0FBQ0UsU0FBUyxHQUFHeEMsWUFBWTtNQUM5QnNDLEtBQUssQ0FBQ0csT0FBTyxHQUFHeEMsVUFBVTtNQUMxQnFDLEtBQUssQ0FBQ0ksT0FBTyxHQUFHeEMsVUFBVTtNQUMxQm9DLEtBQUssQ0FBQ2xsQixJQUFJLEdBQUdnSCxVQUFVO01BQ3ZCa2UsS0FBSyxDQUFDbmxCLFVBQVUsR0FBR2tILGFBQWE7TUFDaENpZSxLQUFLLENBQUM5USxRQUFRLEdBQUd5UCxjQUFjO01BQy9CcUIsS0FBSyxDQUFDeEIsV0FBVyxHQUFHSyxpQkFBaUI7TUFDckNtQixLQUFLLENBQUNyTixPQUFPLEdBQUdxTixLQUFLLENBQUN0TixRQUFRLEdBQUc0TSxhQUFhO01BQzlDVSxLQUFLLENBQUN2a0IsS0FBSyxHQUFHdUYsV0FBVztNQUN6QmdmLEtBQUssQ0FBQ3JrQixXQUFXLEdBQUdzRixjQUFjO01BQ2xDK2UsS0FBSyxDQUFDamQsSUFBSSxHQUFHaWQsS0FBSyxDQUFDSyxLQUFLLEdBQUd0YyxVQUFVO01BQ3JDaWMsS0FBSyxDQUFDbE4sT0FBTyxHQUFHa04sS0FBSyxDQUFDTSxRQUFRLEdBQUdyYyxhQUFhO01BQzlDK2IsS0FBSyxDQUFDeGMsV0FBVyxHQUFHd2IsY0FBYztNQUNsQ2dCLEtBQUssQ0FBQ08sZUFBZSxHQUFHckIsa0JBQWtCO01BQzFDYyxLQUFLLENBQUNRLGNBQWMsR0FBRzFCLGlCQUFpQjtNQUN4Q2tCLEtBQUssQ0FBQ1MscUJBQXFCLEdBQUcxQix3QkFBd0I7TUFDdERpQixLQUFLLENBQUN0a0IsSUFBSSxHQUFHNmpCLGdCQUFnQjtNQUM3QlMsS0FBSyxDQUFDMWEsR0FBRyxHQUFHMGEsS0FBSyxDQUFDVSxJQUFJLEdBQUd2YSxlQUFlO01BQ3hDNlosS0FBSyxDQUFDaGQsT0FBTyxHQUFHcUQscUJBQXFCO01BQ3JDMlosS0FBSyxDQUFDbEUsVUFBVSxHQUFHeFYsa0JBQWtCO01BQ3JDMFosS0FBSyxDQUFDN2MsU0FBUyxHQUFHcWMsZUFBZTtNQUNqQ1EsS0FBSyxDQUFDN1AsSUFBSSxHQUFHNlAsS0FBSyxDQUFDN1ksS0FBSyxHQUFHaUIsVUFBVTtNQUNyQzRYLEtBQUssQ0FBQzlPLE1BQU0sR0FBRzhPLEtBQUssQ0FBQzNZLE9BQU8sR0FBR29ZLFlBQVk7TUFDM0NPLEtBQUssQ0FBQzdPLE1BQU0sR0FBRzZPLEtBQUssQ0FBQzFZLE9BQU8sR0FBR29ZLFlBQVk7TUFDM0NNLEtBQUssQ0FBQzVPLFdBQVcsR0FBRzRPLEtBQUssQ0FBQ3hKLFlBQVksR0FBR29KLGlCQUFpQjtNQUMxREksS0FBSyxDQUFDOUwsU0FBUyxHQUFHYyxZQUFZO01BQzlCZ0wsS0FBSyxDQUFDcHhCLEdBQUcsR0FBRzJtQixjQUFjO01BQzFCeUssS0FBSyxDQUFDbkwsS0FBSyxHQUFHVyxnQkFBZ0I7TUFDOUJ3SyxLQUFLLENBQUNXLFNBQVMsR0FBR2pMLHVCQUF1QjtNQUN6Q3NLLEtBQUssQ0FBQ3BLLG9CQUFvQixHQUFHQSxvQkFBb0I7TUFDakRvSyxLQUFLLENBQUNZLEtBQUssR0FBRy9LLG9CQUFvQjtNQUNsQ21LLEtBQUssQ0FBQy9KLE9BQU8sR0FBR0EsT0FBTztNQUN2QitKLEtBQUssQ0FBQzlKLFdBQVcsR0FBR0EsV0FBVztNQUMvQjhKLEtBQUssQ0FBQzdKLEtBQUssR0FBR0EsS0FBSztNQUNuQjZKLEtBQUssQ0FBQ3ZPLEtBQUssR0FBRzBFLEtBQUs7TUFDbkI2SixLQUFLLENBQUNhLFFBQVEsR0FBR2YsV0FBVztNQUM1QkUsS0FBSyxDQUFDYyxRQUFRLEdBQUdmLFdBQVc7TUFDNUJDLEtBQUssQ0FBQ2UsS0FBSyxHQUFHcHVCLFNBQVMsQ0FDbkIsaURBQWlELEVBQ2pENHNCLGdCQUNKLENBQUM7TUFDRFMsS0FBSyxDQUFDNWdCLE1BQU0sR0FBR3pNLFNBQVMsQ0FDcEIsa0RBQWtELEVBQ2xEcU8sV0FDSixDQUFDO01BQ0RnZixLQUFLLENBQUMvRCxLQUFLLEdBQUd0cEIsU0FBUyxDQUNuQixnREFBZ0QsRUFDaERtUCxVQUNKLENBQUM7TUFDRGtlLEtBQUssQ0FBQ3ZGLElBQUksR0FBRzluQixTQUFTLENBQ2xCLDBHQUEwRyxFQUMxRzJpQixVQUNKLENBQUM7TUFDRDBLLEtBQUssQ0FBQ2dCLFlBQVksR0FBR3J1QixTQUFTLENBQzFCLHlHQUF5RyxFQUN6R21qQiwyQkFDSixDQUFDO01BQ0QsU0FBU21MLFVBQVVBLENBQUM5ekIsS0FBSyxFQUFFO1FBQ3ZCLE9BQU9zaUIsV0FBVyxDQUFDdGlCLEtBQUssR0FBRyxHQUFHLENBQUM7TUFDbkM7TUFDQSxTQUFTK3pCLFlBQVlBLENBQUEsRUFBRztRQUNwQixPQUFPelIsV0FBVyxDQUFDM2xCLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQyxDQUFDNDJCLFNBQVMsQ0FBQyxDQUFDO01BQ3pEO01BQ0EsU0FBU1Esa0JBQWtCQSxDQUFDOW5CLE1BQU0sRUFBRTtRQUNoQyxPQUFPQSxNQUFNO01BQ2pCO01BQ0EsSUFBSStuQixPQUFPLEdBQUdsdEIsTUFBTSxDQUFDN0ssU0FBUztNQUM5QiszQixPQUFPLENBQUN6c0IsUUFBUSxHQUFHQSxRQUFRO01BQzNCeXNCLE9BQU8sQ0FBQ25xQixjQUFjLEdBQUdBLGNBQWM7TUFDdkNtcUIsT0FBTyxDQUFDdHFCLFdBQVcsR0FBR0EsV0FBVztNQUNqQ3NxQixPQUFPLENBQUM5cUIsT0FBTyxHQUFHQSxPQUFPO01BQ3pCOHFCLE9BQU8sQ0FBQzdQLFFBQVEsR0FBRzRQLGtCQUFrQjtNQUNyQ0MsT0FBTyxDQUFDdEcsVUFBVSxHQUFHcUcsa0JBQWtCO01BQ3ZDQyxPQUFPLENBQUNqb0IsWUFBWSxHQUFHQSxZQUFZO01BQ25DaW9CLE9BQU8sQ0FBQzVuQixVQUFVLEdBQUdBLFVBQVU7TUFDL0I0bkIsT0FBTyxDQUFDNXRCLEdBQUcsR0FBR0EsR0FBRztNQUNqQjR0QixPQUFPLENBQUNyRSxJQUFJLEdBQUdELFVBQVU7TUFDekJzRSxPQUFPLENBQUMxRSxTQUFTLEdBQUdVLGVBQWU7TUFDbkNnRSxPQUFPLENBQUNsUixlQUFlLEdBQUdxTixxQkFBcUI7TUFDL0M2RCxPQUFPLENBQUNuRCxhQUFhLEdBQUdBLGFBQWE7TUFDckNtRCxPQUFPLENBQUN2RCxhQUFhLEdBQUdBLGFBQWE7TUFDckN1RCxPQUFPLENBQUNqRCxlQUFlLEdBQUdBLGVBQWU7TUFDekNpRCxPQUFPLENBQUNoaUIsTUFBTSxHQUFHVSxZQUFZO01BQzdCc2hCLE9BQU8sQ0FBQ2ppQixXQUFXLEdBQUdjLGlCQUFpQjtNQUN2Q21oQixPQUFPLENBQUM3aEIsV0FBVyxHQUFHb0IsaUJBQWlCO01BQ3ZDeWdCLE9BQU8sQ0FBQzloQixXQUFXLEdBQUdBLFdBQVc7TUFDakM4aEIsT0FBTyxDQUFDL2hCLGdCQUFnQixHQUFHQSxnQkFBZ0I7TUFDM0MraEIsT0FBTyxDQUFDcmUsSUFBSSxHQUFHVyxVQUFVO01BQ3pCMGQsT0FBTyxDQUFDQyxjQUFjLEdBQUd2ZCxvQkFBb0I7TUFDN0NzZCxPQUFPLENBQUNFLGNBQWMsR0FBR3pkLG9CQUFvQjtNQUM3Q3VkLE9BQU8sQ0FBQ2hkLFFBQVEsR0FBR2dCLGNBQWM7TUFDakNnYyxPQUFPLENBQUNsZCxXQUFXLEdBQUd1QixpQkFBaUI7TUFDdkMyYixPQUFPLENBQUNqZCxhQUFhLEdBQUdvQixtQkFBbUI7TUFDM0M2YixPQUFPLENBQUM1YyxhQUFhLEdBQUd3QixtQkFBbUI7TUFDM0NvYixPQUFPLENBQUM3YyxhQUFhLEdBQUdBLGFBQWE7TUFDckM2YyxPQUFPLENBQUM5YyxrQkFBa0IsR0FBR0Esa0JBQWtCO01BQy9DOGMsT0FBTyxDQUFDL2MsZ0JBQWdCLEdBQUdBLGdCQUFnQjtNQUMzQytjLE9BQU8sQ0FBQ3haLElBQUksR0FBR0ssVUFBVTtNQUN6Qm1aLE9BQU8sQ0FBQ3p4QixRQUFRLEdBQUcwWSxjQUFjO01BQ2pDLFNBQVNrWixLQUFLQSxDQUFDL3lCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFO1FBQzFDLElBQUlqekIsT0FBTyxHQUFHdWIsU0FBUyxDQUFDLENBQUM7VUFDckJwYixHQUFHLEdBQUdMLFNBQVMsQ0FBQyxDQUFDLENBQUNpRixHQUFHLENBQUNrdUIsTUFBTSxFQUFFRixLQUFLLENBQUM7UUFDeEMsT0FBTy95QixPQUFPLENBQUNnekIsS0FBSyxDQUFDLENBQUM3eUIsR0FBRyxFQUFFSixPQUFPLENBQUM7TUFDdkM7TUFDQSxTQUFTbXpCLGNBQWNBLENBQUNuekIsT0FBTyxFQUFFZ3pCLEtBQUssRUFBRUMsS0FBSyxFQUFFO1FBQzNDLElBQUk1ekIsUUFBUSxDQUFDVyxPQUFPLENBQUMsRUFBRTtVQUNuQmd6QixLQUFLLEdBQUdoekIsT0FBTztVQUNmQSxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BCO1FBQ0FBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLEVBQUU7UUFDdkIsSUFBSWd6QixLQUFLLElBQUksSUFBSSxFQUFFO1VBQ2YsT0FBT0QsS0FBSyxDQUFDL3lCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUVDLEtBQUssRUFBRSxPQUFPLENBQUM7UUFDaEQ7UUFDQSxJQUFJdnpCLENBQUM7VUFDRDB6QixHQUFHLEdBQUcsRUFBRTtRQUNaLEtBQUsxekIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7VUFDckIwekIsR0FBRyxDQUFDMXpCLENBQUMsQ0FBQyxHQUFHcXpCLEtBQUssQ0FBQy95QixPQUFPLEVBQUVOLENBQUMsRUFBRXV6QixLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQzlDO1FBQ0EsT0FBT0csR0FBRztNQUNkO01BQ0EsU0FBU0MsZ0JBQWdCQSxDQUFDQyxZQUFZLEVBQUV0ekIsT0FBTyxFQUFFZ3pCLEtBQUssRUFBRUMsS0FBSyxFQUFFO1FBQzNELElBQUksT0FBT0ssWUFBWSxLQUFLLFNBQVMsRUFBRTtVQUNuQyxJQUFJajBCLFFBQVEsQ0FBQ1csT0FBTyxDQUFDLEVBQUU7WUFDbkJnekIsS0FBSyxHQUFHaHpCLE9BQU87WUFDZkEsT0FBTyxHQUFHLEtBQUssQ0FBQztVQUNwQjtVQUNBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFFO1FBQzNCLENBQUMsTUFBTTtVQUNIQSxPQUFPLEdBQUdzekIsWUFBWTtVQUN0Qk4sS0FBSyxHQUFHaHpCLE9BQU87VUFDZnN6QixZQUFZLEdBQUcsS0FBSztVQUNwQixJQUFJajBCLFFBQVEsQ0FBQ1csT0FBTyxDQUFDLEVBQUU7WUFDbkJnekIsS0FBSyxHQUFHaHpCLE9BQU87WUFDZkEsT0FBTyxHQUFHLEtBQUssQ0FBQztVQUNwQjtVQUNBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFFO1FBQzNCO1FBQ0EsSUFBSUMsT0FBTyxHQUFHdWIsU0FBUyxDQUFDLENBQUM7VUFDckIrWCxLQUFLLEdBQUdELFlBQVksR0FBR3J6QixPQUFPLENBQUNrVixLQUFLLENBQUNsQixHQUFHLEdBQUcsQ0FBQztVQUM1Q3ZVLENBQUM7VUFDRDB6QixHQUFHLEdBQUcsRUFBRTtRQUNaLElBQUlKLEtBQUssSUFBSSxJQUFJLEVBQUU7VUFDZixPQUFPRCxLQUFLLENBQUMveUIsT0FBTyxFQUFFLENBQUNnekIsS0FBSyxHQUFHTyxLQUFLLElBQUksQ0FBQyxFQUFFTixLQUFLLEVBQUUsS0FBSyxDQUFDO1FBQzVEO1FBQ0EsS0FBS3Z6QixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtVQUNwQjB6QixHQUFHLENBQUMxekIsQ0FBQyxDQUFDLEdBQUdxekIsS0FBSyxDQUFDL3lCLE9BQU8sRUFBRSxDQUFDTixDQUFDLEdBQUc2ekIsS0FBSyxJQUFJLENBQUMsRUFBRU4sS0FBSyxFQUFFLEtBQUssQ0FBQztRQUMxRDtRQUNBLE9BQU9HLEdBQUc7TUFDZDtNQUNBLFNBQVNJLFVBQVVBLENBQUN4ekIsT0FBTyxFQUFFZ3pCLEtBQUssRUFBRTtRQUNoQyxPQUFPRyxjQUFjLENBQUNuekIsT0FBTyxFQUFFZ3pCLEtBQUssRUFBRSxRQUFRLENBQUM7TUFDbkQ7TUFDQSxTQUFTUyxlQUFlQSxDQUFDenpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUU7UUFDckMsT0FBT0csY0FBYyxDQUFDbnpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUUsYUFBYSxDQUFDO01BQ3hEO01BQ0EsU0FBU1UsWUFBWUEsQ0FBQ0osWUFBWSxFQUFFdHpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUU7UUFDaEQsT0FBT0ssZ0JBQWdCLENBQ25CQyxZQUFZLEVBQ1p0ekIsT0FBTyxFQUNQZ3pCLEtBQUssRUFDTCxVQUNKLENBQUM7TUFDTDtNQUNBLFNBQVNXLGlCQUFpQkEsQ0FBQ0wsWUFBWSxFQUFFdHpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUU7UUFDckQsT0FBT0ssZ0JBQWdCLENBQ25CQyxZQUFZLEVBQ1p0ekIsT0FBTyxFQUNQZ3pCLEtBQUssRUFDTCxlQUNKLENBQUM7TUFDTDtNQUNBLFNBQVNZLGVBQWVBLENBQUNOLFlBQVksRUFBRXR6QixPQUFPLEVBQUVnekIsS0FBSyxFQUFFO1FBQ25ELE9BQU9LLGdCQUFnQixDQUNuQkMsWUFBWSxFQUNadHpCLE9BQU8sRUFDUGd6QixLQUFLLEVBQ0wsYUFDSixDQUFDO01BQ0w7TUFDQTNYLGtCQUFrQixDQUFDLElBQUksRUFBRTtRQUNyQmtULElBQUksRUFBRSxDQUNGO1VBQ0lFLEtBQUssRUFBRSxZQUFZO1VBQ25CQyxLQUFLLEVBQUVDLFFBQVE7VUFDZnBKLE1BQU0sRUFBRSxDQUFDO1VBQ1RscEIsSUFBSSxFQUFFLGFBQWE7VUFDbkJ5eUIsTUFBTSxFQUFFLElBQUk7VUFDWnBULElBQUksRUFBRTtRQUNWLENBQUMsRUFDRDtVQUNJK1MsS0FBSyxFQUFFLFlBQVk7VUFDbkJDLEtBQUssRUFBRSxDQUFDQyxRQUFRO1VBQ2hCcEosTUFBTSxFQUFFLENBQUM7VUFDVGxwQixJQUFJLEVBQUUsZUFBZTtVQUNyQnl5QixNQUFNLEVBQUUsSUFBSTtVQUNacFQsSUFBSSxFQUFFO1FBQ1YsQ0FBQyxDQUNKO1FBQ0R4QixzQkFBc0IsRUFBRSxzQkFBc0I7UUFDOUNwUyxPQUFPLEVBQUUsU0FBQUEsUUFBVXJCLE1BQU0sRUFBRTtVQUN2QixJQUFJcEwsQ0FBQyxHQUFHb0wsTUFBTSxHQUFHLEVBQUU7WUFDZkgsTUFBTSxHQUNGb0csS0FBSyxDQUFFakcsTUFBTSxHQUFHLEdBQUcsR0FBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQzFCLElBQUksR0FDSnBMLENBQUMsS0FBSyxDQUFDLEdBQ1AsSUFBSSxHQUNKQSxDQUFDLEtBQUssQ0FBQyxHQUNQLElBQUksR0FDSkEsQ0FBQyxLQUFLLENBQUMsR0FDUCxJQUFJLEdBQ0osSUFBSTtVQUNsQixPQUFPb0wsTUFBTSxHQUFHSCxNQUFNO1FBQzFCO01BQ0osQ0FBQyxDQUFDO01BQ0YvSCxLQUFLLENBQUNvdUIsSUFBSSxHQUFHeG9CLFNBQVMsQ0FDbEIsdURBQXVELEVBQ3ZEa1gsa0JBQ0osQ0FBQztNQUNEOWMsS0FBSyxDQUFDczFCLFFBQVEsR0FBRzF2QixTQUFTLENBQ3RCLCtEQUErRCxFQUMvRHFYLFNBQ0osQ0FBQztNQUNELElBQUlzWSxPQUFPLEdBQUdqdEIsSUFBSSxDQUFDQyxHQUFHO01BQ3RCLFNBQVNBLEdBQUdBLENBQUEsRUFBRztRQUNYLElBQUl5VSxJQUFJLEdBQUcsSUFBSSxDQUFDcUosS0FBSztRQUNyQixJQUFJLENBQUNGLGFBQWEsR0FBR29QLE9BQU8sQ0FBQyxJQUFJLENBQUNwUCxhQUFhLENBQUM7UUFDaEQsSUFBSSxDQUFDQyxLQUFLLEdBQUdtUCxPQUFPLENBQUMsSUFBSSxDQUFDblAsS0FBSyxDQUFDO1FBQ2hDLElBQUksQ0FBQ3BULE9BQU8sR0FBR3VpQixPQUFPLENBQUMsSUFBSSxDQUFDdmlCLE9BQU8sQ0FBQztRQUNwQ2dLLElBQUksQ0FBQ3lNLFlBQVksR0FBRzhMLE9BQU8sQ0FBQ3ZZLElBQUksQ0FBQ3lNLFlBQVksQ0FBQztRQUM5Q3pNLElBQUksQ0FBQ3pDLE9BQU8sR0FBR2diLE9BQU8sQ0FBQ3ZZLElBQUksQ0FBQ3pDLE9BQU8sQ0FBQztRQUNwQ3lDLElBQUksQ0FBQzFDLE9BQU8sR0FBR2liLE9BQU8sQ0FBQ3ZZLElBQUksQ0FBQzFDLE9BQU8sQ0FBQztRQUNwQzBDLElBQUksQ0FBQzVDLEtBQUssR0FBR21iLE9BQU8sQ0FBQ3ZZLElBQUksQ0FBQzVDLEtBQUssQ0FBQztRQUNoQzRDLElBQUksQ0FBQzNLLE1BQU0sR0FBR2tqQixPQUFPLENBQUN2WSxJQUFJLENBQUMzSyxNQUFNLENBQUM7UUFDbEMySyxJQUFJLENBQUNrUyxLQUFLLEdBQUdxRyxPQUFPLENBQUN2WSxJQUFJLENBQUNrUyxLQUFLLENBQUM7UUFDaEMsT0FBTyxJQUFJO01BQ2Y7TUFDQSxTQUFTc0csYUFBYUEsQ0FBQy9QLFFBQVEsRUFBRXJsQixLQUFLLEVBQUV6QixLQUFLLEVBQUV3ckIsU0FBUyxFQUFFO1FBQ3RELElBQUl2RixLQUFLLEdBQUdXLGNBQWMsQ0FBQ25sQixLQUFLLEVBQUV6QixLQUFLLENBQUM7UUFDeEM4bUIsUUFBUSxDQUFDVSxhQUFhLElBQUlnRSxTQUFTLEdBQUd2RixLQUFLLENBQUN1QixhQUFhO1FBQ3pEVixRQUFRLENBQUNXLEtBQUssSUFBSStELFNBQVMsR0FBR3ZGLEtBQUssQ0FBQ3dCLEtBQUs7UUFDekNYLFFBQVEsQ0FBQ3pTLE9BQU8sSUFBSW1YLFNBQVMsR0FBR3ZGLEtBQUssQ0FBQzVSLE9BQU87UUFDN0MsT0FBT3lTLFFBQVEsQ0FBQ2EsT0FBTyxDQUFDLENBQUM7TUFDN0I7TUFDQSxTQUFTbVAsS0FBS0EsQ0FBQ3IxQixLQUFLLEVBQUV6QixLQUFLLEVBQUU7UUFDekIsT0FBTzYyQixhQUFhLENBQUMsSUFBSSxFQUFFcDFCLEtBQUssRUFBRXpCLEtBQUssRUFBRSxDQUFDLENBQUM7TUFDL0M7TUFDQSxTQUFTKzJCLFVBQVVBLENBQUN0MUIsS0FBSyxFQUFFekIsS0FBSyxFQUFFO1FBQzlCLE9BQU82MkIsYUFBYSxDQUFDLElBQUksRUFBRXAxQixLQUFLLEVBQUV6QixLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDaEQ7TUFDQSxTQUFTZzNCLE9BQU9BLENBQUN6dEIsTUFBTSxFQUFFO1FBQ3JCLElBQUlBLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDWixPQUFPSSxJQUFJLENBQUM0RixLQUFLLENBQUNoRyxNQUFNLENBQUM7UUFDN0IsQ0FBQyxNQUFNO1VBQ0gsT0FBT0ksSUFBSSxDQUFDMkYsSUFBSSxDQUFDL0YsTUFBTSxDQUFDO1FBQzVCO01BQ0o7TUFDQSxTQUFTMHRCLE1BQU1BLENBQUEsRUFBRztRQUNkLElBQUkxUCxhQUFhLEdBQUcsSUFBSSxDQUFDQyxhQUFhO1VBQ2xDSCxLQUFLLEdBQUcsSUFBSSxDQUFDSSxLQUFLO1VBQ2xCUCxPQUFPLEdBQUcsSUFBSSxDQUFDN1MsT0FBTztVQUN0QmdLLElBQUksR0FBRyxJQUFJLENBQUNxSixLQUFLO1VBQ2pCSixRQUFRO1VBQ1J6SyxRQUFRO1VBQ1JELE1BQU07VUFDTm1LLE1BQU07VUFDTm1RLGNBQWM7UUFDbEIsSUFDSSxFQUNLM1AsYUFBYSxJQUFJLENBQUMsSUFBSUYsS0FBSyxJQUFJLENBQUMsSUFBSUgsT0FBTyxJQUFJLENBQUMsSUFDaERLLGFBQWEsSUFBSSxDQUFDLElBQUlGLEtBQUssSUFBSSxDQUFDLElBQUlILE9BQU8sSUFBSSxDQUFFLENBQ3JELEVBQ0g7VUFDRUssYUFBYSxJQUNUeVAsT0FBTyxDQUFDRyxZQUFZLENBQUNqUSxPQUFPLENBQUMsR0FBR0csS0FBSyxDQUFDLEdBQUcsS0FBSztVQUNsREEsS0FBSyxHQUFHLENBQUM7VUFDVEgsT0FBTyxHQUFHLENBQUM7UUFDZjtRQUNBN0ksSUFBSSxDQUFDeU0sWUFBWSxHQUFHdkQsYUFBYSxHQUFHLEdBQUc7UUFDdkNELFFBQVEsR0FBR2pZLFFBQVEsQ0FBQ2tZLGFBQWEsR0FBRyxHQUFHLENBQUM7UUFDeENsSixJQUFJLENBQUN6QyxPQUFPLEdBQUcwTCxRQUFRLEdBQUcsRUFBRTtRQUM1QnpLLFFBQVEsR0FBR3hOLFFBQVEsQ0FBQ2lZLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbENqSixJQUFJLENBQUMxQyxPQUFPLEdBQUdrQixRQUFRLEdBQUcsRUFBRTtRQUM1QkQsTUFBTSxHQUFHdk4sUUFBUSxDQUFDd04sUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNoQ3dCLElBQUksQ0FBQzVDLEtBQUssR0FBR21CLE1BQU0sR0FBRyxFQUFFO1FBQ3hCeUssS0FBSyxJQUFJaFksUUFBUSxDQUFDdU4sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUM5QnNhLGNBQWMsR0FBRzduQixRQUFRLENBQUMrbkIsWUFBWSxDQUFDL1AsS0FBSyxDQUFDLENBQUM7UUFDOUNILE9BQU8sSUFBSWdRLGNBQWM7UUFDekI3UCxLQUFLLElBQUkyUCxPQUFPLENBQUNHLFlBQVksQ0FBQ0QsY0FBYyxDQUFDLENBQUM7UUFDOUNuUSxNQUFNLEdBQUcxWCxRQUFRLENBQUM2WCxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQy9CQSxPQUFPLElBQUksRUFBRTtRQUNiN0ksSUFBSSxDQUFDMlcsSUFBSSxHQUFHM04sS0FBSztRQUNqQmhKLElBQUksQ0FBQzNLLE1BQU0sR0FBR3dULE9BQU87UUFDckI3SSxJQUFJLENBQUNrUyxLQUFLLEdBQUd4SixNQUFNO1FBQ25CLE9BQU8sSUFBSTtNQUNmO01BQ0EsU0FBU3FRLFlBQVlBLENBQUMvUCxLQUFLLEVBQUU7UUFDekIsT0FBUUEsS0FBSyxHQUFHLElBQUksR0FBSSxNQUFNO01BQ2xDO01BQ0EsU0FBUzhQLFlBQVlBLENBQUNqUSxPQUFPLEVBQUU7UUFDM0IsT0FBUUEsT0FBTyxHQUFHLE1BQU0sR0FBSSxJQUFJO01BQ3BDO01BQ0EsU0FBU21RLEVBQUVBLENBQUM5b0IsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQzVKLE9BQU8sQ0FBQyxDQUFDLEVBQUU7VUFDakIsT0FBT2EsR0FBRztRQUNkO1FBQ0EsSUFBSTZoQixLQUFLO1VBQ0xILE9BQU87VUFDUEssYUFBYSxHQUFHLElBQUksQ0FBQ0MsYUFBYTtRQUN0Q2paLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUM7UUFDN0IsSUFDSUEsS0FBSyxLQUFLLE9BQU8sSUFDakJBLEtBQUssS0FBSyxTQUFTLElBQ25CQSxLQUFLLEtBQUssTUFBTSxFQUNsQjtVQUNFOFksS0FBSyxHQUFHLElBQUksQ0FBQ0ksS0FBSyxHQUFHRixhQUFhLEdBQUcsS0FBSztVQUMxQ0wsT0FBTyxHQUFHLElBQUksQ0FBQzdTLE9BQU8sR0FBRytpQixZQUFZLENBQUMvUCxLQUFLLENBQUM7VUFDNUMsUUFBUTlZLEtBQUs7WUFDVCxLQUFLLE9BQU87Y0FDUixPQUFPMlksT0FBTztZQUNsQixLQUFLLFNBQVM7Y0FDVixPQUFPQSxPQUFPLEdBQUcsQ0FBQztZQUN0QixLQUFLLE1BQU07Y0FDUCxPQUFPQSxPQUFPLEdBQUcsRUFBRTtVQUMzQjtRQUNKLENBQUMsTUFBTTtVQUNIRyxLQUFLLEdBQUcsSUFBSSxDQUFDSSxLQUFLLEdBQUc5ZCxJQUFJLENBQUNtZSxLQUFLLENBQUNxUCxZQUFZLENBQUMsSUFBSSxDQUFDOWlCLE9BQU8sQ0FBQyxDQUFDO1VBQzNELFFBQVE5RixLQUFLO1lBQ1QsS0FBSyxNQUFNO2NBQ1AsT0FBTzhZLEtBQUssR0FBRyxDQUFDLEdBQUdFLGFBQWEsR0FBRyxNQUFNO1lBQzdDLEtBQUssS0FBSztjQUNOLE9BQU9GLEtBQUssR0FBR0UsYUFBYSxHQUFHLEtBQUs7WUFDeEMsS0FBSyxNQUFNO2NBQ1AsT0FBT0YsS0FBSyxHQUFHLEVBQUUsR0FBR0UsYUFBYSxHQUFHLElBQUk7WUFDNUMsS0FBSyxRQUFRO2NBQ1QsT0FBT0YsS0FBSyxHQUFHLElBQUksR0FBR0UsYUFBYSxHQUFHLEdBQUc7WUFDN0MsS0FBSyxRQUFRO2NBQ1QsT0FBT0YsS0FBSyxHQUFHLEtBQUssR0FBR0UsYUFBYSxHQUFHLEdBQUc7WUFDOUMsS0FBSyxhQUFhO2NBQ2QsT0FBTzVkLElBQUksQ0FBQzRGLEtBQUssQ0FBQzhYLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBR0UsYUFBYTtZQUNwRDtjQUNJLE1BQU0sSUFBSWpwQixLQUFLLENBQUMsZUFBZSxHQUFHaVEsS0FBSyxDQUFDO1VBQ2hEO1FBQ0o7TUFDSjtNQUNBLFNBQVMrb0IsU0FBU0EsQ0FBQSxFQUFHO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMzeUIsT0FBTyxDQUFDLENBQUMsRUFBRTtVQUNqQixPQUFPYSxHQUFHO1FBQ2Q7UUFDQSxPQUNJLElBQUksQ0FBQ2dpQixhQUFhLEdBQ2xCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLEtBQUssR0FDakIsSUFBSSxDQUFDcFQsT0FBTyxHQUFHLEVBQUUsR0FBSSxNQUFNLEdBQzVCN0UsS0FBSyxDQUFDLElBQUksQ0FBQzZFLE9BQU8sR0FBRyxFQUFFLENBQUMsR0FBRyxPQUFPO01BRTFDO01BQ0EsU0FBU2tqQixNQUFNQSxDQUFDQyxLQUFLLEVBQUU7UUFDbkIsT0FBTyxZQUFZO1VBQ2YsT0FBTyxJQUFJLENBQUNILEVBQUUsQ0FBQ0csS0FBSyxDQUFDO1FBQ3pCLENBQUM7TUFDTDtNQUNBLElBQUlDLGNBQWMsR0FBR0YsTUFBTSxDQUFDLElBQUksQ0FBQztRQUM3QkcsU0FBUyxHQUFHSCxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3ZCSSxTQUFTLEdBQUdKLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDdkJLLE9BQU8sR0FBR0wsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNyQk0sTUFBTSxHQUFHTixNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3BCTyxPQUFPLEdBQUdQLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDckJRLFFBQVEsR0FBR1IsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUN0QlMsVUFBVSxHQUFHVCxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3hCVSxPQUFPLEdBQUdWLE1BQU0sQ0FBQyxHQUFHLENBQUM7TUFDekIsU0FBU1csT0FBT0EsQ0FBQSxFQUFHO1FBQ2YsT0FBT3RSLGNBQWMsQ0FBQyxJQUFJLENBQUM7TUFDL0I7TUFDQSxTQUFTdVIsS0FBS0EsQ0FBQzVwQixLQUFLLEVBQUU7UUFDbEJBLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM1SixPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzRKLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcvSSxHQUFHO01BQ3JEO01BQ0EsU0FBUzR5QixVQUFVQSxDQUFDajVCLElBQUksRUFBRTtRQUN0QixPQUFPLFlBQVk7VUFDZixPQUFPLElBQUksQ0FBQ3dGLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDK2lCLEtBQUssQ0FBQ3ZvQixJQUFJLENBQUMsR0FBR3FHLEdBQUc7UUFDbEQsQ0FBQztNQUNMO01BQ0EsSUFBSXNsQixZQUFZLEdBQUdzTixVQUFVLENBQUMsY0FBYyxDQUFDO1FBQ3pDeGMsT0FBTyxHQUFHd2MsVUFBVSxDQUFDLFNBQVMsQ0FBQztRQUMvQnpjLE9BQU8sR0FBR3ljLFVBQVUsQ0FBQyxTQUFTLENBQUM7UUFDL0IzYyxLQUFLLEdBQUcyYyxVQUFVLENBQUMsT0FBTyxDQUFDO1FBQzNCcEQsSUFBSSxHQUFHb0QsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUN6QjFrQixNQUFNLEdBQUcwa0IsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUM3QjdILEtBQUssR0FBRzZILFVBQVUsQ0FBQyxPQUFPLENBQUM7TUFDL0IsU0FBU3pELEtBQUtBLENBQUEsRUFBRztRQUNiLE9BQU90bEIsUUFBUSxDQUFDLElBQUksQ0FBQzJsQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUNwQztNQUNBLElBQUlsTixLQUFLLEdBQUduZSxJQUFJLENBQUNtZSxLQUFLO1FBQ2xCdVEsVUFBVSxHQUFHO1VBQ1R4ckIsRUFBRSxFQUFFLEVBQUU7VUFFTjNNLENBQUMsRUFBRSxFQUFFO1VBRUxtRSxDQUFDLEVBQUUsRUFBRTtVQUVMMEksQ0FBQyxFQUFFLEVBQUU7VUFFTEUsQ0FBQyxFQUFFLEVBQUU7VUFFTEUsQ0FBQyxFQUFFLElBQUk7VUFFUEUsQ0FBQyxFQUFFO1FBRVAsQ0FBQztNQUNMLFNBQVNpckIsaUJBQWlCQSxDQUN0QjNxQixNQUFNLEVBQ05wRSxNQUFNLEVBQ05tRSxhQUFhLEVBQ2JFLFFBQVEsRUFDUjdLLE9BQU8sRUFDVDtRQUNFLE9BQU9BLE9BQU8sQ0FBQzBLLFlBQVksQ0FDdkJsRSxNQUFNLElBQUksQ0FBQyxFQUNYLENBQUMsQ0FBQ21FLGFBQWEsRUFDZkMsTUFBTSxFQUNOQyxRQUNKLENBQUM7TUFDTDtNQUNBLFNBQVMycUIsY0FBY0EsQ0FDbkJDLGNBQWMsRUFDZDlxQixhQUFhLEVBQ2IrcUIsV0FBVyxFQUNYMTFCLE9BQU8sRUFDVDtRQUNFLElBQUkrakIsUUFBUSxHQUFHRixjQUFjLENBQUM0UixjQUFjLENBQUMsQ0FBQzV1QixHQUFHLENBQUMsQ0FBQztVQUMvQzBkLFFBQVEsR0FBR1EsS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1VBQ2xDeGEsUUFBUSxHQUFHaUwsS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1VBQ2xDemEsTUFBTSxHQUFHa0wsS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1VBQ2hDaFEsS0FBSyxHQUFHUyxLQUFLLENBQUNoQixRQUFRLENBQUN1USxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7VUFDL0JuUSxPQUFPLEdBQUdZLEtBQUssQ0FBQ2hCLFFBQVEsQ0FBQ3VRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztVQUNqQ2xRLE1BQU0sR0FBR1csS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1VBQ2hDdFEsTUFBTSxHQUFHZSxLQUFLLENBQUNoQixRQUFRLENBQUN1USxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7VUFDaENuNUIsQ0FBQyxHQUNJb3BCLFFBQVEsSUFBSW1SLFdBQVcsQ0FBQzVyQixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUV5YSxRQUFRLENBQUMsSUFDN0NBLFFBQVEsR0FBR21SLFdBQVcsQ0FBQ3Y0QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUVvbkIsUUFBUSxDQUFFLElBQzdDekssUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUN2QkEsUUFBUSxHQUFHNGIsV0FBVyxDQUFDcDBCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRXdZLFFBQVEsQ0FBRSxJQUM3Q0QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUNyQkEsTUFBTSxHQUFHNmIsV0FBVyxDQUFDMXJCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTZQLE1BQU0sQ0FBRSxJQUN6Q3lLLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFDcEJBLEtBQUssR0FBR29SLFdBQVcsQ0FBQ3hyQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUVvYSxLQUFLLENBQUU7UUFDaEQsSUFBSW9SLFdBQVcsQ0FBQ3RyQixDQUFDLElBQUksSUFBSSxFQUFFO1VBQ3ZCalAsQ0FBQyxHQUNHQSxDQUFDLElBQ0FpcEIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUNyQkEsTUFBTSxHQUFHc1IsV0FBVyxDQUFDdHJCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRWdhLE1BQU0sQ0FBRTtRQUNsRDtRQUNBanBCLENBQUMsR0FBR0EsQ0FBQyxJQUNBZ3BCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFDdEJBLE9BQU8sR0FBR3VSLFdBQVcsQ0FBQ3ByQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU2WixPQUFPLENBQUUsSUFDM0NILE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLElBQUksRUFBRUEsTUFBTSxDQUFDO1FBQzVDN29CLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBR3dQLGFBQWE7UUFDcEJ4UCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQ3M2QixjQUFjLEdBQUcsQ0FBQztRQUMxQnQ2QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc2RSxPQUFPO1FBQ2QsT0FBT3UxQixpQkFBaUIsQ0FBQ2w2QixLQUFLLENBQUMsSUFBSSxFQUFFRixDQUFDLENBQUM7TUFDM0M7TUFDQSxTQUFTdzZCLDBCQUEwQkEsQ0FBQ0MsZ0JBQWdCLEVBQUU7UUFDbEQsSUFBSUEsZ0JBQWdCLEtBQUssS0FBSyxDQUFDLEVBQUU7VUFDN0IsT0FBTzdRLEtBQUs7UUFDaEI7UUFDQSxJQUFJLE9BQU82USxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7VUFDeEM3USxLQUFLLEdBQUc2USxnQkFBZ0I7VUFDeEIsT0FBTyxJQUFJO1FBQ2Y7UUFDQSxPQUFPLEtBQUs7TUFDaEI7TUFDQSxTQUFTQywyQkFBMkJBLENBQUNDLFNBQVMsRUFBRUMsS0FBSyxFQUFFO1FBQ25ELElBQUlULFVBQVUsQ0FBQ1EsU0FBUyxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7VUFDbEMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1VBQ2xCLE9BQU9ULFVBQVUsQ0FBQ1EsU0FBUyxDQUFDO1FBQ2hDO1FBQ0FSLFVBQVUsQ0FBQ1EsU0FBUyxDQUFDLEdBQUdDLEtBQUs7UUFDN0IsSUFBSUQsU0FBUyxLQUFLLEdBQUcsRUFBRTtVQUNuQlIsVUFBVSxDQUFDeHJCLEVBQUUsR0FBR2lzQixLQUFLLEdBQUcsQ0FBQztRQUM3QjtRQUNBLE9BQU8sSUFBSTtNQUNmO01BQ0EsU0FBU3pKLFFBQVFBLENBQUMwSixhQUFhLEVBQUVDLGFBQWEsRUFBRTtRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDcjBCLE9BQU8sQ0FBQyxDQUFDLEVBQUU7VUFDakIsT0FBTyxJQUFJLENBQUNnRyxVQUFVLENBQUMsQ0FBQyxDQUFDUyxXQUFXLENBQUMsQ0FBQztRQUMxQztRQUNBLElBQUk2dEIsVUFBVSxHQUFHLEtBQUs7VUFDbEJDLEVBQUUsR0FBR2IsVUFBVTtVQUNmdDFCLE9BQU87VUFDUHFHLE1BQU07UUFDVixJQUFJMUosT0FBQSxDQUFPcTVCLGFBQWEsTUFBSyxRQUFRLEVBQUU7VUFDbkNDLGFBQWEsR0FBR0QsYUFBYTtVQUM3QkEsYUFBYSxHQUFHLEtBQUs7UUFDekI7UUFDQSxJQUFJLE9BQU9BLGFBQWEsS0FBSyxTQUFTLEVBQUU7VUFDcENFLFVBQVUsR0FBR0YsYUFBYTtRQUM5QjtRQUNBLElBQUlyNUIsT0FBQSxDQUFPczVCLGFBQWEsTUFBSyxRQUFRLEVBQUU7VUFDbkNFLEVBQUUsR0FBR2w4QixNQUFNLENBQUNtOEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFZCxVQUFVLEVBQUVXLGFBQWEsQ0FBQztVQUNqRCxJQUFJQSxhQUFhLENBQUM5NEIsQ0FBQyxJQUFJLElBQUksSUFBSTg0QixhQUFhLENBQUNuc0IsRUFBRSxJQUFJLElBQUksRUFBRTtZQUNyRHFzQixFQUFFLENBQUNyc0IsRUFBRSxHQUFHbXNCLGFBQWEsQ0FBQzk0QixDQUFDLEdBQUcsQ0FBQztVQUMvQjtRQUNKO1FBQ0E2QyxPQUFPLEdBQUcsSUFBSSxDQUFDNEgsVUFBVSxDQUFDLENBQUM7UUFDM0J2QixNQUFNLEdBQUdtdkIsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDVSxVQUFVLEVBQUVDLEVBQUUsRUFBRW4yQixPQUFPLENBQUM7UUFDdkQsSUFBSWsyQixVQUFVLEVBQUU7VUFDWjd2QixNQUFNLEdBQUdyRyxPQUFPLENBQUMrSyxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUxRSxNQUFNLENBQUM7UUFDOUM7UUFDQSxPQUFPckcsT0FBTyxDQUFDcXNCLFVBQVUsQ0FBQ2htQixNQUFNLENBQUM7TUFDckM7TUFDQSxJQUFJZ3dCLEtBQUssR0FBR3p2QixJQUFJLENBQUNDLEdBQUc7TUFDcEIsU0FBU3l2QixJQUFJQSxDQUFDdjdCLENBQUMsRUFBRTtRQUNiLE9BQU8sQ0FBQ0EsQ0FBQyxHQUFHLENBQUMsS0FBS0EsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUNBLENBQUM7TUFDbEM7TUFDQSxTQUFTdzdCLGFBQWFBLENBQUEsRUFBRztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDMzBCLE9BQU8sQ0FBQyxDQUFDLEVBQUU7VUFDakIsT0FBTyxJQUFJLENBQUNnRyxVQUFVLENBQUMsQ0FBQyxDQUFDUyxXQUFXLENBQUMsQ0FBQztRQUMxQztRQUNBLElBQUlrYyxRQUFRLEdBQUc4UixLQUFLLENBQUMsSUFBSSxDQUFDNVIsYUFBYSxDQUFDLEdBQUcsR0FBRztVQUMxQ0gsS0FBSyxHQUFHK1IsS0FBSyxDQUFDLElBQUksQ0FBQzNSLEtBQUssQ0FBQztVQUN6QlAsT0FBTyxHQUFHa1MsS0FBSyxDQUFDLElBQUksQ0FBQy9rQixPQUFPLENBQUM7VUFDN0J3SSxRQUFRO1VBQ1JELE1BQU07VUFDTm1LLE1BQU07VUFDTjdtQixDQUFDO1VBQ0RxNUIsS0FBSyxHQUFHLElBQUksQ0FBQzdCLFNBQVMsQ0FBQyxDQUFDO1VBQ3hCOEIsU0FBUztVQUNUQyxNQUFNO1VBQ05DLFFBQVE7VUFDUkMsT0FBTztRQUNYLElBQUksQ0FBQ0osS0FBSyxFQUFFO1VBQ1IsT0FBTyxLQUFLO1FBQ2hCO1FBQ0ExYyxRQUFRLEdBQUd4TixRQUFRLENBQUNpWSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2xDMUssTUFBTSxHQUFHdk4sUUFBUSxDQUFDd04sUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNoQ3lLLFFBQVEsSUFBSSxFQUFFO1FBQ2R6SyxRQUFRLElBQUksRUFBRTtRQUNka0ssTUFBTSxHQUFHMVgsUUFBUSxDQUFDNlgsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUMvQkEsT0FBTyxJQUFJLEVBQUU7UUFDYmhuQixDQUFDLEdBQUdvbkIsUUFBUSxHQUFHQSxRQUFRLENBQUNzUyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM3dUIsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFO1FBQzdEeXVCLFNBQVMsR0FBR0QsS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtRQUNoQ0UsTUFBTSxHQUFHSixJQUFJLENBQUMsSUFBSSxDQUFDaGxCLE9BQU8sQ0FBQyxLQUFLZ2xCLElBQUksQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7UUFDdERHLFFBQVEsR0FBR0wsSUFBSSxDQUFDLElBQUksQ0FBQzVSLEtBQUssQ0FBQyxLQUFLNFIsSUFBSSxDQUFDRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtRQUN0REksT0FBTyxHQUFHTixJQUFJLENBQUMsSUFBSSxDQUFDN1IsYUFBYSxDQUFDLEtBQUs2UixJQUFJLENBQUNFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO1FBQzdELE9BQ0lDLFNBQVMsR0FDVCxHQUFHLElBQ0Z6UyxNQUFNLEdBQUcwUyxNQUFNLEdBQUcxUyxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUNwQ0csT0FBTyxHQUFHdVMsTUFBTSxHQUFHdlMsT0FBTyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFDdENHLEtBQUssR0FBR3FTLFFBQVEsR0FBR3JTLEtBQUssR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQ3BDekssTUFBTSxJQUFJQyxRQUFRLElBQUl5SyxRQUFRLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUMxQzFLLE1BQU0sR0FBRytjLE9BQU8sR0FBRy9jLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQ3JDQyxRQUFRLEdBQUc4YyxPQUFPLEdBQUc5YyxRQUFRLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUN6Q3lLLFFBQVEsR0FBR3FTLE9BQU8sR0FBR3o1QixDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztNQUUzQztNQUNBLElBQUkyNUIsT0FBTyxHQUFHaFQsUUFBUSxDQUFDbHBCLFNBQVM7TUFDaENrOEIsT0FBTyxDQUFDbDFCLE9BQU8sR0FBRytoQixTQUFTO01BQzNCbVQsT0FBTyxDQUFDandCLEdBQUcsR0FBR0EsR0FBRztNQUNqQml3QixPQUFPLENBQUN2aEIsR0FBRyxHQUFHd2UsS0FBSztNQUNuQitDLE9BQU8sQ0FBQzlQLFFBQVEsR0FBR2dOLFVBQVU7TUFDN0I4QyxPQUFPLENBQUN4QyxFQUFFLEdBQUdBLEVBQUU7TUFDZndDLE9BQU8sQ0FBQ3BDLGNBQWMsR0FBR0EsY0FBYztNQUN2Q29DLE9BQU8sQ0FBQ25DLFNBQVMsR0FBR0EsU0FBUztNQUM3Qm1DLE9BQU8sQ0FBQ2xDLFNBQVMsR0FBR0EsU0FBUztNQUM3QmtDLE9BQU8sQ0FBQ2pDLE9BQU8sR0FBR0EsT0FBTztNQUN6QmlDLE9BQU8sQ0FBQ2hDLE1BQU0sR0FBR0EsTUFBTTtNQUN2QmdDLE9BQU8sQ0FBQy9CLE9BQU8sR0FBR0EsT0FBTztNQUN6QitCLE9BQU8sQ0FBQzlCLFFBQVEsR0FBR0EsUUFBUTtNQUMzQjhCLE9BQU8sQ0FBQzdCLFVBQVUsR0FBR0EsVUFBVTtNQUMvQjZCLE9BQU8sQ0FBQzVCLE9BQU8sR0FBR0EsT0FBTztNQUN6QjRCLE9BQU8sQ0FBQ2ozQixPQUFPLEdBQUcwMEIsU0FBUztNQUMzQnVDLE9BQU8sQ0FBQ2xTLE9BQU8sR0FBR3NQLE1BQU07TUFDeEI0QyxPQUFPLENBQUM1USxLQUFLLEdBQUdpUCxPQUFPO01BQ3ZCMkIsT0FBTyxDQUFDNTdCLEdBQUcsR0FBR2s2QixLQUFLO01BQ25CMEIsT0FBTyxDQUFDL08sWUFBWSxHQUFHQSxZQUFZO01BQ25DK08sT0FBTyxDQUFDamUsT0FBTyxHQUFHQSxPQUFPO01BQ3pCaWUsT0FBTyxDQUFDbGUsT0FBTyxHQUFHQSxPQUFPO01BQ3pCa2UsT0FBTyxDQUFDcGUsS0FBSyxHQUFHQSxLQUFLO01BQ3JCb2UsT0FBTyxDQUFDN0UsSUFBSSxHQUFHQSxJQUFJO01BQ25CNkUsT0FBTyxDQUFDbEYsS0FBSyxHQUFHQSxLQUFLO01BQ3JCa0YsT0FBTyxDQUFDbm1CLE1BQU0sR0FBR0EsTUFBTTtNQUN2Qm1tQixPQUFPLENBQUN0SixLQUFLLEdBQUdBLEtBQUs7TUFDckJzSixPQUFPLENBQUN4SyxRQUFRLEdBQUdBLFFBQVE7TUFDM0J3SyxPQUFPLENBQUNsTCxXQUFXLEdBQUcySyxhQUFhO01BQ25DTyxPQUFPLENBQUNsNEIsUUFBUSxHQUFHMjNCLGFBQWE7TUFDaENPLE9BQU8sQ0FBQ3JKLE1BQU0sR0FBRzhJLGFBQWE7TUFDOUJPLE9BQU8sQ0FBQ25MLE1BQU0sR0FBR0EsTUFBTTtNQUN2Qm1MLE9BQU8sQ0FBQ2x2QixVQUFVLEdBQUdBLFVBQVU7TUFDL0JrdkIsT0FBTyxDQUFDQyxXQUFXLEdBQUc3eUIsU0FBUyxDQUMzQixxRkFBcUYsRUFDckZxeUIsYUFDSixDQUFDO01BQ0RPLE9BQU8sQ0FBQ3BLLElBQUksR0FBR0EsSUFBSTtNQUNuQm5sQixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDO01BQ2pDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO01BQ3BDa0gsYUFBYSxDQUFDLEdBQUcsRUFBRU4sV0FBVyxDQUFDO01BQy9CTSxhQUFhLENBQUMsR0FBRyxFQUFFSCxjQUFjLENBQUM7TUFDbENpQixhQUFhLENBQUMsR0FBRyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7UUFDL0NBLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBRyxJQUFJNUMsSUFBSSxDQUFDb2tCLFVBQVUsQ0FBQ2hsQixLQUFLLENBQUMsR0FBRyxHQUFHLENBQUM7TUFDakQsQ0FBQyxDQUFDO01BQ0Y2USxhQUFhLENBQUMsR0FBRyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7UUFDL0NBLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBRyxJQUFJNUMsSUFBSSxDQUFDbU4sS0FBSyxDQUFDL04sS0FBSyxDQUFDLENBQUM7TUFDdEMsQ0FBQyxDQUFDO01BQ0ZKLEtBQUssQ0FBQzA0QixPQUFPLEdBQUcsUUFBUTtNQUN4Qno0QixlQUFlLENBQUN5aUIsV0FBVyxDQUFDO01BQzVCMWlCLEtBQUssQ0FBQzVDLEVBQUUsR0FBRzYxQixLQUFLO01BQ2hCanpCLEtBQUssQ0FBQ2dVLEdBQUcsR0FBR0EsR0FBRztNQUNmaFUsS0FBSyxDQUFDMkksR0FBRyxHQUFHQSxHQUFHO01BQ2YzSSxLQUFLLENBQUN1aEIsR0FBRyxHQUFHQSxHQUFHO01BQ2Z2aEIsS0FBSyxDQUFDNkIsR0FBRyxHQUFHTCxTQUFTO01BQ3JCeEIsS0FBSyxDQUFDZ3ZCLElBQUksR0FBR2tGLFVBQVU7TUFDdkJsMEIsS0FBSyxDQUFDcVMsTUFBTSxHQUFHNGlCLFVBQVU7TUFDekJqMUIsS0FBSyxDQUFDZSxNQUFNLEdBQUdBLE1BQU07TUFDckJmLEtBQUssQ0FBQ3F0QixNQUFNLEdBQUd2USxrQkFBa0I7TUFDakM5YyxLQUFLLENBQUM0cEIsT0FBTyxHQUFHMWxCLGFBQWE7TUFDN0JsRSxLQUFLLENBQUN5bEIsUUFBUSxHQUFHRixjQUFjO01BQy9CdmxCLEtBQUssQ0FBQ3VGLFFBQVEsR0FBR0EsUUFBUTtNQUN6QnZGLEtBQUssQ0FBQ3FYLFFBQVEsR0FBRzhkLFlBQVk7TUFDN0JuMUIsS0FBSyxDQUFDNHpCLFNBQVMsR0FBR08sWUFBWTtNQUM5Qm4wQixLQUFLLENBQUNzSixVQUFVLEdBQUcyVCxTQUFTO01BQzVCamQsS0FBSyxDQUFDdW1CLFVBQVUsR0FBR0EsVUFBVTtNQUM3QnZtQixLQUFLLENBQUNvUyxXQUFXLEdBQUc4aUIsZUFBZTtNQUNuQ2wxQixLQUFLLENBQUNtWCxXQUFXLEdBQUdrZSxlQUFlO01BQ25DcjFCLEtBQUssQ0FBQ2tkLFlBQVksR0FBR0EsWUFBWTtNQUNqQ2xkLEtBQUssQ0FBQ3NkLFlBQVksR0FBR0EsWUFBWTtNQUNqQ3RkLEtBQUssQ0FBQzZiLE9BQU8sR0FBRzJCLFdBQVc7TUFDM0J4ZCxLQUFLLENBQUNvWCxhQUFhLEdBQUdnZSxpQkFBaUI7TUFDdkNwMUIsS0FBSyxDQUFDaU4sY0FBYyxHQUFHQSxjQUFjO01BQ3JDak4sS0FBSyxDQUFDMjRCLG9CQUFvQixHQUFHdEIsMEJBQTBCO01BQ3ZEcjNCLEtBQUssQ0FBQzQ0QixxQkFBcUIsR0FBR3JCLDJCQUEyQjtNQUN6RHYzQixLQUFLLENBQUMrckIsY0FBYyxHQUFHUixpQkFBaUI7TUFDeEN2ckIsS0FBSyxDQUFDMUQsU0FBUyxHQUFHMjJCLEtBQUs7TUFDdkJqekIsS0FBSyxDQUFDNjRCLFNBQVMsR0FBRztRQUNkQyxjQUFjLEVBQUUsa0JBQWtCO1FBRWxDQyxzQkFBc0IsRUFBRSxxQkFBcUI7UUFFN0NDLGlCQUFpQixFQUFFLHlCQUF5QjtRQUU1Q3RuQixJQUFJLEVBQUUsWUFBWTtRQUVsQnVuQixJQUFJLEVBQUUsT0FBTztRQUViQyxZQUFZLEVBQUUsVUFBVTtRQUV4QkMsT0FBTyxFQUFFLGNBQWM7UUFFdkJwbkIsSUFBSSxFQUFFLFlBQVk7UUFFbEJOLEtBQUssRUFBRTtNQUVYLENBQUM7TUFDRCxPQUFPelIsS0FBSztJQUNoQixDQUFDLENBQUM7RUFDTjtBQUNKLENBQUMsQ0FBQztBQUVGLFNBQVNBLEtBQUtBLENBQUEsRUFBRztFQUNiLE9BQU9ELFlBQVksQ0FBQ2hELEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztBQUM5QztBQUNBLFNBQVNpRCxlQUFlQSxDQUFDQyxRQUFRLEVBQUU7RUFDL0JILFlBQVksR0FBR0csUUFBUTtBQUMzQjtBQUNBLFNBQVNDLE9BQU9BLENBQUNDLEtBQUssRUFBRTtFQUNwQixPQUNJQSxLQUFLLFlBQVlDLEtBQUssSUFDdEIxRSxNQUFNLENBQUNXLFNBQVMsQ0FBQ2dFLFFBQVEsQ0FBQzFCLElBQUksQ0FBQ3dCLEtBQUssQ0FBQyxLQUFLLGdCQUFnQjtBQUVsRTtBQUNBLFNBQVNHLFFBQVFBLENBQUNILEtBQUssRUFBRTtFQUNyQixPQUNJQSxLQUFLLElBQUksSUFBSSxJQUNiekUsTUFBTSxDQUFDVyxTQUFTLENBQUNnRSxRQUFRLENBQUMxQixJQUFJLENBQUN3QixLQUFLLENBQUMsS0FBSyxpQkFBaUI7QUFFbkU7QUFDQSxTQUFTSSxVQUFVQSxDQUFDM0QsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDdEIsT0FBT25CLE1BQU0sQ0FBQ1csU0FBUyxDQUFDQyxjQUFjLENBQUNxQyxJQUFJLENBQUMvQixDQUFDLEVBQUVDLENBQUMsQ0FBQztBQUNyRDtBQUNBLFNBQVMyRCxhQUFhQSxDQUFDQyxHQUFHLEVBQUU7RUFDeEIsSUFBSS9FLE1BQU0sQ0FBQ08sbUJBQW1CLEVBQUU7SUFDNUIsT0FBT1AsTUFBTSxDQUFDTyxtQkFBbUIsQ0FBQ3dFLEdBQUcsQ0FBQyxDQUFDQyxNQUFNLEtBQUssQ0FBQztFQUN2RCxDQUFDLE1BQU07SUFDSCxJQUFJQyxDQUFDO0lBQ0wsS0FBS0EsQ0FBQyxJQUFJRixHQUFHLEVBQUU7TUFDWCxJQUFJRixVQUFVLENBQUNFLEdBQUcsRUFBRUUsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxLQUFLO01BQ2hCO0lBQ0o7SUFDQSxPQUFPLElBQUk7RUFDZjtBQUNKO0FBQ0EsU0FBU0MsV0FBV0EsQ0FBQ1QsS0FBSyxFQUFFO0VBQ3hCLE9BQU9BLEtBQUssS0FBSyxLQUFLLENBQUM7QUFDM0I7QUFDQSxTQUFTVSxRQUFRQSxDQUFDVixLQUFLLEVBQUU7RUFDckIsT0FDSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUN6QnpFLE1BQU0sQ0FBQ1csU0FBUyxDQUFDZ0UsUUFBUSxDQUFDMUIsSUFBSSxDQUFDd0IsS0FBSyxDQUFDLEtBQUssaUJBQWlCO0FBRW5FO0FBQ0EsU0FBU1csTUFBTUEsQ0FBQ1gsS0FBSyxFQUFFO0VBQ25CLE9BQ0lBLEtBQUssWUFBWVksSUFBSSxJQUNyQnJGLE1BQU0sQ0FBQ1csU0FBUyxDQUFDZ0UsUUFBUSxDQUFDMUIsSUFBSSxDQUFDd0IsS0FBSyxDQUFDLEtBQUssZUFBZTtBQUVqRTtBQUNBLFNBQVNhLEdBQUdBLENBQUNDLEdBQUcsRUFBRTlELEVBQUUsRUFBRTtFQUNsQixJQUFJQyxHQUFHLEdBQUcsRUFBRTtJQUNSOEQsQ0FBQztJQUNEQyxNQUFNLEdBQUdGLEdBQUcsQ0FBQ1AsTUFBTTtFQUN2QixLQUFLUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdDLE1BQU0sRUFBRSxFQUFFRCxDQUFDLEVBQUU7SUFDekI5RCxHQUFHLENBQUNnRSxJQUFJLENBQUNqRSxFQUFFLENBQUM4RCxHQUFHLENBQUNDLENBQUMsQ0FBQyxFQUFFQSxDQUFDLENBQUMsQ0FBQztFQUMzQjtFQUNBLE9BQU85RCxHQUFHO0FBQ2Q7QUFDQSxTQUFTaUUsTUFBTUEsQ0FBQ3pFLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xCLEtBQUssSUFBSXFFLENBQUMsSUFBSXJFLENBQUMsRUFBRTtJQUNiLElBQUkwRCxVQUFVLENBQUMxRCxDQUFDLEVBQUVxRSxDQUFDLENBQUMsRUFBRTtNQUNsQnRFLENBQUMsQ0FBQ3NFLENBQUMsQ0FBQyxHQUFHckUsQ0FBQyxDQUFDcUUsQ0FBQyxDQUFDO0lBQ2Y7RUFDSjtFQUNBLElBQUlYLFVBQVUsQ0FBQzFELENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRTtJQUMzQkQsQ0FBQyxDQUFDeUQsUUFBUSxHQUFHeEQsQ0FBQyxDQUFDd0QsUUFBUTtFQUMzQjtFQUNBLElBQUlFLFVBQVUsQ0FBQzFELENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRTtJQUMxQkQsQ0FBQyxDQUFDMEUsT0FBTyxHQUFHekUsQ0FBQyxDQUFDeUUsT0FBTztFQUN6QjtFQUNBLE9BQU8xRSxDQUFDO0FBQ1o7QUFDQSxTQUFTMkUsU0FBU0EsQ0FBQ3BCLEtBQUssRUFBRXFCLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUU7RUFDaEQsT0FBT0MsZ0JBQWdCLENBQUN4QixLQUFLLEVBQUVxQixPQUFPLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDRSxHQUFHLENBQUMsQ0FBQztBQUN4RTtBQUNBLFNBQVNDLG1CQUFtQkEsQ0FBQSxFQUFHO0VBQzNCLE9BQU87SUFDSEMsS0FBSyxFQUFFLEtBQUs7SUFDWkMsWUFBWSxFQUFFLEVBQUU7SUFDaEJDLFdBQVcsRUFBRSxFQUFFO0lBQ2ZDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDWkMsYUFBYSxFQUFFLENBQUM7SUFDaEJDLFNBQVMsRUFBRSxLQUFLO0lBQ2hCQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsWUFBWSxFQUFFLElBQUk7SUFDbEJDLGFBQWEsRUFBRSxLQUFLO0lBQ3BCQyxlQUFlLEVBQUUsS0FBSztJQUN0QkMsR0FBRyxFQUFFLEtBQUs7SUFDVkMsZUFBZSxFQUFFLEVBQUU7SUFDbkJDLEdBQUcsRUFBRSxJQUFJO0lBQ1RDLFFBQVEsRUFBRSxJQUFJO0lBQ2RDLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLGVBQWUsRUFBRTtFQUNyQixDQUFDO0FBQ0w7QUFDQSxTQUFTQyxlQUFlQSxDQUFDQyxDQUFDLEVBQUU7RUFDeEIsSUFBSUEsQ0FBQyxDQUFDQyxHQUFHLElBQUksSUFBSSxFQUFFO0lBQ2ZELENBQUMsQ0FBQ0MsR0FBRyxHQUFHbkIsbUJBQW1CLENBQUMsQ0FBQztFQUNqQztFQUNBLE9BQU9rQixDQUFDLENBQUNDLEdBQUc7QUFDaEI7QUFDQSxTQUFTSyxPQUFPQSxDQUFDTixDQUFDLEVBQUU7RUFDaEIsSUFBSUEsQ0FBQyxDQUFDTyxRQUFRLElBQUksSUFBSSxFQUFFO0lBQ3BCLElBQUlDLEtBQUssR0FBR1QsZUFBZSxDQUFDQyxDQUFDLENBQUM7TUFDMUJTLFdBQVcsR0FBR1AsSUFBSSxDQUFDdEUsSUFBSSxDQUFDNEUsS0FBSyxDQUFDZCxlQUFlLEVBQUUsVUFBVXZCLENBQUMsRUFBRTtRQUN4RCxPQUFPQSxDQUFDLElBQUksSUFBSTtNQUNwQixDQUFDLENBQUM7TUFDRnVDLFVBQVUsR0FDTixDQUFDQyxLQUFLLENBQUNYLENBQUMsQ0FBQ1ksRUFBRSxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQ3RCTCxLQUFLLENBQUN0QixRQUFRLEdBQUcsQ0FBQyxJQUNsQixDQUFDc0IsS0FBSyxDQUFDekIsS0FBSyxJQUNaLENBQUN5QixLQUFLLENBQUNuQixVQUFVLElBQ2pCLENBQUNtQixLQUFLLENBQUNsQixZQUFZLElBQ25CLENBQUNrQixLQUFLLENBQUNNLGNBQWMsSUFDckIsQ0FBQ04sS0FBSyxDQUFDVixlQUFlLElBQ3RCLENBQUNVLEtBQUssQ0FBQ3BCLFNBQVMsSUFDaEIsQ0FBQ29CLEtBQUssQ0FBQ2pCLGFBQWEsSUFDcEIsQ0FBQ2lCLEtBQUssQ0FBQ2hCLGVBQWUsS0FDckIsQ0FBQ2dCLEtBQUssQ0FBQ1osUUFBUSxJQUFLWSxLQUFLLENBQUNaLFFBQVEsSUFBSWEsV0FBWSxDQUFDO0lBQzVELElBQUlULENBQUMsQ0FBQ2UsT0FBTyxFQUFFO01BQ1hMLFVBQVUsR0FDTkEsVUFBVSxJQUNWRixLQUFLLENBQUNyQixhQUFhLEtBQUssQ0FBQyxJQUN6QnFCLEtBQUssQ0FBQ3hCLFlBQVksQ0FBQ3JCLE1BQU0sS0FBSyxDQUFDLElBQy9CNkMsS0FBSyxDQUFDUSxPQUFPLEtBQUssS0FBSyxDQUFDO0lBQ2hDO0lBQ0EsSUFBSXJJLE1BQU0sQ0FBQ3NJLFFBQVEsSUFBSSxJQUFJLElBQUksQ0FBQ3RJLE1BQU0sQ0FBQ3NJLFFBQVEsQ0FBQ2pCLENBQUMsQ0FBQyxFQUFFO01BQ2hEQSxDQUFDLENBQUNPLFFBQVEsR0FBR0csVUFBVTtJQUMzQixDQUFDLE1BQU07TUFDSCxPQUFPQSxVQUFVO0lBQ3JCO0VBQ0o7RUFDQSxPQUFPVixDQUFDLENBQUNPLFFBQVE7QUFDckI7QUFDQSxTQUFTVyxhQUFhQSxDQUFDVixLQUFLLEVBQUU7RUFDMUIsSUFBSVIsQ0FBQyxHQUFHeEIsU0FBUyxDQUFDMkMsR0FBRyxDQUFDO0VBQ3RCLElBQUlYLEtBQUssSUFBSSxJQUFJLEVBQUU7SUFDZmxDLE1BQU0sQ0FBQ3lCLGVBQWUsQ0FBQ0MsQ0FBQyxDQUFDLEVBQUVRLEtBQUssQ0FBQztFQUNyQyxDQUFDLE1BQU07SUFDSFQsZUFBZSxDQUFDQyxDQUFDLENBQUMsQ0FBQ1IsZUFBZSxHQUFHLElBQUk7RUFDN0M7RUFDQSxPQUFPUSxDQUFDO0FBQ1o7QUFDQSxTQUFTc0IsVUFBVUEsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEVBQUU7RUFDNUIsSUFBSXJELENBQUM7SUFDRHNELElBQUk7SUFDSkMsR0FBRztJQUNIQyxtQkFBbUIsR0FBR1AsZ0JBQWdCLENBQUN6RCxNQUFNO0VBQ2pELElBQUksQ0FBQ0UsV0FBVyxDQUFDMkQsS0FBSyxDQUFDSSxnQkFBZ0IsQ0FBQyxFQUFFO0lBQ3RDTCxHQUFHLENBQUNLLGdCQUFnQixHQUFHSixLQUFLLENBQUNJLGdCQUFnQjtFQUNqRDtFQUNBLElBQUksQ0FBQy9ELFdBQVcsQ0FBQzJELEtBQUssQ0FBQ0ssRUFBRSxDQUFDLEVBQUU7SUFDeEJOLEdBQUcsQ0FBQ00sRUFBRSxHQUFHTCxLQUFLLENBQUNLLEVBQUU7RUFDckI7RUFDQSxJQUFJLENBQUNoRSxXQUFXLENBQUMyRCxLQUFLLENBQUNNLEVBQUUsQ0FBQyxFQUFFO0lBQ3hCUCxHQUFHLENBQUNPLEVBQUUsR0FBR04sS0FBSyxDQUFDTSxFQUFFO0VBQ3JCO0VBQ0EsSUFBSSxDQUFDakUsV0FBVyxDQUFDMkQsS0FBSyxDQUFDTyxFQUFFLENBQUMsRUFBRTtJQUN4QlIsR0FBRyxDQUFDUSxFQUFFLEdBQUdQLEtBQUssQ0FBQ08sRUFBRTtFQUNyQjtFQUNBLElBQUksQ0FBQ2xFLFdBQVcsQ0FBQzJELEtBQUssQ0FBQ1QsT0FBTyxDQUFDLEVBQUU7SUFDN0JRLEdBQUcsQ0FBQ1IsT0FBTyxHQUFHUyxLQUFLLENBQUNULE9BQU87RUFDL0I7RUFDQSxJQUFJLENBQUNsRCxXQUFXLENBQUMyRCxLQUFLLENBQUNRLElBQUksQ0FBQyxFQUFFO0lBQzFCVCxHQUFHLENBQUNTLElBQUksR0FBR1IsS0FBSyxDQUFDUSxJQUFJO0VBQ3pCO0VBQ0EsSUFBSSxDQUFDbkUsV0FBVyxDQUFDMkQsS0FBSyxDQUFDUyxNQUFNLENBQUMsRUFBRTtJQUM1QlYsR0FBRyxDQUFDVSxNQUFNLEdBQUdULEtBQUssQ0FBQ1MsTUFBTTtFQUM3QjtFQUNBLElBQUksQ0FBQ3BFLFdBQVcsQ0FBQzJELEtBQUssQ0FBQ1UsT0FBTyxDQUFDLEVBQUU7SUFDN0JYLEdBQUcsQ0FBQ1csT0FBTyxHQUFHVixLQUFLLENBQUNVLE9BQU87RUFDL0I7RUFDQSxJQUFJLENBQUNyRSxXQUFXLENBQUMyRCxLQUFLLENBQUN2QixHQUFHLENBQUMsRUFBRTtJQUN6QnNCLEdBQUcsQ0FBQ3RCLEdBQUcsR0FBR0YsZUFBZSxDQUFDeUIsS0FBSyxDQUFDO0VBQ3BDO0VBQ0EsSUFBSSxDQUFDM0QsV0FBVyxDQUFDMkQsS0FBSyxDQUFDVyxPQUFPLENBQUMsRUFBRTtJQUM3QlosR0FBRyxDQUFDWSxPQUFPLEdBQUdYLEtBQUssQ0FBQ1csT0FBTztFQUMvQjtFQUNBLElBQUlSLG1CQUFtQixHQUFHLENBQUMsRUFBRTtJQUN6QixLQUFLeEQsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHd0QsbUJBQW1CLEVBQUV4RCxDQUFDLEVBQUUsRUFBRTtNQUN0Q3NELElBQUksR0FBR0wsZ0JBQWdCLENBQUNqRCxDQUFDLENBQUM7TUFDMUJ1RCxHQUFHLEdBQUdGLEtBQUssQ0FBQ0MsSUFBSSxDQUFDO01BQ2pCLElBQUksQ0FBQzVELFdBQVcsQ0FBQzZELEdBQUcsQ0FBQyxFQUFFO1FBQ25CSCxHQUFHLENBQUNFLElBQUksQ0FBQyxHQUFHQyxHQUFHO01BQ25CO0lBQ0o7RUFDSjtFQUNBLE9BQU9ILEdBQUc7QUFDZDtBQUNBLFNBQVNhLE1BQU1BLENBQUNDLE1BQU0sRUFBRTtFQUNwQmYsVUFBVSxDQUFDLElBQUksRUFBRWUsTUFBTSxDQUFDO0VBQ3hCLElBQUksQ0FBQ3pCLEVBQUUsR0FBRyxJQUFJNUMsSUFBSSxDQUFDcUUsTUFBTSxDQUFDekIsRUFBRSxJQUFJLElBQUksR0FBR3lCLE1BQU0sQ0FBQ3pCLEVBQUUsQ0FBQ0MsT0FBTyxDQUFDLENBQUMsR0FBR00sR0FBRyxDQUFDO0VBQ2pFLElBQUksQ0FBQyxJQUFJLENBQUNiLE9BQU8sQ0FBQyxDQUFDLEVBQUU7SUFDakIsSUFBSSxDQUFDTSxFQUFFLEdBQW1CLElBQUk1QyxJQUFJLENBQUNtRCxHQUFHLENBQUM7RUFDM0M7RUFDQSxJQUFJRSxnQkFBZ0IsS0FBSyxLQUFLLEVBQUU7SUFDNUJBLGdCQUFnQixHQUFHLElBQUk7SUFDdkJyRSxLQUFLLENBQUNzRixZQUFZLENBQUMsSUFBSSxDQUFDO0lBQ3hCakIsZ0JBQWdCLEdBQUcsS0FBSztFQUM1QjtBQUNKO0FBQ0EsU0FBU2tCLFFBQVFBLENBQUM3RSxHQUFHLEVBQUU7RUFDbkIsT0FDSUEsR0FBRyxZQUFZMEUsTUFBTSxJQUFLMUUsR0FBRyxJQUFJLElBQUksSUFBSUEsR0FBRyxDQUFDa0UsZ0JBQWdCLElBQUksSUFBSztBQUU5RTtBQUNBLFNBQVNZLElBQUlBLENBQUNDLEdBQUcsRUFBRTtFQUNmLElBQ0l6RixLQUFLLENBQUMwRiwyQkFBMkIsS0FBSyxLQUFLLElBQzNDLE9BQU9DLE9BQU8sS0FBSyxXQUFXLElBQzlCQSxPQUFPLENBQUNILElBQUksRUFDZDtJQUNFRyxPQUFPLENBQUNILElBQUksQ0FBQyx1QkFBdUIsR0FBR0MsR0FBRyxDQUFDO0VBQy9DO0FBQ0o7QUFDQSxTQUFTRyxTQUFTQSxDQUFDSCxHQUFHLEVBQUVySSxFQUFFLEVBQUU7RUFDeEIsSUFBSXlJLFNBQVMsR0FBRyxJQUFJO0VBQ3BCLE9BQU92RSxNQUFNLENBQUMsWUFBWTtJQUN0QixJQUFJdEIsS0FBSyxDQUFDOEYsa0JBQWtCLElBQUksSUFBSSxFQUFFO01BQ2xDOUYsS0FBSyxDQUFDOEYsa0JBQWtCLENBQUMsSUFBSSxFQUFFTCxHQUFHLENBQUM7SUFDdkM7SUFDQSxJQUFJSSxTQUFTLEVBQUU7TUFDWCxJQUFJRSxJQUFJLEdBQUcsRUFBRTtRQUNUQyxHQUFHO1FBQ0g3RSxDQUFDO1FBQ0R6QyxHQUFHO1FBQ0h1SCxNQUFNLEdBQUdqSixTQUFTLENBQUMyRCxNQUFNO01BQzdCLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzhFLE1BQU0sRUFBRTlFLENBQUMsRUFBRSxFQUFFO1FBQ3pCNkUsR0FBRyxHQUFHLEVBQUU7UUFDUixJQUFJM0gsT0FBQSxDQUFPckIsU0FBUyxDQUFDbUUsQ0FBQyxDQUFDLE1BQUssUUFBUSxFQUFFO1VBQ2xDNkUsR0FBRyxJQUFJLEtBQUssR0FBRzdFLENBQUMsR0FBRyxJQUFJO1VBQ3ZCLEtBQUt6QyxHQUFHLElBQUkxQixTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEIsSUFBSXdELFVBQVUsQ0FBQ3hELFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTBCLEdBQUcsQ0FBQyxFQUFFO2NBQy9Cc0gsR0FBRyxJQUFJdEgsR0FBRyxHQUFHLElBQUksR0FBRzFCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzBCLEdBQUcsQ0FBQyxHQUFHLElBQUk7WUFDaEQ7VUFDSjtVQUNBc0gsR0FBRyxHQUFHQSxHQUFHLENBQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxNQUFNO1VBQ0hGLEdBQUcsR0FBR2hKLFNBQVMsQ0FBQ21FLENBQUMsQ0FBQztRQUN0QjtRQUNBNEUsSUFBSSxDQUFDMUUsSUFBSSxDQUFDMkUsR0FBRyxDQUFDO01BQ2xCO01BQ0FSLElBQUksQ0FDQUMsR0FBRyxHQUNDLGVBQWUsR0FDZnBGLEtBQUssQ0FBQy9ELFNBQVMsQ0FBQzRKLEtBQUssQ0FBQ3RILElBQUksQ0FBQ21ILElBQUksQ0FBQyxDQUFDSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQ3pDLElBQUksR0FDSixJQUFJbEosS0FBSyxDQUFDLENBQUMsQ0FBQ21KLEtBQ3BCLENBQUM7TUFDRFAsU0FBUyxHQUFHLEtBQUs7SUFDckI7SUFDQSxPQUFPekksRUFBRSxDQUFDTCxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7RUFDcEMsQ0FBQyxFQUFFSSxFQUFFLENBQUM7QUFDVjtBQUNBLFNBQVNrSixlQUFlQSxDQUFDeEksSUFBSSxFQUFFMkgsR0FBRyxFQUFFO0VBQ2hDLElBQUl6RixLQUFLLENBQUM4RixrQkFBa0IsSUFBSSxJQUFJLEVBQUU7SUFDbEM5RixLQUFLLENBQUM4RixrQkFBa0IsQ0FBQ2hJLElBQUksRUFBRTJILEdBQUcsQ0FBQztFQUN2QztFQUNBLElBQUksQ0FBQ1ksWUFBWSxDQUFDdkksSUFBSSxDQUFDLEVBQUU7SUFDckIwSCxJQUFJLENBQUNDLEdBQUcsQ0FBQztJQUNUWSxZQUFZLENBQUN2SSxJQUFJLENBQUMsR0FBRyxJQUFJO0VBQzdCO0FBQ0o7QUFDQSxTQUFTeUksVUFBVUEsQ0FBQ25HLEtBQUssRUFBRTtFQUN2QixPQUNLLE9BQU9vRyxRQUFRLEtBQUssV0FBVyxJQUFJcEcsS0FBSyxZQUFZb0csUUFBUSxJQUM3RDdLLE1BQU0sQ0FBQ1csU0FBUyxDQUFDZ0UsUUFBUSxDQUFDMUIsSUFBSSxDQUFDd0IsS0FBSyxDQUFDLEtBQUssbUJBQW1CO0FBRXJFO0FBQ0EsU0FBU3FHLEdBQUdBLENBQUNwQixNQUFNLEVBQUU7RUFDakIsSUFBSVosSUFBSSxFQUFFdEQsQ0FBQztFQUNYLEtBQUtBLENBQUMsSUFBSWtFLE1BQU0sRUFBRTtJQUNkLElBQUk3RSxVQUFVLENBQUM2RSxNQUFNLEVBQUVsRSxDQUFDLENBQUMsRUFBRTtNQUN2QnNELElBQUksR0FBR1ksTUFBTSxDQUFDbEUsQ0FBQyxDQUFDO01BQ2hCLElBQUlvRixVQUFVLENBQUM5QixJQUFJLENBQUMsRUFBRTtRQUNsQixJQUFJLENBQUN0RCxDQUFDLENBQUMsR0FBR3NELElBQUk7TUFDbEIsQ0FBQyxNQUFNO1FBQ0gsSUFBSSxDQUFDLEdBQUcsR0FBR3RELENBQUMsQ0FBQyxHQUFHc0QsSUFBSTtNQUN4QjtJQUNKO0VBQ0o7RUFDQSxJQUFJLENBQUNpQyxPQUFPLEdBQUdyQixNQUFNO0VBQ3JCLElBQUksQ0FBQ3NCLDhCQUE4QixHQUFHLElBQUlDLE1BQU0sQ0FDNUMsQ0FBQyxJQUFJLENBQUNDLHVCQUF1QixDQUFDQyxNQUFNLElBQUksSUFBSSxDQUFDQyxhQUFhLENBQUNELE1BQU0sSUFDN0QsR0FBRyxHQUNILFNBQVMsQ0FBQ0EsTUFDbEIsQ0FBQztBQUNMO0FBQ0EsU0FBU0UsWUFBWUEsQ0FBQ0MsWUFBWSxFQUFFQyxXQUFXLEVBQUU7RUFDN0MsSUFBSTdKLEdBQUcsR0FBR2lFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTJGLFlBQVksQ0FBQztJQUM5QnhDLElBQUk7RUFDUixLQUFLQSxJQUFJLElBQUl5QyxXQUFXLEVBQUU7SUFDdEIsSUFBSTFHLFVBQVUsQ0FBQzBHLFdBQVcsRUFBRXpDLElBQUksQ0FBQyxFQUFFO01BQy9CLElBQUlsRSxRQUFRLENBQUMwRyxZQUFZLENBQUN4QyxJQUFJLENBQUMsQ0FBQyxJQUFJbEUsUUFBUSxDQUFDMkcsV0FBVyxDQUFDekMsSUFBSSxDQUFDLENBQUMsRUFBRTtRQUM3RHBILEdBQUcsQ0FBQ29ILElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNkbkQsTUFBTSxDQUFDakUsR0FBRyxDQUFDb0gsSUFBSSxDQUFDLEVBQUV3QyxZQUFZLENBQUN4QyxJQUFJLENBQUMsQ0FBQztRQUNyQ25ELE1BQU0sQ0FBQ2pFLEdBQUcsQ0FBQ29ILElBQUksQ0FBQyxFQUFFeUMsV0FBVyxDQUFDekMsSUFBSSxDQUFDLENBQUM7TUFDeEMsQ0FBQyxNQUFNLElBQUl5QyxXQUFXLENBQUN6QyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFDbENwSCxHQUFHLENBQUNvSCxJQUFJLENBQUMsR0FBR3lDLFdBQVcsQ0FBQ3pDLElBQUksQ0FBQztNQUNqQyxDQUFDLE1BQU07UUFDSCxPQUFPcEgsR0FBRyxDQUFDb0gsSUFBSSxDQUFDO01BQ3BCO0lBQ0o7RUFDSjtFQUNBLEtBQUtBLElBQUksSUFBSXdDLFlBQVksRUFBRTtJQUN2QixJQUNJekcsVUFBVSxDQUFDeUcsWUFBWSxFQUFFeEMsSUFBSSxDQUFDLElBQzlCLENBQUNqRSxVQUFVLENBQUMwRyxXQUFXLEVBQUV6QyxJQUFJLENBQUMsSUFDOUJsRSxRQUFRLENBQUMwRyxZQUFZLENBQUN4QyxJQUFJLENBQUMsQ0FBQyxFQUM5QjtNQUNFcEgsR0FBRyxDQUFDb0gsSUFBSSxDQUFDLEdBQUduRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVqRSxHQUFHLENBQUNvSCxJQUFJLENBQUMsQ0FBQztJQUNyQztFQUNKO0VBQ0EsT0FBT3BILEdBQUc7QUFDZDtBQUNBLFNBQVM4SixNQUFNQSxDQUFDOUIsTUFBTSxFQUFFO0VBQ3BCLElBQUlBLE1BQU0sSUFBSSxJQUFJLEVBQUU7SUFDaEIsSUFBSSxDQUFDb0IsR0FBRyxDQUFDcEIsTUFBTSxDQUFDO0VBQ3BCO0FBQ0o7QUFDQSxTQUFTdUMsUUFBUUEsQ0FBQ2xKLEdBQUcsRUFBRW1KLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0VBQzlCLElBQUlDLE1BQU0sR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ3RKLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQ3NKLFNBQVMsQ0FBQyxVQUFVLENBQUM7RUFDOUQsT0FBT3pCLFVBQVUsQ0FBQ3dCLE1BQU0sQ0FBQyxHQUFHQSxNQUFNLENBQUNuSixJQUFJLENBQUNpSixHQUFHLEVBQUVDLElBQUksQ0FBQyxHQUFHQyxNQUFNO0FBQy9EO0FBQ0EsU0FBU0UsUUFBUUEsQ0FBQ0MsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLFNBQVMsRUFBRTtFQUMvQyxJQUFJQyxTQUFTLEdBQUcsRUFBRSxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0wsTUFBTSxDQUFDO0lBQ2pDTSxXQUFXLEdBQUdMLFlBQVksR0FBR0UsU0FBUyxDQUFDMUgsTUFBTTtJQUM3QzhILEtBQUssR0FBR1AsTUFBTSxJQUFJLENBQUM7RUFDdkIsT0FDSSxDQUFDTyxLQUFLLEdBQUlMLFNBQVMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFJLEdBQUcsSUFDckNFLElBQUksQ0FBQ0ksR0FBRyxDQUFDLEVBQUUsRUFBRUosSUFBSSxDQUFDSyxHQUFHLENBQUMsQ0FBQyxFQUFFSCxXQUFXLENBQUMsQ0FBQyxDQUFDbEksUUFBUSxDQUFDLENBQUMsQ0FBQ3NJLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FDM0RQLFNBQVM7QUFFakI7QUFDQSxTQUFTWSxjQUFjQSxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFbEosUUFBUSxFQUFFO0VBQ3hELElBQUltSixJQUFJLEdBQUduSixRQUFRO0VBQ25CLElBQUksT0FBT0EsUUFBUSxLQUFLLFFBQVEsRUFBRTtJQUM5Qm1KLElBQUksR0FBRyxTQUFBQSxLQUFBLEVBQVk7TUFDZixPQUFPLElBQUksQ0FBQ25KLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztFQUNMO0VBQ0EsSUFBSWdKLE1BQU0sRUFBRTtJQUNSRixvQkFBb0IsQ0FBQ0UsTUFBTSxDQUFDLEdBQUdHLElBQUk7RUFDdkM7RUFDQSxJQUFJRixNQUFNLEVBQUU7SUFDUkgsb0JBQW9CLENBQUNHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVk7TUFDMUMsT0FBT2xCLFFBQVEsQ0FBQ29CLElBQUksQ0FBQ3RNLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQyxFQUFFbU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztFQUNMO0VBQ0EsSUFBSUMsUUFBUSxFQUFFO0lBQ1ZKLG9CQUFvQixDQUFDSSxRQUFRLENBQUMsR0FBRyxZQUFZO01BQ3pDLE9BQU8sSUFBSSxDQUFDRSxVQUFVLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQzVCRixJQUFJLENBQUN0TSxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUMsRUFDM0JrTSxNQUNKLENBQUM7SUFDTCxDQUFDO0VBQ0w7QUFDSjtBQUNBLFNBQVNNLHNCQUFzQkEsQ0FBQ3BKLEtBQUssRUFBRTtFQUNuQyxJQUFJQSxLQUFLLENBQUNxSixLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7SUFDekIsT0FBT3JKLEtBQUssQ0FBQ3NKLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDO0VBQ3hDO0VBQ0EsT0FBT3RKLEtBQUssQ0FBQ3NKLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0FBQ25DO0FBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDbEksT0FBTyxFQUFFO0VBQ2pDLElBQUltSSxLQUFLLEdBQUduSSxPQUFPLENBQUNnSSxLQUFLLENBQUNaLGdCQUFnQixDQUFDO0lBQ3ZDMUgsQ0FBQztJQUNEUixNQUFNO0VBQ1YsS0FBS1EsQ0FBQyxHQUFHLENBQUMsRUFBRVIsTUFBTSxHQUFHaUosS0FBSyxDQUFDakosTUFBTSxFQUFFUSxDQUFDLEdBQUdSLE1BQU0sRUFBRVEsQ0FBQyxFQUFFLEVBQUU7SUFDaEQsSUFBSTZILG9CQUFvQixDQUFDWSxLQUFLLENBQUN6SSxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ2hDeUksS0FBSyxDQUFDekksQ0FBQyxDQUFDLEdBQUc2SCxvQkFBb0IsQ0FBQ1ksS0FBSyxDQUFDekksQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxNQUFNO01BQ0h5SSxLQUFLLENBQUN6SSxDQUFDLENBQUMsR0FBR3FJLHNCQUFzQixDQUFDSSxLQUFLLENBQUN6SSxDQUFDLENBQUMsQ0FBQztJQUMvQztFQUNKO0VBQ0EsT0FBTyxVQUFVMEcsR0FBRyxFQUFFO0lBQ2xCLElBQUlFLE1BQU0sR0FBRyxFQUFFO01BQ1g4QixFQUFFO0lBQ04sS0FBS0EsRUFBRSxHQUFHLENBQUMsRUFBRUEsRUFBRSxHQUFHbEosTUFBTSxFQUFFa0osRUFBRSxFQUFFLEVBQUU7TUFDNUI5QixNQUFNLElBQUl4QixVQUFVLENBQUNxRCxLQUFLLENBQUNDLEVBQUUsQ0FBQyxDQUFDLEdBQ3pCRCxLQUFLLENBQUNDLEVBQUUsQ0FBQyxDQUFDakwsSUFBSSxDQUFDaUosR0FBRyxFQUFFcEcsT0FBTyxDQUFDLEdBQzVCbUksS0FBSyxDQUFDQyxFQUFFLENBQUM7SUFDbkI7SUFDQSxPQUFPOUIsTUFBTTtFQUNqQixDQUFDO0FBQ0w7QUFDQSxTQUFTK0IsWUFBWUEsQ0FBQzlHLENBQUMsRUFBRXZCLE9BQU8sRUFBRTtFQUM5QixJQUFJLENBQUN1QixDQUFDLENBQUNNLE9BQU8sQ0FBQyxDQUFDLEVBQUU7SUFDZCxPQUFPTixDQUFDLENBQUNzRyxVQUFVLENBQUMsQ0FBQyxDQUFDUyxXQUFXLENBQUMsQ0FBQztFQUN2QztFQUNBdEksT0FBTyxHQUFHdUksWUFBWSxDQUFDdkksT0FBTyxFQUFFdUIsQ0FBQyxDQUFDc0csVUFBVSxDQUFDLENBQUMsQ0FBQztFQUMvQ1AsZUFBZSxDQUFDdEgsT0FBTyxDQUFDLEdBQ3BCc0gsZUFBZSxDQUFDdEgsT0FBTyxDQUFDLElBQUlrSSxrQkFBa0IsQ0FBQ2xJLE9BQU8sQ0FBQztFQUMzRCxPQUFPc0gsZUFBZSxDQUFDdEgsT0FBTyxDQUFDLENBQUN1QixDQUFDLENBQUM7QUFDdEM7QUFDQSxTQUFTZ0gsWUFBWUEsQ0FBQ3ZJLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0VBQ3BDLElBQUlQLENBQUMsR0FBRyxDQUFDO0VBQ1QsU0FBUzhJLDJCQUEyQkEsQ0FBQzdKLEtBQUssRUFBRTtJQUN4QyxPQUFPc0IsT0FBTyxDQUFDd0ksY0FBYyxDQUFDOUosS0FBSyxDQUFDLElBQUlBLEtBQUs7RUFDakQ7RUFDQTBJLHFCQUFxQixDQUFDcUIsU0FBUyxHQUFHLENBQUM7RUFDbkMsT0FBT2hKLENBQUMsSUFBSSxDQUFDLElBQUkySCxxQkFBcUIsQ0FBQ3NCLElBQUksQ0FBQzNJLE9BQU8sQ0FBQyxFQUFFO0lBQ2xEQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ2lJLE9BQU8sQ0FDckJaLHFCQUFxQixFQUNyQm1CLDJCQUNKLENBQUM7SUFDRG5CLHFCQUFxQixDQUFDcUIsU0FBUyxHQUFHLENBQUM7SUFDbkNoSixDQUFDLElBQUksQ0FBQztFQUNWO0VBQ0EsT0FBT00sT0FBTztBQUNsQjtBQUNBLFNBQVN5SSxjQUFjQSxDQUFDeEwsR0FBRyxFQUFFO0VBQ3pCLElBQUkrQyxPQUFPLEdBQUcsSUFBSSxDQUFDbUosZUFBZSxDQUFDbE0sR0FBRyxDQUFDO0lBQ25DbU0sV0FBVyxHQUFHLElBQUksQ0FBQ0QsZUFBZSxDQUFDbE0sR0FBRyxDQUFDb00sV0FBVyxDQUFDLENBQUMsQ0FBQztFQUN6RCxJQUFJckosT0FBTyxJQUFJLENBQUNvSixXQUFXLEVBQUU7SUFDekIsT0FBT3BKLE9BQU87RUFDbEI7RUFDQSxJQUFJLENBQUNtSixlQUFlLENBQUNsTSxHQUFHLENBQUMsR0FBR21NLFdBQVcsQ0FDbENwQixLQUFLLENBQUNaLGdCQUFnQixDQUFDLENBQ3ZCNUgsR0FBRyxDQUFDLFVBQVU4SixHQUFHLEVBQUU7SUFDaEIsSUFDSUEsR0FBRyxLQUFLLE1BQU0sSUFDZEEsR0FBRyxLQUFLLElBQUksSUFDWkEsR0FBRyxLQUFLLElBQUksSUFDWkEsR0FBRyxLQUFLLE1BQU0sRUFDaEI7TUFDRSxPQUFPQSxHQUFHLENBQUM3RSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCO0lBQ0EsT0FBTzZFLEdBQUc7RUFDZCxDQUFDLENBQUMsQ0FDRDVFLElBQUksQ0FBQyxFQUFFLENBQUM7RUFDYixPQUFPLElBQUksQ0FBQ3lFLGVBQWUsQ0FBQ2xNLEdBQUcsQ0FBQztBQUNwQztBQUNBLFNBQVNxTCxXQUFXQSxDQUFBLEVBQUc7RUFDbkIsT0FBTyxJQUFJLENBQUNrQixZQUFZO0FBQzVCO0FBQ0EsU0FBUzFCLE9BQU9BLENBQUNyQixNQUFNLEVBQUU7RUFDckIsT0FBTyxJQUFJLENBQUNrRCxRQUFRLENBQUMxQixPQUFPLENBQUMsSUFBSSxFQUFFeEIsTUFBTSxDQUFDO0FBQzlDO0FBQ0EsU0FBU2tFLFlBQVlBLENBQUNsRSxNQUFNLEVBQUVtRSxhQUFhLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFO0VBQzNELElBQUl4RSxNQUFNLEdBQUcsSUFBSSxDQUFDeUUsYUFBYSxDQUFDRixNQUFNLENBQUM7RUFDdkMsT0FBTy9GLFVBQVUsQ0FBQ3dCLE1BQU0sQ0FBQyxHQUNuQkEsTUFBTSxDQUFDRyxNQUFNLEVBQUVtRSxhQUFhLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxDQUFDLEdBQy9DeEUsTUFBTSxDQUFDMkIsT0FBTyxDQUFDLEtBQUssRUFBRXhCLE1BQU0sQ0FBQztBQUN2QztBQUNBLFNBQVN1RSxVQUFVQSxDQUFDQyxLQUFLLEVBQUUzRSxNQUFNLEVBQUU7RUFDL0IsSUFBSXRHLE9BQU8sR0FBRyxJQUFJLENBQUMrSyxhQUFhLENBQUNFLEtBQUssR0FBRyxDQUFDLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQztFQUMvRCxPQUFPbkcsVUFBVSxDQUFDOUUsT0FBTyxDQUFDLEdBQ3BCQSxPQUFPLENBQUNzRyxNQUFNLENBQUMsR0FDZnRHLE9BQU8sQ0FBQ2lJLE9BQU8sQ0FBQyxLQUFLLEVBQUUzQixNQUFNLENBQUM7QUFDeEM7QUFDQSxTQUFTNkUsWUFBWUEsQ0FBQ0MsSUFBSSxFQUFFQyxTQUFTLEVBQUU7RUFDbkMsSUFBSUMsU0FBUyxHQUFHRixJQUFJLENBQUNHLFdBQVcsQ0FBQyxDQUFDO0VBQ2xDTCxPQUFPLENBQUNJLFNBQVMsQ0FBQyxHQUFHSixPQUFPLENBQUNJLFNBQVMsR0FBRyxHQUFHLENBQUMsR0FBR0osT0FBTyxDQUFDRyxTQUFTLENBQUMsR0FBR0QsSUFBSTtBQUM3RTtBQUNBLFNBQVNJLGNBQWNBLENBQUNDLEtBQUssRUFBRTtFQUMzQixPQUFPLE9BQU9BLEtBQUssS0FBSyxRQUFRLEdBQzFCUCxPQUFPLENBQUNPLEtBQUssQ0FBQyxJQUFJUCxPQUFPLENBQUNPLEtBQUssQ0FBQ0YsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUM5QyxLQUFLLENBQUM7QUFDaEI7QUFDQSxTQUFTRyxvQkFBb0JBLENBQUNDLFdBQVcsRUFBRTtFQUN2QyxJQUFJQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCQyxjQUFjO0lBQ2Q3SSxJQUFJO0VBQ1IsS0FBS0EsSUFBSSxJQUFJMkksV0FBVyxFQUFFO0lBQ3RCLElBQUk1TSxVQUFVLENBQUM0TSxXQUFXLEVBQUUzSSxJQUFJLENBQUMsRUFBRTtNQUMvQjZJLGNBQWMsR0FBR0wsY0FBYyxDQUFDeEksSUFBSSxDQUFDO01BQ3JDLElBQUk2SSxjQUFjLEVBQUU7UUFDaEJELGVBQWUsQ0FBQ0MsY0FBYyxDQUFDLEdBQUdGLFdBQVcsQ0FBQzNJLElBQUksQ0FBQztNQUN2RDtJQUNKO0VBQ0o7RUFDQSxPQUFPNEksZUFBZTtBQUMxQjtBQUNBLFNBQVNHLGVBQWVBLENBQUNYLElBQUksRUFBRVksUUFBUSxFQUFFO0VBQ3JDRixVQUFVLENBQUNWLElBQUksQ0FBQyxHQUFHWSxRQUFRO0FBQy9CO0FBQ0EsU0FBU0MsbUJBQW1CQSxDQUFDQyxRQUFRLEVBQUU7RUFDbkMsSUFBSVQsS0FBSyxHQUFHLEVBQUU7SUFDVlUsQ0FBQztFQUNMLEtBQUtBLENBQUMsSUFBSUQsUUFBUSxFQUFFO0lBQ2hCLElBQUluTixVQUFVLENBQUNtTixRQUFRLEVBQUVDLENBQUMsQ0FBQyxFQUFFO01BQ3pCVixLQUFLLENBQUM3TCxJQUFJLENBQUM7UUFBRXdMLElBQUksRUFBRWUsQ0FBQztRQUFFSCxRQUFRLEVBQUVGLFVBQVUsQ0FBQ0ssQ0FBQztNQUFFLENBQUMsQ0FBQztJQUNwRDtFQUNKO0VBQ0FWLEtBQUssQ0FBQ1csSUFBSSxDQUFDLFVBQVVoUixDQUFDLEVBQUVDLENBQUMsRUFBRTtJQUN2QixPQUFPRCxDQUFDLENBQUM0USxRQUFRLEdBQUczUSxDQUFDLENBQUMyUSxRQUFRO0VBQ2xDLENBQUMsQ0FBQztFQUNGLE9BQU9QLEtBQUs7QUFDaEI7QUFDQSxTQUFTWSxVQUFVQSxDQUFDQyxJQUFJLEVBQUU7RUFDdEIsT0FBUUEsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUlBLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFLQSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDbkU7QUFDQSxTQUFTQyxRQUFRQSxDQUFDOUYsTUFBTSxFQUFFO0VBQ3RCLElBQUlBLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDWixPQUFPSSxJQUFJLENBQUMyRixJQUFJLENBQUMvRixNQUFNLENBQUMsSUFBSSxDQUFDO0VBQ2pDLENBQUMsTUFBTTtJQUNILE9BQU9JLElBQUksQ0FBQzRGLEtBQUssQ0FBQ2hHLE1BQU0sQ0FBQztFQUM3QjtBQUNKO0FBQ0EsU0FBU2lHLEtBQUtBLENBQUNDLG1CQUFtQixFQUFFO0VBQ2hDLElBQUlDLGFBQWEsR0FBRyxDQUFDRCxtQkFBbUI7SUFDcEN6UCxLQUFLLEdBQUcsQ0FBQztFQUNiLElBQUkwUCxhQUFhLEtBQUssQ0FBQyxJQUFJQyxRQUFRLENBQUNELGFBQWEsQ0FBQyxFQUFFO0lBQ2hEMVAsS0FBSyxHQUFHcVAsUUFBUSxDQUFDSyxhQUFhLENBQUM7RUFDbkM7RUFDQSxPQUFPMVAsS0FBSztBQUNoQjtBQUNBLFNBQVM0UCxVQUFVQSxDQUFDMUIsSUFBSSxFQUFFMkIsUUFBUSxFQUFFO0VBQ2hDLE9BQU8sVUFBVTdQLEtBQUssRUFBRTtJQUNwQixJQUFJQSxLQUFLLElBQUksSUFBSSxFQUFFO01BQ2Y4UCxLQUFLLENBQUMsSUFBSSxFQUFFNUIsSUFBSSxFQUFFbE8sS0FBSyxDQUFDO01BQ3hCcUIsS0FBSyxDQUFDc0YsWUFBWSxDQUFDLElBQUksRUFBRWtKLFFBQVEsQ0FBQztNQUNsQyxPQUFPLElBQUk7SUFDZixDQUFDLE1BQU07TUFDSCxPQUFPNVIsR0FBRyxDQUFDLElBQUksRUFBRWlRLElBQUksQ0FBQztJQUMxQjtFQUNKLENBQUM7QUFDTDtBQUNBLFNBQVNqUSxHQUFHQSxDQUFDaUwsR0FBRyxFQUFFZ0YsSUFBSSxFQUFFO0VBQ3BCLE9BQU9oRixHQUFHLENBQUN2RSxPQUFPLENBQUMsQ0FBQyxHQUNkdUUsR0FBRyxDQUFDakUsRUFBRSxDQUFDLEtBQUssSUFBSWlFLEdBQUcsQ0FBQzVDLE1BQU0sR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUc0SCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQ2xEMUksR0FBRztBQUNiO0FBQ0EsU0FBU3NLLEtBQUtBLENBQUM1RyxHQUFHLEVBQUVnRixJQUFJLEVBQUVsTyxLQUFLLEVBQUU7RUFDN0IsSUFBSWtKLEdBQUcsQ0FBQ3ZFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0ssS0FBSyxDQUFDaEYsS0FBSyxDQUFDLEVBQUU7SUFDaEMsSUFDSWtPLElBQUksS0FBSyxVQUFVLElBQ25CaUIsVUFBVSxDQUFDakcsR0FBRyxDQUFDa0csSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUN0QmxHLEdBQUcsQ0FBQzZHLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUNqQjdHLEdBQUcsQ0FBQzhHLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUNuQjtNQUNFaFEsS0FBSyxHQUFHd1AsS0FBSyxDQUFDeFAsS0FBSyxDQUFDO01BQ3BCa0osR0FBRyxDQUFDakUsRUFBRSxDQUFDLEtBQUssSUFBSWlFLEdBQUcsQ0FBQzVDLE1BQU0sR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUc0SCxJQUFJLENBQUMsQ0FDNUNsTyxLQUFLLEVBQ0xrSixHQUFHLENBQUM2RyxLQUFLLENBQUMsQ0FBQyxFQUNYRSxXQUFXLENBQUNqUSxLQUFLLEVBQUVrSixHQUFHLENBQUM2RyxLQUFLLENBQUMsQ0FBQyxDQUNsQyxDQUFDO0lBQ0wsQ0FBQyxNQUFNO01BQ0g3RyxHQUFHLENBQUNqRSxFQUFFLENBQUMsS0FBSyxJQUFJaUUsR0FBRyxDQUFDNUMsTUFBTSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRzRILElBQUksQ0FBQyxDQUFDbE8sS0FBSyxDQUFDO0lBQzNEO0VBQ0o7QUFDSjtBQUNBLFNBQVNrUSxTQUFTQSxDQUFDM0IsS0FBSyxFQUFFO0VBQ3RCQSxLQUFLLEdBQUdELGNBQWMsQ0FBQ0MsS0FBSyxDQUFDO0VBQzdCLElBQUkzRyxVQUFVLENBQUMsSUFBSSxDQUFDMkcsS0FBSyxDQUFDLENBQUMsRUFBRTtJQUN6QixPQUFPLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUN4QjtFQUNBLE9BQU8sSUFBSTtBQUNmO0FBQ0EsU0FBUzRCLFNBQVNBLENBQUM1QixLQUFLLEVBQUV2TyxLQUFLLEVBQUU7RUFDN0IsSUFBSU4sT0FBQSxDQUFPNk8sS0FBSyxNQUFLLFFBQVEsRUFBRTtJQUMzQkEsS0FBSyxHQUFHQyxvQkFBb0IsQ0FBQ0QsS0FBSyxDQUFDO0lBQ25DLElBQUk2QixXQUFXLEdBQUdyQixtQkFBbUIsQ0FBQ1IsS0FBSyxDQUFDO01BQ3hDL0wsQ0FBQztNQUNENk4sY0FBYyxHQUFHRCxXQUFXLENBQUNwTyxNQUFNO0lBQ3ZDLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzZOLGNBQWMsRUFBRTdOLENBQUMsRUFBRSxFQUFFO01BQ2pDLElBQUksQ0FBQzROLFdBQVcsQ0FBQzVOLENBQUMsQ0FBQyxDQUFDMEwsSUFBSSxDQUFDLENBQUNLLEtBQUssQ0FBQzZCLFdBQVcsQ0FBQzVOLENBQUMsQ0FBQyxDQUFDMEwsSUFBSSxDQUFDLENBQUM7SUFDekQ7RUFDSixDQUFDLE1BQU07SUFDSEssS0FBSyxHQUFHRCxjQUFjLENBQUNDLEtBQUssQ0FBQztJQUM3QixJQUFJM0csVUFBVSxDQUFDLElBQUksQ0FBQzJHLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDekIsT0FBTyxJQUFJLENBQUNBLEtBQUssQ0FBQyxDQUFDdk8sS0FBSyxDQUFDO0lBQzdCO0VBQ0o7RUFDQSxPQUFPLElBQUk7QUFDZjtBQUNBLFNBQVN3UixhQUFhQSxDQUFDakgsTUFBTSxFQUFFa0gsS0FBSyxFQUFFQyxXQUFXLEVBQUU7RUFDL0NILE9BQU8sQ0FBQ2hILE1BQU0sQ0FBQyxHQUFHM0MsVUFBVSxDQUFDNkosS0FBSyxDQUFDLEdBQzdCQSxLQUFLLEdBQ0wsVUFBVUUsUUFBUSxFQUFFQyxXQUFXLEVBQUU7SUFDN0IsT0FBT0QsUUFBUSxJQUFJRCxXQUFXLEdBQUdBLFdBQVcsR0FBR0QsS0FBSztFQUN4RCxDQUFDO0FBQ1g7QUFDQSxTQUFTSSxxQkFBcUJBLENBQUN0SCxNQUFNLEVBQUU3RCxNQUFNLEVBQUU7RUFDM0MsSUFBSSxDQUFDN0UsVUFBVSxDQUFDMFAsT0FBTyxFQUFFaEgsTUFBTSxDQUFDLEVBQUU7SUFDOUIsT0FBTyxJQUFJdEMsTUFBTSxDQUFDNkosY0FBYyxDQUFDdkgsTUFBTSxDQUFDLENBQUM7RUFDN0M7RUFDQSxPQUFPZ0gsT0FBTyxDQUFDaEgsTUFBTSxDQUFDLENBQUM3RCxNQUFNLENBQUN0QixPQUFPLEVBQUVzQixNQUFNLENBQUNGLE9BQU8sQ0FBQztBQUMxRDtBQUNBLFNBQVNzTCxjQUFjQSxDQUFDNVIsQ0FBQyxFQUFFO0VBQ3ZCLE9BQU82UixXQUFXLENBQ2Q3UixDQUFDLENBQ0k2SyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUNqQkEsT0FBTyxDQUNKLHFDQUFxQyxFQUNyQyxVQUFVaUgsT0FBTyxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUU7SUFDL0IsT0FBT0gsRUFBRSxJQUFJQyxFQUFFLElBQUlDLEVBQUUsSUFBSUMsRUFBRTtFQUMvQixDQUNKLENBQ1IsQ0FBQztBQUNMO0FBQ0EsU0FBU0wsV0FBV0EsQ0FBQzdSLENBQUMsRUFBRTtFQUNwQixPQUFPQSxDQUFDLENBQUM2SyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxDQUFDO0FBQ3REO0FBQ0EsU0FBU3VILGFBQWFBLENBQUMvSCxNQUFNLEVBQUVoSixRQUFRLEVBQUU7RUFDckMsSUFBSWlCLENBQUM7SUFDRGtJLElBQUksR0FBR25KLFFBQVE7SUFDZmdSLFFBQVE7RUFDWixJQUFJLE9BQU9oSSxNQUFNLEtBQUssUUFBUSxFQUFFO0lBQzVCQSxNQUFNLEdBQUcsQ0FBQ0EsTUFBTSxDQUFDO0VBQ3JCO0VBQ0EsSUFBSXBJLFFBQVEsQ0FBQ1osUUFBUSxDQUFDLEVBQUU7SUFDcEJtSixJQUFJLEdBQUcsU0FBQUEsS0FBVWpKLEtBQUssRUFBRXdKLEtBQUssRUFBRTtNQUMzQkEsS0FBSyxDQUFDMUosUUFBUSxDQUFDLEdBQUdpTyxLQUFLLENBQUMvTixLQUFLLENBQUM7SUFDbEMsQ0FBQztFQUNMO0VBQ0E4USxRQUFRLEdBQUdoSSxNQUFNLENBQUN2SSxNQUFNO0VBQ3hCLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRytQLFFBQVEsRUFBRS9QLENBQUMsRUFBRSxFQUFFO0lBQzNCNlAsTUFBTSxDQUFDOUgsTUFBTSxDQUFDL0gsQ0FBQyxDQUFDLENBQUMsR0FBR2tJLElBQUk7RUFDNUI7QUFDSjtBQUNBLFNBQVM4SCxpQkFBaUJBLENBQUNqSSxNQUFNLEVBQUVoSixRQUFRLEVBQUU7RUFDekMrUSxhQUFhLENBQUMvSCxNQUFNLEVBQUUsVUFBVTlJLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRStMLE1BQU0sRUFBRTtJQUMxRC9MLE1BQU0sQ0FBQ2dNLEVBQUUsR0FBR2hNLE1BQU0sQ0FBQ2dNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0JuUixRQUFRLENBQUNFLEtBQUssRUFBRWlGLE1BQU0sQ0FBQ2dNLEVBQUUsRUFBRWhNLE1BQU0sRUFBRStMLE1BQU0sQ0FBQztFQUM5QyxDQUFDLENBQUM7QUFDTjtBQUNBLFNBQVNFLHVCQUF1QkEsQ0FBQ3BJLE1BQU0sRUFBRTlJLEtBQUssRUFBRWlGLE1BQU0sRUFBRTtFQUNwRCxJQUFJakYsS0FBSyxJQUFJLElBQUksSUFBSUksVUFBVSxDQUFDd1EsTUFBTSxFQUFFOUgsTUFBTSxDQUFDLEVBQUU7SUFDN0M4SCxNQUFNLENBQUM5SCxNQUFNLENBQUMsQ0FBQzlJLEtBQUssRUFBRWlGLE1BQU0sQ0FBQ2tNLEVBQUUsRUFBRWxNLE1BQU0sRUFBRTZELE1BQU0sQ0FBQztFQUNwRDtBQUNKO0FBQ0EsU0FBU3pMLEdBQUdBLENBQUNxQixDQUFDLEVBQUVyQyxDQUFDLEVBQUU7RUFDZixPQUFPLENBQUVxQyxDQUFDLEdBQUdyQyxDQUFDLEdBQUlBLENBQUMsSUFBSUEsQ0FBQztBQUM1QjtBQUNBLFNBQVNtUyxXQUFXQSxDQUFDYixJQUFJLEVBQUVXLEtBQUssRUFBRTtFQUM5QixJQUFJL0ssS0FBSyxDQUFDb0ssSUFBSSxDQUFDLElBQUlwSyxLQUFLLENBQUMrSyxLQUFLLENBQUMsRUFBRTtJQUM3QixPQUFPdkssR0FBRztFQUNkO0VBQ0EsSUFBSWdPLFFBQVEsR0FBRzFVLEdBQUcsQ0FBQ2lSLEtBQUssRUFBRSxFQUFFLENBQUM7RUFDN0JYLElBQUksSUFBSSxDQUFDVyxLQUFLLEdBQUd5RCxRQUFRLElBQUksRUFBRTtFQUMvQixPQUFPQSxRQUFRLEtBQUssQ0FBQyxHQUNmckUsVUFBVSxDQUFDQyxJQUFJLENBQUMsR0FDWixFQUFFLEdBQ0YsRUFBRSxHQUNOLEVBQUUsR0FBS29FLFFBQVEsR0FBRyxDQUFDLEdBQUksQ0FBRTtBQUNuQztBQUNBLFNBQVNZLFlBQVlBLENBQUMvUCxDQUFDLEVBQUV2QixPQUFPLEVBQUU7RUFDOUIsSUFBSSxDQUFDdUIsQ0FBQyxFQUFFO0lBQ0osT0FBTzdDLE9BQU8sQ0FBQyxJQUFJLENBQUM2UyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUNBLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDNUU7RUFDQSxPQUFPN1MsT0FBTyxDQUFDLElBQUksQ0FBQzZTLE9BQU8sQ0FBQyxHQUN0QixJQUFJLENBQUNBLE9BQU8sQ0FBQ2hRLENBQUMsQ0FBQzBMLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FDdkIsSUFBSSxDQUFDc0UsT0FBTyxDQUNSLENBQUMsSUFBSSxDQUFDQSxPQUFPLENBQUNDLFFBQVEsSUFBSUwsZ0JBQWdCLEVBQUV4SSxJQUFJLENBQUMzSSxPQUFPLENBQUMsR0FDbkQsUUFBUSxHQUNSLFlBQVksQ0FDckIsQ0FBQ3VCLENBQUMsQ0FBQzBMLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdEI7QUFDQSxTQUFTd0UsaUJBQWlCQSxDQUFDbFEsQ0FBQyxFQUFFdkIsT0FBTyxFQUFFO0VBQ25DLElBQUksQ0FBQ3VCLENBQUMsRUFBRTtJQUNKLE9BQU83QyxPQUFPLENBQUMsSUFBSSxDQUFDZ1QsWUFBWSxDQUFDLEdBQzNCLElBQUksQ0FBQ0EsWUFBWSxHQUNqQixJQUFJLENBQUNBLFlBQVksQ0FBQyxZQUFZLENBQUM7RUFDekM7RUFDQSxPQUFPaFQsT0FBTyxDQUFDLElBQUksQ0FBQ2dULFlBQVksQ0FBQyxHQUMzQixJQUFJLENBQUNBLFlBQVksQ0FBQ25RLENBQUMsQ0FBQzBMLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FDNUIsSUFBSSxDQUFDeUUsWUFBWSxDQUNiUCxnQkFBZ0IsQ0FBQ3hJLElBQUksQ0FBQzNJLE9BQU8sQ0FBQyxHQUFHLFFBQVEsR0FBRyxZQUFZLENBQzNELENBQUN1QixDQUFDLENBQUMwTCxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3RCO0FBQ0EsU0FBUzBFLGlCQUFpQkEsQ0FBQ0MsU0FBUyxFQUFFNVIsT0FBTyxFQUFFRSxNQUFNLEVBQUU7RUFDbkQsSUFBSVIsQ0FBQztJQUNEbVMsRUFBRTtJQUNGekwsR0FBRztJQUNIMEwsR0FBRyxHQUFHRixTQUFTLENBQUNHLGlCQUFpQixDQUFDLENBQUM7RUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxFQUFFO0lBQ3BCLElBQUksQ0FBQ0EsWUFBWSxHQUFHLEVBQUU7SUFDdEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxFQUFFO0lBQzFCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsRUFBRTtJQUMzQixLQUFLeFMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFQSxDQUFDLEVBQUU7TUFDckIwRyxHQUFHLEdBQUdyRyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUVMLENBQUMsQ0FBQyxDQUFDO01BQ3pCLElBQUksQ0FBQ3dTLGlCQUFpQixDQUFDeFMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDaVIsV0FBVyxDQUN4Q3ZLLEdBQUcsRUFDSCxFQUNKLENBQUMsQ0FBQzJMLGlCQUFpQixDQUFDLENBQUM7TUFDckIsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ3ZTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2tSLE1BQU0sQ0FBQ3hLLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzJMLGlCQUFpQixDQUFDLENBQUM7SUFDdkU7RUFDSjtFQUNBLElBQUk3UixNQUFNLEVBQUU7SUFDUixJQUFJRixPQUFPLEtBQUssS0FBSyxFQUFFO01BQ25CNlIsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQytVLGlCQUFpQixFQUFFSixHQUFHLENBQUM7TUFDOUMsT0FBT0QsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxFQUFFLEdBQUcsSUFBSTtJQUNoQyxDQUFDLE1BQU07TUFDSEEsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQzhVLGdCQUFnQixFQUFFSCxHQUFHLENBQUM7TUFDN0MsT0FBT0QsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHQSxFQUFFLEdBQUcsSUFBSTtJQUNoQztFQUNKLENBQUMsTUFBTTtJQUNILElBQUk3UixPQUFPLEtBQUssS0FBSyxFQUFFO01BQ25CNlIsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQytVLGlCQUFpQixFQUFFSixHQUFHLENBQUM7TUFDOUMsSUFBSUQsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ1gsT0FBT0EsRUFBRTtNQUNiO01BQ0FBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUM4VSxnQkFBZ0IsRUFBRUgsR0FBRyxDQUFDO01BQzdDLE9BQU9ELEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBR0EsRUFBRSxHQUFHLElBQUk7SUFDaEMsQ0FBQyxNQUFNO01BQ0hBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUM4VSxnQkFBZ0IsRUFBRUgsR0FBRyxDQUFDO01BQzdDLElBQUlELEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNYLE9BQU9BLEVBQUU7TUFDYjtNQUNBQSxFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDK1UsaUJBQWlCLEVBQUVKLEdBQUcsQ0FBQztNQUM5QyxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO0lBQ2hDO0VBQ0o7QUFDSjtBQUNBLFNBQVNNLGlCQUFpQkEsQ0FBQ1AsU0FBUyxFQUFFNVIsT0FBTyxFQUFFRSxNQUFNLEVBQUU7RUFDbkQsSUFBSVIsQ0FBQyxFQUFFMEcsR0FBRyxFQUFFdUksS0FBSztFQUNqQixJQUFJLElBQUksQ0FBQ3lELGlCQUFpQixFQUFFO0lBQ3hCLE9BQU9ULGlCQUFpQixDQUFDeFUsSUFBSSxDQUFDLElBQUksRUFBRXlVLFNBQVMsRUFBRTVSLE9BQU8sRUFBRUUsTUFBTSxDQUFDO0VBQ25FO0VBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQzhSLFlBQVksRUFBRTtJQUNwQixJQUFJLENBQUNBLFlBQVksR0FBRyxFQUFFO0lBQ3RCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsRUFBRTtJQUMxQixJQUFJLENBQUNDLGlCQUFpQixHQUFHLEVBQUU7RUFDL0I7RUFDQSxLQUFLeFMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7SUFDckIwRyxHQUFHLEdBQUdyRyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUVMLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLElBQUlRLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQytSLGdCQUFnQixDQUFDdlMsQ0FBQyxDQUFDLEVBQUU7TUFDckMsSUFBSSxDQUFDdVMsZ0JBQWdCLENBQUN2UyxDQUFDLENBQUMsR0FBRyxJQUFJeUYsTUFBTSxDQUNqQyxHQUFHLEdBQUcsSUFBSSxDQUFDeUwsTUFBTSxDQUFDeEssR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDNkIsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQ2pELEdBQ0osQ0FBQztNQUNELElBQUksQ0FBQ2lLLGlCQUFpQixDQUFDeFMsQ0FBQyxDQUFDLEdBQUcsSUFBSXlGLE1BQU0sQ0FDbEMsR0FBRyxHQUFHLElBQUksQ0FBQ3dMLFdBQVcsQ0FBQ3ZLLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzZCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUN0RCxHQUNKLENBQUM7SUFDTDtJQUNBLElBQUksQ0FBQy9ILE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQzhSLFlBQVksQ0FBQ3RTLENBQUMsQ0FBQyxFQUFFO01BQ2xDaVAsS0FBSyxHQUNELEdBQUcsR0FBRyxJQUFJLENBQUNpQyxNQUFNLENBQUN4SyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQ3VLLFdBQVcsQ0FBQ3ZLLEdBQUcsRUFBRSxFQUFFLENBQUM7TUFDakUsSUFBSSxDQUFDNEwsWUFBWSxDQUFDdFMsQ0FBQyxDQUFDLEdBQUcsSUFBSXlGLE1BQU0sQ0FBQ3dKLEtBQUssQ0FBQzFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ2xFO0lBQ0EsSUFDSS9ILE1BQU0sSUFDTkYsT0FBTyxLQUFLLE1BQU0sSUFDbEIsSUFBSSxDQUFDaVMsZ0JBQWdCLENBQUN2UyxDQUFDLENBQUMsQ0FBQ2lKLElBQUksQ0FBQ2lKLFNBQVMsQ0FBQyxFQUMxQztNQUNFLE9BQU9sUyxDQUFDO0lBQ1osQ0FBQyxNQUFNLElBQ0hRLE1BQU0sSUFDTkYsT0FBTyxLQUFLLEtBQUssSUFDakIsSUFBSSxDQUFDa1MsaUJBQWlCLENBQUN4UyxDQUFDLENBQUMsQ0FBQ2lKLElBQUksQ0FBQ2lKLFNBQVMsQ0FBQyxFQUMzQztNQUNFLE9BQU9sUyxDQUFDO0lBQ1osQ0FBQyxNQUFNLElBQUksQ0FBQ1EsTUFBTSxJQUFJLElBQUksQ0FBQzhSLFlBQVksQ0FBQ3RTLENBQUMsQ0FBQyxDQUFDaUosSUFBSSxDQUFDaUosU0FBUyxDQUFDLEVBQUU7TUFDeEQsT0FBT2xTLENBQUM7SUFDWjtFQUNKO0FBQ0o7QUFDQSxTQUFTMlMsUUFBUUEsQ0FBQ2pNLEdBQUcsRUFBRWxKLEtBQUssRUFBRTtFQUMxQixJQUFJb1YsVUFBVTtFQUNkLElBQUksQ0FBQ2xNLEdBQUcsQ0FBQ3ZFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7SUFDaEIsT0FBT3VFLEdBQUc7RUFDZDtFQUNBLElBQUksT0FBT2xKLEtBQUssS0FBSyxRQUFRLEVBQUU7SUFDM0IsSUFBSSxPQUFPLENBQUN5TCxJQUFJLENBQUN6TCxLQUFLLENBQUMsRUFBRTtNQUNyQkEsS0FBSyxHQUFHd1AsS0FBSyxDQUFDeFAsS0FBSyxDQUFDO0lBQ3hCLENBQUMsTUFBTTtNQUNIQSxLQUFLLEdBQUdrSixHQUFHLENBQUN5QixVQUFVLENBQUMsQ0FBQyxDQUFDa0osV0FBVyxDQUFDN1QsS0FBSyxDQUFDO01BQzNDLElBQUksQ0FBQ21DLFFBQVEsQ0FBQ25DLEtBQUssQ0FBQyxFQUFFO1FBQ2xCLE9BQU9rSixHQUFHO01BQ2Q7SUFDSjtFQUNKO0VBQ0FrTSxVQUFVLEdBQUd6TCxJQUFJLENBQUMwTCxHQUFHLENBQUNuTSxHQUFHLENBQUM4RyxJQUFJLENBQUMsQ0FBQyxFQUFFQyxXQUFXLENBQUMvRyxHQUFHLENBQUNrRyxJQUFJLENBQUMsQ0FBQyxFQUFFcFAsS0FBSyxDQUFDLENBQUM7RUFDakVrSixHQUFHLENBQUNqRSxFQUFFLENBQUMsS0FBSyxJQUFJaUUsR0FBRyxDQUFDNUMsTUFBTSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQ3RHLEtBQUssRUFBRW9WLFVBQVUsQ0FBQztFQUN0RSxPQUFPbE0sR0FBRztBQUNkO0FBQ0EsU0FBU29NLFdBQVdBLENBQUN0VixLQUFLLEVBQUU7RUFDeEIsSUFBSUEsS0FBSyxJQUFJLElBQUksRUFBRTtJQUNmbVYsUUFBUSxDQUFDLElBQUksRUFBRW5WLEtBQUssQ0FBQztJQUNyQnFCLEtBQUssQ0FBQ3NGLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQzlCLE9BQU8sSUFBSTtFQUNmLENBQUMsTUFBTTtJQUNILE9BQU8xSSxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztFQUM3QjtBQUNKO0FBQ0EsU0FBU3NYLGNBQWNBLENBQUEsRUFBRztFQUN0QixPQUFPdEYsV0FBVyxDQUFDLElBQUksQ0FBQ2IsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakQ7QUFDQSxTQUFTNEQsZ0JBQWdCQSxDQUFDaEMsUUFBUSxFQUFFO0VBQ2hDLElBQUksSUFBSSxDQUFDdUQsaUJBQWlCLEVBQUU7SUFDeEIsSUFBSSxDQUFDclQsVUFBVSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsRUFBRTtNQUNuQzJULGtCQUFrQixDQUFDdlYsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNqQztJQUNBLElBQUkwUixRQUFRLEVBQUU7TUFDVixPQUFPLElBQUksQ0FBQzhELHVCQUF1QjtJQUN2QyxDQUFDLE1BQU07TUFDSCxPQUFPLElBQUksQ0FBQ0MsaUJBQWlCO0lBQ2pDO0VBQ0osQ0FBQyxNQUFNO0lBQ0gsSUFBSSxDQUFDN1QsVUFBVSxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxFQUFFO01BQ3hDLElBQUksQ0FBQzZULGlCQUFpQixHQUFHeEIsdUJBQXVCO0lBQ3BEO0lBQ0EsT0FBTyxJQUFJLENBQUN1Qix1QkFBdUIsSUFBSTlELFFBQVEsR0FDekMsSUFBSSxDQUFDOEQsdUJBQXVCLEdBQzVCLElBQUksQ0FBQ0MsaUJBQWlCO0VBQ2hDO0FBQ0o7QUFDQSxTQUFTOUIsV0FBV0EsQ0FBQ2pDLFFBQVEsRUFBRTtFQUMzQixJQUFJLElBQUksQ0FBQ3VELGlCQUFpQixFQUFFO0lBQ3hCLElBQUksQ0FBQ3JULFVBQVUsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLEVBQUU7TUFDbkMyVCxrQkFBa0IsQ0FBQ3ZWLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDakM7SUFDQSxJQUFJMFIsUUFBUSxFQUFFO01BQ1YsT0FBTyxJQUFJLENBQUNnRSxrQkFBa0I7SUFDbEMsQ0FBQyxNQUFNO01BQ0gsT0FBTyxJQUFJLENBQUNDLFlBQVk7SUFDNUI7RUFDSixDQUFDLE1BQU07SUFDSCxJQUFJLENBQUMvVCxVQUFVLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxFQUFFO01BQ25DLElBQUksQ0FBQytULFlBQVksR0FBR3pCLGtCQUFrQjtJQUMxQztJQUNBLE9BQU8sSUFBSSxDQUFDd0Isa0JBQWtCLElBQUloRSxRQUFRLEdBQ3BDLElBQUksQ0FBQ2dFLGtCQUFrQixHQUN2QixJQUFJLENBQUNDLFlBQVk7RUFDM0I7QUFDSjtBQUNBLFNBQVNKLGtCQUFrQkEsQ0FBQSxFQUFHO0VBQzFCLFNBQVNLLFNBQVNBLENBQUMzWCxDQUFDLEVBQUVDLENBQUMsRUFBRTtJQUNyQixPQUFPQSxDQUFDLENBQUM2RCxNQUFNLEdBQUc5RCxDQUFDLENBQUM4RCxNQUFNO0VBQzlCO0VBQ0EsSUFBSThULFdBQVcsR0FBRyxFQUFFO0lBQ2hCQyxVQUFVLEdBQUcsRUFBRTtJQUNmQyxXQUFXLEdBQUcsRUFBRTtJQUNoQnhULENBQUM7SUFDRDBHLEdBQUc7RUFDUCxLQUFLMUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7SUFDckIwRyxHQUFHLEdBQUdyRyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUVMLENBQUMsQ0FBQyxDQUFDO0lBQ3pCc1QsV0FBVyxDQUFDcFQsSUFBSSxDQUFDLElBQUksQ0FBQytRLFdBQVcsQ0FBQ3ZLLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzQzZNLFVBQVUsQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNnUixNQUFNLENBQUN4SyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckM4TSxXQUFXLENBQUN0VCxJQUFJLENBQUMsSUFBSSxDQUFDZ1IsTUFBTSxDQUFDeEssR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDOE0sV0FBVyxDQUFDdFQsSUFBSSxDQUFDLElBQUksQ0FBQytRLFdBQVcsQ0FBQ3ZLLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztFQUMvQztFQUNBNE0sV0FBVyxDQUFDNUcsSUFBSSxDQUFDMkcsU0FBUyxDQUFDO0VBQzNCRSxVQUFVLENBQUM3RyxJQUFJLENBQUMyRyxTQUFTLENBQUM7RUFDMUJHLFdBQVcsQ0FBQzlHLElBQUksQ0FBQzJHLFNBQVMsQ0FBQztFQUMzQixLQUFLclQsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7SUFDckJzVCxXQUFXLENBQUN0VCxDQUFDLENBQUMsR0FBR3VQLFdBQVcsQ0FBQytELFdBQVcsQ0FBQ3RULENBQUMsQ0FBQyxDQUFDO0lBQzVDdVQsVUFBVSxDQUFDdlQsQ0FBQyxDQUFDLEdBQUd1UCxXQUFXLENBQUNnRSxVQUFVLENBQUN2VCxDQUFDLENBQUMsQ0FBQztFQUM5QztFQUNBLEtBQUtBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxFQUFFLEVBQUVBLENBQUMsRUFBRSxFQUFFO0lBQ3JCd1QsV0FBVyxDQUFDeFQsQ0FBQyxDQUFDLEdBQUd1UCxXQUFXLENBQUNpRSxXQUFXLENBQUN4VCxDQUFDLENBQUMsQ0FBQztFQUNoRDtFQUNBLElBQUksQ0FBQ29ULFlBQVksR0FBRyxJQUFJM04sTUFBTSxDQUFDLElBQUksR0FBRytOLFdBQVcsQ0FBQ3hPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDO0VBQ3ZFLElBQUksQ0FBQ2tPLGlCQUFpQixHQUFHLElBQUksQ0FBQ0UsWUFBWTtFQUMxQyxJQUFJLENBQUNELGtCQUFrQixHQUFHLElBQUkxTixNQUFNLENBQUMsSUFBSSxHQUFHOE4sVUFBVSxDQUFDdk8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUM7RUFDNUUsSUFBSSxDQUFDaU8sdUJBQXVCLEdBQUcsSUFBSXhOLE1BQU0sQ0FDckMsSUFBSSxHQUFHNk4sV0FBVyxDQUFDdE8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFDbEMsR0FDSixDQUFDO0FBQ0w7QUFDQSxTQUFTMk8sVUFBVUEsQ0FBQy9HLElBQUksRUFBRTtFQUN0QixPQUFPRCxVQUFVLENBQUNDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQ3ZDO0FBQ0EsU0FBU2lILGFBQWFBLENBQUEsRUFBRztFQUNyQixPQUFPbEgsVUFBVSxDQUFDLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNsQztBQUNBLFNBQVNrSCxVQUFVQSxDQUFDL0ksQ0FBQyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxFQUFFRixDQUFDLEVBQUVNLENBQUMsRUFBRW5OLENBQUMsRUFBRXFXLEVBQUUsRUFBRTtFQUN0QyxJQUFJdkcsSUFBSTtFQUNSLElBQUl6QyxDQUFDLEdBQUcsR0FBRyxJQUFJQSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ25CeUMsSUFBSSxHQUFHLElBQUkzTixJQUFJLENBQUNrTCxDQUFDLEdBQUcsR0FBRyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxFQUFFRixDQUFDLEVBQUVNLENBQUMsRUFBRW5OLENBQUMsRUFBRXFXLEVBQUUsQ0FBQztJQUMzQyxJQUFJNUcsUUFBUSxDQUFDSyxJQUFJLENBQUN3RyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDOUJ4RyxJQUFJLENBQUN5RyxXQUFXLENBQUNsSixDQUFDLENBQUM7SUFDdkI7RUFDSixDQUFDLE1BQU07SUFDSHlDLElBQUksR0FBRyxJQUFJM04sSUFBSSxDQUFDa0wsQ0FBQyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxFQUFFRixDQUFDLEVBQUVNLENBQUMsRUFBRW5OLENBQUMsRUFBRXFXLEVBQUUsQ0FBQztFQUN6QztFQUNBLE9BQU92RyxJQUFJO0FBQ2Y7QUFDQSxTQUFTMEcsYUFBYUEsQ0FBQ25KLENBQUMsRUFBRTtFQUN0QixJQUFJeUMsSUFBSSxFQUFFNUksSUFBSTtFQUNkLElBQUltRyxDQUFDLEdBQUcsR0FBRyxJQUFJQSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ25CbkcsSUFBSSxHQUFHMUYsS0FBSyxDQUFDL0QsU0FBUyxDQUFDNEosS0FBSyxDQUFDdEgsSUFBSSxDQUFDNUIsU0FBUyxDQUFDO0lBQzVDK0ksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHbUcsQ0FBQyxHQUFHLEdBQUc7SUFDakJ5QyxJQUFJLEdBQUcsSUFBSTNOLElBQUksQ0FBQ0EsSUFBSSxDQUFDc1UsR0FBRyxDQUFDdlksS0FBSyxDQUFDLElBQUksRUFBRWdKLElBQUksQ0FBQyxDQUFDO0lBQzNDLElBQUl1SSxRQUFRLENBQUNLLElBQUksQ0FBQzRHLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtNQUNqQzVHLElBQUksQ0FBQzZHLGNBQWMsQ0FBQ3RKLENBQUMsQ0FBQztJQUMxQjtFQUNKLENBQUMsTUFBTTtJQUNIeUMsSUFBSSxHQUFHLElBQUkzTixJQUFJLENBQUNBLElBQUksQ0FBQ3NVLEdBQUcsQ0FBQ3ZZLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0VBQ3BEO0VBQ0EsT0FBTzJSLElBQUk7QUFDZjtBQUNBLFNBQVM4RyxlQUFlQSxDQUFDMUgsSUFBSSxFQUFFMkgsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDckMsSUFBSUMsR0FBRyxHQUFHLENBQUMsR0FBR0YsR0FBRyxHQUFHQyxHQUFHO0lBQ25CRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUdSLGFBQWEsQ0FBQ3RILElBQUksRUFBRSxDQUFDLEVBQUU2SCxHQUFHLENBQUMsQ0FBQ0UsU0FBUyxDQUFDLENBQUMsR0FBR0osR0FBRyxJQUFJLENBQUM7RUFDbkUsT0FBTyxDQUFDRyxLQUFLLEdBQUdELEdBQUcsR0FBRyxDQUFDO0FBQzNCO0FBQ0EsU0FBU0csa0JBQWtCQSxDQUFDaEksSUFBSSxFQUFFaUksSUFBSSxFQUFFQyxPQUFPLEVBQUVQLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQ3ZELElBQUlPLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBR0QsT0FBTyxHQUFHUCxHQUFHLElBQUksQ0FBQztJQUN0Q1MsVUFBVSxHQUFHVixlQUFlLENBQUMxSCxJQUFJLEVBQUUySCxHQUFHLEVBQUVDLEdBQUcsQ0FBQztJQUM1Q1MsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUlKLElBQUksR0FBRyxDQUFDLENBQUMsR0FBR0UsWUFBWSxHQUFHQyxVQUFVO0lBQzFERSxPQUFPO0lBQ1BDLFlBQVk7RUFDaEIsSUFBSUYsU0FBUyxJQUFJLENBQUMsRUFBRTtJQUNoQkMsT0FBTyxHQUFHdEksSUFBSSxHQUFHLENBQUM7SUFDbEJ1SSxZQUFZLEdBQUd4QixVQUFVLENBQUN1QixPQUFPLENBQUMsR0FBR0QsU0FBUztFQUNsRCxDQUFDLE1BQU0sSUFBSUEsU0FBUyxHQUFHdEIsVUFBVSxDQUFDL0csSUFBSSxDQUFDLEVBQUU7SUFDckNzSSxPQUFPLEdBQUd0SSxJQUFJLEdBQUcsQ0FBQztJQUNsQnVJLFlBQVksR0FBR0YsU0FBUyxHQUFHdEIsVUFBVSxDQUFDL0csSUFBSSxDQUFDO0VBQy9DLENBQUMsTUFBTTtJQUNIc0ksT0FBTyxHQUFHdEksSUFBSTtJQUNkdUksWUFBWSxHQUFHRixTQUFTO0VBQzVCO0VBQ0EsT0FBTztJQUNIckksSUFBSSxFQUFFc0ksT0FBTztJQUNiRCxTQUFTLEVBQUVFO0VBQ2YsQ0FBQztBQUNMO0FBQ0EsU0FBU0MsVUFBVUEsQ0FBQzFPLEdBQUcsRUFBRTZOLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQy9CLElBQUlRLFVBQVUsR0FBR1YsZUFBZSxDQUFDNU4sR0FBRyxDQUFDa0csSUFBSSxDQUFDLENBQUMsRUFBRTJILEdBQUcsRUFBRUMsR0FBRyxDQUFDO0lBQ2xESyxJQUFJLEdBQUcxTixJQUFJLENBQUM0RixLQUFLLENBQUMsQ0FBQ3JHLEdBQUcsQ0FBQ3VPLFNBQVMsQ0FBQyxDQUFDLEdBQUdELFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUM3REssT0FBTztJQUNQSCxPQUFPO0VBQ1gsSUFBSUwsSUFBSSxHQUFHLENBQUMsRUFBRTtJQUNWSyxPQUFPLEdBQUd4TyxHQUFHLENBQUNrRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDeEJ5SSxPQUFPLEdBQUdSLElBQUksR0FBR1MsV0FBVyxDQUFDSixPQUFPLEVBQUVYLEdBQUcsRUFBRUMsR0FBRyxDQUFDO0VBQ25ELENBQUMsTUFBTSxJQUFJSyxJQUFJLEdBQUdTLFdBQVcsQ0FBQzVPLEdBQUcsQ0FBQ2tHLElBQUksQ0FBQyxDQUFDLEVBQUUySCxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxFQUFFO0lBQ2pEYSxPQUFPLEdBQUdSLElBQUksR0FBR1MsV0FBVyxDQUFDNU8sR0FBRyxDQUFDa0csSUFBSSxDQUFDLENBQUMsRUFBRTJILEdBQUcsRUFBRUMsR0FBRyxDQUFDO0lBQ2xEVSxPQUFPLEdBQUd4TyxHQUFHLENBQUNrRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7RUFDNUIsQ0FBQyxNQUFNO0lBQ0hzSSxPQUFPLEdBQUd4TyxHQUFHLENBQUNrRyxJQUFJLENBQUMsQ0FBQztJQUNwQnlJLE9BQU8sR0FBR1IsSUFBSTtFQUNsQjtFQUNBLE9BQU87SUFDSEEsSUFBSSxFQUFFUSxPQUFPO0lBQ2J6SSxJQUFJLEVBQUVzSTtFQUNWLENBQUM7QUFDTDtBQUNBLFNBQVNJLFdBQVdBLENBQUMxSSxJQUFJLEVBQUUySCxHQUFHLEVBQUVDLEdBQUcsRUFBRTtFQUNqQyxJQUFJUSxVQUFVLEdBQUdWLGVBQWUsQ0FBQzFILElBQUksRUFBRTJILEdBQUcsRUFBRUMsR0FBRyxDQUFDO0lBQzVDZSxjQUFjLEdBQUdqQixlQUFlLENBQUMxSCxJQUFJLEdBQUcsQ0FBQyxFQUFFMkgsR0FBRyxFQUFFQyxHQUFHLENBQUM7RUFDeEQsT0FBTyxDQUFDYixVQUFVLENBQUMvRyxJQUFJLENBQUMsR0FBR29JLFVBQVUsR0FBR08sY0FBYyxJQUFJLENBQUM7QUFDL0Q7QUFDQSxTQUFTQyxVQUFVQSxDQUFDOU8sR0FBRyxFQUFFO0VBQ3JCLE9BQU8wTyxVQUFVLENBQUMxTyxHQUFHLEVBQUUsSUFBSSxDQUFDK08sS0FBSyxDQUFDbEIsR0FBRyxFQUFFLElBQUksQ0FBQ2tCLEtBQUssQ0FBQ2pCLEdBQUcsQ0FBQyxDQUFDSyxJQUFJO0FBQy9EO0FBQ0EsU0FBU2Msb0JBQW9CQSxDQUFBLEVBQUc7RUFDNUIsT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBQ2xCLEdBQUc7QUFDekI7QUFDQSxTQUFTcUIsb0JBQW9CQSxDQUFBLEVBQUc7RUFDNUIsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ2pCLEdBQUc7QUFDekI7QUFDQSxTQUFTcUIsVUFBVUEsQ0FBQzVXLEtBQUssRUFBRTtFQUN2QixJQUFJNFYsSUFBSSxHQUFHLElBQUksQ0FBQzFNLFVBQVUsQ0FBQyxDQUFDLENBQUMwTSxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQ3ZDLE9BQU81VixLQUFLLElBQUksSUFBSSxHQUFHNFYsSUFBSSxHQUFHLElBQUksQ0FBQ2lCLEdBQUcsQ0FBQyxDQUFDN1csS0FBSyxHQUFHNFYsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7QUFDbkU7QUFDQSxTQUFTa0IsYUFBYUEsQ0FBQzlXLEtBQUssRUFBRTtFQUMxQixJQUFJNFYsSUFBSSxHQUFHTyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQ1AsSUFBSTtFQUN0QyxPQUFPNVYsS0FBSyxJQUFJLElBQUksR0FBRzRWLElBQUksR0FBRyxJQUFJLENBQUNpQixHQUFHLENBQUMsQ0FBQzdXLEtBQUssR0FBRzRWLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDO0FBQ25FO0FBQ0EsU0FBUzBCLFlBQVlBLENBQUN0WCxLQUFLLEVBQUVzQixPQUFPLEVBQUU7RUFDbEMsSUFBSSxPQUFPdEIsS0FBSyxLQUFLLFFBQVEsRUFBRTtJQUMzQixPQUFPQSxLQUFLO0VBQ2hCO0VBQ0EsSUFBSSxDQUFDdUQsS0FBSyxDQUFDdkQsS0FBSyxDQUFDLEVBQUU7SUFDZixPQUFPeVUsUUFBUSxDQUFDelUsS0FBSyxFQUFFLEVBQUUsQ0FBQztFQUM5QjtFQUNBQSxLQUFLLEdBQUdzQixPQUFPLENBQUMrVixhQUFhLENBQUNyWCxLQUFLLENBQUM7RUFDcEMsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUFFO0lBQzNCLE9BQU9BLEtBQUs7RUFDaEI7RUFDQSxPQUFPLElBQUk7QUFDZjtBQUNBLFNBQVN1WCxlQUFlQSxDQUFDdlgsS0FBSyxFQUFFc0IsT0FBTyxFQUFFO0VBQ3JDLElBQUksT0FBT3RCLEtBQUssS0FBSyxRQUFRLEVBQUU7SUFDM0IsT0FBT3NCLE9BQU8sQ0FBQytWLGFBQWEsQ0FBQ3JYLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0VBQ2hEO0VBQ0EsT0FBT3VELEtBQUssQ0FBQ3ZELEtBQUssQ0FBQyxHQUFHLElBQUksR0FBR0EsS0FBSztBQUN0QztBQUNBLFNBQVN3WCxhQUFhQSxDQUFDQyxFQUFFLEVBQUUvWSxDQUFDLEVBQUU7RUFDMUIsT0FBTytZLEVBQUUsQ0FBQzNSLEtBQUssQ0FBQ3BILENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQ2daLE1BQU0sQ0FBQ0QsRUFBRSxDQUFDM1IsS0FBSyxDQUFDLENBQUMsRUFBRXBILENBQUMsQ0FBQyxDQUFDO0FBQ2hEO0FBQ0EsU0FBU3VaLGNBQWNBLENBQUNyVixDQUFDLEVBQUV2QixPQUFPLEVBQUU7RUFDaEMsSUFBSTRWLFFBQVEsR0FBR2xYLE9BQU8sQ0FBQyxJQUFJLENBQUNtWSxTQUFTLENBQUMsR0FDaEMsSUFBSSxDQUFDQSxTQUFTLEdBQ2QsSUFBSSxDQUFDQSxTQUFTLENBQ1Z0VixDQUFDLElBQUlBLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDc1YsU0FBUyxDQUFDckYsUUFBUSxDQUFDN0ksSUFBSSxDQUFDM0ksT0FBTyxDQUFDLEdBQ2xELFFBQVEsR0FDUixZQUFZLENBQ3JCO0VBQ1AsT0FBT3VCLENBQUMsS0FBSyxJQUFJLEdBQ1g0VSxhQUFhLENBQUNQLFFBQVEsRUFBRSxJQUFJLENBQUNULEtBQUssQ0FBQ2xCLEdBQUcsQ0FBQyxHQUN2QzFTLENBQUMsR0FDRHFVLFFBQVEsQ0FBQ3JVLENBQUMsQ0FBQ3VWLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FDakJsQixRQUFRO0FBQ2xCO0FBQ0EsU0FBU21CLG1CQUFtQkEsQ0FBQ3hWLENBQUMsRUFBRTtFQUM1QixPQUFPQSxDQUFDLEtBQUssSUFBSSxHQUNYNFUsYUFBYSxDQUFDLElBQUksQ0FBQ2EsY0FBYyxFQUFFLElBQUksQ0FBQzdCLEtBQUssQ0FBQ2xCLEdBQUcsQ0FBQyxHQUNsRDFTLENBQUMsR0FDRCxJQUFJLENBQUN5VixjQUFjLENBQUN6VixDQUFDLENBQUN1VixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQzVCLElBQUksQ0FBQ0UsY0FBYztBQUM3QjtBQUNBLFNBQVNDLGlCQUFpQkEsQ0FBQzFWLENBQUMsRUFBRTtFQUMxQixPQUFPQSxDQUFDLEtBQUssSUFBSSxHQUNYNFUsYUFBYSxDQUFDLElBQUksQ0FBQ2UsWUFBWSxFQUFFLElBQUksQ0FBQy9CLEtBQUssQ0FBQ2xCLEdBQUcsQ0FBQyxHQUNoRDFTLENBQUMsR0FDRCxJQUFJLENBQUMyVixZQUFZLENBQUMzVixDQUFDLENBQUN1VixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQzFCLElBQUksQ0FBQ0ksWUFBWTtBQUMzQjtBQUNBLFNBQVNDLG1CQUFtQkEsQ0FBQ0MsV0FBVyxFQUFFcFgsT0FBTyxFQUFFRSxNQUFNLEVBQUU7RUFDdkQsSUFBSVIsQ0FBQztJQUNEbVMsRUFBRTtJQUNGekwsR0FBRztJQUNIMEwsR0FBRyxHQUFHc0YsV0FBVyxDQUFDckYsaUJBQWlCLENBQUMsQ0FBQztFQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDc0YsY0FBYyxFQUFFO0lBQ3RCLElBQUksQ0FBQ0EsY0FBYyxHQUFHLEVBQUU7SUFDeEIsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRyxFQUFFO0lBQzdCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsRUFBRTtJQUMzQixLQUFLN1gsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFQSxDQUFDLEVBQUU7TUFDcEIwRyxHQUFHLEdBQUdyRyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQytXLEdBQUcsQ0FBQ3BYLENBQUMsQ0FBQztNQUNoQyxJQUFJLENBQUM2WCxpQkFBaUIsQ0FBQzdYLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2dXLFdBQVcsQ0FDeEN0UCxHQUFHLEVBQ0gsRUFDSixDQUFDLENBQUMyTCxpQkFBaUIsQ0FBQyxDQUFDO01BQ3JCLElBQUksQ0FBQ3VGLG1CQUFtQixDQUFDNVgsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDaVcsYUFBYSxDQUM1Q3ZQLEdBQUcsRUFDSCxFQUNKLENBQUMsQ0FBQzJMLGlCQUFpQixDQUFDLENBQUM7TUFDckIsSUFBSSxDQUFDc0YsY0FBYyxDQUFDM1gsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDa1csUUFBUSxDQUFDeFAsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDMkwsaUJBQWlCLENBQUMsQ0FBQztJQUN2RTtFQUNKO0VBQ0EsSUFBSTdSLE1BQU0sRUFBRTtJQUNSLElBQUlGLE9BQU8sS0FBSyxNQUFNLEVBQUU7TUFDcEI2UixFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDa2EsY0FBYyxFQUFFdkYsR0FBRyxDQUFDO01BQzNDLE9BQU9ELEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBR0EsRUFBRSxHQUFHLElBQUk7SUFDaEMsQ0FBQyxNQUFNLElBQUk3UixPQUFPLEtBQUssS0FBSyxFQUFFO01BQzFCNlIsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ21hLG1CQUFtQixFQUFFeEYsR0FBRyxDQUFDO01BQ2hELE9BQU9ELEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBR0EsRUFBRSxHQUFHLElBQUk7SUFDaEMsQ0FBQyxNQUFNO01BQ0hBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNvYSxpQkFBaUIsRUFBRXpGLEdBQUcsQ0FBQztNQUM5QyxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO0lBQ2hDO0VBQ0osQ0FBQyxNQUFNO0lBQ0gsSUFBSTdSLE9BQU8sS0FBSyxNQUFNLEVBQUU7TUFDcEI2UixFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDa2EsY0FBYyxFQUFFdkYsR0FBRyxDQUFDO01BQzNDLElBQUlELEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNYLE9BQU9BLEVBQUU7TUFDYjtNQUNBQSxFQUFFLEdBQUdyQixPQUFPLENBQUNyVCxJQUFJLENBQUMsSUFBSSxDQUFDbWEsbUJBQW1CLEVBQUV4RixHQUFHLENBQUM7TUFDaEQsSUFBSUQsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ1gsT0FBT0EsRUFBRTtNQUNiO01BQ0FBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNvYSxpQkFBaUIsRUFBRXpGLEdBQUcsQ0FBQztNQUM5QyxPQUFPRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUdBLEVBQUUsR0FBRyxJQUFJO0lBQ2hDLENBQUMsTUFBTSxJQUFJN1IsT0FBTyxLQUFLLEtBQUssRUFBRTtNQUMxQjZSLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNtYSxtQkFBbUIsRUFBRXhGLEdBQUcsQ0FBQztNQUNoRCxJQUFJRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDWCxPQUFPQSxFQUFFO01BQ2I7TUFDQUEsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ2thLGNBQWMsRUFBRXZGLEdBQUcsQ0FBQztNQUMzQyxJQUFJRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDWCxPQUFPQSxFQUFFO01BQ2I7TUFDQUEsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ29hLGlCQUFpQixFQUFFekYsR0FBRyxDQUFDO01BQzlDLE9BQU9ELEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBR0EsRUFBRSxHQUFHLElBQUk7SUFDaEMsQ0FBQyxNQUFNO01BQ0hBLEVBQUUsR0FBR3JCLE9BQU8sQ0FBQ3JULElBQUksQ0FBQyxJQUFJLENBQUNvYSxpQkFBaUIsRUFBRXpGLEdBQUcsQ0FBQztNQUM5QyxJQUFJRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDWCxPQUFPQSxFQUFFO01BQ2I7TUFDQUEsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ2thLGNBQWMsRUFBRXZGLEdBQUcsQ0FBQztNQUMzQyxJQUFJRCxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDWCxPQUFPQSxFQUFFO01BQ2I7TUFDQUEsRUFBRSxHQUFHckIsT0FBTyxDQUFDclQsSUFBSSxDQUFDLElBQUksQ0FBQ21hLG1CQUFtQixFQUFFeEYsR0FBRyxDQUFDO01BQ2hELE9BQU9ELEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBR0EsRUFBRSxHQUFHLElBQUk7SUFDaEM7RUFDSjtBQUNKO0FBQ0EsU0FBUzJGLG1CQUFtQkEsQ0FBQ0osV0FBVyxFQUFFcFgsT0FBTyxFQUFFRSxNQUFNLEVBQUU7RUFDdkQsSUFBSVIsQ0FBQyxFQUFFMEcsR0FBRyxFQUFFdUksS0FBSztFQUNqQixJQUFJLElBQUksQ0FBQzhJLG1CQUFtQixFQUFFO0lBQzFCLE9BQU9OLG1CQUFtQixDQUFDaGEsSUFBSSxDQUFDLElBQUksRUFBRWlhLFdBQVcsRUFBRXBYLE9BQU8sRUFBRUUsTUFBTSxDQUFDO0VBQ3ZFO0VBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ21YLGNBQWMsRUFBRTtJQUN0QixJQUFJLENBQUNBLGNBQWMsR0FBRyxFQUFFO0lBQ3hCLElBQUksQ0FBQ0UsaUJBQWlCLEdBQUcsRUFBRTtJQUMzQixJQUFJLENBQUNELG1CQUFtQixHQUFHLEVBQUU7SUFDN0IsSUFBSSxDQUFDSSxrQkFBa0IsR0FBRyxFQUFFO0VBQ2hDO0VBQ0EsS0FBS2hZLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO0lBQ3BCMEcsR0FBRyxHQUFHckcsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMrVyxHQUFHLENBQUNwWCxDQUFDLENBQUM7SUFDaEMsSUFBSVEsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDd1gsa0JBQWtCLENBQUNoWSxDQUFDLENBQUMsRUFBRTtNQUN2QyxJQUFJLENBQUNnWSxrQkFBa0IsQ0FBQ2hZLENBQUMsQ0FBQyxHQUFHLElBQUl5RixNQUFNLENBQ25DLEdBQUcsR0FBRyxJQUFJLENBQUN5USxRQUFRLENBQUN4UCxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM2QixPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsRUFDdkQsR0FDSixDQUFDO01BQ0QsSUFBSSxDQUFDcVAsbUJBQW1CLENBQUM1WCxDQUFDLENBQUMsR0FBRyxJQUFJeUYsTUFBTSxDQUNwQyxHQUFHLEdBQUcsSUFBSSxDQUFDd1EsYUFBYSxDQUFDdlAsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDNkIsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLEVBQzVELEdBQ0osQ0FBQztNQUNELElBQUksQ0FBQ3NQLGlCQUFpQixDQUFDN1gsQ0FBQyxDQUFDLEdBQUcsSUFBSXlGLE1BQU0sQ0FDbEMsR0FBRyxHQUFHLElBQUksQ0FBQ3VRLFdBQVcsQ0FBQ3RQLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzZCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUMxRCxHQUNKLENBQUM7SUFDTDtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUNvUCxjQUFjLENBQUMzWCxDQUFDLENBQUMsRUFBRTtNQUN6QmlQLEtBQUssR0FDRCxHQUFHLEdBQ0gsSUFBSSxDQUFDaUgsUUFBUSxDQUFDeFAsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUN0QixJQUFJLEdBQ0osSUFBSSxDQUFDdVAsYUFBYSxDQUFDdlAsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUMzQixJQUFJLEdBQ0osSUFBSSxDQUFDc1AsV0FBVyxDQUFDdFAsR0FBRyxFQUFFLEVBQUUsQ0FBQztNQUM3QixJQUFJLENBQUNpUixjQUFjLENBQUMzWCxDQUFDLENBQUMsR0FBRyxJQUFJeUYsTUFBTSxDQUFDd0osS0FBSyxDQUFDMUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDcEU7SUFDQSxJQUNJL0gsTUFBTSxJQUNORixPQUFPLEtBQUssTUFBTSxJQUNsQixJQUFJLENBQUMwWCxrQkFBa0IsQ0FBQ2hZLENBQUMsQ0FBQyxDQUFDaUosSUFBSSxDQUFDeU8sV0FBVyxDQUFDLEVBQzlDO01BQ0UsT0FBTzFYLENBQUM7SUFDWixDQUFDLE1BQU0sSUFDSFEsTUFBTSxJQUNORixPQUFPLEtBQUssS0FBSyxJQUNqQixJQUFJLENBQUNzWCxtQkFBbUIsQ0FBQzVYLENBQUMsQ0FBQyxDQUFDaUosSUFBSSxDQUFDeU8sV0FBVyxDQUFDLEVBQy9DO01BQ0UsT0FBTzFYLENBQUM7SUFDWixDQUFDLE1BQU0sSUFDSFEsTUFBTSxJQUNORixPQUFPLEtBQUssSUFBSSxJQUNoQixJQUFJLENBQUN1WCxpQkFBaUIsQ0FBQzdYLENBQUMsQ0FBQyxDQUFDaUosSUFBSSxDQUFDeU8sV0FBVyxDQUFDLEVBQzdDO01BQ0UsT0FBTzFYLENBQUM7SUFDWixDQUFDLE1BQU0sSUFBSSxDQUFDUSxNQUFNLElBQUksSUFBSSxDQUFDbVgsY0FBYyxDQUFDM1gsQ0FBQyxDQUFDLENBQUNpSixJQUFJLENBQUN5TyxXQUFXLENBQUMsRUFBRTtNQUM1RCxPQUFPMVgsQ0FBQztJQUNaO0VBQ0o7QUFDSjtBQUNBLFNBQVNpWSxlQUFlQSxDQUFDaFosS0FBSyxFQUFFO0VBQzVCLElBQUksQ0FBQyxJQUFJLENBQUNrRCxPQUFPLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLE9BQU9sRCxLQUFLLElBQUksSUFBSSxHQUFHLElBQUksR0FBRytELEdBQUc7RUFDckM7RUFDQSxJQUFJb1UsR0FBRyxHQUFHLElBQUksQ0FBQ3RULE1BQU0sR0FBRyxJQUFJLENBQUNyQixFQUFFLENBQUNrUyxTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2xTLEVBQUUsQ0FBQ3lWLE1BQU0sQ0FBQyxDQUFDO0VBQzlELElBQUlqWixLQUFLLElBQUksSUFBSSxFQUFFO0lBQ2ZBLEtBQUssR0FBR3NYLFlBQVksQ0FBQ3RYLEtBQUssRUFBRSxJQUFJLENBQUNrSixVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sSUFBSSxDQUFDMk4sR0FBRyxDQUFDN1csS0FBSyxHQUFHbVksR0FBRyxFQUFFLEdBQUcsQ0FBQztFQUNyQyxDQUFDLE1BQU07SUFDSCxPQUFPQSxHQUFHO0VBQ2Q7QUFDSjtBQUNBLFNBQVNlLHFCQUFxQkEsQ0FBQ2xaLEtBQUssRUFBRTtFQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDa0QsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNqQixPQUFPbEQsS0FBSyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcrRCxHQUFHO0VBQ3JDO0VBQ0EsSUFBSThSLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQ3NDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQ2pQLFVBQVUsQ0FBQyxDQUFDLENBQUNzTixLQUFLLENBQUNsQixHQUFHLElBQUksQ0FBQztFQUNoRSxPQUFPdFYsS0FBSyxJQUFJLElBQUksR0FBRzZWLE9BQU8sR0FBRyxJQUFJLENBQUNnQixHQUFHLENBQUM3VyxLQUFLLEdBQUc2VixPQUFPLEVBQUUsR0FBRyxDQUFDO0FBQ25FO0FBQ0EsU0FBU3NELGtCQUFrQkEsQ0FBQ25aLEtBQUssRUFBRTtFQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDa0QsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNqQixPQUFPbEQsS0FBSyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcrRCxHQUFHO0VBQ3JDO0VBQ0EsSUFBSS9ELEtBQUssSUFBSSxJQUFJLEVBQUU7SUFDZixJQUFJNlYsT0FBTyxHQUFHMEIsZUFBZSxDQUFDdlgsS0FBSyxFQUFFLElBQUksQ0FBQ2tKLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsT0FBTyxJQUFJLENBQUNpUCxHQUFHLENBQUMsSUFBSSxDQUFDQSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBR3RDLE9BQU8sR0FBR0EsT0FBTyxHQUFHLENBQUMsQ0FBQztFQUMzRCxDQUFDLE1BQU07SUFDSCxPQUFPLElBQUksQ0FBQ3NDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztFQUMxQjtBQUNKO0FBQ0EsU0FBU2YsYUFBYUEsQ0FBQ2xILFFBQVEsRUFBRTtFQUM3QixJQUFJLElBQUksQ0FBQzRJLG1CQUFtQixFQUFFO0lBQzFCLElBQUksQ0FBQzFZLFVBQVUsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtNQUNyQ2daLG9CQUFvQixDQUFDNWEsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQztJQUNBLElBQUkwUixRQUFRLEVBQUU7TUFDVixPQUFPLElBQUksQ0FBQ21KLG9CQUFvQjtJQUNwQyxDQUFDLE1BQU07TUFDSCxPQUFPLElBQUksQ0FBQ0MsY0FBYztJQUM5QjtFQUNKLENBQUMsTUFBTTtJQUNILElBQUksQ0FBQ2xaLFVBQVUsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtNQUNyQyxJQUFJLENBQUNrWixjQUFjLEdBQUd4QixvQkFBb0I7SUFDOUM7SUFDQSxPQUFPLElBQUksQ0FBQ3VCLG9CQUFvQixJQUFJbkosUUFBUSxHQUN0QyxJQUFJLENBQUNtSixvQkFBb0IsR0FDekIsSUFBSSxDQUFDQyxjQUFjO0VBQzdCO0FBQ0o7QUFDQSxTQUFTbkMsa0JBQWtCQSxDQUFDakgsUUFBUSxFQUFFO0VBQ2xDLElBQUksSUFBSSxDQUFDNEksbUJBQW1CLEVBQUU7SUFDMUIsSUFBSSxDQUFDMVksVUFBVSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO01BQ3JDZ1osb0JBQW9CLENBQUM1YSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25DO0lBQ0EsSUFBSTBSLFFBQVEsRUFBRTtNQUNWLE9BQU8sSUFBSSxDQUFDcUoseUJBQXlCO0lBQ3pDLENBQUMsTUFBTTtNQUNILE9BQU8sSUFBSSxDQUFDQyxtQkFBbUI7SUFDbkM7RUFDSixDQUFDLE1BQU07SUFDSCxJQUFJLENBQUNwWixVQUFVLENBQUMsSUFBSSxFQUFFLHFCQUFxQixDQUFDLEVBQUU7TUFDMUMsSUFBSSxDQUFDb1osbUJBQW1CLEdBQUd6Qix5QkFBeUI7SUFDeEQ7SUFDQSxPQUFPLElBQUksQ0FBQ3dCLHlCQUF5QixJQUFJckosUUFBUSxHQUMzQyxJQUFJLENBQUNxSix5QkFBeUIsR0FDOUIsSUFBSSxDQUFDQyxtQkFBbUI7RUFDbEM7QUFDSjtBQUNBLFNBQVN0QyxnQkFBZ0JBLENBQUNoSCxRQUFRLEVBQUU7RUFDaEMsSUFBSSxJQUFJLENBQUM0SSxtQkFBbUIsRUFBRTtJQUMxQixJQUFJLENBQUMxWSxVQUFVLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLEVBQUU7TUFDckNnWixvQkFBb0IsQ0FBQzVhLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkM7SUFDQSxJQUFJMFIsUUFBUSxFQUFFO01BQ1YsT0FBTyxJQUFJLENBQUN1Six1QkFBdUI7SUFDdkMsQ0FBQyxNQUFNO01BQ0gsT0FBTyxJQUFJLENBQUNDLGlCQUFpQjtJQUNqQztFQUNKLENBQUMsTUFBTTtJQUNILElBQUksQ0FBQ3RaLFVBQVUsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsRUFBRTtNQUN4QyxJQUFJLENBQUNzWixpQkFBaUIsR0FBRzFCLHVCQUF1QjtJQUNwRDtJQUNBLE9BQU8sSUFBSSxDQUFDeUIsdUJBQXVCLElBQUl2SixRQUFRLEdBQ3pDLElBQUksQ0FBQ3VKLHVCQUF1QixHQUM1QixJQUFJLENBQUNDLGlCQUFpQjtFQUNoQztBQUNKO0FBQ0EsU0FBU04sb0JBQW9CQSxDQUFBLEVBQUc7RUFDNUIsU0FBU2hGLFNBQVNBLENBQUMzWCxDQUFDLEVBQUVDLENBQUMsRUFBRTtJQUNyQixPQUFPQSxDQUFDLENBQUM2RCxNQUFNLEdBQUc5RCxDQUFDLENBQUM4RCxNQUFNO0VBQzlCO0VBQ0EsSUFBSW9aLFNBQVMsR0FBRyxFQUFFO0lBQ2R0RixXQUFXLEdBQUcsRUFBRTtJQUNoQkMsVUFBVSxHQUFHLEVBQUU7SUFDZkMsV0FBVyxHQUFHLEVBQUU7SUFDaEJ4VCxDQUFDO0lBQ0QwRyxHQUFHO0lBQ0htUyxJQUFJO0lBQ0pDLE1BQU07SUFDTkMsS0FBSztFQUNULEtBQUsvWSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtJQUNwQjBHLEdBQUcsR0FBR3JHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDK1csR0FBRyxDQUFDcFgsQ0FBQyxDQUFDO0lBQ2hDNlksSUFBSSxHQUFHdEosV0FBVyxDQUFDLElBQUksQ0FBQ3lHLFdBQVcsQ0FBQ3RQLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3Q29TLE1BQU0sR0FBR3ZKLFdBQVcsQ0FBQyxJQUFJLENBQUMwRyxhQUFhLENBQUN2UCxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakRxUyxLQUFLLEdBQUd4SixXQUFXLENBQUMsSUFBSSxDQUFDMkcsUUFBUSxDQUFDeFAsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNDa1MsU0FBUyxDQUFDMVksSUFBSSxDQUFDMlksSUFBSSxDQUFDO0lBQ3BCdkYsV0FBVyxDQUFDcFQsSUFBSSxDQUFDNFksTUFBTSxDQUFDO0lBQ3hCdkYsVUFBVSxDQUFDclQsSUFBSSxDQUFDNlksS0FBSyxDQUFDO0lBQ3RCdkYsV0FBVyxDQUFDdFQsSUFBSSxDQUFDMlksSUFBSSxDQUFDO0lBQ3RCckYsV0FBVyxDQUFDdFQsSUFBSSxDQUFDNFksTUFBTSxDQUFDO0lBQ3hCdEYsV0FBVyxDQUFDdFQsSUFBSSxDQUFDNlksS0FBSyxDQUFDO0VBQzNCO0VBQ0FILFNBQVMsQ0FBQ2xNLElBQUksQ0FBQzJHLFNBQVMsQ0FBQztFQUN6QkMsV0FBVyxDQUFDNUcsSUFBSSxDQUFDMkcsU0FBUyxDQUFDO0VBQzNCRSxVQUFVLENBQUM3RyxJQUFJLENBQUMyRyxTQUFTLENBQUM7RUFDMUJHLFdBQVcsQ0FBQzlHLElBQUksQ0FBQzJHLFNBQVMsQ0FBQztFQUMzQixJQUFJLENBQUNrRixjQUFjLEdBQUcsSUFBSTlTLE1BQU0sQ0FBQyxJQUFJLEdBQUcrTixXQUFXLENBQUN4TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQztFQUN6RSxJQUFJLENBQUN5VCxtQkFBbUIsR0FBRyxJQUFJLENBQUNGLGNBQWM7RUFDOUMsSUFBSSxDQUFDSSxpQkFBaUIsR0FBRyxJQUFJLENBQUNKLGNBQWM7RUFDNUMsSUFBSSxDQUFDRCxvQkFBb0IsR0FBRyxJQUFJN1MsTUFBTSxDQUNsQyxJQUFJLEdBQUc4TixVQUFVLENBQUN2TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNqQyxHQUNKLENBQUM7RUFDRCxJQUFJLENBQUN3VCx5QkFBeUIsR0FBRyxJQUFJL1MsTUFBTSxDQUN2QyxJQUFJLEdBQUc2TixXQUFXLENBQUN0TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNsQyxHQUNKLENBQUM7RUFDRCxJQUFJLENBQUMwVCx1QkFBdUIsR0FBRyxJQUFJalQsTUFBTSxDQUNyQyxJQUFJLEdBQUdtVCxTQUFTLENBQUM1VCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUNoQyxHQUNKLENBQUM7QUFDTDtBQUNBLFNBQVNnVSxPQUFPQSxDQUFBLEVBQUc7RUFDZixPQUFPLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtBQUNsQztBQUNBLFNBQVNDLE9BQU9BLENBQUEsRUFBRztFQUNmLE9BQU8sSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUU7QUFDN0I7QUFDQSxTQUFTeFgsUUFBUUEsQ0FBQ3NHLE1BQU0sRUFBRXNSLFNBQVMsRUFBRTtFQUNqQ3ZSLGNBQWMsQ0FBQ0MsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWTtJQUNyQyxPQUFPLElBQUksQ0FBQ0ksVUFBVSxDQUFDLENBQUMsQ0FBQzFHLFFBQVEsQ0FDN0IsSUFBSSxDQUFDd1gsS0FBSyxDQUFDLENBQUMsRUFDWixJQUFJLENBQUNFLE9BQU8sQ0FBQyxDQUFDLEVBQ2RFLFNBQ0osQ0FBQztFQUNMLENBQUMsQ0FBQztBQUNOO0FBQ0EsU0FBU0MsYUFBYUEsQ0FBQ25LLFFBQVEsRUFBRTVPLE9BQU8sRUFBRTtFQUN0QyxPQUFPQSxPQUFPLENBQUNnWixjQUFjO0FBQ2pDO0FBQ0EsU0FBU1EsVUFBVUEsQ0FBQzlhLEtBQUssRUFBRTtFQUN2QixPQUFPLENBQUNBLEtBQUssR0FBRyxFQUFFLEVBQUU0TSxXQUFXLENBQUMsQ0FBQyxDQUFDbU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7QUFDdkQ7QUFDQSxTQUFTRyxjQUFjQSxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFO0VBQy9DLElBQUlGLE1BQU0sR0FBRyxFQUFFLEVBQUU7SUFDYixPQUFPRSxPQUFPLEdBQUcsSUFBSSxHQUFHLElBQUk7RUFDaEMsQ0FBQyxNQUFNO0lBQ0gsT0FBT0EsT0FBTyxHQUFHLElBQUksR0FBRyxJQUFJO0VBQ2hDO0FBQ0o7QUFDQSxTQUFTTyxZQUFZQSxDQUFDQyxJQUFJLEVBQUVDLElBQUksRUFBRTtFQUM5QixJQUFJL2EsQ0FBQztJQUNEZ2IsSUFBSSxHQUFHN1QsSUFBSSxDQUFDMEwsR0FBRyxDQUFDaUksSUFBSSxDQUFDdGIsTUFBTSxFQUFFdWIsSUFBSSxDQUFDdmIsTUFBTSxDQUFDO0VBQzdDLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2diLElBQUksRUFBRWhiLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDMUIsSUFBSThhLElBQUksQ0FBQzlhLENBQUMsQ0FBQyxLQUFLK2EsSUFBSSxDQUFDL2EsQ0FBQyxDQUFDLEVBQUU7TUFDckIsT0FBT0EsQ0FBQztJQUNaO0VBQ0o7RUFDQSxPQUFPZ2IsSUFBSTtBQUNmO0FBQ0EsU0FBU0MsZUFBZUEsQ0FBQzFkLEdBQUcsRUFBRTtFQUMxQixPQUFPQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ3NPLFdBQVcsQ0FBQyxDQUFDLENBQUN0RCxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHaEwsR0FBRztBQUMxRDtBQUNBLFNBQVMyZCxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7RUFDekIsSUFBSW5iLENBQUMsR0FBRyxDQUFDO0lBQ0xvYixDQUFDO0lBQ0RDLElBQUk7SUFDSjlhLE9BQU87SUFDUGdSLEtBQUs7RUFDVCxPQUFPdlIsQ0FBQyxHQUFHbWIsS0FBSyxDQUFDM2IsTUFBTSxFQUFFO0lBQ3JCK1IsS0FBSyxHQUFHMEosZUFBZSxDQUFDRSxLQUFLLENBQUNuYixDQUFDLENBQUMsQ0FBQyxDQUFDdVIsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUM1QzZKLENBQUMsR0FBRzdKLEtBQUssQ0FBQy9SLE1BQU07SUFDaEI2YixJQUFJLEdBQUdKLGVBQWUsQ0FBQ0UsS0FBSyxDQUFDbmIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BDcWIsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUksQ0FBQzlKLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJO0lBQ3BDLE9BQU82SixDQUFDLEdBQUcsQ0FBQyxFQUFFO01BQ1Y3YSxPQUFPLEdBQUcrYSxVQUFVLENBQUMvSixLQUFLLENBQUN4TSxLQUFLLENBQUMsQ0FBQyxFQUFFcVcsQ0FBQyxDQUFDLENBQUNwVyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDakQsSUFBSXpFLE9BQU8sRUFBRTtRQUNULE9BQU9BLE9BQU87TUFDbEI7TUFDQSxJQUNJOGEsSUFBSSxJQUNKQSxJQUFJLENBQUM3YixNQUFNLElBQUk0YixDQUFDLElBQ2hCUCxZQUFZLENBQUN0SixLQUFLLEVBQUU4SixJQUFJLENBQUMsSUFBSUQsQ0FBQyxHQUFHLENBQUMsRUFDcEM7UUFDRTtNQUNKO01BQ0FBLENBQUMsRUFBRTtJQUNQO0lBQ0FwYixDQUFDLEVBQUU7RUFDUDtFQUNBLE9BQU80YSxZQUFZO0FBQ3ZCO0FBQ0EsU0FBU1csZ0JBQWdCQSxDQUFDNWUsSUFBSSxFQUFFO0VBQzVCLE9BQU9BLElBQUksQ0FBQzJMLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJO0FBQzVDO0FBQ0EsU0FBU2dULFVBQVVBLENBQUMzZSxJQUFJLEVBQUU7RUFDdEIsSUFBSTZlLFNBQVMsR0FBRyxJQUFJO0lBQ2hCQyxjQUFjO0VBQ2xCLElBQ0lmLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUN4QixPQUFPMkIsTUFBTSxLQUFLLFdBQVcsSUFDN0JBLE1BQU0sSUFDTkEsTUFBTSxDQUFDdkMsT0FBTyxJQUNkd2YsZ0JBQWdCLENBQUM1ZSxJQUFJLENBQUMsRUFDeEI7SUFDRSxJQUFJO01BQ0E2ZSxTQUFTLEdBQUdaLFlBQVksQ0FBQ2MsS0FBSztNQUM5QkQsY0FBYyxHQUFHcGdCLFNBQVM7TUFDMUJvZ0IsY0FBYyxDQUFDLFdBQVcsR0FBRzllLElBQUksQ0FBQztNQUNsQ2dmLGtCQUFrQixDQUFDSCxTQUFTLENBQUM7SUFDakMsQ0FBQyxDQUFDLE9BQU8xZCxDQUFDLEVBQUU7TUFDUjRjLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxHQUFHLElBQUk7SUFDeEI7RUFDSjtFQUNBLE9BQU8rZCxPQUFPLENBQUMvZCxJQUFJLENBQUM7QUFDeEI7QUFDQSxTQUFTZ2Ysa0JBQWtCQSxDQUFDcGUsR0FBRyxFQUFFcWUsTUFBTSxFQUFFO0VBQ3JDLElBQUlDLElBQUk7RUFDUixJQUFJdGUsR0FBRyxFQUFFO0lBQ0wsSUFBSW1DLFdBQVcsQ0FBQ2tjLE1BQU0sQ0FBQyxFQUFFO01BQ3JCQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ3ZlLEdBQUcsQ0FBQztJQUN6QixDQUFDLE1BQU07TUFDSHNlLElBQUksR0FBR0UsWUFBWSxDQUFDeGUsR0FBRyxFQUFFcWUsTUFBTSxDQUFDO0lBQ3BDO0lBQ0EsSUFBSUMsSUFBSSxFQUFFO01BQ05qQixZQUFZLEdBQUdpQixJQUFJO0lBQ3ZCLENBQUMsTUFBTTtNQUNILElBQUksT0FBT3JYLE9BQU8sS0FBSyxXQUFXLElBQUlBLE9BQU8sQ0FBQ0gsSUFBSSxFQUFFO1FBQ2hERyxPQUFPLENBQUNILElBQUksQ0FDUixTQUFTLEdBQUc5RyxHQUFHLEdBQUcsd0NBQ3RCLENBQUM7TUFDTDtJQUNKO0VBQ0o7RUFDQSxPQUFPcWQsWUFBWSxDQUFDYyxLQUFLO0FBQzdCO0FBQ0EsU0FBU0ssWUFBWUEsQ0FBQ3BmLElBQUksRUFBRXVILE1BQU0sRUFBRTtFQUNoQyxJQUFJQSxNQUFNLEtBQUssSUFBSSxFQUFFO0lBQ2pCLElBQUkzRCxPQUFPO01BQ1B1RixZQUFZLEdBQUd5VSxVQUFVO0lBQzdCclcsTUFBTSxDQUFDOFgsSUFBSSxHQUFHcmYsSUFBSTtJQUNsQixJQUFJK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO01BQ3ZCd0ksZUFBZSxDQUNYLHNCQUFzQixFQUN0Qix5T0FDSixDQUFDO01BQ0RXLFlBQVksR0FBRzRVLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxDQUFDNEksT0FBTztJQUN4QyxDQUFDLE1BQU0sSUFBSXJCLE1BQU0sQ0FBQytYLFlBQVksSUFBSSxJQUFJLEVBQUU7TUFDcEMsSUFBSXZCLE9BQU8sQ0FBQ3hXLE1BQU0sQ0FBQytYLFlBQVksQ0FBQyxJQUFJLElBQUksRUFBRTtRQUN0Q25XLFlBQVksR0FBRzRVLE9BQU8sQ0FBQ3hXLE1BQU0sQ0FBQytYLFlBQVksQ0FBQyxDQUFDMVcsT0FBTztNQUN2RCxDQUFDLE1BQU07UUFDSGhGLE9BQU8sR0FBRythLFVBQVUsQ0FBQ3BYLE1BQU0sQ0FBQytYLFlBQVksQ0FBQztRQUN6QyxJQUFJMWIsT0FBTyxJQUFJLElBQUksRUFBRTtVQUNqQnVGLFlBQVksR0FBR3ZGLE9BQU8sQ0FBQ2dGLE9BQU87UUFDbEMsQ0FBQyxNQUFNO1VBQ0gsSUFBSSxDQUFDb1YsY0FBYyxDQUFDelcsTUFBTSxDQUFDK1gsWUFBWSxDQUFDLEVBQUU7WUFDdEN0QixjQUFjLENBQUN6VyxNQUFNLENBQUMrWCxZQUFZLENBQUMsR0FBRyxFQUFFO1VBQzVDO1VBQ0F0QixjQUFjLENBQUN6VyxNQUFNLENBQUMrWCxZQUFZLENBQUMsQ0FBQy9iLElBQUksQ0FBQztZQUNyQ3ZELElBQUksRUFBSkEsSUFBSTtZQUNKdUgsTUFBTSxFQUFOQTtVQUNKLENBQUMsQ0FBQztVQUNGLE9BQU8sSUFBSTtRQUNmO01BQ0o7SUFDSjtJQUNBd1csT0FBTyxDQUFDL2QsSUFBSSxDQUFDLEdBQUcsSUFBSXFKLE1BQU0sQ0FBQ0gsWUFBWSxDQUFDQyxZQUFZLEVBQUU1QixNQUFNLENBQUMsQ0FBQztJQUM5RCxJQUFJeVcsY0FBYyxDQUFDaGUsSUFBSSxDQUFDLEVBQUU7TUFDdEJnZSxjQUFjLENBQUNoZSxJQUFJLENBQUMsQ0FBQ3VmLE9BQU8sQ0FBQyxVQUFVNWdCLENBQUMsRUFBRTtRQUN0Q3lnQixZQUFZLENBQUN6Z0IsQ0FBQyxDQUFDcUIsSUFBSSxFQUFFckIsQ0FBQyxDQUFDNEksTUFBTSxDQUFDO01BQ2xDLENBQUMsQ0FBQztJQUNOO0lBQ0F5WCxrQkFBa0IsQ0FBQ2hmLElBQUksQ0FBQztJQUN4QixPQUFPK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDO0VBQ3hCLENBQUMsTUFBTTtJQUNILE9BQU8rZCxPQUFPLENBQUMvZCxJQUFJLENBQUM7SUFDcEIsT0FBTyxJQUFJO0VBQ2Y7QUFDSjtBQUNBLFNBQVN3ZixZQUFZQSxDQUFDeGYsSUFBSSxFQUFFdUgsTUFBTSxFQUFFO0VBQ2hDLElBQUlBLE1BQU0sSUFBSSxJQUFJLEVBQUU7SUFDaEIsSUFBSTNELE9BQU87TUFDUDZiLFNBQVM7TUFDVHRXLFlBQVksR0FBR3lVLFVBQVU7SUFDN0IsSUFBSUcsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLENBQUNzZixZQUFZLElBQUksSUFBSSxFQUFFO01BQzdEdkIsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLENBQUMySSxHQUFHLENBQUNPLFlBQVksQ0FBQzZVLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxDQUFDNEksT0FBTyxFQUFFckIsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxNQUFNO01BQ0hrWSxTQUFTLEdBQUdkLFVBQVUsQ0FBQzNlLElBQUksQ0FBQztNQUM1QixJQUFJeWYsU0FBUyxJQUFJLElBQUksRUFBRTtRQUNuQnRXLFlBQVksR0FBR3NXLFNBQVMsQ0FBQzdXLE9BQU87TUFDcEM7TUFDQXJCLE1BQU0sR0FBRzJCLFlBQVksQ0FBQ0MsWUFBWSxFQUFFNUIsTUFBTSxDQUFDO01BQzNDLElBQUlrWSxTQUFTLElBQUksSUFBSSxFQUFFO1FBQ25CbFksTUFBTSxDQUFDOFgsSUFBSSxHQUFHcmYsSUFBSTtNQUN0QjtNQUNBNEQsT0FBTyxHQUFHLElBQUl5RixNQUFNLENBQUM5QixNQUFNLENBQUM7TUFDNUIzRCxPQUFPLENBQUMwYixZQUFZLEdBQUd2QixPQUFPLENBQUMvZCxJQUFJLENBQUM7TUFDcEMrZCxPQUFPLENBQUMvZCxJQUFJLENBQUMsR0FBRzRELE9BQU87SUFDM0I7SUFDQW9iLGtCQUFrQixDQUFDaGYsSUFBSSxDQUFDO0VBQzVCLENBQUMsTUFBTTtJQUNILElBQUkrZCxPQUFPLENBQUMvZCxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7TUFDdkIsSUFBSStkLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxDQUFDc2YsWUFBWSxJQUFJLElBQUksRUFBRTtRQUNwQ3ZCLE9BQU8sQ0FBQy9kLElBQUksQ0FBQyxHQUFHK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDLENBQUNzZixZQUFZO1FBQzFDLElBQUl0ZixJQUFJLEtBQUtnZixrQkFBa0IsQ0FBQyxDQUFDLEVBQUU7VUFDL0JBLGtCQUFrQixDQUFDaGYsSUFBSSxDQUFDO1FBQzVCO01BQ0osQ0FBQyxNQUFNLElBQUkrZCxPQUFPLENBQUMvZCxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFDOUIsT0FBTytkLE9BQU8sQ0FBQy9kLElBQUksQ0FBQztNQUN4QjtJQUNKO0VBQ0o7RUFDQSxPQUFPK2QsT0FBTyxDQUFDL2QsSUFBSSxDQUFDO0FBQ3hCO0FBQ0EsU0FBU21mLFNBQVNBLENBQUN2ZSxHQUFHLEVBQUU7RUFDcEIsSUFBSWdELE9BQU87RUFDWCxJQUFJaEQsR0FBRyxJQUFJQSxHQUFHLENBQUN5RyxPQUFPLElBQUl6RyxHQUFHLENBQUN5RyxPQUFPLENBQUMwWCxLQUFLLEVBQUU7SUFDekNuZSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ3lHLE9BQU8sQ0FBQzBYLEtBQUs7RUFDM0I7RUFDQSxJQUFJLENBQUNuZSxHQUFHLEVBQUU7SUFDTixPQUFPcWQsWUFBWTtFQUN2QjtFQUNBLElBQUksQ0FBQzViLE9BQU8sQ0FBQ3pCLEdBQUcsQ0FBQyxFQUFFO0lBQ2ZnRCxPQUFPLEdBQUcrYSxVQUFVLENBQUMvZCxHQUFHLENBQUM7SUFDekIsSUFBSWdELE9BQU8sRUFBRTtNQUNULE9BQU9BLE9BQU87SUFDbEI7SUFDQWhELEdBQUcsR0FBRyxDQUFDQSxHQUFHLENBQUM7RUFDZjtFQUNBLE9BQU8yZCxZQUFZLENBQUMzZCxHQUFHLENBQUM7QUFDNUI7QUFDQSxTQUFTOGUsV0FBV0EsQ0FBQSxFQUFHO0VBQ25CLE9BQU9wVyxJQUFJLENBQUN5VSxPQUFPLENBQUM7QUFDeEI7QUFDQSxTQUFTNEIsYUFBYUEsQ0FBQ3phLENBQUMsRUFBRTtFQUN0QixJQUFJZCxRQUFRO0lBQ1JyRixDQUFDLEdBQUdtRyxDQUFDLENBQUN1TyxFQUFFO0VBQ1osSUFBSTFVLENBQUMsSUFBSWtHLGVBQWUsQ0FBQ0MsQ0FBQyxDQUFDLENBQUNkLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRTtJQUN6Q0EsUUFBUSxHQUNKckYsQ0FBQyxDQUFDNFUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJNVUsQ0FBQyxDQUFDNFUsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUN2QkEsS0FBSyxHQUNMNVUsQ0FBQyxDQUFDNlUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJN1UsQ0FBQyxDQUFDNlUsSUFBSSxDQUFDLEdBQUc5QyxXQUFXLENBQUMvUixDQUFDLENBQUMyVSxJQUFJLENBQUMsRUFBRTNVLENBQUMsQ0FBQzRVLEtBQUssQ0FBQyxDQUFDLEdBQ3ZEQyxJQUFJLEdBQ0o3VSxDQUFDLENBQUM4VSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQ1g5VSxDQUFDLENBQUM4VSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQ1g5VSxDQUFDLENBQUM4VSxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQ1Y5VSxDQUFDLENBQUMrVSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQ1ovVSxDQUFDLENBQUNnVixNQUFNLENBQUMsS0FBSyxDQUFDLElBQ2ZoVixDQUFDLENBQUNpVixXQUFXLENBQUMsS0FBSyxDQUFDLENBQUUsR0FDOUJILElBQUksR0FDSjlVLENBQUMsQ0FBQytVLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSS9VLENBQUMsQ0FBQytVLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FDL0JBLE1BQU0sR0FDTi9VLENBQUMsQ0FBQ2dWLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSWhWLENBQUMsQ0FBQ2dWLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FDL0JBLE1BQU0sR0FDTmhWLENBQUMsQ0FBQ2lWLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSWpWLENBQUMsQ0FBQ2lWLFdBQVcsQ0FBQyxHQUFHLEdBQUcsR0FDMUNBLFdBQVcsR0FDWCxDQUFDLENBQUM7SUFDWixJQUNJL08sZUFBZSxDQUFDQyxDQUFDLENBQUMsQ0FBQzBhLGtCQUFrQixLQUNwQ3hiLFFBQVEsR0FBR3NQLElBQUksSUFBSXRQLFFBQVEsR0FBR3dQLElBQUksQ0FBQyxFQUN0QztNQUNFeFAsUUFBUSxHQUFHd1AsSUFBSTtJQUNuQjtJQUNBLElBQUkzTyxlQUFlLENBQUNDLENBQUMsQ0FBQyxDQUFDMmEsY0FBYyxJQUFJemIsUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQ3REQSxRQUFRLEdBQUc2UCxJQUFJO0lBQ25CO0lBQ0EsSUFBSWhQLGVBQWUsQ0FBQ0MsQ0FBQyxDQUFDLENBQUM0YSxnQkFBZ0IsSUFBSTFiLFFBQVEsS0FBSyxDQUFDLENBQUMsRUFBRTtNQUN4REEsUUFBUSxHQUFHOFAsT0FBTztJQUN0QjtJQUNBalAsZUFBZSxDQUFDQyxDQUFDLENBQUMsQ0FBQ2QsUUFBUSxHQUFHQSxRQUFRO0VBQzFDO0VBQ0EsT0FBT2MsQ0FBQztBQUNaO0FBQ0EsU0FBUzhiLGFBQWFBLENBQUN6WixNQUFNLEVBQUU7RUFDM0IsSUFBSWxFLENBQUM7SUFDRDRkLENBQUM7SUFDRHpTLE1BQU0sR0FBR2pILE1BQU0sQ0FBQ1IsRUFBRTtJQUNsQjRFLEtBQUssR0FBR29VLGdCQUFnQixDQUFDbUIsSUFBSSxDQUFDMVMsTUFBTSxDQUFDLElBQUl3UixhQUFhLENBQUNrQixJQUFJLENBQUMxUyxNQUFNLENBQUM7SUFDbkUyUyxTQUFTO0lBQ1RDLFVBQVU7SUFDVkMsVUFBVTtJQUNWQyxRQUFRO0lBQ1JDLFdBQVcsR0FBR3JCLFFBQVEsQ0FBQ3JkLE1BQU07SUFDN0IyZSxXQUFXLEdBQUdyQixRQUFRLENBQUN0ZCxNQUFNO0VBQ2pDLElBQUk4SSxLQUFLLEVBQUU7SUFDUDFHLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDNUMsR0FBRyxHQUFHLElBQUk7SUFDbEMsS0FBS3RCLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdNLFdBQVcsRUFBRWxlLENBQUMsR0FBRzRkLENBQUMsRUFBRTVkLENBQUMsRUFBRSxFQUFFO01BQ3JDLElBQUk2YyxRQUFRLENBQUM3YyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzZkLElBQUksQ0FBQ3ZWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQy9CeVYsVUFBVSxHQUFHbEIsUUFBUSxDQUFDN2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCOGQsU0FBUyxHQUFHakIsUUFBUSxDQUFDN2MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSztRQUNwQztNQUNKO0lBQ0o7SUFDQSxJQUFJK2QsVUFBVSxJQUFJLElBQUksRUFBRTtNQUNwQjdaLE1BQU0sQ0FBQzlCLFFBQVEsR0FBRyxLQUFLO01BQ3ZCO0lBQ0o7SUFDQSxJQUFJa0csS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ1YsS0FBS3RJLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdPLFdBQVcsRUFBRW5lLENBQUMsR0FBRzRkLENBQUMsRUFBRTVkLENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUk4YyxRQUFRLENBQUM5YyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzZkLElBQUksQ0FBQ3ZWLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1VBQy9CMFYsVUFBVSxHQUFHLENBQUMxVixLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJd1UsUUFBUSxDQUFDOWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQy9DO1FBQ0o7TUFDSjtNQUNBLElBQUlnZSxVQUFVLElBQUksSUFBSSxFQUFFO1FBQ3BCOVosTUFBTSxDQUFDOUIsUUFBUSxHQUFHLEtBQUs7UUFDdkI7TUFDSjtJQUNKO0lBQ0EsSUFBSSxDQUFDMGIsU0FBUyxJQUFJRSxVQUFVLElBQUksSUFBSSxFQUFFO01BQ2xDOVosTUFBTSxDQUFDOUIsUUFBUSxHQUFHLEtBQUs7TUFDdkI7SUFDSjtJQUNBLElBQUlrRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDVixJQUFJc1UsT0FBTyxDQUFDaUIsSUFBSSxDQUFDdlYsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDeEIyVixRQUFRLEdBQUcsR0FBRztNQUNsQixDQUFDLE1BQU07UUFDSC9aLE1BQU0sQ0FBQzlCLFFBQVEsR0FBRyxLQUFLO1FBQ3ZCO01BQ0o7SUFDSjtJQUNBOEIsTUFBTSxDQUFDUCxFQUFFLEdBQUdvYSxVQUFVLElBQUlDLFVBQVUsSUFBSSxFQUFFLENBQUMsSUFBSUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztJQUM5REcseUJBQXlCLENBQUNsYSxNQUFNLENBQUM7RUFDckMsQ0FBQyxNQUFNO0lBQ0hBLE1BQU0sQ0FBQzlCLFFBQVEsR0FBRyxLQUFLO0VBQzNCO0FBQ0o7QUFDQSxTQUFTaWMseUJBQXlCQSxDQUM5QkMsT0FBTyxFQUNQQyxRQUFRLEVBQ1JDLE1BQU0sRUFDTkMsT0FBTyxFQUNQQyxTQUFTLEVBQ1RDLFNBQVMsRUFDWDtFQUNFLElBQUlDLE1BQU0sR0FBRyxDQUNUQyxjQUFjLENBQUNQLE9BQU8sQ0FBQyxFQUN2QjlNLHdCQUF3QixDQUFDVixPQUFPLENBQUN5TixRQUFRLENBQUMsRUFDMUM3SyxRQUFRLENBQUM4SyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQ3BCOUssUUFBUSxDQUFDK0ssT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUNyQi9LLFFBQVEsQ0FBQ2dMLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FDMUI7RUFDRCxJQUFJQyxTQUFTLEVBQUU7SUFDWEMsTUFBTSxDQUFDMWUsSUFBSSxDQUFDd1QsUUFBUSxDQUFDaUwsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ3hDO0VBQ0EsT0FBT0MsTUFBTTtBQUNqQjtBQUNBLFNBQVNDLGNBQWNBLENBQUNQLE9BQU8sRUFBRTtFQUM3QixJQUFJMVIsSUFBSSxHQUFHOEcsUUFBUSxDQUFDNEssT0FBTyxFQUFFLEVBQUUsQ0FBQztFQUNoQyxJQUFJMVIsSUFBSSxJQUFJLEVBQUUsRUFBRTtJQUNaLE9BQU8sR0FBRyxHQUFHQSxJQUFJO0VBQ3JCLENBQUMsTUFBTSxJQUFJQSxJQUFJLElBQUksR0FBRyxFQUFFO0lBQ3BCLE9BQU8sSUFBSSxHQUFHQSxJQUFJO0VBQ3RCO0VBQ0EsT0FBT0EsSUFBSTtBQUNmO0FBQ0EsU0FBU2tTLGlCQUFpQkEsQ0FBQ3BoQixDQUFDLEVBQUU7RUFDMUIsT0FBT0EsQ0FBQyxDQUNINkssT0FBTyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxDQUNsQ0EsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FDeEJBLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQ3JCQSxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztBQUM5QjtBQUNBLFNBQVN3VyxZQUFZQSxDQUFDQyxVQUFVLEVBQUVDLFdBQVcsRUFBRS9hLE1BQU0sRUFBRTtFQUNuRCxJQUFJOGEsVUFBVSxFQUFFO0lBQ1osSUFBSUUsZUFBZSxHQUFHckksMEJBQTBCLENBQUMvRixPQUFPLENBQUNrTyxVQUFVLENBQUM7TUFDaEVHLGFBQWEsR0FBRyxJQUFJdGYsSUFBSSxDQUNwQm9mLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFDZEEsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUNkQSxXQUFXLENBQUMsQ0FBQyxDQUNqQixDQUFDLENBQUMvRyxNQUFNLENBQUMsQ0FBQztJQUNkLElBQUlnSCxlQUFlLEtBQUtDLGFBQWEsRUFBRTtNQUNuQ3ZkLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDdkMsZUFBZSxHQUFHLElBQUk7TUFDOUN1QyxNQUFNLENBQUM5QixRQUFRLEdBQUcsS0FBSztNQUN2QixPQUFPLEtBQUs7SUFDaEI7RUFDSjtFQUNBLE9BQU8sSUFBSTtBQUNmO0FBQ0EsU0FBU2dkLGVBQWVBLENBQUNDLFNBQVMsRUFBRUMsY0FBYyxFQUFFQyxTQUFTLEVBQUU7RUFDM0QsSUFBSUYsU0FBUyxFQUFFO0lBQ1gsT0FBT3JDLFVBQVUsQ0FBQ3FDLFNBQVMsQ0FBQztFQUNoQyxDQUFDLE1BQU0sSUFBSUMsY0FBYyxFQUFFO0lBQ3ZCLE9BQU8sQ0FBQztFQUNaLENBQUMsTUFBTTtJQUNILElBQUlFLEVBQUUsR0FBRzlMLFFBQVEsQ0FBQzZMLFNBQVMsRUFBRSxFQUFFLENBQUM7TUFDNUIxZCxDQUFDLEdBQUcyZCxFQUFFLEdBQUcsR0FBRztNQUNaalYsQ0FBQyxHQUFHLENBQUNpVixFQUFFLEdBQUczZCxDQUFDLElBQUksR0FBRztJQUN0QixPQUFPMEksQ0FBQyxHQUFHLEVBQUUsR0FBRzFJLENBQUM7RUFDckI7QUFDSjtBQUNBLFNBQVM0ZCxpQkFBaUJBLENBQUN2YixNQUFNLEVBQUU7RUFDL0IsSUFBSW9FLEtBQUssR0FBRzVHLE9BQU8sQ0FBQ21jLElBQUksQ0FBQ2lCLGlCQUFpQixDQUFDNWEsTUFBTSxDQUFDUixFQUFFLENBQUMsQ0FBQztJQUNsRGdjLFdBQVc7RUFDZixJQUFJcFgsS0FBSyxFQUFFO0lBQ1BvWCxXQUFXLEdBQUdyQix5QkFBeUIsQ0FDbkMvVixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ1JBLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDUkEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNSQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ1JBLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDUkEsS0FBSyxDQUFDLENBQUMsQ0FDWCxDQUFDO0lBQ0QsSUFBSSxDQUFDeVcsWUFBWSxDQUFDelcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFb1gsV0FBVyxFQUFFeGIsTUFBTSxDQUFDLEVBQUU7TUFDOUM7SUFDSjtJQUNBQSxNQUFNLENBQUNrTSxFQUFFLEdBQUdzUCxXQUFXO0lBQ3ZCeGIsTUFBTSxDQUFDTCxJQUFJLEdBQUd1YixlQUFlLENBQUM5VyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRUEsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVEcEUsTUFBTSxDQUFDekIsRUFBRSxHQUFHeVIsYUFBYSxDQUFDdFksS0FBSyxDQUFDLElBQUksRUFBRXNJLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQztJQUNoRGxNLE1BQU0sQ0FBQ3pCLEVBQUUsQ0FBQ2tkLGFBQWEsQ0FBQ3piLE1BQU0sQ0FBQ3pCLEVBQUUsQ0FBQ21kLGFBQWEsQ0FBQyxDQUFDLEdBQUcxYixNQUFNLENBQUNMLElBQUksQ0FBQztJQUNoRWpDLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDeEMsT0FBTyxHQUFHLElBQUk7RUFDMUMsQ0FBQyxNQUFNO0lBQ0h3QyxNQUFNLENBQUM5QixRQUFRLEdBQUcsS0FBSztFQUMzQjtBQUNKO0FBQ0EsU0FBU3lkLGdCQUFnQkEsQ0FBQzNiLE1BQU0sRUFBRTtFQUM5QixJQUFJc0wsT0FBTyxHQUFHdU4sZUFBZSxDQUFDYyxJQUFJLENBQUMzWixNQUFNLENBQUNSLEVBQUUsQ0FBQztFQUM3QyxJQUFJOEwsT0FBTyxLQUFLLElBQUksRUFBRTtJQUNsQnRMLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBbUIsSUFBSTVDLElBQUksQ0FBQyxDQUFDMlAsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pEO0VBQ0o7RUFDQW1PLGFBQWEsQ0FBQ3paLE1BQU0sQ0FBQztFQUNyQixJQUFJQSxNQUFNLENBQUM5QixRQUFRLEtBQUssS0FBSyxFQUFFO0lBQzNCLE9BQU84QixNQUFNLENBQUM5QixRQUFRO0VBQzFCLENBQUMsTUFBTTtJQUNIO0VBQ0o7RUFDQXFkLGlCQUFpQixDQUFDdmIsTUFBTSxDQUFDO0VBQ3pCLElBQUlBLE1BQU0sQ0FBQzlCLFFBQVEsS0FBSyxLQUFLLEVBQUU7SUFDM0IsT0FBTzhCLE1BQU0sQ0FBQzlCLFFBQVE7RUFDMUIsQ0FBQyxNQUFNO0lBQ0g7RUFDSjtFQUNBLElBQUk4QixNQUFNLENBQUN0QixPQUFPLEVBQUU7SUFDaEJzQixNQUFNLENBQUM5QixRQUFRLEdBQUcsS0FBSztFQUMzQixDQUFDLE1BQU07SUFDSHZELEtBQUssQ0FBQ2loQix1QkFBdUIsQ0FBQzViLE1BQU0sQ0FBQztFQUN6QztBQUNKO0FBQ0EsU0FBUzhiLFFBQVFBLENBQUN0a0IsQ0FBQyxFQUFFQyxDQUFDLEVBQUVza0IsQ0FBQyxFQUFFO0VBQ3ZCLElBQUl2a0IsQ0FBQyxJQUFJLElBQUksRUFBRTtJQUNYLE9BQU9BLENBQUM7RUFDWjtFQUNBLElBQUlDLENBQUMsSUFBSSxJQUFJLEVBQUU7SUFDWCxPQUFPQSxDQUFDO0VBQ1o7RUFDQSxPQUFPc2tCLENBQUM7QUFDWjtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQ2hjLE1BQU0sRUFBRTtFQUM5QixJQUFJaWMsUUFBUSxHQUFHLElBQUl0Z0IsSUFBSSxDQUFDaEIsS0FBSyxDQUFDdWhCLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDcEMsSUFBSWxjLE1BQU0sQ0FBQzZiLE9BQU8sRUFBRTtJQUNoQixPQUFPLENBQ0hJLFFBQVEsQ0FBQy9MLGNBQWMsQ0FBQyxDQUFDLEVBQ3pCK0wsUUFBUSxDQUFDRSxXQUFXLENBQUMsQ0FBQyxFQUN0QkYsUUFBUSxDQUFDRyxVQUFVLENBQUMsQ0FBQyxDQUN4QjtFQUNMO0VBQ0EsT0FBTyxDQUFDSCxRQUFRLENBQUNuTSxXQUFXLENBQUMsQ0FBQyxFQUFFbU0sUUFBUSxDQUFDSSxRQUFRLENBQUMsQ0FBQyxFQUFFSixRQUFRLENBQUNLLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDNUU7QUFDQSxTQUFTQyxlQUFlQSxDQUFDdmMsTUFBTSxFQUFFO0VBQzdCLElBQUlsRSxDQUFDO0lBQ0R3TixJQUFJO0lBQ0p2TyxLQUFLLEdBQUcsRUFBRTtJQUNWeWhCLFdBQVc7SUFDWEMsZUFBZTtJQUNmQyxTQUFTO0VBQ2IsSUFBSTFjLE1BQU0sQ0FBQ3pCLEVBQUUsRUFBRTtJQUNYO0VBQ0o7RUFDQWllLFdBQVcsR0FBR1IsZ0JBQWdCLENBQUNoYyxNQUFNLENBQUM7RUFDdEMsSUFBSUEsTUFBTSxDQUFDZ00sRUFBRSxJQUFJaE0sTUFBTSxDQUFDa00sRUFBRSxDQUFDRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUlyTSxNQUFNLENBQUNrTSxFQUFFLENBQUNFLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRTtJQUNsRXVRLHFCQUFxQixDQUFDM2MsTUFBTSxDQUFDO0VBQ2pDO0VBQ0EsSUFBSUEsTUFBTSxDQUFDNGMsVUFBVSxJQUFJLElBQUksRUFBRTtJQUMzQkYsU0FBUyxHQUFHWixRQUFRLENBQUM5YixNQUFNLENBQUNrTSxFQUFFLENBQUNDLElBQUksQ0FBQyxFQUFFcVEsV0FBVyxDQUFDclEsSUFBSSxDQUFDLENBQUM7SUFDeEQsSUFDSW5NLE1BQU0sQ0FBQzRjLFVBQVUsR0FBR25OLFVBQVUsQ0FBQ2lOLFNBQVMsQ0FBQyxJQUN6QzFjLE1BQU0sQ0FBQzRjLFVBQVUsS0FBSyxDQUFDLEVBQ3pCO01BQ0VsZixlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3FZLGtCQUFrQixHQUFHLElBQUk7SUFDckQ7SUFDQS9PLElBQUksR0FBRzBHLGFBQWEsQ0FBQzBNLFNBQVMsRUFBRSxDQUFDLEVBQUUxYyxNQUFNLENBQUM0YyxVQUFVLENBQUM7SUFDckQ1YyxNQUFNLENBQUNrTSxFQUFFLENBQUNFLEtBQUssQ0FBQyxHQUFHOUMsSUFBSSxDQUFDNlMsV0FBVyxDQUFDLENBQUM7SUFDckNuYyxNQUFNLENBQUNrTSxFQUFFLENBQUNHLElBQUksQ0FBQyxHQUFHL0MsSUFBSSxDQUFDOFMsVUFBVSxDQUFDLENBQUM7RUFDdkM7RUFDQSxLQUFLdGdCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFDLElBQUlrRSxNQUFNLENBQUNrTSxFQUFFLENBQUNwUSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRUEsQ0FBQyxFQUFFO0lBQzVDa0UsTUFBTSxDQUFDa00sRUFBRSxDQUFDcFEsQ0FBQyxDQUFDLEdBQUdmLEtBQUssQ0FBQ2UsQ0FBQyxDQUFDLEdBQUcwZ0IsV0FBVyxDQUFDMWdCLENBQUMsQ0FBQztFQUM1QztFQUNBLE9BQU9BLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO0lBQ2ZrRSxNQUFNLENBQUNrTSxFQUFFLENBQUNwUSxDQUFDLENBQUMsR0FBR2YsS0FBSyxDQUFDZSxDQUFDLENBQUMsR0FDbkJrRSxNQUFNLENBQUNrTSxFQUFFLENBQUNwUSxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUlBLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBSWtFLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ3BRLENBQUMsQ0FBQztFQUMvRDtFQUNBLElBQ0lrRSxNQUFNLENBQUNrTSxFQUFFLENBQUNJLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFDdEJ0TSxNQUFNLENBQUNrTSxFQUFFLENBQUNLLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFDdkJ2TSxNQUFNLENBQUNrTSxFQUFFLENBQUNNLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFDdkJ4TSxNQUFNLENBQUNrTSxFQUFFLENBQUNPLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFDOUI7SUFDRXpNLE1BQU0sQ0FBQzZjLFFBQVEsR0FBRyxJQUFJO0lBQ3RCN2MsTUFBTSxDQUFDa00sRUFBRSxDQUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDO0VBQ3ZCO0VBQ0F0TSxNQUFNLENBQUN6QixFQUFFLEdBQUcsQ0FBQ3lCLE1BQU0sQ0FBQzZiLE9BQU8sR0FBRzdMLGFBQWEsR0FBR0osVUFBVSxFQUFFbFksS0FBSyxDQUFDLElBQUksRUFBRXFELEtBQUssQ0FBQztFQUM1RTBoQixlQUFlLEdBQUd6YyxNQUFNLENBQUM2YixPQUFPLEdBQzFCN2IsTUFBTSxDQUFDekIsRUFBRSxDQUFDa1MsU0FBUyxDQUFDLENBQUMsR0FDckJ6USxNQUFNLENBQUN6QixFQUFFLENBQUN5VixNQUFNLENBQUMsQ0FBQztFQUN4QixJQUFJaFUsTUFBTSxDQUFDTCxJQUFJLElBQUksSUFBSSxFQUFFO0lBQ3JCSyxNQUFNLENBQUN6QixFQUFFLENBQUNrZCxhQUFhLENBQUN6YixNQUFNLENBQUN6QixFQUFFLENBQUNtZCxhQUFhLENBQUMsQ0FBQyxHQUFHMWIsTUFBTSxDQUFDTCxJQUFJLENBQUM7RUFDcEU7RUFDQSxJQUFJSyxNQUFNLENBQUM2YyxRQUFRLEVBQUU7SUFDakI3YyxNQUFNLENBQUNrTSxFQUFFLENBQUNJLElBQUksQ0FBQyxHQUFHLEVBQUU7RUFDeEI7RUFDQSxJQUNJdE0sTUFBTSxDQUFDZ00sRUFBRSxJQUNULE9BQU9oTSxNQUFNLENBQUNnTSxFQUFFLENBQUN6RixDQUFDLEtBQUssV0FBVyxJQUNsQ3ZHLE1BQU0sQ0FBQ2dNLEVBQUUsQ0FBQ3pGLENBQUMsS0FBS2tXLGVBQWUsRUFDakM7SUFDRS9lLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDdkMsZUFBZSxHQUFHLElBQUk7RUFDbEQ7QUFDSjtBQUNBLFNBQVNrZixxQkFBcUJBLENBQUMzYyxNQUFNLEVBQUU7RUFDbkMsSUFBSXlHLENBQUMsRUFBRXFXLFFBQVEsRUFBRW5NLElBQUksRUFBRUMsT0FBTyxFQUFFUCxHQUFHLEVBQUVDLEdBQUcsRUFBRXlNLElBQUksRUFBRUMsZUFBZSxFQUFFQyxPQUFPO0VBQ3hFeFcsQ0FBQyxHQUFHekcsTUFBTSxDQUFDZ00sRUFBRTtFQUNiLElBQUl2RixDQUFDLENBQUN5VyxFQUFFLElBQUksSUFBSSxJQUFJelcsQ0FBQyxDQUFDMFcsQ0FBQyxJQUFJLElBQUksSUFBSTFXLENBQUMsQ0FBQzJXLENBQUMsSUFBSSxJQUFJLEVBQUU7SUFDNUMvTSxHQUFHLEdBQUcsQ0FBQztJQUNQQyxHQUFHLEdBQUcsQ0FBQztJQUNQd00sUUFBUSxHQUFHaEIsUUFBUSxDQUNmclYsQ0FBQyxDQUFDeVcsRUFBRSxFQUNKbGQsTUFBTSxDQUFDa00sRUFBRSxDQUFDQyxJQUFJLENBQUMsRUFDZitFLFVBQVUsQ0FBQ21NLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDM1UsSUFDcEMsQ0FBQztJQUNEaUksSUFBSSxHQUFHbUwsUUFBUSxDQUFDclYsQ0FBQyxDQUFDMFcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QnZNLE9BQU8sR0FBR2tMLFFBQVEsQ0FBQ3JWLENBQUMsQ0FBQzJXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsSUFBSXhNLE9BQU8sR0FBRyxDQUFDLElBQUlBLE9BQU8sR0FBRyxDQUFDLEVBQUU7TUFDNUJvTSxlQUFlLEdBQUcsSUFBSTtJQUMxQjtFQUNKLENBQUMsTUFBTTtJQUNIM00sR0FBRyxHQUFHclEsTUFBTSxDQUFDRixPQUFPLENBQUN5UixLQUFLLENBQUNsQixHQUFHO0lBQzlCQyxHQUFHLEdBQUd0USxNQUFNLENBQUNGLE9BQU8sQ0FBQ3lSLEtBQUssQ0FBQ2pCLEdBQUc7SUFDOUIyTSxPQUFPLEdBQUcvTCxVQUFVLENBQUNtTSxXQUFXLENBQUMsQ0FBQyxFQUFFaE4sR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDN0N3TSxRQUFRLEdBQUdoQixRQUFRLENBQUNyVixDQUFDLENBQUM2VyxFQUFFLEVBQUV0ZCxNQUFNLENBQUNrTSxFQUFFLENBQUNDLElBQUksQ0FBQyxFQUFFOFEsT0FBTyxDQUFDdlUsSUFBSSxDQUFDO0lBQ3hEaUksSUFBSSxHQUFHbUwsUUFBUSxDQUFDclYsQ0FBQyxDQUFDQSxDQUFDLEVBQUV3VyxPQUFPLENBQUN0TSxJQUFJLENBQUM7SUFDbEMsSUFBSWxLLENBQUMsQ0FBQ0YsQ0FBQyxJQUFJLElBQUksRUFBRTtNQUNicUssT0FBTyxHQUFHbkssQ0FBQyxDQUFDRixDQUFDO01BQ2IsSUFBSXFLLE9BQU8sR0FBRyxDQUFDLElBQUlBLE9BQU8sR0FBRyxDQUFDLEVBQUU7UUFDNUJvTSxlQUFlLEdBQUcsSUFBSTtNQUMxQjtJQUNKLENBQUMsTUFBTSxJQUFJdlcsQ0FBQyxDQUFDN00sQ0FBQyxJQUFJLElBQUksRUFBRTtNQUNwQmdYLE9BQU8sR0FBR25LLENBQUMsQ0FBQzdNLENBQUMsR0FBR3lXLEdBQUc7TUFDbkIsSUFBSTVKLENBQUMsQ0FBQzdNLENBQUMsR0FBRyxDQUFDLElBQUk2TSxDQUFDLENBQUM3TSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCb2pCLGVBQWUsR0FBRyxJQUFJO01BQzFCO0lBQ0osQ0FBQyxNQUFNO01BQ0hwTSxPQUFPLEdBQUdQLEdBQUc7SUFDakI7RUFDSjtFQUNBLElBQUlNLElBQUksR0FBRyxDQUFDLElBQUlBLElBQUksR0FBR1MsV0FBVyxDQUFDMEwsUUFBUSxFQUFFek0sR0FBRyxFQUFFQyxHQUFHLENBQUMsRUFBRTtJQUNwRDVTLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDc1ksY0FBYyxHQUFHLElBQUk7RUFDakQsQ0FBQyxNQUFNLElBQUkwRSxlQUFlLElBQUksSUFBSSxFQUFFO0lBQ2hDdGYsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUN1WSxnQkFBZ0IsR0FBRyxJQUFJO0VBQ25ELENBQUMsTUFBTTtJQUNId0UsSUFBSSxHQUFHck0sa0JBQWtCLENBQUNvTSxRQUFRLEVBQUVuTSxJQUFJLEVBQUVDLE9BQU8sRUFBRVAsR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDNUR0USxNQUFNLENBQUNrTSxFQUFFLENBQUNDLElBQUksQ0FBQyxHQUFHNFEsSUFBSSxDQUFDclUsSUFBSTtJQUMzQjFJLE1BQU0sQ0FBQzRjLFVBQVUsR0FBR0csSUFBSSxDQUFDaE0sU0FBUztFQUN0QztBQUNKO0FBQ0EsU0FBU21KLHlCQUF5QkEsQ0FBQ2xhLE1BQU0sRUFBRTtFQUN2QyxJQUFJQSxNQUFNLENBQUNQLEVBQUUsS0FBSzlFLEtBQUssQ0FBQzRpQixRQUFRLEVBQUU7SUFDOUI5RCxhQUFhLENBQUN6WixNQUFNLENBQUM7SUFDckI7RUFDSjtFQUNBLElBQUlBLE1BQU0sQ0FBQ1AsRUFBRSxLQUFLOUUsS0FBSyxDQUFDNmlCLFFBQVEsRUFBRTtJQUM5QmpDLGlCQUFpQixDQUFDdmIsTUFBTSxDQUFDO0lBQ3pCO0VBQ0o7RUFDQUEsTUFBTSxDQUFDa00sRUFBRSxHQUFHLEVBQUU7RUFDZHhPLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDdEQsS0FBSyxHQUFHLElBQUk7RUFDcEMsSUFBSXVLLE1BQU0sR0FBRyxFQUFFLEdBQUdqSCxNQUFNLENBQUNSLEVBQUU7SUFDdkIxRCxDQUFDO0lBQ0RpZixXQUFXO0lBQ1gwQyxPQUFPO0lBQ1A1WixNQUFNO0lBQ042WixPQUFPO0lBQ1BDLFlBQVksR0FBRzFXLE1BQU0sQ0FBQzNMLE1BQU07SUFDNUJzaUIsc0JBQXNCLEdBQUcsQ0FBQztJQUMxQnRnQixHQUFHO0lBQ0h1TyxRQUFRO0VBQ1o0UixPQUFPLEdBQ0g5WSxZQUFZLENBQUMzRSxNQUFNLENBQUNQLEVBQUUsRUFBRU8sTUFBTSxDQUFDRixPQUFPLENBQUMsQ0FBQ3NFLEtBQUssQ0FBQ1osZ0JBQWdCLENBQUMsSUFBSSxFQUFFO0VBQ3pFcUksUUFBUSxHQUFHNFIsT0FBTyxDQUFDbmlCLE1BQU07RUFDekIsS0FBS1EsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHK1AsUUFBUSxFQUFFL1AsQ0FBQyxFQUFFLEVBQUU7SUFDM0IrSCxNQUFNLEdBQUc0WixPQUFPLENBQUMzaEIsQ0FBQyxDQUFDO0lBQ25CaWYsV0FBVyxHQUFHLENBQUM5VCxNQUFNLENBQUM3QyxLQUFLLENBQUMrRyxxQkFBcUIsQ0FBQ3RILE1BQU0sRUFBRTdELE1BQU0sQ0FBQyxDQUFDLElBQzlELEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDVixJQUFJK2EsV0FBVyxFQUFFO01BQ2IyQyxPQUFPLEdBQUd6VyxNQUFNLENBQUMxRCxNQUFNLENBQUMsQ0FBQyxFQUFFMEQsTUFBTSxDQUFDMkYsT0FBTyxDQUFDbU8sV0FBVyxDQUFDLENBQUM7TUFDdkQsSUFBSTJDLE9BQU8sQ0FBQ3BpQixNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCb0MsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNwRCxXQUFXLENBQUNaLElBQUksQ0FBQzBoQixPQUFPLENBQUM7TUFDckQ7TUFDQXpXLE1BQU0sR0FBR0EsTUFBTSxDQUFDcEcsS0FBSyxDQUNqQm9HLE1BQU0sQ0FBQzJGLE9BQU8sQ0FBQ21PLFdBQVcsQ0FBQyxHQUFHQSxXQUFXLENBQUN6ZixNQUM5QyxDQUFDO01BQ0RzaUIsc0JBQXNCLElBQUk3QyxXQUFXLENBQUN6ZixNQUFNO0lBQ2hEO0lBQ0EsSUFBSXFJLG9CQUFvQixDQUFDRSxNQUFNLENBQUMsRUFBRTtNQUM5QixJQUFJa1gsV0FBVyxFQUFFO1FBQ2JyZCxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3RELEtBQUssR0FBRyxLQUFLO01BQ3pDLENBQUMsTUFBTTtRQUNIZ0IsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNyRCxZQUFZLENBQUNYLElBQUksQ0FBQzZILE1BQU0sQ0FBQztNQUNyRDtNQUNBb0ksdUJBQXVCLENBQUNwSSxNQUFNLEVBQUVrWCxXQUFXLEVBQUUvYSxNQUFNLENBQUM7SUFDeEQsQ0FBQyxNQUFNLElBQUlBLE1BQU0sQ0FBQ3RCLE9BQU8sSUFBSSxDQUFDcWMsV0FBVyxFQUFFO01BQ3ZDcmQsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNyRCxZQUFZLENBQUNYLElBQUksQ0FBQzZILE1BQU0sQ0FBQztJQUNyRDtFQUNKO0VBQ0FuRyxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ2xELGFBQWEsR0FDakM2Z0IsWUFBWSxHQUFHQyxzQkFBc0I7RUFDekMsSUFBSTNXLE1BQU0sQ0FBQzNMLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDbkJvQyxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3BELFdBQVcsQ0FBQ1osSUFBSSxDQUFDaUwsTUFBTSxDQUFDO0VBQ3BEO0VBQ0EsSUFDSWpILE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0ksSUFBSSxDQUFDLElBQUksRUFBRSxJQUNyQjVPLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDckIsT0FBTyxLQUFLLElBQUksSUFDeENxQixNQUFNLENBQUNrTSxFQUFFLENBQUNJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDckI7SUFDRTVPLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDckIsT0FBTyxHQUFHLEtBQUssQ0FBQztFQUM1QztFQUNBakIsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUMzQyxlQUFlLEdBQUcyQyxNQUFNLENBQUNrTSxFQUFFLENBQUNyTCxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzVEbkQsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUN6QyxRQUFRLEdBQUd5QyxNQUFNLENBQUN5VixTQUFTO0VBQ25EelYsTUFBTSxDQUFDa00sRUFBRSxDQUFDSSxJQUFJLENBQUMsR0FBR3VSLGVBQWUsQ0FDN0I3ZCxNQUFNLENBQUNGLE9BQU8sRUFDZEUsTUFBTSxDQUFDa00sRUFBRSxDQUFDSSxJQUFJLENBQUMsRUFDZnRNLE1BQU0sQ0FBQ3lWLFNBQ1gsQ0FBQztFQUNEblksR0FBRyxHQUFHSSxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQzFDLEdBQUc7RUFDakMsSUFBSUEsR0FBRyxLQUFLLElBQUksRUFBRTtJQUNkMEMsTUFBTSxDQUFDa00sRUFBRSxDQUFDQyxJQUFJLENBQUMsR0FBR25NLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDZ2UsZUFBZSxDQUFDeGdCLEdBQUcsRUFBRTBDLE1BQU0sQ0FBQ2tNLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7RUFDMUU7RUFDQW9RLGVBQWUsQ0FBQ3ZjLE1BQU0sQ0FBQztFQUN2Qm9ZLGFBQWEsQ0FBQ3BZLE1BQU0sQ0FBQztBQUN6QjtBQUNBLFNBQVM2ZCxlQUFlQSxDQUFDeGhCLE9BQU8sRUFBRTBoQixJQUFJLEVBQUVDLFNBQVMsRUFBRTtFQUMvQyxJQUFJQyxJQUFJO0VBQ1IsSUFBSUQsU0FBUyxJQUFJLElBQUksRUFBRTtJQUNuQixPQUFPRCxJQUFJO0VBQ2Y7RUFDQSxJQUFJMWhCLE9BQU8sQ0FBQzZoQixZQUFZLElBQUksSUFBSSxFQUFFO0lBQzlCLE9BQU83aEIsT0FBTyxDQUFDNmhCLFlBQVksQ0FBQ0gsSUFBSSxFQUFFQyxTQUFTLENBQUM7RUFDaEQsQ0FBQyxNQUFNLElBQUkzaEIsT0FBTyxDQUFDbVosSUFBSSxJQUFJLElBQUksRUFBRTtJQUM3QnlJLElBQUksR0FBRzVoQixPQUFPLENBQUNtWixJQUFJLENBQUN3SSxTQUFTLENBQUM7SUFDOUIsSUFBSUMsSUFBSSxJQUFJRixJQUFJLEdBQUcsRUFBRSxFQUFFO01BQ25CQSxJQUFJLElBQUksRUFBRTtJQUNkO0lBQ0EsSUFBSSxDQUFDRSxJQUFJLElBQUlGLElBQUksS0FBSyxFQUFFLEVBQUU7TUFDdEJBLElBQUksR0FBRyxDQUFDO0lBQ1o7SUFDQSxPQUFPQSxJQUFJO0VBQ2YsQ0FBQyxNQUFNO0lBQ0gsT0FBT0EsSUFBSTtFQUNmO0FBQ0o7QUFDQSxTQUFTSSx3QkFBd0JBLENBQUNuZSxNQUFNLEVBQUU7RUFDdEMsSUFBSW9lLFVBQVU7SUFDVkMsVUFBVTtJQUNWQyxXQUFXO0lBQ1h4aUIsQ0FBQztJQUNEeWlCLFlBQVk7SUFDWkMsZ0JBQWdCO0lBQ2hCQyxpQkFBaUIsR0FBRyxLQUFLO0lBQ3pCQyxVQUFVLEdBQUcxZSxNQUFNLENBQUNQLEVBQUUsQ0FBQ25FLE1BQU07RUFDakMsSUFBSW9qQixVQUFVLEtBQUssQ0FBQyxFQUFFO0lBQ2xCaGhCLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDOUMsYUFBYSxHQUFHLElBQUk7SUFDNUM4QyxNQUFNLENBQUN6QixFQUFFLEdBQW1CLElBQUk1QyxJQUFJLENBQUNtRCxHQUFHLENBQUM7SUFDekM7RUFDSjtFQUNBLEtBQUtoRCxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUc0aUIsVUFBVSxFQUFFNWlCLENBQUMsRUFBRSxFQUFFO0lBQzdCeWlCLFlBQVksR0FBRyxDQUFDO0lBQ2hCQyxnQkFBZ0IsR0FBRyxLQUFLO0lBQ3hCSixVQUFVLEdBQUduZixVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUVlLE1BQU0sQ0FBQztJQUNuQyxJQUFJQSxNQUFNLENBQUM2YixPQUFPLElBQUksSUFBSSxFQUFFO01BQ3hCdUMsVUFBVSxDQUFDdkMsT0FBTyxHQUFHN2IsTUFBTSxDQUFDNmIsT0FBTztJQUN2QztJQUNBdUMsVUFBVSxDQUFDM2UsRUFBRSxHQUFHTyxNQUFNLENBQUNQLEVBQUUsQ0FBQzNELENBQUMsQ0FBQztJQUM1Qm9lLHlCQUF5QixDQUFDa0UsVUFBVSxDQUFDO0lBQ3JDLElBQUluZ0IsT0FBTyxDQUFDbWdCLFVBQVUsQ0FBQyxFQUFFO01BQ3JCSSxnQkFBZ0IsR0FBRyxJQUFJO0lBQzNCO0lBQ0FELFlBQVksSUFBSTdnQixlQUFlLENBQUMwZ0IsVUFBVSxDQUFDLENBQUN0aEIsYUFBYTtJQUN6RHloQixZQUFZLElBQUk3Z0IsZUFBZSxDQUFDMGdCLFVBQVUsQ0FBQyxDQUFDemhCLFlBQVksQ0FBQ3JCLE1BQU0sR0FBRyxFQUFFO0lBQ3BFb0MsZUFBZSxDQUFDMGdCLFVBQVUsQ0FBQyxDQUFDTyxLQUFLLEdBQUdKLFlBQVk7SUFDaEQsSUFBSSxDQUFDRSxpQkFBaUIsRUFBRTtNQUNwQixJQUNJSCxXQUFXLElBQUksSUFBSSxJQUNuQkMsWUFBWSxHQUFHRCxXQUFXLElBQzFCRSxnQkFBZ0IsRUFDbEI7UUFDRUYsV0FBVyxHQUFHQyxZQUFZO1FBQzFCRixVQUFVLEdBQUdELFVBQVU7UUFDdkIsSUFBSUksZ0JBQWdCLEVBQUU7VUFDbEJDLGlCQUFpQixHQUFHLElBQUk7UUFDNUI7TUFDSjtJQUNKLENBQUMsTUFBTTtNQUNILElBQUlGLFlBQVksR0FBR0QsV0FBVyxFQUFFO1FBQzVCQSxXQUFXLEdBQUdDLFlBQVk7UUFDMUJGLFVBQVUsR0FBR0QsVUFBVTtNQUMzQjtJQUNKO0VBQ0o7RUFDQW5pQixNQUFNLENBQUMrRCxNQUFNLEVBQUVxZSxVQUFVLElBQUlELFVBQVUsQ0FBQztBQUM1QztBQUNBLFNBQVNRLGdCQUFnQkEsQ0FBQzVlLE1BQU0sRUFBRTtFQUM5QixJQUFJQSxNQUFNLENBQUN6QixFQUFFLEVBQUU7SUFDWDtFQUNKO0VBQ0EsSUFBSXpDLENBQUMsR0FBR2dNLG9CQUFvQixDQUFDOUgsTUFBTSxDQUFDUixFQUFFLENBQUM7SUFDbkNxZixTQUFTLEdBQUcvaUIsQ0FBQyxDQUFDb1gsR0FBRyxLQUFLLEtBQUssQ0FBQyxHQUFHcFgsQ0FBQyxDQUFDd04sSUFBSSxHQUFHeE4sQ0FBQyxDQUFDb1gsR0FBRztFQUNqRGxULE1BQU0sQ0FBQ2tNLEVBQUUsR0FBR3RRLEdBQUcsQ0FDWCxDQUFDRSxDQUFDLENBQUM0TSxJQUFJLEVBQUU1TSxDQUFDLENBQUN1TixLQUFLLEVBQUV3VixTQUFTLEVBQUUvaUIsQ0FBQyxDQUFDaWlCLElBQUksRUFBRWppQixDQUFDLENBQUNnakIsTUFBTSxFQUFFaGpCLENBQUMsQ0FBQ2lqQixNQUFNLEVBQUVqakIsQ0FBQyxDQUFDa2pCLFdBQVcsQ0FBQyxFQUN2RSxVQUFVM2pCLEdBQUcsRUFBRTtJQUNYLE9BQU9BLEdBQUcsSUFBSW1VLFFBQVEsQ0FBQ25VLEdBQUcsRUFBRSxFQUFFLENBQUM7RUFDbkMsQ0FDSixDQUFDO0VBQ0RraEIsZUFBZSxDQUFDdmMsTUFBTSxDQUFDO0FBQzNCO0FBQ0EsU0FBU2lmLGdCQUFnQkEsQ0FBQ2pmLE1BQU0sRUFBRTtFQUM5QixJQUFJaEksR0FBRyxHQUFHLElBQUkrSCxNQUFNLENBQUNxWSxhQUFhLENBQUM4RyxhQUFhLENBQUNsZixNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzFELElBQUloSSxHQUFHLENBQUM2a0IsUUFBUSxFQUFFO0lBQ2Q3a0IsR0FBRyxDQUFDNFosR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDZjVaLEdBQUcsQ0FBQzZrQixRQUFRLEdBQUcsS0FBSyxDQUFDO0VBQ3pCO0VBQ0EsT0FBTzdrQixHQUFHO0FBQ2Q7QUFDQSxTQUFTa25CLGFBQWFBLENBQUNsZixNQUFNLEVBQUU7RUFDM0IsSUFBSWpGLEtBQUssR0FBR2lGLE1BQU0sQ0FBQ1IsRUFBRTtJQUNqQnBELE9BQU8sR0FBRzRELE1BQU0sQ0FBQ1AsRUFBRTtFQUN2Qk8sTUFBTSxDQUFDRixPQUFPLEdBQUdFLE1BQU0sQ0FBQ0YsT0FBTyxJQUFJOFgsU0FBUyxDQUFDNVgsTUFBTSxDQUFDTixFQUFFLENBQUM7RUFDdkQsSUFBSTNFLEtBQUssS0FBSyxJQUFJLElBQUtxQixPQUFPLEtBQUssS0FBSyxDQUFDLElBQUlyQixLQUFLLEtBQUssRUFBRyxFQUFFO0lBQ3hELE9BQU84RCxhQUFhLENBQUM7TUFBRTlCLFNBQVMsRUFBRTtJQUFLLENBQUMsQ0FBQztFQUM3QztFQUNBLElBQUksT0FBT2hDLEtBQUssS0FBSyxRQUFRLEVBQUU7SUFDM0JpRixNQUFNLENBQUNSLEVBQUUsR0FBR3pFLEtBQUssR0FBR2lGLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDcWYsUUFBUSxDQUFDcGtCLEtBQUssQ0FBQztFQUN0RDtFQUNBLElBQUltRixRQUFRLENBQUNuRixLQUFLLENBQUMsRUFBRTtJQUNqQixPQUFPLElBQUlnRixNQUFNLENBQUNxWSxhQUFhLENBQUNyZCxLQUFLLENBQUMsQ0FBQztFQUMzQyxDQUFDLE1BQU0sSUFBSVcsTUFBTSxDQUFDWCxLQUFLLENBQUMsRUFBRTtJQUN0QmlGLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBR3hELEtBQUs7RUFDckIsQ0FBQyxNQUFNLElBQUlELE9BQU8sQ0FBQ3NCLE9BQU8sQ0FBQyxFQUFFO0lBQ3pCK2hCLHdCQUF3QixDQUFDbmUsTUFBTSxDQUFDO0VBQ3BDLENBQUMsTUFBTSxJQUFJNUQsT0FBTyxFQUFFO0lBQ2hCOGQseUJBQXlCLENBQUNsYSxNQUFNLENBQUM7RUFDckMsQ0FBQyxNQUFNO0lBQ0hvZixlQUFlLENBQUNwZixNQUFNLENBQUM7RUFDM0I7RUFDQSxJQUFJLENBQUMvQixPQUFPLENBQUMrQixNQUFNLENBQUMsRUFBRTtJQUNsQkEsTUFBTSxDQUFDekIsRUFBRSxHQUFHLElBQUk7RUFDcEI7RUFDQSxPQUFPeUIsTUFBTTtBQUNqQjtBQUNBLFNBQVNvZixlQUFlQSxDQUFDcGYsTUFBTSxFQUFFO0VBQzdCLElBQUlqRixLQUFLLEdBQUdpRixNQUFNLENBQUNSLEVBQUU7RUFDckIsSUFBSWhFLFdBQVcsQ0FBQ1QsS0FBSyxDQUFDLEVBQUU7SUFDcEJpRixNQUFNLENBQUN6QixFQUFFLEdBQUcsSUFBSTVDLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ3VoQixHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ3JDLENBQUMsTUFBTSxJQUFJeGdCLE1BQU0sQ0FBQ1gsS0FBSyxDQUFDLEVBQUU7SUFDdEJpRixNQUFNLENBQUN6QixFQUFFLEdBQUcsSUFBSTVDLElBQUksQ0FBQ1osS0FBSyxDQUFDbUIsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUN6QyxDQUFDLE1BQU0sSUFBSSxPQUFPbkIsS0FBSyxLQUFLLFFBQVEsRUFBRTtJQUNsQzRnQixnQkFBZ0IsQ0FBQzNiLE1BQU0sQ0FBQztFQUM1QixDQUFDLE1BQU0sSUFBSWxGLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLEVBQUU7SUFDdkJpRixNQUFNLENBQUNrTSxFQUFFLEdBQUd0USxHQUFHLENBQUNiLEtBQUssQ0FBQzhGLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVeEYsR0FBRyxFQUFFO01BQzNDLE9BQU9tVSxRQUFRLENBQUNuVSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQztJQUNGa2hCLGVBQWUsQ0FBQ3ZjLE1BQU0sQ0FBQztFQUMzQixDQUFDLE1BQU0sSUFBSTlFLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDLEVBQUU7SUFDeEI2akIsZ0JBQWdCLENBQUM1ZSxNQUFNLENBQUM7RUFDNUIsQ0FBQyxNQUFNLElBQUl2RSxRQUFRLENBQUNWLEtBQUssQ0FBQyxFQUFFO0lBQ3hCaUYsTUFBTSxDQUFDekIsRUFBRSxHQUFHLElBQUk1QyxJQUFJLENBQUNaLEtBQUssQ0FBQztFQUMvQixDQUFDLE1BQU07SUFDSEosS0FBSyxDQUFDaWhCLHVCQUF1QixDQUFDNWIsTUFBTSxDQUFDO0VBQ3pDO0FBQ0o7QUFDQSxTQUFTekQsZ0JBQWdCQSxDQUFDeEIsS0FBSyxFQUFFcUIsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRStpQixLQUFLLEVBQUU7RUFDOUQsSUFBSXRELENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixJQUFJM2YsT0FBTyxLQUFLLElBQUksSUFBSUEsT0FBTyxLQUFLLEtBQUssRUFBRTtJQUN2Q0UsTUFBTSxHQUFHRixPQUFPO0lBQ2hCQSxPQUFPLEdBQUcsS0FBSyxDQUFDO0VBQ3BCO0VBQ0EsSUFBSUMsT0FBTyxLQUFLLElBQUksSUFBSUEsT0FBTyxLQUFLLEtBQUssRUFBRTtJQUN2Q0MsTUFBTSxHQUFHRCxPQUFPO0lBQ2hCQSxPQUFPLEdBQUcsS0FBSyxDQUFDO0VBQ3BCO0VBQ0EsSUFDS25CLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDLElBQUlLLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDLElBQ3ZDRCxPQUFPLENBQUNDLEtBQUssQ0FBQyxJQUFJQSxLQUFLLENBQUNPLE1BQU0sS0FBSyxDQUFFLEVBQ3hDO0lBQ0VQLEtBQUssR0FBRyxLQUFLLENBQUM7RUFDbEI7RUFDQWdoQixDQUFDLENBQUN4YyxnQkFBZ0IsR0FBRyxJQUFJO0VBQ3pCd2MsQ0FBQyxDQUFDRixPQUFPLEdBQUdFLENBQUMsQ0FBQ25jLE1BQU0sR0FBR3lmLEtBQUs7RUFDNUJ0RCxDQUFDLENBQUNyYyxFQUFFLEdBQUdyRCxPQUFPO0VBQ2QwZixDQUFDLENBQUN2YyxFQUFFLEdBQUd6RSxLQUFLO0VBQ1pnaEIsQ0FBQyxDQUFDdGMsRUFBRSxHQUFHckQsT0FBTztFQUNkMmYsQ0FBQyxDQUFDcmQsT0FBTyxHQUFHcEMsTUFBTTtFQUNsQixPQUFPMmlCLGdCQUFnQixDQUFDbEQsQ0FBQyxDQUFDO0FBQzlCO0FBQ0EsU0FBU3NCLFdBQVdBLENBQUN0aUIsS0FBSyxFQUFFcUIsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRTtFQUNsRCxPQUFPQyxnQkFBZ0IsQ0FBQ3hCLEtBQUssRUFBRXFCLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUUsS0FBSyxDQUFDO0FBQ25FO0FBQ0EsU0FBU21qQixNQUFNQSxDQUFDMW5CLEVBQUUsRUFBRTJuQixPQUFPLEVBQUU7RUFDekIsSUFBSTFuQixHQUFHLEVBQUU4RCxDQUFDO0VBQ1YsSUFBSTRqQixPQUFPLENBQUNwa0IsTUFBTSxLQUFLLENBQUMsSUFBSVIsT0FBTyxDQUFDNGtCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQzdDQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQyxDQUFDLENBQUM7RUFDeEI7RUFDQSxJQUFJLENBQUNBLE9BQU8sQ0FBQ3BrQixNQUFNLEVBQUU7SUFDakIsT0FBTytoQixXQUFXLENBQUMsQ0FBQztFQUN4QjtFQUNBcmxCLEdBQUcsR0FBRzBuQixPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQ2hCLEtBQUs1akIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHNGpCLE9BQU8sQ0FBQ3BrQixNQUFNLEVBQUUsRUFBRVEsQ0FBQyxFQUFFO0lBQ2pDLElBQUksQ0FBQzRqQixPQUFPLENBQUM1akIsQ0FBQyxDQUFDLENBQUNtQyxPQUFPLENBQUMsQ0FBQyxJQUFJeWhCLE9BQU8sQ0FBQzVqQixDQUFDLENBQUMsQ0FBQy9ELEVBQUUsQ0FBQyxDQUFDQyxHQUFHLENBQUMsRUFBRTtNQUM5Q0EsR0FBRyxHQUFHMG5CLE9BQU8sQ0FBQzVqQixDQUFDLENBQUM7SUFDcEI7RUFDSjtFQUNBLE9BQU85RCxHQUFHO0FBQ2Q7QUFDQSxTQUFTMlcsR0FBR0EsQ0FBQSxFQUFHO0VBQ1gsSUFBSWpPLElBQUksR0FBRyxFQUFFLENBQUNHLEtBQUssQ0FBQ3RILElBQUksQ0FBQzVCLFNBQVMsRUFBRSxDQUFDLENBQUM7RUFDdEMsT0FBTzhuQixNQUFNLENBQUMsVUFBVSxFQUFFL2UsSUFBSSxDQUFDO0FBQ25DO0FBQ0EsU0FBUzRDLEdBQUdBLENBQUEsRUFBRztFQUNYLElBQUk1QyxJQUFJLEdBQUcsRUFBRSxDQUFDRyxLQUFLLENBQUN0SCxJQUFJLENBQUM1QixTQUFTLEVBQUUsQ0FBQyxDQUFDO0VBQ3RDLE9BQU84bkIsTUFBTSxDQUFDLFNBQVMsRUFBRS9lLElBQUksQ0FBQztBQUNsQztBQUNBLFNBQVNrZixlQUFlQSxDQUFDamlCLENBQUMsRUFBRTtFQUN4QixJQUFJdEUsR0FBRztJQUNId21CLGNBQWMsR0FBRyxLQUFLO0lBQ3RCL2pCLENBQUM7SUFDRGdrQixRQUFRLEdBQUdILFFBQVEsQ0FBQ3JrQixNQUFNO0VBQzlCLEtBQUtqQyxHQUFHLElBQUlzRSxDQUFDLEVBQUU7SUFDWCxJQUNJeEMsVUFBVSxDQUFDd0MsQ0FBQyxFQUFFdEUsR0FBRyxDQUFDLElBQ2xCLEVBQ0l1VCxPQUFPLENBQUNyVCxJQUFJLENBQUNvbUIsUUFBUSxFQUFFdG1CLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUNqQ3NFLENBQUMsQ0FBQ3RFLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDaUYsS0FBSyxDQUFDWCxDQUFDLENBQUN0RSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3JDLEVBQ0g7TUFDRSxPQUFPLEtBQUs7SUFDaEI7RUFDSjtFQUNBLEtBQUt5QyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdna0IsUUFBUSxFQUFFLEVBQUVoa0IsQ0FBQyxFQUFFO0lBQzNCLElBQUk2QixDQUFDLENBQUNnaUIsUUFBUSxDQUFDN2pCLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDaEIsSUFBSStqQixjQUFjLEVBQUU7UUFDaEIsT0FBTyxLQUFLO01BQ2hCO01BQ0EsSUFBSUUsVUFBVSxDQUFDcGlCLENBQUMsQ0FBQ2dpQixRQUFRLENBQUM3akIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLZ04sS0FBSyxDQUFDbkwsQ0FBQyxDQUFDZ2lCLFFBQVEsQ0FBQzdqQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDdEQrakIsY0FBYyxHQUFHLElBQUk7TUFDekI7SUFDSjtFQUNKO0VBQ0EsT0FBTyxJQUFJO0FBQ2Y7QUFDQSxTQUFTRyxTQUFTQSxDQUFBLEVBQUc7RUFDakIsT0FBTyxJQUFJLENBQUM5aEIsUUFBUTtBQUN4QjtBQUNBLFNBQVMraEIsZUFBZUEsQ0FBQSxFQUFHO0VBQ3ZCLE9BQU9DLGNBQWMsQ0FBQ3BoQixHQUFHLENBQUM7QUFDOUI7QUFDQSxTQUFTcWhCLFFBQVFBLENBQUNDLFFBQVEsRUFBRTtFQUN4QixJQUFJcFksZUFBZSxHQUFHRixvQkFBb0IsQ0FBQ3NZLFFBQVEsQ0FBQztJQUNoREMsTUFBTSxHQUFHclksZUFBZSxDQUFDVSxJQUFJLElBQUksQ0FBQztJQUNsQzRYLFFBQVEsR0FBR3RZLGVBQWUsQ0FBQ3VZLE9BQU8sSUFBSSxDQUFDO0lBQ3ZDQyxPQUFPLEdBQUd4WSxlQUFlLENBQUNxQixLQUFLLElBQUksQ0FBQztJQUNwQ29YLE1BQU0sR0FBR3pZLGVBQWUsQ0FBQzJJLElBQUksSUFBSTNJLGVBQWUsQ0FBQzBZLE9BQU8sSUFBSSxDQUFDO0lBQzdEQyxLQUFLLEdBQUczWSxlQUFlLENBQUNrTCxHQUFHLElBQUksQ0FBQztJQUNoQ2dELE1BQU0sR0FBR2xPLGVBQWUsQ0FBQytWLElBQUksSUFBSSxDQUFDO0lBQ2xDNUgsUUFBUSxHQUFHbk8sZUFBZSxDQUFDOFcsTUFBTSxJQUFJLENBQUM7SUFDdEM4QixRQUFRLEdBQUc1WSxlQUFlLENBQUMrVyxNQUFNLElBQUksQ0FBQztJQUN0QzhCLGFBQWEsR0FBRzdZLGVBQWUsQ0FBQ2dYLFdBQVcsSUFBSSxDQUFDO0VBQ3BELElBQUksQ0FBQzlnQixRQUFRLEdBQUcwaEIsZUFBZSxDQUFDNVgsZUFBZSxDQUFDO0VBQ2hELElBQUksQ0FBQzhZLGFBQWEsR0FDZCxDQUFDRCxhQUFhLEdBQ2RELFFBQVEsR0FBRyxHQUFHLEdBQ2R6SyxRQUFRLEdBQUcsR0FBRyxHQUNkRCxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFO0VBQzFCLElBQUksQ0FBQzZLLEtBQUssR0FBRyxDQUFDSixLQUFLLEdBQUdGLE1BQU0sR0FBRyxDQUFDO0VBQ2hDLElBQUksQ0FBQzlTLE9BQU8sR0FBRyxDQUFDNlMsT0FBTyxHQUFHRixRQUFRLEdBQUcsQ0FBQyxHQUFHRCxNQUFNLEdBQUcsRUFBRTtFQUNwRCxJQUFJLENBQUNXLEtBQUssR0FBRyxDQUFDLENBQUM7RUFDZixJQUFJLENBQUNsaEIsT0FBTyxHQUFHOFgsU0FBUyxDQUFDLENBQUM7RUFDMUIsSUFBSSxDQUFDcUosT0FBTyxDQUFDLENBQUM7QUFDbEI7QUFDQSxTQUFTQyxVQUFVQSxDQUFDN2xCLEdBQUcsRUFBRTtFQUNyQixPQUFPQSxHQUFHLFlBQVk4a0IsUUFBUTtBQUNsQztBQUNBLFNBQVNnQixRQUFRQSxDQUFDdGUsTUFBTSxFQUFFO0VBQ3RCLElBQUlBLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDWixPQUFPSSxJQUFJLENBQUNtZSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUd2ZSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDdkMsQ0FBQyxNQUFNO0lBQ0gsT0FBT0ksSUFBSSxDQUFDbWUsS0FBSyxDQUFDdmUsTUFBTSxDQUFDO0VBQzdCO0FBQ0o7QUFDQSxTQUFTd2UsYUFBYUEsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRTtFQUNoRCxJQUFJeGpCLEdBQUcsR0FBR2lGLElBQUksQ0FBQzBMLEdBQUcsQ0FBQzJTLE1BQU0sQ0FBQ2htQixNQUFNLEVBQUVpbUIsTUFBTSxDQUFDam1CLE1BQU0sQ0FBQztJQUM1Q21tQixVQUFVLEdBQUd4ZSxJQUFJLENBQUNDLEdBQUcsQ0FBQ29lLE1BQU0sQ0FBQ2htQixNQUFNLEdBQUdpbUIsTUFBTSxDQUFDam1CLE1BQU0sQ0FBQztJQUNwRG9tQixLQUFLLEdBQUcsQ0FBQztJQUNUNWxCLENBQUM7RUFDTCxLQUFLQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdrQyxHQUFHLEVBQUVsQyxDQUFDLEVBQUUsRUFBRTtJQUN0QixJQUNLMGxCLFdBQVcsSUFBSUYsTUFBTSxDQUFDeGxCLENBQUMsQ0FBQyxLQUFLeWxCLE1BQU0sQ0FBQ3psQixDQUFDLENBQUMsSUFDdEMsQ0FBQzBsQixXQUFXLElBQUkxWSxLQUFLLENBQUN3WSxNQUFNLENBQUN4bEIsQ0FBQyxDQUFDLENBQUMsS0FBS2dOLEtBQUssQ0FBQ3lZLE1BQU0sQ0FBQ3psQixDQUFDLENBQUMsQ0FBRSxFQUN6RDtNQUNFNGxCLEtBQUssRUFBRTtJQUNYO0VBQ0o7RUFDQSxPQUFPQSxLQUFLLEdBQUdELFVBQVU7QUFDN0I7QUFDQSxTQUFTRSxNQUFNQSxDQUFDOWQsTUFBTSxFQUFFK2QsU0FBUyxFQUFFO0VBQy9CaGUsY0FBYyxDQUFDQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO0lBQ3JDLElBQUlnZSxPQUFPLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUMsQ0FBQztNQUMxQjFlLEtBQUssR0FBRyxHQUFHO0lBQ2YsSUFBSXllLE9BQU8sR0FBRyxDQUFDLEVBQUU7TUFDYkEsT0FBTyxHQUFHLENBQUNBLE9BQU87TUFDbEJ6ZSxLQUFLLEdBQUcsR0FBRztJQUNmO0lBQ0EsT0FDSUEsS0FBSyxHQUNMUixRQUFRLENBQUMsQ0FBQyxFQUFFaWYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUM3QkQsU0FBUyxHQUNUaGYsUUFBUSxDQUFDLENBQUMsQ0FBQ2lmLE9BQU8sR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBRW5DLENBQUMsQ0FBQztBQUNOO0FBQ0EsU0FBU0UsZ0JBQWdCQSxDQUFDRSxPQUFPLEVBQUVoYixNQUFNLEVBQUU7RUFDdkMsSUFBSWliLE9BQU8sR0FBRyxDQUFDamIsTUFBTSxJQUFJLEVBQUUsRUFBRTdDLEtBQUssQ0FBQzZkLE9BQU8sQ0FBQztJQUN2Q0UsS0FBSztJQUNMQyxLQUFLO0lBQ0xqTSxRQUFRO0VBQ1osSUFBSStMLE9BQU8sS0FBSyxJQUFJLEVBQUU7SUFDbEIsT0FBTyxJQUFJO0VBQ2Y7RUFDQUMsS0FBSyxHQUFHRCxPQUFPLENBQUNBLE9BQU8sQ0FBQzVtQixNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRTtFQUN6QzhtQixLQUFLLEdBQUcsQ0FBQ0QsS0FBSyxHQUFHLEVBQUUsRUFBRS9kLEtBQUssQ0FBQzRkLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDdEQ3TCxRQUFRLEdBQUcsRUFBRWlNLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBR3RaLEtBQUssQ0FBQ3NaLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM3QyxPQUFPak0sUUFBUSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUdpTSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHak0sUUFBUSxHQUFHLENBQUNBLFFBQVE7QUFDdkU7QUFDQSxTQUFTa00sZUFBZUEsQ0FBQ3RuQixLQUFLLEVBQUV1bkIsS0FBSyxFQUFFO0VBQ25DLElBQUl0cUIsR0FBRyxFQUFFcVAsS0FBSztFQUNkLElBQUlpYixLQUFLLENBQUMxaUIsTUFBTSxFQUFFO0lBQ2Q1SCxHQUFHLEdBQUdzcUIsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQztJQUNuQmxiLEtBQUssR0FDRCxDQUFDbkgsUUFBUSxDQUFDbkYsS0FBSyxDQUFDLElBQUlXLE1BQU0sQ0FBQ1gsS0FBSyxDQUFDLEdBQzNCQSxLQUFLLENBQUNtQixPQUFPLENBQUMsQ0FBQyxHQUNmbWhCLFdBQVcsQ0FBQ3RpQixLQUFLLENBQUMsQ0FBQ21CLE9BQU8sQ0FBQyxDQUFDLElBQUlsRSxHQUFHLENBQUNrRSxPQUFPLENBQUMsQ0FBQztJQUN2RGxFLEdBQUcsQ0FBQ3VHLEVBQUUsQ0FBQ2lrQixPQUFPLENBQUN4cUIsR0FBRyxDQUFDdUcsRUFBRSxDQUFDckMsT0FBTyxDQUFDLENBQUMsR0FBR21MLEtBQUssQ0FBQztJQUN4QzFNLEtBQUssQ0FBQ3NGLFlBQVksQ0FBQ2pJLEdBQUcsRUFBRSxLQUFLLENBQUM7SUFDOUIsT0FBT0EsR0FBRztFQUNkLENBQUMsTUFBTTtJQUNILE9BQU9xbEIsV0FBVyxDQUFDdGlCLEtBQUssQ0FBQyxDQUFDMG5CLEtBQUssQ0FBQyxDQUFDO0VBQ3JDO0FBQ0o7QUFDQSxTQUFTQyxhQUFhQSxDQUFDL2tCLENBQUMsRUFBRTtFQUN0QixPQUFPLENBQUNzRixJQUFJLENBQUNtZSxLQUFLLENBQUN6akIsQ0FBQyxDQUFDWSxFQUFFLENBQUNva0IsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0FBQ2hEO0FBQ0EsU0FBU0MsWUFBWUEsQ0FBQzduQixLQUFLLEVBQUU4bkIsYUFBYSxFQUFFQyxXQUFXLEVBQUU7RUFDckQsSUFBSWpCLE9BQU8sR0FBRyxJQUFJLENBQUNoaUIsT0FBTyxJQUFJLENBQUM7SUFDM0JrakIsV0FBVztFQUNmLElBQUksQ0FBQyxJQUFJLENBQUM5a0IsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNqQixPQUFPbEQsS0FBSyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcrRCxHQUFHO0VBQ3JDO0VBQ0EsSUFBSS9ELEtBQUssSUFBSSxJQUFJLEVBQUU7SUFDZixJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7TUFDM0JBLEtBQUssR0FBR2duQixnQkFBZ0IsQ0FBQ3JYLGdCQUFnQixFQUFFM1AsS0FBSyxDQUFDO01BQ2pELElBQUlBLEtBQUssS0FBSyxJQUFJLEVBQUU7UUFDaEIsT0FBTyxJQUFJO01BQ2Y7SUFDSixDQUFDLE1BQU0sSUFBSWtJLElBQUksQ0FBQ0MsR0FBRyxDQUFDbkksS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMrbkIsV0FBVyxFQUFFO01BQzdDL25CLEtBQUssR0FBR0EsS0FBSyxHQUFHLEVBQUU7SUFDdEI7SUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDNkUsTUFBTSxJQUFJaWpCLGFBQWEsRUFBRTtNQUMvQkUsV0FBVyxHQUFHTCxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ3JDO0lBQ0EsSUFBSSxDQUFDN2lCLE9BQU8sR0FBRzlFLEtBQUs7SUFDcEIsSUFBSSxDQUFDNkUsTUFBTSxHQUFHLElBQUk7SUFDbEIsSUFBSW1qQixXQUFXLElBQUksSUFBSSxFQUFFO01BQ3JCLElBQUksQ0FBQ25SLEdBQUcsQ0FBQ21SLFdBQVcsRUFBRSxHQUFHLENBQUM7SUFDOUI7SUFDQSxJQUFJbEIsT0FBTyxLQUFLOW1CLEtBQUssRUFBRTtNQUNuQixJQUFJLENBQUM4bkIsYUFBYSxJQUFJLElBQUksQ0FBQ0csaUJBQWlCLEVBQUU7UUFDMUNDLFdBQVcsQ0FDUCxJQUFJLEVBQ0ovQyxjQUFjLENBQUNubEIsS0FBSyxHQUFHOG1CLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFDcEMsQ0FBQyxFQUNELEtBQ0osQ0FBQztNQUNMLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDbUIsaUJBQWlCLEVBQUU7UUFDaEMsSUFBSSxDQUFDQSxpQkFBaUIsR0FBRyxJQUFJO1FBQzdCcm9CLEtBQUssQ0FBQ3NGLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQzlCLElBQUksQ0FBQytpQixpQkFBaUIsR0FBRyxJQUFJO01BQ2pDO0lBQ0o7SUFDQSxPQUFPLElBQUk7RUFDZixDQUFDLE1BQU07SUFDSCxPQUFPLElBQUksQ0FBQ3BqQixNQUFNLEdBQUdpaUIsT0FBTyxHQUFHYSxhQUFhLENBQUMsSUFBSSxDQUFDO0VBQ3REO0FBQ0o7QUFDQSxTQUFTUSxVQUFVQSxDQUFDbm9CLEtBQUssRUFBRThuQixhQUFhLEVBQUU7RUFDdEMsSUFBSTluQixLQUFLLElBQUksSUFBSSxFQUFFO0lBQ2YsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUFFO01BQzNCQSxLQUFLLEdBQUcsQ0FBQ0EsS0FBSztJQUNsQjtJQUNBLElBQUksQ0FBQyttQixTQUFTLENBQUMvbUIsS0FBSyxFQUFFOG5CLGFBQWEsQ0FBQztJQUNwQyxPQUFPLElBQUk7RUFDZixDQUFDLE1BQU07SUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDZixTQUFTLENBQUMsQ0FBQztFQUM1QjtBQUNKO0FBQ0EsU0FBU3FCLGNBQWNBLENBQUNOLGFBQWEsRUFBRTtFQUNuQyxPQUFPLElBQUksQ0FBQ2YsU0FBUyxDQUFDLENBQUMsRUFBRWUsYUFBYSxDQUFDO0FBQzNDO0FBQ0EsU0FBU08sZ0JBQWdCQSxDQUFDUCxhQUFhLEVBQUU7RUFDckMsSUFBSSxJQUFJLENBQUNqakIsTUFBTSxFQUFFO0lBQ2IsSUFBSSxDQUFDa2lCLFNBQVMsQ0FBQyxDQUFDLEVBQUVlLGFBQWEsQ0FBQztJQUNoQyxJQUFJLENBQUNqakIsTUFBTSxHQUFHLEtBQUs7SUFDbkIsSUFBSWlqQixhQUFhLEVBQUU7TUFDZixJQUFJLENBQUNRLFFBQVEsQ0FBQ1gsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUMzQztFQUNKO0VBQ0EsT0FBTyxJQUFJO0FBQ2Y7QUFDQSxTQUFTWSx1QkFBdUJBLENBQUEsRUFBRztFQUMvQixJQUFJLElBQUksQ0FBQzNqQixJQUFJLElBQUksSUFBSSxFQUFFO0lBQ25CLElBQUksQ0FBQ21pQixTQUFTLENBQUMsSUFBSSxDQUFDbmlCLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDO0VBQzFDLENBQUMsTUFBTSxJQUFJLE9BQU8sSUFBSSxDQUFDSCxFQUFFLEtBQUssUUFBUSxFQUFFO0lBQ3BDLElBQUkrakIsS0FBSyxHQUFHeEIsZ0JBQWdCLENBQUN0WCxXQUFXLEVBQUUsSUFBSSxDQUFDakwsRUFBRSxDQUFDO0lBQ2xELElBQUkrakIsS0FBSyxJQUFJLElBQUksRUFBRTtNQUNmLElBQUksQ0FBQ3pCLFNBQVMsQ0FBQ3lCLEtBQUssQ0FBQztJQUN6QixDQUFDLE1BQU07TUFDSCxJQUFJLENBQUN6QixTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQztJQUMzQjtFQUNKO0VBQ0EsT0FBTyxJQUFJO0FBQ2Y7QUFDQSxTQUFTMEIsb0JBQW9CQSxDQUFDem9CLEtBQUssRUFBRTtFQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDa0QsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNqQixPQUFPLEtBQUs7RUFDaEI7RUFDQWxELEtBQUssR0FBR0EsS0FBSyxHQUFHc2lCLFdBQVcsQ0FBQ3RpQixLQUFLLENBQUMsQ0FBQyttQixTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUM7RUFDbEQsT0FBTyxDQUFDLElBQUksQ0FBQ0EsU0FBUyxDQUFDLENBQUMsR0FBRy9tQixLQUFLLElBQUksRUFBRSxLQUFLLENBQUM7QUFDaEQ7QUFDQSxTQUFTMG9CLG9CQUFvQkEsQ0FBQSxFQUFHO0VBQzVCLE9BQ0ksSUFBSSxDQUFDM0IsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNTLEtBQUssQ0FBQyxDQUFDLENBQUNsWixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUN5WSxTQUFTLENBQUMsQ0FBQyxJQUNwRCxJQUFJLENBQUNBLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDUyxLQUFLLENBQUMsQ0FBQyxDQUFDbFosS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDeVksU0FBUyxDQUFDLENBQUM7QUFFNUQ7QUFDQSxTQUFTNEIsMkJBQTJCQSxDQUFBLEVBQUc7RUFDbkMsSUFBSSxDQUFDbG9CLFdBQVcsQ0FBQyxJQUFJLENBQUNtb0IsYUFBYSxDQUFDLEVBQUU7SUFDbEMsT0FBTyxJQUFJLENBQUNBLGFBQWE7RUFDN0I7RUFDQSxJQUFJNUgsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNOd0QsS0FBSztFQUNUdGdCLFVBQVUsQ0FBQzhjLENBQUMsRUFBRSxJQUFJLENBQUM7RUFDbkJBLENBQUMsR0FBR21ELGFBQWEsQ0FBQ25ELENBQUMsQ0FBQztFQUNwQixJQUFJQSxDQUFDLENBQUM3UCxFQUFFLEVBQUU7SUFDTnFULEtBQUssR0FBR3hELENBQUMsQ0FBQ25jLE1BQU0sR0FBR3pELFNBQVMsQ0FBQzRmLENBQUMsQ0FBQzdQLEVBQUUsQ0FBQyxHQUFHbVIsV0FBVyxDQUFDdEIsQ0FBQyxDQUFDN1AsRUFBRSxDQUFDO0lBQ3RELElBQUksQ0FBQ3lYLGFBQWEsR0FDZCxJQUFJLENBQUMxbEIsT0FBTyxDQUFDLENBQUMsSUFBSW9qQixhQUFhLENBQUN0RixDQUFDLENBQUM3UCxFQUFFLEVBQUVxVCxLQUFLLENBQUNxRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztFQUNsRSxDQUFDLE1BQU07SUFDSCxJQUFJLENBQUNELGFBQWEsR0FBRyxLQUFLO0VBQzlCO0VBQ0EsT0FBTyxJQUFJLENBQUNBLGFBQWE7QUFDN0I7QUFDQSxTQUFTRSxPQUFPQSxDQUFBLEVBQUc7RUFDZixPQUFPLElBQUksQ0FBQzVsQixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDMkIsTUFBTSxHQUFHLEtBQUs7QUFDaEQ7QUFDQSxTQUFTa2tCLFdBQVdBLENBQUEsRUFBRztFQUNuQixPQUFPLElBQUksQ0FBQzdsQixPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzJCLE1BQU0sR0FBRyxLQUFLO0FBQy9DO0FBQ0EsU0FBU21rQixLQUFLQSxDQUFBLEVBQUc7RUFDYixPQUFPLElBQUksQ0FBQzlsQixPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzJCLE1BQU0sSUFBSSxJQUFJLENBQUNDLE9BQU8sS0FBSyxDQUFDLEdBQUcsS0FBSztBQUNyRTtBQUNBLFNBQVNxZ0IsY0FBY0EsQ0FBQ25sQixLQUFLLEVBQUUxQixHQUFHLEVBQUU7RUFDaEMsSUFBSSttQixRQUFRLEdBQUdybEIsS0FBSztJQUNoQnFKLEtBQUssR0FBRyxJQUFJO0lBQ1poQixLQUFLO0lBQ0w4Z0IsR0FBRztJQUNIQyxPQUFPO0VBQ1gsSUFBSWpELFVBQVUsQ0FBQ25tQixLQUFLLENBQUMsRUFBRTtJQUNuQnFsQixRQUFRLEdBQUc7TUFDUHZRLEVBQUUsRUFBRTlVLEtBQUssQ0FBQytsQixhQUFhO01BQ3ZCdmEsQ0FBQyxFQUFFeEwsS0FBSyxDQUFDZ21CLEtBQUs7TUFDZHBhLENBQUMsRUFBRTVMLEtBQUssQ0FBQzRTO0lBQ2IsQ0FBQztFQUNMLENBQUMsTUFBTSxJQUFJbFMsUUFBUSxDQUFDVixLQUFLLENBQUMsSUFBSSxDQUFDdUQsS0FBSyxDQUFDLENBQUN2RCxLQUFLLENBQUMsRUFBRTtJQUMxQ3FsQixRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsSUFBSS9tQixHQUFHLEVBQUU7TUFDTCttQixRQUFRLENBQUMvbUIsR0FBRyxDQUFDLEdBQUcsQ0FBQzBCLEtBQUs7SUFDMUIsQ0FBQyxNQUFNO01BQ0hxbEIsUUFBUSxDQUFDZ0UsWUFBWSxHQUFHLENBQUNycEIsS0FBSztJQUNsQztFQUNKLENBQUMsTUFBTSxJQUFLcUosS0FBSyxHQUFHNGYsV0FBVyxDQUFDckssSUFBSSxDQUFDNWUsS0FBSyxDQUFDLEVBQUc7SUFDMUNxSSxLQUFLLEdBQUdnQixLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakNnYyxRQUFRLEdBQUc7TUFDUHZaLENBQUMsRUFBRSxDQUFDO01BQ0pOLENBQUMsRUFBRXVDLEtBQUssQ0FBQzFFLEtBQUssQ0FBQ2lJLElBQUksQ0FBQyxDQUFDLEdBQUdqSixLQUFLO01BQzdCaUQsQ0FBQyxFQUFFeUMsS0FBSyxDQUFDMUUsS0FBSyxDQUFDa0ksSUFBSSxDQUFDLENBQUMsR0FBR2xKLEtBQUs7TUFDN0J6RixDQUFDLEVBQUVtTCxLQUFLLENBQUMxRSxLQUFLLENBQUNtSSxNQUFNLENBQUMsQ0FBQyxHQUFHbkosS0FBSztNQUMvQjVKLENBQUMsRUFBRXNQLEtBQUssQ0FBQzFFLEtBQUssQ0FBQ29JLE1BQU0sQ0FBQyxDQUFDLEdBQUdwSixLQUFLO01BQy9CeU0sRUFBRSxFQUFFL0csS0FBSyxDQUFDcVksUUFBUSxDQUFDL2MsS0FBSyxDQUFDcUksV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBR3JKO0lBRXBELENBQUM7RUFDTCxDQUFDLE1BQU0sSUFBS2dCLEtBQUssR0FBRzZmLFFBQVEsQ0FBQ3RLLElBQUksQ0FBQzVlLEtBQUssQ0FBQyxFQUFHO0lBQ3ZDcUksS0FBSyxHQUFHZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ2pDZ2MsUUFBUSxHQUFHO01BQ1B2WixDQUFDLEVBQUV3ZCxRQUFRLENBQUNqZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFaEIsS0FBSyxDQUFDO01BQzVCdUQsQ0FBQyxFQUFFMGQsUUFBUSxDQUFDamdCLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRWhCLEtBQUssQ0FBQztNQUM1QnFELENBQUMsRUFBRTRkLFFBQVEsQ0FBQ2pnQixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVoQixLQUFLLENBQUM7TUFDNUJtRCxDQUFDLEVBQUU4ZCxRQUFRLENBQUNqZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFaEIsS0FBSyxDQUFDO01BQzVCaUQsQ0FBQyxFQUFFZ2UsUUFBUSxDQUFDamdCLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRWhCLEtBQUssQ0FBQztNQUM1QnpGLENBQUMsRUFBRTBtQixRQUFRLENBQUNqZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFaEIsS0FBSyxDQUFDO01BQzVCNUosQ0FBQyxFQUFFNnFCLFFBQVEsQ0FBQ2pnQixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVoQixLQUFLO0lBQy9CLENBQUM7RUFDTCxDQUFDLE1BQU0sSUFBSWdkLFFBQVEsSUFBSSxJQUFJLEVBQUU7SUFDekJBLFFBQVEsR0FBRyxDQUFDLENBQUM7RUFDakIsQ0FBQyxNQUFNLElBQ0hwbkIsT0FBQSxDQUFPb25CLFFBQVEsTUFBSyxRQUFRLEtBQzNCLE1BQU0sSUFBSUEsUUFBUSxJQUFJLElBQUksSUFBSUEsUUFBUSxDQUFDLEVBQzFDO0lBQ0UrRCxPQUFPLEdBQUdHLGlCQUFpQixDQUN2QmpILFdBQVcsQ0FBQytDLFFBQVEsQ0FBQ3ZuQixJQUFJLENBQUMsRUFDMUJ3a0IsV0FBVyxDQUFDK0MsUUFBUSxDQUFDeG5CLEVBQUUsQ0FDM0IsQ0FBQztJQUNEd25CLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYkEsUUFBUSxDQUFDdlEsRUFBRSxHQUFHc1UsT0FBTyxDQUFDQyxZQUFZO0lBQ2xDaEUsUUFBUSxDQUFDelosQ0FBQyxHQUFHd2QsT0FBTyxDQUFDblgsTUFBTTtFQUMvQjtFQUNBa1gsR0FBRyxHQUFHLElBQUkvRCxRQUFRLENBQUNDLFFBQVEsQ0FBQztFQUM1QixJQUFJYyxVQUFVLENBQUNubUIsS0FBSyxDQUFDLElBQUlJLFVBQVUsQ0FBQ0osS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUFFO0lBQ25EbXBCLEdBQUcsQ0FBQ3BrQixPQUFPLEdBQUcvRSxLQUFLLENBQUMrRSxPQUFPO0VBQy9CO0VBQ0EsSUFBSW9oQixVQUFVLENBQUNubUIsS0FBSyxDQUFDLElBQUlJLFVBQVUsQ0FBQ0osS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFO0lBQ3BEbXBCLEdBQUcsQ0FBQ2htQixRQUFRLEdBQUduRCxLQUFLLENBQUNtRCxRQUFRO0VBQ2pDO0VBQ0EsT0FBT2dtQixHQUFHO0FBQ2Q7QUFDQSxTQUFTRyxRQUFRQSxDQUFDRyxHQUFHLEVBQUVwaEIsS0FBSyxFQUFFO0VBQzFCLElBQUlwTCxHQUFHLEdBQUd3c0IsR0FBRyxJQUFJekUsVUFBVSxDQUFDeUUsR0FBRyxDQUFDbmdCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDbEQsT0FBTyxDQUFDL0YsS0FBSyxDQUFDdEcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHQSxHQUFHLElBQUlvTCxLQUFLO0FBQ3pDO0FBQ0EsU0FBU3FoQix5QkFBeUJBLENBQUNDLElBQUksRUFBRW5GLEtBQUssRUFBRTtFQUM1QyxJQUFJdm5CLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDWkEsR0FBRyxDQUFDZ1YsTUFBTSxHQUNOdVMsS0FBSyxDQUFDbFcsS0FBSyxDQUFDLENBQUMsR0FBR3FiLElBQUksQ0FBQ3JiLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQ2tXLEtBQUssQ0FBQzdXLElBQUksQ0FBQyxDQUFDLEdBQUdnYyxJQUFJLENBQUNoYyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7RUFDcEUsSUFBSWdjLElBQUksQ0FBQ25DLEtBQUssQ0FBQyxDQUFDLENBQUMzUSxHQUFHLENBQUM1WixHQUFHLENBQUNnVixNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMyWCxPQUFPLENBQUNwRixLQUFLLENBQUMsRUFBRTtJQUNsRCxFQUFFdm5CLEdBQUcsQ0FBQ2dWLE1BQU07RUFDaEI7RUFDQWhWLEdBQUcsQ0FBQ29zQixZQUFZLEdBQUcsQ0FBQzdFLEtBQUssR0FBRyxDQUFDbUYsSUFBSSxDQUFDbkMsS0FBSyxDQUFDLENBQUMsQ0FBQzNRLEdBQUcsQ0FBQzVaLEdBQUcsQ0FBQ2dWLE1BQU0sRUFBRSxHQUFHLENBQUM7RUFDOUQsT0FBT2hWLEdBQUc7QUFDZDtBQUNBLFNBQVNzc0IsaUJBQWlCQSxDQUFDSSxJQUFJLEVBQUVuRixLQUFLLEVBQUU7RUFDcEMsSUFBSXZuQixHQUFHO0VBQ1AsSUFBSSxFQUFFMHNCLElBQUksQ0FBQ3ptQixPQUFPLENBQUMsQ0FBQyxJQUFJc2hCLEtBQUssQ0FBQ3RoQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDdEMsT0FBTztNQUFFbW1CLFlBQVksRUFBRSxDQUFDO01BQUVwWCxNQUFNLEVBQUU7SUFBRSxDQUFDO0VBQ3pDO0VBQ0F1UyxLQUFLLEdBQUc4QyxlQUFlLENBQUM5QyxLQUFLLEVBQUVtRixJQUFJLENBQUM7RUFDcEMsSUFBSUEsSUFBSSxDQUFDRSxRQUFRLENBQUNyRixLQUFLLENBQUMsRUFBRTtJQUN0QnZuQixHQUFHLEdBQUd5c0IseUJBQXlCLENBQUNDLElBQUksRUFBRW5GLEtBQUssQ0FBQztFQUNoRCxDQUFDLE1BQU07SUFDSHZuQixHQUFHLEdBQUd5c0IseUJBQXlCLENBQUNsRixLQUFLLEVBQUVtRixJQUFJLENBQUM7SUFDNUMxc0IsR0FBRyxDQUFDb3NCLFlBQVksR0FBRyxDQUFDcHNCLEdBQUcsQ0FBQ29zQixZQUFZO0lBQ3BDcHNCLEdBQUcsQ0FBQ2dWLE1BQU0sR0FBRyxDQUFDaFYsR0FBRyxDQUFDZ1YsTUFBTTtFQUM1QjtFQUNBLE9BQU9oVixHQUFHO0FBQ2Q7QUFDQSxTQUFTNnNCLFdBQVdBLENBQUNDLFNBQVMsRUFBRXJzQixJQUFJLEVBQUU7RUFDbEMsT0FBTyxVQUFVNEcsR0FBRyxFQUFFMGxCLE1BQU0sRUFBRTtJQUMxQixJQUFJQyxHQUFHLEVBQUVDLEdBQUc7SUFDWixJQUFJRixNQUFNLEtBQUssSUFBSSxJQUFJLENBQUN6bUIsS0FBSyxDQUFDLENBQUN5bUIsTUFBTSxDQUFDLEVBQUU7TUFDcEM5akIsZUFBZSxDQUNYeEksSUFBSSxFQUNKLFdBQVcsR0FDUEEsSUFBSSxHQUNKLHNEQUFzRCxHQUN0REEsSUFBSSxHQUNKLGdHQUNSLENBQUM7TUFDRHdzQixHQUFHLEdBQUc1bEIsR0FBRztNQUNUQSxHQUFHLEdBQUcwbEIsTUFBTTtNQUNaQSxNQUFNLEdBQUdFLEdBQUc7SUFDaEI7SUFDQUQsR0FBRyxHQUFHOUUsY0FBYyxDQUFDN2dCLEdBQUcsRUFBRTBsQixNQUFNLENBQUM7SUFDakM5QixXQUFXLENBQUMsSUFBSSxFQUFFK0IsR0FBRyxFQUFFRixTQUFTLENBQUM7SUFDakMsT0FBTyxJQUFJO0VBQ2YsQ0FBQztBQUNMO0FBQ0EsU0FBUzdCLFdBQVdBLENBQUN6Z0IsR0FBRyxFQUFFNGQsUUFBUSxFQUFFOEUsUUFBUSxFQUFFamxCLFlBQVksRUFBRTtFQUN4RCxJQUFJNGdCLGFBQWEsR0FBR1QsUUFBUSxDQUFDVSxhQUFhO0lBQ3RDSCxLQUFLLEdBQUdRLFFBQVEsQ0FBQ2YsUUFBUSxDQUFDVyxLQUFLLENBQUM7SUFDaENQLE9BQU8sR0FBR1csUUFBUSxDQUFDZixRQUFRLENBQUN6UyxPQUFPLENBQUM7RUFDeEMsSUFBSSxDQUFDbkwsR0FBRyxDQUFDdkUsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNoQjtFQUNKO0VBQ0FnQyxZQUFZLEdBQUdBLFlBQVksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHQSxZQUFZO0VBQ3pELElBQUl1Z0IsT0FBTyxFQUFFO0lBQ1QvUixRQUFRLENBQUNqTSxHQUFHLEVBQUVqTCxHQUFHLENBQUNpTCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUdnZSxPQUFPLEdBQUcwRSxRQUFRLENBQUM7RUFDekQ7RUFDQSxJQUFJdkUsS0FBSyxFQUFFO0lBQ1B2WCxLQUFLLENBQUM1RyxHQUFHLEVBQUUsTUFBTSxFQUFFakwsR0FBRyxDQUFDaUwsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHbWUsS0FBSyxHQUFHdUUsUUFBUSxDQUFDO0VBQzNEO0VBQ0EsSUFBSXJFLGFBQWEsRUFBRTtJQUNmcmUsR0FBRyxDQUFDakUsRUFBRSxDQUFDaWtCLE9BQU8sQ0FBQ2hnQixHQUFHLENBQUNqRSxFQUFFLENBQUNyQyxPQUFPLENBQUMsQ0FBQyxHQUFHMmtCLGFBQWEsR0FBR3FFLFFBQVEsQ0FBQztFQUMvRDtFQUNBLElBQUlqbEIsWUFBWSxFQUFFO0lBQ2R0RixLQUFLLENBQUNzRixZQUFZLENBQUN1QyxHQUFHLEVBQUVtZSxLQUFLLElBQUlILE9BQU8sQ0FBQztFQUM3QztBQUNKO0FBQ0EsU0FBUzJFLFFBQVFBLENBQUNwcUIsS0FBSyxFQUFFO0VBQ3JCLE9BQU8sT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSUEsS0FBSyxZQUFZcXFCLE1BQU07QUFDL0Q7QUFDQSxTQUFTQyxhQUFhQSxDQUFDdHFCLEtBQUssRUFBRTtFQUMxQixPQUNJbUYsUUFBUSxDQUFDbkYsS0FBSyxDQUFDLElBQ2ZXLE1BQU0sQ0FBQ1gsS0FBSyxDQUFDLElBQ2JvcUIsUUFBUSxDQUFDcHFCLEtBQUssQ0FBQyxJQUNmVSxRQUFRLENBQUNWLEtBQUssQ0FBQyxJQUNmdXFCLHFCQUFxQixDQUFDdnFCLEtBQUssQ0FBQyxJQUM1QndxQixtQkFBbUIsQ0FBQ3hxQixLQUFLLENBQUMsSUFDMUJBLEtBQUssS0FBSyxJQUFJLElBQ2RBLEtBQUssS0FBSyxLQUFLLENBQUM7QUFFeEI7QUFDQSxTQUFTd3FCLG1CQUFtQkEsQ0FBQ3hxQixLQUFLLEVBQUU7RUFDaEMsSUFBSXlxQixVQUFVLEdBQUd0cUIsUUFBUSxDQUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDSyxhQUFhLENBQUNMLEtBQUssQ0FBQztJQUNyRDBxQixZQUFZLEdBQUcsS0FBSztJQUNwQkMsVUFBVSxHQUFHLENBQ1QsT0FBTyxFQUNQLE1BQU0sRUFDTixHQUFHLEVBQ0gsUUFBUSxFQUNSLE9BQU8sRUFDUCxHQUFHLEVBQ0gsTUFBTSxFQUNOLEtBQUssRUFDTCxHQUFHLEVBQ0gsT0FBTyxFQUNQLE1BQU0sRUFDTixHQUFHLEVBQ0gsT0FBTyxFQUNQLE1BQU0sRUFDTixHQUFHLEVBQ0gsU0FBUyxFQUNULFFBQVEsRUFDUixHQUFHLEVBQ0gsU0FBUyxFQUNULFFBQVEsRUFDUixHQUFHLEVBQ0gsY0FBYyxFQUNkLGFBQWEsRUFDYixJQUFJLENBQ1A7SUFDRDVwQixDQUFDO0lBQ0Q2cEIsUUFBUTtJQUNSQyxXQUFXLEdBQUdGLFVBQVUsQ0FBQ3BxQixNQUFNO0VBQ25DLEtBQUtRLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzhwQixXQUFXLEVBQUU5cEIsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNqQzZwQixRQUFRLEdBQUdELFVBQVUsQ0FBQzVwQixDQUFDLENBQUM7SUFDeEIycEIsWUFBWSxHQUFHQSxZQUFZLElBQUl0cUIsVUFBVSxDQUFDSixLQUFLLEVBQUU0cUIsUUFBUSxDQUFDO0VBQzlEO0VBQ0EsT0FBT0gsVUFBVSxJQUFJQyxZQUFZO0FBQ3JDO0FBQ0EsU0FBU0gscUJBQXFCQSxDQUFDdnFCLEtBQUssRUFBRTtFQUNsQyxJQUFJOHFCLFNBQVMsR0FBRy9xQixPQUFPLENBQUNDLEtBQUssQ0FBQztJQUMxQitxQixZQUFZLEdBQUcsS0FBSztFQUN4QixJQUFJRCxTQUFTLEVBQUU7SUFDWEMsWUFBWSxHQUNSL3FCLEtBQUssQ0FBQ2dyQixNQUFNLENBQUMsVUFBVUMsSUFBSSxFQUFFO01BQ3pCLE9BQU8sQ0FBQ3ZxQixRQUFRLENBQUN1cUIsSUFBSSxDQUFDLElBQUliLFFBQVEsQ0FBQ3BxQixLQUFLLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUNPLE1BQU0sS0FBSyxDQUFDO0VBQ3ZCO0VBQ0EsT0FBT3VxQixTQUFTLElBQUlDLFlBQVk7QUFDcEM7QUFDQSxTQUFTRyxjQUFjQSxDQUFDbHJCLEtBQUssRUFBRTtFQUMzQixJQUFJeXFCLFVBQVUsR0FBR3RxQixRQUFRLENBQUNILEtBQUssQ0FBQyxJQUFJLENBQUNLLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO0lBQ3JEMHFCLFlBQVksR0FBRyxLQUFLO0lBQ3BCQyxVQUFVLEdBQUcsQ0FDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsQ0FDYjtJQUNENXBCLENBQUM7SUFDRDZwQixRQUFRO0VBQ1osS0FBSzdwQixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUc0cEIsVUFBVSxDQUFDcHFCLE1BQU0sRUFBRVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUN2QzZwQixRQUFRLEdBQUdELFVBQVUsQ0FBQzVwQixDQUFDLENBQUM7SUFDeEIycEIsWUFBWSxHQUFHQSxZQUFZLElBQUl0cUIsVUFBVSxDQUFDSixLQUFLLEVBQUU0cUIsUUFBUSxDQUFDO0VBQzlEO0VBQ0EsT0FBT0gsVUFBVSxJQUFJQyxZQUFZO0FBQ3JDO0FBQ0EsU0FBU1MsaUJBQWlCQSxDQUFDQyxRQUFRLEVBQUUxakIsSUFBSSxFQUFFO0VBQ3ZDLElBQUk0RSxLQUFLLEdBQUc4ZSxRQUFRLENBQUNDLElBQUksQ0FBQzNqQixJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQztFQUM3QyxPQUFPNEUsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUNYLFVBQVUsR0FDVkEsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUNWLFVBQVUsR0FDVkEsS0FBSyxHQUFHLENBQUMsR0FDVCxTQUFTLEdBQ1RBLEtBQUssR0FBRyxDQUFDLEdBQ1QsU0FBUyxHQUNUQSxLQUFLLEdBQUcsQ0FBQyxHQUNULFNBQVMsR0FDVEEsS0FBSyxHQUFHLENBQUMsR0FDVCxVQUFVLEdBQ1YsVUFBVTtBQUNwQjtBQUNBLFNBQVNnZixVQUFVQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtFQUMvQixJQUFJNXVCLFNBQVMsQ0FBQzJELE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDeEIsSUFBSSxDQUFDM0QsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ2YydUIsSUFBSSxHQUFHLEtBQUssQ0FBQztNQUNiQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3BCLENBQUMsTUFBTSxJQUFJbEIsYUFBYSxDQUFDMXRCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ3BDMnVCLElBQUksR0FBRzN1QixTQUFTLENBQUMsQ0FBQyxDQUFDO01BQ25CNHVCLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDcEIsQ0FBQyxNQUFNLElBQUlOLGNBQWMsQ0FBQ3R1QixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtNQUNyQzR1QixPQUFPLEdBQUc1dUIsU0FBUyxDQUFDLENBQUMsQ0FBQztNQUN0QjJ1QixJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pCO0VBQ0o7RUFDQSxJQUFJN2pCLElBQUksR0FBRzZqQixJQUFJLElBQUlqSixXQUFXLENBQUMsQ0FBQztJQUM1Qm1KLEdBQUcsR0FBR25FLGVBQWUsQ0FBQzVmLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQ2drQixPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ2hEcnFCLE9BQU8sR0FBR3pCLEtBQUssQ0FBQytyQixjQUFjLENBQUMsSUFBSSxFQUFFRixHQUFHLENBQUMsSUFBSSxVQUFVO0lBQ3ZEOWpCLE1BQU0sR0FDRjZqQixPQUFPLEtBQ05ybEIsVUFBVSxDQUFDcWxCLE9BQU8sQ0FBQ25xQixPQUFPLENBQUMsQ0FBQyxHQUN2Qm1xQixPQUFPLENBQUNucUIsT0FBTyxDQUFDLENBQUM3QyxJQUFJLENBQUMsSUFBSSxFQUFFa0osSUFBSSxDQUFDLEdBQ2pDOGpCLE9BQU8sQ0FBQ25xQixPQUFPLENBQUMsQ0FBQztFQUMvQixPQUFPLElBQUksQ0FBQ3VxQixNQUFNLENBQ2Rqa0IsTUFBTSxJQUFJLElBQUksQ0FBQ3VCLFVBQVUsQ0FBQyxDQUFDLENBQUMxQixRQUFRLENBQUNuRyxPQUFPLEVBQUUsSUFBSSxFQUFFaWhCLFdBQVcsQ0FBQzVhLElBQUksQ0FBQyxDQUN6RSxDQUFDO0FBQ0w7QUFDQSxTQUFTOGYsS0FBS0EsQ0FBQSxFQUFHO0VBQ2IsT0FBTyxJQUFJeGlCLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDM0I7QUFDQSxTQUFTNGtCLE9BQU9BLENBQUM1cEIsS0FBSyxFQUFFOE0sS0FBSyxFQUFFO0VBQzNCLElBQUkrZSxVQUFVLEdBQUcxbUIsUUFBUSxDQUFDbkYsS0FBSyxDQUFDLEdBQUdBLEtBQUssR0FBR3NpQixXQUFXLENBQUN0aUIsS0FBSyxDQUFDO0VBQzdELElBQUksRUFBRSxJQUFJLENBQUNrRCxPQUFPLENBQUMsQ0FBQyxJQUFJMm9CLFVBQVUsQ0FBQzNvQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDM0MsT0FBTyxLQUFLO0VBQ2hCO0VBQ0E0SixLQUFLLEdBQUdELGNBQWMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksYUFBYTtFQUM5QyxJQUFJQSxLQUFLLEtBQUssYUFBYSxFQUFFO0lBQ3pCLE9BQU8sSUFBSSxDQUFDM0wsT0FBTyxDQUFDLENBQUMsR0FBRzBxQixVQUFVLENBQUMxcUIsT0FBTyxDQUFDLENBQUM7RUFDaEQsQ0FBQyxNQUFNO0lBQ0gsT0FBTzBxQixVQUFVLENBQUMxcUIsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNxbUIsS0FBSyxDQUFDLENBQUMsQ0FBQ2tFLE9BQU8sQ0FBQzVlLEtBQUssQ0FBQyxDQUFDM0wsT0FBTyxDQUFDLENBQUM7RUFDdkU7QUFDSjtBQUNBLFNBQVMwb0IsUUFBUUEsQ0FBQzdwQixLQUFLLEVBQUU4TSxLQUFLLEVBQUU7RUFDNUIsSUFBSStlLFVBQVUsR0FBRzFtQixRQUFRLENBQUNuRixLQUFLLENBQUMsR0FBR0EsS0FBSyxHQUFHc2lCLFdBQVcsQ0FBQ3RpQixLQUFLLENBQUM7RUFDN0QsSUFBSSxFQUFFLElBQUksQ0FBQ2tELE9BQU8sQ0FBQyxDQUFDLElBQUkyb0IsVUFBVSxDQUFDM29CLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMzQyxPQUFPLEtBQUs7RUFDaEI7RUFDQTRKLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUMsSUFBSSxhQUFhO0VBQzlDLElBQUlBLEtBQUssS0FBSyxhQUFhLEVBQUU7SUFDekIsT0FBTyxJQUFJLENBQUMzTCxPQUFPLENBQUMsQ0FBQyxHQUFHMHFCLFVBQVUsQ0FBQzFxQixPQUFPLENBQUMsQ0FBQztFQUNoRCxDQUFDLE1BQU07SUFDSCxPQUFPLElBQUksQ0FBQ3FtQixLQUFLLENBQUMsQ0FBQyxDQUFDc0UsS0FBSyxDQUFDaGYsS0FBSyxDQUFDLENBQUMzTCxPQUFPLENBQUMsQ0FBQyxHQUFHMHFCLFVBQVUsQ0FBQzFxQixPQUFPLENBQUMsQ0FBQztFQUNyRTtBQUNKO0FBQ0EsU0FBUzRxQixTQUFTQSxDQUFDM25CLEtBQUssRUFBRUQsR0FBRyxFQUFFMkksS0FBSyxFQUFFa2YsV0FBVyxFQUFFO0VBQy9DLElBQUlDLFNBQVMsR0FBRzltQixRQUFRLENBQUNmLEtBQUssQ0FBQyxHQUFHQSxLQUFLLEdBQUdrZSxXQUFXLENBQUNsZSxLQUFLLENBQUM7SUFDeEQ4bkIsT0FBTyxHQUFHL21CLFFBQVEsQ0FBQ2hCLEdBQUcsQ0FBQyxHQUFHQSxHQUFHLEdBQUdtZSxXQUFXLENBQUNuZSxHQUFHLENBQUM7RUFDcEQsSUFBSSxFQUFFLElBQUksQ0FBQ2pCLE9BQU8sQ0FBQyxDQUFDLElBQUkrb0IsU0FBUyxDQUFDL29CLE9BQU8sQ0FBQyxDQUFDLElBQUlncEIsT0FBTyxDQUFDaHBCLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMvRCxPQUFPLEtBQUs7RUFDaEI7RUFDQThvQixXQUFXLEdBQUdBLFdBQVcsSUFBSSxJQUFJO0VBQ2pDLE9BQ0ksQ0FBQ0EsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FDakIsSUFBSSxDQUFDcEMsT0FBTyxDQUFDcUMsU0FBUyxFQUFFbmYsS0FBSyxDQUFDLEdBQzlCLENBQUMsSUFBSSxDQUFDK2MsUUFBUSxDQUFDb0MsU0FBUyxFQUFFbmYsS0FBSyxDQUFDLE1BQ3JDa2YsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FDakIsSUFBSSxDQUFDbkMsUUFBUSxDQUFDcUMsT0FBTyxFQUFFcGYsS0FBSyxDQUFDLEdBQzdCLENBQUMsSUFBSSxDQUFDOGMsT0FBTyxDQUFDc0MsT0FBTyxFQUFFcGYsS0FBSyxDQUFDLENBQUM7QUFFNUM7QUFDQSxTQUFTcWYsTUFBTUEsQ0FBQ25zQixLQUFLLEVBQUU4TSxLQUFLLEVBQUU7RUFDMUIsSUFBSStlLFVBQVUsR0FBRzFtQixRQUFRLENBQUNuRixLQUFLLENBQUMsR0FBR0EsS0FBSyxHQUFHc2lCLFdBQVcsQ0FBQ3RpQixLQUFLLENBQUM7SUFDekRvc0IsT0FBTztFQUNYLElBQUksRUFBRSxJQUFJLENBQUNscEIsT0FBTyxDQUFDLENBQUMsSUFBSTJvQixVQUFVLENBQUMzb0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQzNDLE9BQU8sS0FBSztFQUNoQjtFQUNBNEosS0FBSyxHQUFHRCxjQUFjLENBQUNDLEtBQUssQ0FBQyxJQUFJLGFBQWE7RUFDOUMsSUFBSUEsS0FBSyxLQUFLLGFBQWEsRUFBRTtJQUN6QixPQUFPLElBQUksQ0FBQzNMLE9BQU8sQ0FBQyxDQUFDLEtBQUswcUIsVUFBVSxDQUFDMXFCLE9BQU8sQ0FBQyxDQUFDO0VBQ2xELENBQUMsTUFBTTtJQUNIaXJCLE9BQU8sR0FBR1AsVUFBVSxDQUFDMXFCLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLE9BQ0ksSUFBSSxDQUFDcW1CLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUM1ZSxLQUFLLENBQUMsQ0FBQzNMLE9BQU8sQ0FBQyxDQUFDLElBQUlpckIsT0FBTyxJQUNoREEsT0FBTyxJQUFJLElBQUksQ0FBQzVFLEtBQUssQ0FBQyxDQUFDLENBQUNzRSxLQUFLLENBQUNoZixLQUFLLENBQUMsQ0FBQzNMLE9BQU8sQ0FBQyxDQUFDO0VBRXREO0FBQ0o7QUFDQSxTQUFTa3JCLGFBQWFBLENBQUNyc0IsS0FBSyxFQUFFOE0sS0FBSyxFQUFFO0VBQ2pDLE9BQU8sSUFBSSxDQUFDcWYsTUFBTSxDQUFDbnNCLEtBQUssRUFBRThNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQzhjLE9BQU8sQ0FBQzVwQixLQUFLLEVBQUU4TSxLQUFLLENBQUM7QUFDbEU7QUFDQSxTQUFTd2YsY0FBY0EsQ0FBQ3RzQixLQUFLLEVBQUU4TSxLQUFLLEVBQUU7RUFDbEMsT0FBTyxJQUFJLENBQUNxZixNQUFNLENBQUNuc0IsS0FBSyxFQUFFOE0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDK2MsUUFBUSxDQUFDN3BCLEtBQUssRUFBRThNLEtBQUssQ0FBQztBQUNuRTtBQUNBLFNBQVN1ZSxJQUFJQSxDQUFDcnJCLEtBQUssRUFBRThNLEtBQUssRUFBRXlmLE9BQU8sRUFBRTtFQUNqQyxJQUFJQyxJQUFJLEVBQUVDLFNBQVMsRUFBRTlrQixNQUFNO0VBQzNCLElBQUksQ0FBQyxJQUFJLENBQUN6RSxPQUFPLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLE9BQU9hLEdBQUc7RUFDZDtFQUNBeW9CLElBQUksR0FBR2xGLGVBQWUsQ0FBQ3RuQixLQUFLLEVBQUUsSUFBSSxDQUFDO0VBQ25DLElBQUksQ0FBQ3dzQixJQUFJLENBQUN0cEIsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNqQixPQUFPYSxHQUFHO0VBQ2Q7RUFDQTBvQixTQUFTLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDekYsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQyxDQUFDLElBQUksR0FBRztFQUN2RGphLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUM7RUFDN0IsUUFBUUEsS0FBSztJQUNULEtBQUssTUFBTTtNQUNQbkYsTUFBTSxHQUFHK2tCLFNBQVMsQ0FBQyxJQUFJLEVBQUVGLElBQUksQ0FBQyxHQUFHLEVBQUU7TUFDbkM7SUFDSixLQUFLLE9BQU87TUFDUjdrQixNQUFNLEdBQUcra0IsU0FBUyxDQUFDLElBQUksRUFBRUYsSUFBSSxDQUFDO01BQzlCO0lBQ0osS0FBSyxTQUFTO01BQ1Y3a0IsTUFBTSxHQUFHK2tCLFNBQVMsQ0FBQyxJQUFJLEVBQUVGLElBQUksQ0FBQyxHQUFHLENBQUM7TUFDbEM7SUFDSixLQUFLLFFBQVE7TUFDVDdrQixNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUc2a0IsSUFBSSxJQUFJLEdBQUc7TUFDNUI7SUFDSixLQUFLLFFBQVE7TUFDVDdrQixNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUc2a0IsSUFBSSxJQUFJLEdBQUc7TUFDNUI7SUFDSixLQUFLLE1BQU07TUFDUDdrQixNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUc2a0IsSUFBSSxJQUFJLElBQUk7TUFDN0I7SUFDSixLQUFLLEtBQUs7TUFDTjdrQixNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUc2a0IsSUFBSSxHQUFHQyxTQUFTLElBQUksS0FBSztNQUMxQztJQUNKLEtBQUssTUFBTTtNQUNQOWtCLE1BQU0sR0FBRyxDQUFDLElBQUksR0FBRzZrQixJQUFJLEdBQUdDLFNBQVMsSUFBSSxNQUFNO01BQzNDO0lBQ0o7TUFDSTlrQixNQUFNLEdBQUcsSUFBSSxHQUFHNmtCLElBQUk7RUFDNUI7RUFDQSxPQUFPRCxPQUFPLEdBQUc1a0IsTUFBTSxHQUFHaUcsUUFBUSxDQUFDakcsTUFBTSxDQUFDO0FBQzlDO0FBQ0EsU0FBUytrQixTQUFTQSxDQUFDandCLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ3JCLElBQUlELENBQUMsQ0FBQzhSLElBQUksQ0FBQyxDQUFDLEdBQUc3UixDQUFDLENBQUM2UixJQUFJLENBQUMsQ0FBQyxFQUFFO0lBQ3JCLE9BQU8sQ0FBQ21lLFNBQVMsQ0FBQ2h3QixDQUFDLEVBQUVELENBQUMsQ0FBQztFQUMzQjtFQUNBLElBQUlrd0IsY0FBYyxHQUFHLENBQUNqd0IsQ0FBQyxDQUFDaVIsSUFBSSxDQUFDLENBQUMsR0FBR2xSLENBQUMsQ0FBQ2tSLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJalIsQ0FBQyxDQUFDNFIsS0FBSyxDQUFDLENBQUMsR0FBRzdSLENBQUMsQ0FBQzZSLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckVzZSxNQUFNLEdBQUdud0IsQ0FBQyxDQUFDK3FCLEtBQUssQ0FBQyxDQUFDLENBQUMzUSxHQUFHLENBQUM4VixjQUFjLEVBQUUsUUFBUSxDQUFDO0lBQ2hERSxPQUFPO0lBQ1BDLE1BQU07RUFDVixJQUFJcHdCLENBQUMsR0FBR2t3QixNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ2hCQyxPQUFPLEdBQUdwd0IsQ0FBQyxDQUFDK3FCLEtBQUssQ0FBQyxDQUFDLENBQUMzUSxHQUFHLENBQUM4VixjQUFjLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQztJQUNyREcsTUFBTSxHQUFHLENBQUNwd0IsQ0FBQyxHQUFHa3dCLE1BQU0sS0FBS0EsTUFBTSxHQUFHQyxPQUFPLENBQUM7RUFDOUMsQ0FBQyxNQUFNO0lBQ0hBLE9BQU8sR0FBR3B3QixDQUFDLENBQUMrcUIsS0FBSyxDQUFDLENBQUMsQ0FBQzNRLEdBQUcsQ0FBQzhWLGNBQWMsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDO0lBQ3JERyxNQUFNLEdBQUcsQ0FBQ3B3QixDQUFDLEdBQUdrd0IsTUFBTSxLQUFLQyxPQUFPLEdBQUdELE1BQU0sQ0FBQztFQUM5QztFQUNBLE9BQU8sRUFBRUQsY0FBYyxHQUFHRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzFDO0FBQ0EsU0FBUzVzQixRQUFRQSxDQUFBLEVBQUc7RUFDaEIsT0FBTyxJQUFJLENBQUNzbkIsS0FBSyxDQUFDLENBQUMsQ0FBQ3lGLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQ3JCLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQztBQUMvRTtBQUNBLFNBQVNzQixXQUFXQSxDQUFDQyxVQUFVLEVBQUU7RUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQ2pxQixPQUFPLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLE9BQU8sSUFBSTtFQUNmO0VBQ0EsSUFBSXpCLEdBQUcsR0FBRzByQixVQUFVLEtBQUssSUFBSTtJQUN6QnZxQixDQUFDLEdBQUduQixHQUFHLEdBQUcsSUFBSSxDQUFDK2xCLEtBQUssQ0FBQyxDQUFDLENBQUMvbEIsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJO0VBQ3ZDLElBQUltQixDQUFDLENBQUMrSyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSS9LLENBQUMsQ0FBQytLLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFO0lBQ2pDLE9BQU9qRSxZQUFZLENBQ2Y5RyxDQUFDLEVBQ0RuQixHQUFHLEdBQ0csZ0NBQWdDLEdBQ2hDLDhCQUNWLENBQUM7RUFDTDtFQUNBLElBQUkwRSxVQUFVLENBQUN2RixJQUFJLENBQUMxRSxTQUFTLENBQUNneEIsV0FBVyxDQUFDLEVBQUU7SUFDeEMsSUFBSXpyQixHQUFHLEVBQUU7TUFDTCxPQUFPLElBQUksQ0FBQzJyQixNQUFNLENBQUMsQ0FBQyxDQUFDRixXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDLE1BQU07TUFDSCxPQUFPLElBQUl0c0IsSUFBSSxDQUFDLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM0bEIsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQ3hEbUcsV0FBVyxDQUFDLENBQUMsQ0FDYjVqQixPQUFPLENBQUMsR0FBRyxFQUFFSSxZQUFZLENBQUM5RyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDM0M7RUFDSjtFQUNBLE9BQU84RyxZQUFZLENBQ2Y5RyxDQUFDLEVBQ0RuQixHQUFHLEdBQUcsOEJBQThCLEdBQUcsNEJBQzNDLENBQUM7QUFDTDtBQUNBLFNBQVM0ckIsT0FBT0EsQ0FBQSxFQUFHO0VBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ25xQixPQUFPLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLE9BQU8sb0JBQW9CLEdBQUcsSUFBSSxDQUFDdUIsRUFBRSxHQUFHLE1BQU07RUFDbEQ7RUFDQSxJQUFJd0UsSUFBSSxHQUFHLFFBQVE7SUFDZnFrQixJQUFJLEdBQUcsRUFBRTtJQUNUQyxNQUFNO0lBQ041ZixJQUFJO0lBQ0o2ZixRQUFRO0lBQ1JDLE1BQU07RUFDVixJQUFJLENBQUMsSUFBSSxDQUFDM0UsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNqQjdmLElBQUksR0FBRyxJQUFJLENBQUM4ZCxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxZQUFZLEdBQUcsa0JBQWtCO0lBQ2pFdUcsSUFBSSxHQUFHLEdBQUc7RUFDZDtFQUNBQyxNQUFNLEdBQUcsR0FBRyxHQUFHdGtCLElBQUksR0FBRyxLQUFLO0VBQzNCMEUsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUNBLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxNQUFNLEdBQUcsUUFBUTtFQUNsRTZmLFFBQVEsR0FBRyx1QkFBdUI7RUFDbENDLE1BQU0sR0FBR0gsSUFBSSxHQUFHLE1BQU07RUFDdEIsT0FBTyxJQUFJLENBQUMxQixNQUFNLENBQUMyQixNQUFNLEdBQUc1ZixJQUFJLEdBQUc2ZixRQUFRLEdBQUdDLE1BQU0sQ0FBQztBQUN6RDtBQUNBLFNBQVM3QixNQUFNQSxDQUFDOEIsV0FBVyxFQUFFO0VBQ3pCLElBQUksQ0FBQ0EsV0FBVyxFQUFFO0lBQ2RBLFdBQVcsR0FBRyxJQUFJLENBQUMxRSxLQUFLLENBQUMsQ0FBQyxHQUNwQnBwQixLQUFLLENBQUNvdEIsZ0JBQWdCLEdBQ3RCcHRCLEtBQUssQ0FBQ210QixhQUFhO0VBQzdCO0VBQ0EsSUFBSXBsQixNQUFNLEdBQUcrQixZQUFZLENBQUMsSUFBSSxFQUFFZ2tCLFdBQVcsQ0FBQztFQUM1QyxPQUFPLElBQUksQ0FBQ3hrQixVQUFVLENBQUMsQ0FBQyxDQUFDeWtCLFVBQVUsQ0FBQ2htQixNQUFNLENBQUM7QUFDL0M7QUFDQSxTQUFTN0osSUFBSUEsQ0FBQ3l0QixJQUFJLEVBQUV0ZixhQUFhLEVBQUU7RUFDL0IsSUFDSSxJQUFJLENBQUMvSSxPQUFPLENBQUMsQ0FBQyxLQUNaaUMsUUFBUSxDQUFDb21CLElBQUksQ0FBQyxJQUFJQSxJQUFJLENBQUNyb0IsT0FBTyxDQUFDLENBQUMsSUFBS29mLFdBQVcsQ0FBQ2lKLElBQUksQ0FBQyxDQUFDcm9CLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDckU7SUFDRSxPQUFPaWlCLGNBQWMsQ0FBQztNQUFFdG5CLEVBQUUsRUFBRSxJQUFJO01BQUVDLElBQUksRUFBRXl0QjtJQUFLLENBQUMsQ0FBQyxDQUMxQzBCLE1BQU0sQ0FBQyxJQUFJLENBQUNBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDckJXLFFBQVEsQ0FBQyxDQUFDM2hCLGFBQWEsQ0FBQztFQUNqQyxDQUFDLE1BQU07SUFDSCxPQUFPLElBQUksQ0FBQy9DLFVBQVUsQ0FBQyxDQUFDLENBQUNTLFdBQVcsQ0FBQyxDQUFDO0VBQzFDO0FBQ0o7QUFDQSxTQUFTa2tCLE9BQU9BLENBQUM1aEIsYUFBYSxFQUFFO0VBQzVCLE9BQU8sSUFBSSxDQUFDbk8sSUFBSSxDQUFDd2tCLFdBQVcsQ0FBQyxDQUFDLEVBQUVyVyxhQUFhLENBQUM7QUFDbEQ7QUFDQSxTQUFTcE8sRUFBRUEsQ0FBQzB0QixJQUFJLEVBQUV0ZixhQUFhLEVBQUU7RUFDN0IsSUFDSSxJQUFJLENBQUMvSSxPQUFPLENBQUMsQ0FBQyxLQUNaaUMsUUFBUSxDQUFDb21CLElBQUksQ0FBQyxJQUFJQSxJQUFJLENBQUNyb0IsT0FBTyxDQUFDLENBQUMsSUFBS29mLFdBQVcsQ0FBQ2lKLElBQUksQ0FBQyxDQUFDcm9CLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDckU7SUFDRSxPQUFPaWlCLGNBQWMsQ0FBQztNQUFFcm5CLElBQUksRUFBRSxJQUFJO01BQUVELEVBQUUsRUFBRTB0QjtJQUFLLENBQUMsQ0FBQyxDQUMxQzBCLE1BQU0sQ0FBQyxJQUFJLENBQUNBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDckJXLFFBQVEsQ0FBQyxDQUFDM2hCLGFBQWEsQ0FBQztFQUNqQyxDQUFDLE1BQU07SUFDSCxPQUFPLElBQUksQ0FBQy9DLFVBQVUsQ0FBQyxDQUFDLENBQUNTLFdBQVcsQ0FBQyxDQUFDO0VBQzFDO0FBQ0o7QUFDQSxTQUFTbWtCLEtBQUtBLENBQUM3aEIsYUFBYSxFQUFFO0VBQzFCLE9BQU8sSUFBSSxDQUFDcE8sRUFBRSxDQUFDeWtCLFdBQVcsQ0FBQyxDQUFDLEVBQUVyVyxhQUFhLENBQUM7QUFDaEQ7QUFDQSxTQUFTZ2hCLE1BQU1BLENBQUMzdUIsR0FBRyxFQUFFO0VBQ2pCLElBQUl5dkIsYUFBYTtFQUNqQixJQUFJenZCLEdBQUcsS0FBSyxLQUFLLENBQUMsRUFBRTtJQUNoQixPQUFPLElBQUksQ0FBQ3lHLE9BQU8sQ0FBQzBYLEtBQUs7RUFDN0IsQ0FBQyxNQUFNO0lBQ0hzUixhQUFhLEdBQUdsUixTQUFTLENBQUN2ZSxHQUFHLENBQUM7SUFDOUIsSUFBSXl2QixhQUFhLElBQUksSUFBSSxFQUFFO01BQ3ZCLElBQUksQ0FBQ2hwQixPQUFPLEdBQUdncEIsYUFBYTtJQUNoQztJQUNBLE9BQU8sSUFBSTtFQUNmO0FBQ0o7QUFDQSxTQUFTN2tCLFVBQVVBLENBQUEsRUFBRztFQUNsQixPQUFPLElBQUksQ0FBQ25FLE9BQU87QUFDdkI7QUFDQSxTQUFTc3BCLEtBQUtBLENBQUNDLFFBQVEsRUFBRUMsT0FBTyxFQUFFO0VBQzlCLE9BQU8sQ0FBRUQsUUFBUSxHQUFHQyxPQUFPLEdBQUlBLE9BQU8sSUFBSUEsT0FBTztBQUNyRDtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQzFpQixDQUFDLEVBQUVsSixDQUFDLEVBQUU0SSxDQUFDLEVBQUU7RUFDL0IsSUFBSU0sQ0FBQyxHQUFHLEdBQUcsSUFBSUEsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNuQixPQUFPLElBQUlsTCxJQUFJLENBQUNrTCxDQUFDLEdBQUcsR0FBRyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxDQUFDLEdBQUc0aUIsZ0JBQWdCO0VBQ3JELENBQUMsTUFBTTtJQUNILE9BQU8sSUFBSXh0QixJQUFJLENBQUNrTCxDQUFDLEVBQUVsSixDQUFDLEVBQUU0SSxDQUFDLENBQUMsQ0FBQ3JLLE9BQU8sQ0FBQyxDQUFDO0VBQ3RDO0FBQ0o7QUFDQSxTQUFTc3RCLGNBQWNBLENBQUMzaUIsQ0FBQyxFQUFFbEosQ0FBQyxFQUFFNEksQ0FBQyxFQUFFO0VBQzdCLElBQUlNLENBQUMsR0FBRyxHQUFHLElBQUlBLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDbkIsT0FBT2xMLElBQUksQ0FBQ3NVLEdBQUcsQ0FBQ3BKLENBQUMsR0FBRyxHQUFHLEVBQUVsSixDQUFDLEVBQUU0SSxDQUFDLENBQUMsR0FBRzRpQixnQkFBZ0I7RUFDckQsQ0FBQyxNQUFNO0lBQ0gsT0FBT3h0QixJQUFJLENBQUNzVSxHQUFHLENBQUNwSixDQUFDLEVBQUVsSixDQUFDLEVBQUU0SSxDQUFDLENBQUM7RUFDNUI7QUFDSjtBQUNBLFNBQVNrZ0IsT0FBT0EsQ0FBQzVlLEtBQUssRUFBRTtFQUNwQixJQUFJeWUsSUFBSSxFQUFFbUQsV0FBVztFQUNyQjVoQixLQUFLLEdBQUdELGNBQWMsQ0FBQ0MsS0FBSyxDQUFDO0VBQzdCLElBQUlBLEtBQUssS0FBSyxLQUFLLENBQUMsSUFBSUEsS0FBSyxLQUFLLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQzVKLE9BQU8sQ0FBQyxDQUFDLEVBQUU7SUFDaEUsT0FBTyxJQUFJO0VBQ2Y7RUFDQXdyQixXQUFXLEdBQUcsSUFBSSxDQUFDN3BCLE1BQU0sR0FBRzRwQixjQUFjLEdBQUdELGdCQUFnQjtFQUM3RCxRQUFRMWhCLEtBQUs7SUFDVCxLQUFLLE1BQU07TUFDUHllLElBQUksR0FBR21ELFdBQVcsQ0FBQyxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO01BQ3JDO0lBQ0osS0FBSyxTQUFTO01BQ1Y0ZCxJQUFJLEdBQUdtRCxXQUFXLENBQ2QsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEVBQ1gsSUFBSSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxHQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFFLEVBQ2pDLENBQ0osQ0FBQztNQUNEO0lBQ0osS0FBSyxPQUFPO01BQ1JpZCxJQUFJLEdBQUdtRCxXQUFXLENBQUMsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztNQUNoRDtJQUNKLEtBQUssTUFBTTtNQUNQaWQsSUFBSSxHQUFHbUQsV0FBVyxDQUNkLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxFQUNYLElBQUksQ0FBQ1csS0FBSyxDQUFDLENBQUMsRUFDWixJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDc0gsT0FBTyxDQUFDLENBQy9CLENBQUM7TUFDRDtJQUNKLEtBQUssU0FBUztNQUNWMFYsSUFBSSxHQUFHbUQsV0FBVyxDQUNkLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxFQUNYLElBQUksQ0FBQ1csS0FBSyxDQUFDLENBQUMsRUFDWixJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDb2dCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUN4QyxDQUFDO01BQ0Q7SUFDSixLQUFLLEtBQUs7SUFDVixLQUFLLE1BQU07TUFDUHBELElBQUksR0FBR21ELFdBQVcsQ0FBQyxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO01BQzFEO0lBQ0osS0FBSyxNQUFNO01BQ1BnZCxJQUFJLEdBQUcsSUFBSSxDQUFDL25CLEVBQUUsQ0FBQ3JDLE9BQU8sQ0FBQyxDQUFDO01BQ3hCb3FCLElBQUksSUFBSThDLEtBQUssQ0FDVDlDLElBQUksSUFBSSxJQUFJLENBQUMxbUIsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUNraUIsU0FBUyxDQUFDLENBQUMsR0FBR21ILGFBQWEsQ0FBQyxFQUMzREMsV0FDSixDQUFDO01BQ0Q7SUFDSixLQUFLLFFBQVE7TUFDVDVDLElBQUksR0FBRyxJQUFJLENBQUMvbkIsRUFBRSxDQUFDckMsT0FBTyxDQUFDLENBQUM7TUFDeEJvcUIsSUFBSSxJQUFJOEMsS0FBSyxDQUFDOUMsSUFBSSxFQUFFMkMsYUFBYSxDQUFDO01BQ2xDO0lBQ0osS0FBSyxRQUFRO01BQ1QzQyxJQUFJLEdBQUcsSUFBSSxDQUFDL25CLEVBQUUsQ0FBQ3JDLE9BQU8sQ0FBQyxDQUFDO01BQ3hCb3FCLElBQUksSUFBSThDLEtBQUssQ0FBQzlDLElBQUksRUFBRTBDLGFBQWEsQ0FBQztNQUNsQztFQUNSO0VBQ0EsSUFBSSxDQUFDenFCLEVBQUUsQ0FBQ2lrQixPQUFPLENBQUM4RCxJQUFJLENBQUM7RUFDckIzckIsS0FBSyxDQUFDc0YsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7RUFDOUIsT0FBTyxJQUFJO0FBQ2Y7QUFDQSxTQUFTNG1CLEtBQUtBLENBQUNoZixLQUFLLEVBQUU7RUFDbEIsSUFBSXllLElBQUksRUFBRW1ELFdBQVc7RUFDckI1aEIsS0FBSyxHQUFHRCxjQUFjLENBQUNDLEtBQUssQ0FBQztFQUM3QixJQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFDLElBQUlBLEtBQUssS0FBSyxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUM1SixPQUFPLENBQUMsQ0FBQyxFQUFFO0lBQ2hFLE9BQU8sSUFBSTtFQUNmO0VBQ0F3ckIsV0FBVyxHQUFHLElBQUksQ0FBQzdwQixNQUFNLEdBQUc0cEIsY0FBYyxHQUFHRCxnQkFBZ0I7RUFDN0QsUUFBUTFoQixLQUFLO0lBQ1QsS0FBSyxNQUFNO01BQ1B5ZSxJQUFJLEdBQUdtRCxXQUFXLENBQUMsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDO01BQzdDO0lBQ0osS0FBSyxTQUFTO01BQ1Y0ZCxJQUFJLEdBQ0FtRCxXQUFXLENBQ1AsSUFBSSxDQUFDL2dCLElBQUksQ0FBQyxDQUFDLEVBQ1gsSUFBSSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxHQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxFQUNyQyxDQUNKLENBQUMsR0FBRyxDQUFDO01BQ1Q7SUFDSixLQUFLLE9BQU87TUFDUmlkLElBQUksR0FBR21ELFdBQVcsQ0FBQyxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7TUFDeEQ7SUFDSixLQUFLLE1BQU07TUFDUGlkLElBQUksR0FDQW1ELFdBQVcsQ0FDUCxJQUFJLENBQUMvZ0IsSUFBSSxDQUFDLENBQUMsRUFDWCxJQUFJLENBQUNXLEtBQUssQ0FBQyxDQUFDLEVBQ1osSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ3NILE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FDbkMsQ0FBQyxHQUFHLENBQUM7TUFDVDtJQUNKLEtBQUssU0FBUztNQUNWMFYsSUFBSSxHQUNBbUQsV0FBVyxDQUNQLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxFQUNYLElBQUksQ0FBQ1csS0FBSyxDQUFDLENBQUMsRUFDWixJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDb2dCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FDNUMsQ0FBQyxHQUFHLENBQUM7TUFDVDtJQUNKLEtBQUssS0FBSztJQUNWLEtBQUssTUFBTTtNQUNQcEQsSUFBSSxHQUFHbUQsV0FBVyxDQUFDLElBQUksQ0FBQy9nQixJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1csS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztNQUNsRTtJQUNKLEtBQUssTUFBTTtNQUNQZ2QsSUFBSSxHQUFHLElBQUksQ0FBQy9uQixFQUFFLENBQUNyQyxPQUFPLENBQUMsQ0FBQztNQUN4Qm9xQixJQUFJLElBQ0E0QyxXQUFXLEdBQ1hFLEtBQUssQ0FDRDlDLElBQUksSUFBSSxJQUFJLENBQUMxbUIsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUNraUIsU0FBUyxDQUFDLENBQUMsR0FBR21ILGFBQWEsQ0FBQyxFQUMzREMsV0FDSixDQUFDLEdBQ0QsQ0FBQztNQUNMO0lBQ0osS0FBSyxRQUFRO01BQ1Q1QyxJQUFJLEdBQUcsSUFBSSxDQUFDL25CLEVBQUUsQ0FBQ3JDLE9BQU8sQ0FBQyxDQUFDO01BQ3hCb3FCLElBQUksSUFBSTJDLGFBQWEsR0FBR0csS0FBSyxDQUFDOUMsSUFBSSxFQUFFMkMsYUFBYSxDQUFDLEdBQUcsQ0FBQztNQUN0RDtJQUNKLEtBQUssUUFBUTtNQUNUM0MsSUFBSSxHQUFHLElBQUksQ0FBQy9uQixFQUFFLENBQUNyQyxPQUFPLENBQUMsQ0FBQztNQUN4Qm9xQixJQUFJLElBQUkwQyxhQUFhLEdBQUdJLEtBQUssQ0FBQzlDLElBQUksRUFBRTBDLGFBQWEsQ0FBQyxHQUFHLENBQUM7TUFDdEQ7RUFDUjtFQUNBLElBQUksQ0FBQ3pxQixFQUFFLENBQUNpa0IsT0FBTyxDQUFDOEQsSUFBSSxDQUFDO0VBQ3JCM3JCLEtBQUssQ0FBQ3NGLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0VBQzlCLE9BQU8sSUFBSTtBQUNmO0FBQ0EsU0FBUy9ELE9BQU9BLENBQUEsRUFBRztFQUNmLE9BQU8sSUFBSSxDQUFDcUMsRUFBRSxDQUFDckMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzJELE9BQU8sSUFBSSxDQUFDLElBQUksR0FBRztBQUN4RDtBQUNBLFNBQVM4cEIsSUFBSUEsQ0FBQSxFQUFHO0VBQ1osT0FBTzFtQixJQUFJLENBQUM0RixLQUFLLENBQUMsSUFBSSxDQUFDM00sT0FBTyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDM0M7QUFDQSxTQUFTaXNCLE1BQU1BLENBQUEsRUFBRztFQUNkLE9BQU8sSUFBSXhzQixJQUFJLENBQUMsSUFBSSxDQUFDTyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ25DO0FBQ0EsU0FBUzBuQixPQUFPQSxDQUFBLEVBQUc7RUFDZixJQUFJam1CLENBQUMsR0FBRyxJQUFJO0VBQ1osT0FBTyxDQUNIQSxDQUFDLENBQUMrSyxJQUFJLENBQUMsQ0FBQyxFQUNSL0ssQ0FBQyxDQUFDMEwsS0FBSyxDQUFDLENBQUMsRUFDVDFMLENBQUMsQ0FBQzJMLElBQUksQ0FBQyxDQUFDLEVBQ1IzTCxDQUFDLENBQUNvZ0IsSUFBSSxDQUFDLENBQUMsRUFDUnBnQixDQUFDLENBQUNtaEIsTUFBTSxDQUFDLENBQUMsRUFDVm5oQixDQUFDLENBQUNvaEIsTUFBTSxDQUFDLENBQUMsRUFDVnBoQixDQUFDLENBQUNxaEIsV0FBVyxDQUFDLENBQUMsQ0FDbEI7QUFDTDtBQUNBLFNBQVM0SyxRQUFRQSxDQUFBLEVBQUc7RUFDaEIsSUFBSWpzQixDQUFDLEdBQUcsSUFBSTtFQUNaLE9BQU87SUFDSGtzQixLQUFLLEVBQUVsc0IsQ0FBQyxDQUFDK0ssSUFBSSxDQUFDLENBQUM7SUFDZnNFLE1BQU0sRUFBRXJQLENBQUMsQ0FBQzBMLEtBQUssQ0FBQyxDQUFDO0lBQ2pCQyxJQUFJLEVBQUUzTCxDQUFDLENBQUMyTCxJQUFJLENBQUMsQ0FBQztJQUNkeUwsS0FBSyxFQUFFcFgsQ0FBQyxDQUFDb1gsS0FBSyxDQUFDLENBQUM7SUFDaEJFLE9BQU8sRUFBRXRYLENBQUMsQ0FBQ3NYLE9BQU8sQ0FBQyxDQUFDO0lBQ3BCQyxPQUFPLEVBQUV2WCxDQUFDLENBQUN1WCxPQUFPLENBQUMsQ0FBQztJQUNwQmtQLFlBQVksRUFBRXptQixDQUFDLENBQUN5bUIsWUFBWSxDQUFDO0VBQ2pDLENBQUM7QUFDTDtBQUNBLFNBQVMwRixNQUFNQSxDQUFBLEVBQUc7RUFDZCxPQUFPLElBQUksQ0FBQzdyQixPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ2dxQixXQUFXLENBQUMsQ0FBQyxHQUFHLElBQUk7QUFDckQ7QUFDQSxTQUFTOEIsU0FBU0EsQ0FBQSxFQUFHO0VBQ2pCLE9BQU85ckIsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QjtBQUNBLFNBQVMrckIsWUFBWUEsQ0FBQSxFQUFHO0VBQ3BCLE9BQU8vdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFeUIsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVDO0FBQ0EsU0FBU3VzQixTQUFTQSxDQUFBLEVBQUc7RUFDakIsT0FBT3ZzQixlQUFlLENBQUMsSUFBSSxDQUFDLENBQUNiLFFBQVE7QUFDekM7QUFDQSxTQUFTcXRCLFlBQVlBLENBQUEsRUFBRztFQUNwQixPQUFPO0lBQ0hudkIsS0FBSyxFQUFFLElBQUksQ0FBQ3lFLEVBQUU7SUFDZG1uQixNQUFNLEVBQUUsSUFBSSxDQUFDbG5CLEVBQUU7SUFDZnVvQixNQUFNLEVBQUUsSUFBSSxDQUFDbG9CLE9BQU87SUFDcEJ1ZixLQUFLLEVBQUUsSUFBSSxDQUFDemYsTUFBTTtJQUNsQnRELE1BQU0sRUFBRSxJQUFJLENBQUNvQztFQUNqQixDQUFDO0FBQ0w7QUFDQSxTQUFTZ3NCLFVBQVVBLENBQUMvc0IsQ0FBQyxFQUFFdkIsT0FBTyxFQUFFO0VBQzVCLElBQUlOLENBQUM7SUFDRDRkLENBQUM7SUFDRHBRLElBQUk7SUFDSnFoQixJQUFJLEdBQUcsSUFBSSxDQUFDQyxLQUFLLElBQUloVCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUNnVCxLQUFLO0VBQzlDLEtBQUs5dUIsQ0FBQyxHQUFHLENBQUMsRUFBRTRkLENBQUMsR0FBR2lSLElBQUksQ0FBQ3J2QixNQUFNLEVBQUVRLENBQUMsR0FBRzRkLENBQUMsRUFBRSxFQUFFNWQsQ0FBQyxFQUFFO0lBQ3JDLFFBQUE5QyxPQUFBLENBQWUyeEIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDK3VCLEtBQUs7TUFDeEIsS0FBSyxRQUFRO1FBQ1R2aEIsSUFBSSxHQUFHM08sS0FBSyxDQUFDZ3dCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLENBQUMsQ0FBQ3BFLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDMUNrRSxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxHQUFHdmhCLElBQUksQ0FBQ3BOLE9BQU8sQ0FBQyxDQUFDO1FBQzlCO0lBQ1I7SUFDQSxRQUFBbEQsT0FBQSxDQUFlMnhCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLO01BQ3hCLEtBQUssV0FBVztRQUNaSCxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxHQUFHQyxRQUFRO1FBQ3hCO01BQ0osS0FBSyxRQUFRO1FBQ1R6aEIsSUFBSSxHQUFHM08sS0FBSyxDQUFDZ3dCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLLENBQUMsQ0FBQ3JFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQ3ZxQixPQUFPLENBQUMsQ0FBQztRQUNwRHl1QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxHQUFHeGhCLElBQUksQ0FBQ3BOLE9BQU8sQ0FBQyxDQUFDO1FBQzlCO0lBQ1I7RUFDSjtFQUNBLE9BQU95dUIsSUFBSTtBQUNmO0FBQ0EsU0FBU0ssZUFBZUEsQ0FBQ0MsT0FBTyxFQUFFN3VCLE9BQU8sRUFBRUUsTUFBTSxFQUFFO0VBQy9DLElBQUlSLENBQUM7SUFDRDRkLENBQUM7SUFDRGlSLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUksQ0FBQyxDQUFDO0lBQ2xCbHlCLElBQUk7SUFDSnFmLElBQUk7SUFDSm9ULE1BQU07RUFDVkQsT0FBTyxHQUFHQSxPQUFPLENBQUN4bEIsV0FBVyxDQUFDLENBQUM7RUFDL0IsS0FBSzNKLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdpUixJQUFJLENBQUNydkIsTUFBTSxFQUFFUSxDQUFDLEdBQUc0ZCxDQUFDLEVBQUUsRUFBRTVkLENBQUMsRUFBRTtJQUNyQ3JELElBQUksR0FBR2t5QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNyRCxJQUFJLENBQUNnTixXQUFXLENBQUMsQ0FBQztJQUNqQ3FTLElBQUksR0FBRzZTLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2djLElBQUksQ0FBQ3JTLFdBQVcsQ0FBQyxDQUFDO0lBQ2pDeWxCLE1BQU0sR0FBR1AsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDb3ZCLE1BQU0sQ0FBQ3psQixXQUFXLENBQUMsQ0FBQztJQUNyQyxJQUFJbkosTUFBTSxFQUFFO01BQ1IsUUFBUUYsT0FBTztRQUNYLEtBQUssR0FBRztRQUNSLEtBQUssSUFBSTtRQUNULEtBQUssS0FBSztVQUNOLElBQUkwYixJQUFJLEtBQUttVCxPQUFPLEVBQUU7WUFDbEIsT0FBT04sSUFBSSxDQUFDN3VCLENBQUMsQ0FBQztVQUNsQjtVQUNBO1FBQ0osS0FBSyxNQUFNO1VBQ1AsSUFBSXJELElBQUksS0FBS3d5QixPQUFPLEVBQUU7WUFDbEIsT0FBT04sSUFBSSxDQUFDN3VCLENBQUMsQ0FBQztVQUNsQjtVQUNBO1FBQ0osS0FBSyxPQUFPO1VBQ1IsSUFBSW92QixNQUFNLEtBQUtELE9BQU8sRUFBRTtZQUNwQixPQUFPTixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDO1VBQ2xCO1VBQ0E7TUFDUjtJQUNKLENBQUMsTUFBTSxJQUFJLENBQUNyRCxJQUFJLEVBQUVxZixJQUFJLEVBQUVvVCxNQUFNLENBQUMsQ0FBQ3RlLE9BQU8sQ0FBQ3FlLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUNuRCxPQUFPTixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDO0lBQ2xCO0VBQ0o7QUFDSjtBQUNBLFNBQVNxdkIscUJBQXFCQSxDQUFDN3RCLEdBQUcsRUFBRW9MLElBQUksRUFBRTtFQUN0QyxJQUFJMGlCLEdBQUcsR0FBRzl0QixHQUFHLENBQUN1dEIsS0FBSyxJQUFJdnRCLEdBQUcsQ0FBQ3d0QixLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUN6QyxJQUFJcGlCLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtJQUNqQixPQUFPL04sS0FBSyxDQUFDMkMsR0FBRyxDQUFDdXRCLEtBQUssQ0FBQyxDQUFDbmlCLElBQUksQ0FBQyxDQUFDO0VBQ2xDLENBQUMsTUFBTTtJQUNILE9BQU8vTixLQUFLLENBQUMyQyxHQUFHLENBQUN1dEIsS0FBSyxDQUFDLENBQUNuaUIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDQSxJQUFJLEdBQUdwTCxHQUFHLENBQUNxa0IsTUFBTSxJQUFJeUosR0FBRztFQUM5RDtBQUNKO0FBQ0EsU0FBU0MsVUFBVUEsQ0FBQSxFQUFHO0VBQ2xCLElBQUl2dkIsQ0FBQztJQUNENGQsQ0FBQztJQUNEcmEsR0FBRztJQUNIc3JCLElBQUksR0FBRyxJQUFJLENBQUMxbUIsVUFBVSxDQUFDLENBQUMsQ0FBQzBtQixJQUFJLENBQUMsQ0FBQztFQUNuQyxLQUFLN3VCLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdpUixJQUFJLENBQUNydkIsTUFBTSxFQUFFUSxDQUFDLEdBQUc0ZCxDQUFDLEVBQUUsRUFBRTVkLENBQUMsRUFBRTtJQUNyQ3VELEdBQUcsR0FBRyxJQUFJLENBQUNrakIsS0FBSyxDQUFDLENBQUMsQ0FBQ2tFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQ3ZxQixPQUFPLENBQUMsQ0FBQztJQUMzQyxJQUFJeXVCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLElBQUl4ckIsR0FBRyxJQUFJQSxHQUFHLElBQUlzckIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ3ZCLEtBQUssRUFBRTtNQUM5QyxPQUFPSCxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNyRCxJQUFJO0lBQ3ZCO0lBQ0EsSUFBSWt5QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxJQUFJenJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLEVBQUU7TUFDOUMsT0FBT0YsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDckQsSUFBSTtJQUN2QjtFQUNKO0VBQ0EsT0FBTyxFQUFFO0FBQ2I7QUFDQSxTQUFTNnlCLFlBQVlBLENBQUEsRUFBRztFQUNwQixJQUFJeHZCLENBQUM7SUFDRDRkLENBQUM7SUFDRHJhLEdBQUc7SUFDSHNyQixJQUFJLEdBQUcsSUFBSSxDQUFDMW1CLFVBQVUsQ0FBQyxDQUFDLENBQUMwbUIsSUFBSSxDQUFDLENBQUM7RUFDbkMsS0FBSzd1QixDQUFDLEdBQUcsQ0FBQyxFQUFFNGQsQ0FBQyxHQUFHaVIsSUFBSSxDQUFDcnZCLE1BQU0sRUFBRVEsQ0FBQyxHQUFHNGQsQ0FBQyxFQUFFLEVBQUU1ZCxDQUFDLEVBQUU7SUFDckN1RCxHQUFHLEdBQUcsSUFBSSxDQUFDa2pCLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUN2cUIsT0FBTyxDQUFDLENBQUM7SUFDM0MsSUFBSXl1QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxJQUFJeHJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLLEVBQUU7TUFDOUMsT0FBT0gsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDb3ZCLE1BQU07SUFDekI7SUFDQSxJQUFJUCxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxJQUFJenJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLEVBQUU7TUFDOUMsT0FBT0YsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDb3ZCLE1BQU07SUFDekI7RUFDSjtFQUNBLE9BQU8sRUFBRTtBQUNiO0FBQ0EsU0FBU0ssVUFBVUEsQ0FBQSxFQUFHO0VBQ2xCLElBQUl6dkIsQ0FBQztJQUNENGQsQ0FBQztJQUNEcmEsR0FBRztJQUNIc3JCLElBQUksR0FBRyxJQUFJLENBQUMxbUIsVUFBVSxDQUFDLENBQUMsQ0FBQzBtQixJQUFJLENBQUMsQ0FBQztFQUNuQyxLQUFLN3VCLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdpUixJQUFJLENBQUNydkIsTUFBTSxFQUFFUSxDQUFDLEdBQUc0ZCxDQUFDLEVBQUUsRUFBRTVkLENBQUMsRUFBRTtJQUNyQ3VELEdBQUcsR0FBRyxJQUFJLENBQUNrakIsS0FBSyxDQUFDLENBQUMsQ0FBQ2tFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQ3ZxQixPQUFPLENBQUMsQ0FBQztJQUMzQyxJQUFJeXVCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLElBQUl4ckIsR0FBRyxJQUFJQSxHQUFHLElBQUlzckIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ3ZCLEtBQUssRUFBRTtNQUM5QyxPQUFPSCxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNnYyxJQUFJO0lBQ3ZCO0lBQ0EsSUFBSTZTLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLLElBQUl6ckIsR0FBRyxJQUFJQSxHQUFHLElBQUlzckIsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDK3VCLEtBQUssRUFBRTtNQUM5QyxPQUFPRixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNnYyxJQUFJO0lBQ3ZCO0VBQ0o7RUFDQSxPQUFPLEVBQUU7QUFDYjtBQUNBLFNBQVMwVCxVQUFVQSxDQUFBLEVBQUc7RUFDbEIsSUFBSTF2QixDQUFDO0lBQ0Q0ZCxDQUFDO0lBQ0QwUixHQUFHO0lBQ0gvckIsR0FBRztJQUNIc3JCLElBQUksR0FBRyxJQUFJLENBQUMxbUIsVUFBVSxDQUFDLENBQUMsQ0FBQzBtQixJQUFJLENBQUMsQ0FBQztFQUNuQyxLQUFLN3VCLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdpUixJQUFJLENBQUNydkIsTUFBTSxFQUFFUSxDQUFDLEdBQUc0ZCxDQUFDLEVBQUUsRUFBRTVkLENBQUMsRUFBRTtJQUNyQ3N2QixHQUFHLEdBQUdULElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLElBQUlGLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3Q3pyQixHQUFHLEdBQUcsSUFBSSxDQUFDa2pCLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUN2cUIsT0FBTyxDQUFDLENBQUM7SUFDM0MsSUFDS3l1QixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUMrdUIsS0FBSyxJQUFJeHJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2d2QixLQUFLLElBQzVDSCxJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNndkIsS0FBSyxJQUFJenJCLEdBQUcsSUFBSUEsR0FBRyxJQUFJc3JCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFNLEVBQ2hEO01BQ0UsT0FDSSxDQUFDLElBQUksQ0FBQ25pQixJQUFJLENBQUMsQ0FBQyxHQUFHL04sS0FBSyxDQUFDZ3dCLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQyt1QixLQUFLLENBQUMsQ0FBQ25pQixJQUFJLENBQUMsQ0FBQyxJQUFJMGlCLEdBQUcsR0FDakRULElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQzZsQixNQUFNO0lBRXRCO0VBQ0o7RUFDQSxPQUFPLElBQUksQ0FBQ2paLElBQUksQ0FBQyxDQUFDO0FBQ3RCO0FBQ0EsU0FBUytpQixhQUFhQSxDQUFDeGdCLFFBQVEsRUFBRTtFQUM3QixJQUFJLENBQUM5UCxVQUFVLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLEVBQUU7SUFDckN1d0IsZ0JBQWdCLENBQUNueUIsSUFBSSxDQUFDLElBQUksQ0FBQztFQUMvQjtFQUNBLE9BQU8wUixRQUFRLEdBQUcsSUFBSSxDQUFDMGdCLGNBQWMsR0FBRyxJQUFJLENBQUNDLFVBQVU7QUFDM0Q7QUFDQSxTQUFTQyxhQUFhQSxDQUFDNWdCLFFBQVEsRUFBRTtFQUM3QixJQUFJLENBQUM5UCxVQUFVLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLEVBQUU7SUFDckN1d0IsZ0JBQWdCLENBQUNueUIsSUFBSSxDQUFDLElBQUksQ0FBQztFQUMvQjtFQUNBLE9BQU8wUixRQUFRLEdBQUcsSUFBSSxDQUFDNmdCLGNBQWMsR0FBRyxJQUFJLENBQUNGLFVBQVU7QUFDM0Q7QUFDQSxTQUFTRyxlQUFlQSxDQUFDOWdCLFFBQVEsRUFBRTtFQUMvQixJQUFJLENBQUM5UCxVQUFVLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLEVBQUU7SUFDdkN1d0IsZ0JBQWdCLENBQUNueUIsSUFBSSxDQUFDLElBQUksQ0FBQztFQUMvQjtFQUNBLE9BQU8wUixRQUFRLEdBQUcsSUFBSSxDQUFDK2dCLGdCQUFnQixHQUFHLElBQUksQ0FBQ0osVUFBVTtBQUM3RDtBQUNBLFNBQVN6QixZQUFZQSxDQUFDbGYsUUFBUSxFQUFFNU8sT0FBTyxFQUFFO0VBQ3JDLE9BQU9BLE9BQU8sQ0FBQ3d2QixhQUFhLENBQUM1Z0IsUUFBUSxDQUFDO0FBQzFDO0FBQ0EsU0FBU21mLFlBQVlBLENBQUNuZixRQUFRLEVBQUU1TyxPQUFPLEVBQUU7RUFDckMsT0FBT0EsT0FBTyxDQUFDb3ZCLGFBQWEsQ0FBQ3hnQixRQUFRLENBQUM7QUFDMUM7QUFDQSxTQUFTb2YsY0FBY0EsQ0FBQ3BmLFFBQVEsRUFBRTVPLE9BQU8sRUFBRTtFQUN2QyxPQUFPQSxPQUFPLENBQUMwdkIsZUFBZSxDQUFDOWdCLFFBQVEsQ0FBQztBQUM1QztBQUNBLFNBQVNzZixtQkFBbUJBLENBQUN0ZixRQUFRLEVBQUU1TyxPQUFPLEVBQUU7RUFDNUMsT0FBT0EsT0FBTyxDQUFDbXVCLG9CQUFvQixJQUFJamdCLGFBQWE7QUFDeEQ7QUFDQSxTQUFTbWhCLGdCQUFnQkEsQ0FBQSxFQUFHO0VBQ3hCLElBQUlPLFVBQVUsR0FBRyxFQUFFO0lBQ2ZDLFVBQVUsR0FBRyxFQUFFO0lBQ2ZDLFlBQVksR0FBRyxFQUFFO0lBQ2pCN2MsV0FBVyxHQUFHLEVBQUU7SUFDaEJ4VCxDQUFDO0lBQ0Q0ZCxDQUFDO0lBQ0RpUixJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLENBQUMsQ0FBQztFQUN0QixLQUFLN3VCLENBQUMsR0FBRyxDQUFDLEVBQUU0ZCxDQUFDLEdBQUdpUixJQUFJLENBQUNydkIsTUFBTSxFQUFFUSxDQUFDLEdBQUc0ZCxDQUFDLEVBQUUsRUFBRTVkLENBQUMsRUFBRTtJQUNyQ293QixVQUFVLENBQUNsd0IsSUFBSSxDQUFDcVAsV0FBVyxDQUFDc2YsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDckQsSUFBSSxDQUFDLENBQUM7SUFDMUN3ekIsVUFBVSxDQUFDandCLElBQUksQ0FBQ3FQLFdBQVcsQ0FBQ3NmLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ2djLElBQUksQ0FBQyxDQUFDO0lBQzFDcVUsWUFBWSxDQUFDbndCLElBQUksQ0FBQ3FQLFdBQVcsQ0FBQ3NmLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ292QixNQUFNLENBQUMsQ0FBQztJQUM5QzViLFdBQVcsQ0FBQ3RULElBQUksQ0FBQ3FQLFdBQVcsQ0FBQ3NmLElBQUksQ0FBQzd1QixDQUFDLENBQUMsQ0FBQ3JELElBQUksQ0FBQyxDQUFDO0lBQzNDNlcsV0FBVyxDQUFDdFQsSUFBSSxDQUFDcVAsV0FBVyxDQUFDc2YsSUFBSSxDQUFDN3VCLENBQUMsQ0FBQyxDQUFDZ2MsSUFBSSxDQUFDLENBQUM7SUFDM0N4SSxXQUFXLENBQUN0VCxJQUFJLENBQUNxUCxXQUFXLENBQUNzZixJQUFJLENBQUM3dUIsQ0FBQyxDQUFDLENBQUNvdkIsTUFBTSxDQUFDLENBQUM7RUFDakQ7RUFDQSxJQUFJLENBQUNVLFVBQVUsR0FBRyxJQUFJcnFCLE1BQU0sQ0FBQyxJQUFJLEdBQUcrTixXQUFXLENBQUN4TyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsQ0FBQztFQUNyRSxJQUFJLENBQUM2cUIsY0FBYyxHQUFHLElBQUlwcUIsTUFBTSxDQUFDLElBQUksR0FBRzJxQixVQUFVLENBQUNwckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUM7RUFDeEUsSUFBSSxDQUFDZ3JCLGNBQWMsR0FBRyxJQUFJdnFCLE1BQU0sQ0FBQyxJQUFJLEdBQUcwcUIsVUFBVSxDQUFDbnJCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDO0VBQ3hFLElBQUksQ0FBQ2tyQixnQkFBZ0IsR0FBRyxJQUFJenFCLE1BQU0sQ0FBQyxJQUFJLEdBQUc0cUIsWUFBWSxDQUFDcnJCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDO0FBQ2hGO0FBQ0EsU0FBU3VyQixzQkFBc0JBLENBQUN4b0IsTUFBTSxFQUFFeW9CLE1BQU0sRUFBRTtFQUM1QzFvQixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUNDLE1BQU0sRUFBRUEsTUFBTSxDQUFDdkksTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFZ3hCLE1BQU0sQ0FBQztBQUN6RDtBQUNBLFNBQVNDLGNBQWNBLENBQUN4eEIsS0FBSyxFQUFFO0VBQzNCLE9BQU95eEIsb0JBQW9CLENBQUNqekIsSUFBSSxDQUM1QixJQUFJLEVBQ0p3QixLQUFLLEVBQ0wsSUFBSSxDQUFDNFYsSUFBSSxDQUFDLENBQUMsRUFDWCxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUFDLEVBQ2QsSUFBSSxDQUFDM00sVUFBVSxDQUFDLENBQUMsQ0FBQ3NOLEtBQUssQ0FBQ2xCLEdBQUcsRUFDM0IsSUFBSSxDQUFDcE0sVUFBVSxDQUFDLENBQUMsQ0FBQ3NOLEtBQUssQ0FBQ2pCLEdBQzVCLENBQUM7QUFDTDtBQUNBLFNBQVNtYyxpQkFBaUJBLENBQUMxeEIsS0FBSyxFQUFFO0VBQzlCLE9BQU95eEIsb0JBQW9CLENBQUNqekIsSUFBSSxDQUM1QixJQUFJLEVBQ0p3QixLQUFLLEVBQ0wsSUFBSSxDQUFDMmxCLE9BQU8sQ0FBQyxDQUFDLEVBQ2QsSUFBSSxDQUFDZ0osVUFBVSxDQUFDLENBQUMsRUFDakIsQ0FBQyxFQUNELENBQ0osQ0FBQztBQUNMO0FBQ0EsU0FBU2dELGlCQUFpQkEsQ0FBQSxFQUFHO0VBQ3pCLE9BQU90YixXQUFXLENBQUMsSUFBSSxDQUFDMUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDO0FBQ0EsU0FBU2lrQix3QkFBd0JBLENBQUEsRUFBRztFQUNoQyxPQUFPdmIsV0FBVyxDQUFDLElBQUksQ0FBQ2diLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoRDtBQUNBLFNBQVNRLGNBQWNBLENBQUEsRUFBRztFQUN0QixJQUFJQyxRQUFRLEdBQUcsSUFBSSxDQUFDNW9CLFVBQVUsQ0FBQyxDQUFDLENBQUNzTixLQUFLO0VBQ3RDLE9BQU9ILFdBQVcsQ0FBQyxJQUFJLENBQUMxSSxJQUFJLENBQUMsQ0FBQyxFQUFFbWtCLFFBQVEsQ0FBQ3hjLEdBQUcsRUFBRXdjLFFBQVEsQ0FBQ3ZjLEdBQUcsQ0FBQztBQUMvRDtBQUNBLFNBQVN3YyxrQkFBa0JBLENBQUEsRUFBRztFQUMxQixJQUFJRCxRQUFRLEdBQUcsSUFBSSxDQUFDNW9CLFVBQVUsQ0FBQyxDQUFDLENBQUNzTixLQUFLO0VBQ3RDLE9BQU9ILFdBQVcsQ0FBQyxJQUFJLENBQUMwTCxRQUFRLENBQUMsQ0FBQyxFQUFFK1AsUUFBUSxDQUFDeGMsR0FBRyxFQUFFd2MsUUFBUSxDQUFDdmMsR0FBRyxDQUFDO0FBQ25FO0FBQ0EsU0FBU2tjLG9CQUFvQkEsQ0FBQ3p4QixLQUFLLEVBQUU0VixJQUFJLEVBQUVDLE9BQU8sRUFBRVAsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDMUQsSUFBSXljLFdBQVc7RUFDZixJQUFJaHlCLEtBQUssSUFBSSxJQUFJLEVBQUU7SUFDZixPQUFPbVcsVUFBVSxDQUFDLElBQUksRUFBRWIsR0FBRyxFQUFFQyxHQUFHLENBQUMsQ0FBQzVILElBQUk7RUFDMUMsQ0FBQyxNQUFNO0lBQ0hxa0IsV0FBVyxHQUFHM2IsV0FBVyxDQUFDclcsS0FBSyxFQUFFc1YsR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDMUMsSUFBSUssSUFBSSxHQUFHb2MsV0FBVyxFQUFFO01BQ3BCcGMsSUFBSSxHQUFHb2MsV0FBVztJQUN0QjtJQUNBLE9BQU9DLFVBQVUsQ0FBQ3p6QixJQUFJLENBQUMsSUFBSSxFQUFFd0IsS0FBSyxFQUFFNFYsSUFBSSxFQUFFQyxPQUFPLEVBQUVQLEdBQUcsRUFBRUMsR0FBRyxDQUFDO0VBQ2hFO0FBQ0o7QUFDQSxTQUFTMGMsVUFBVUEsQ0FBQ2xRLFFBQVEsRUFBRW5NLElBQUksRUFBRUMsT0FBTyxFQUFFUCxHQUFHLEVBQUVDLEdBQUcsRUFBRTtFQUNuRCxJQUFJMmMsYUFBYSxHQUFHdmMsa0JBQWtCLENBQUNvTSxRQUFRLEVBQUVuTSxJQUFJLEVBQUVDLE9BQU8sRUFBRVAsR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDckVoSCxJQUFJLEdBQUcwRyxhQUFhLENBQUNpZCxhQUFhLENBQUN2a0IsSUFBSSxFQUFFLENBQUMsRUFBRXVrQixhQUFhLENBQUNsYyxTQUFTLENBQUM7RUFDeEUsSUFBSSxDQUFDckksSUFBSSxDQUFDWSxJQUFJLENBQUM0RyxjQUFjLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLElBQUksQ0FBQzdHLEtBQUssQ0FBQ0MsSUFBSSxDQUFDNlMsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUM5QixJQUFJLENBQUM3UyxJQUFJLENBQUNBLElBQUksQ0FBQzhTLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDNUIsT0FBTyxJQUFJO0FBQ2Y7QUFDQSxTQUFTOFEsYUFBYUEsQ0FBQ255QixLQUFLLEVBQUU7RUFDMUIsT0FBT0EsS0FBSyxJQUFJLElBQUksR0FDZGtJLElBQUksQ0FBQzJGLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQ1MsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQ2pDLElBQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUN0TyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBSSxJQUFJLENBQUNzTyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUUsQ0FBQztBQUMxRDtBQUNBLFNBQVMrakIsZUFBZUEsQ0FBQ3J5QixLQUFLLEVBQUU7RUFDNUIsSUFBSWdXLFNBQVMsR0FDVDlOLElBQUksQ0FBQ21lLEtBQUssQ0FDTixDQUFDLElBQUksQ0FBQ21CLEtBQUssQ0FBQyxDQUFDLENBQUNrRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDbEUsS0FBSyxDQUFDLENBQUMsQ0FBQ2tFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUNuRSxDQUFDLEdBQUcsQ0FBQztFQUNULE9BQU8xckIsS0FBSyxJQUFJLElBQUksR0FBR2dXLFNBQVMsR0FBRyxJQUFJLENBQUNhLEdBQUcsQ0FBQzdXLEtBQUssR0FBR2dXLFNBQVMsRUFBRSxHQUFHLENBQUM7QUFDdkU7QUFDQSxTQUFTMGMsT0FBT0EsQ0FBQzF5QixLQUFLLEVBQUV3SixLQUFLLEVBQUU7RUFDM0JBLEtBQUssQ0FBQ2tJLFdBQVcsQ0FBQyxHQUFHM0QsS0FBSyxDQUFDLENBQUMsSUFBSSxHQUFHL04sS0FBSyxJQUFJLEdBQUcsQ0FBQztBQUNwRDtBQUNBLFNBQVMyeUIsV0FBV0EsQ0FBQSxFQUFHO0VBQ25CLE9BQU8sSUFBSSxDQUFDOXRCLE1BQU0sR0FBRyxLQUFLLEdBQUcsRUFBRTtBQUNuQztBQUNBLFNBQVMrdEIsV0FBV0EsQ0FBQSxFQUFHO0VBQ25CLE9BQU8sSUFBSSxDQUFDL3RCLE1BQU0sR0FBRyw0QkFBNEIsR0FBRyxFQUFFO0FBQzFEO0FBQ0EsU0FBU2l2QixVQUFVQSxDQUFDOXpCLEtBQUssRUFBRTtFQUN2QixPQUFPc2lCLFdBQVcsQ0FBQ3RpQixLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ25DO0FBQ0EsU0FBUyt6QixZQUFZQSxDQUFBLEVBQUc7RUFDcEIsT0FBT3pSLFdBQVcsQ0FBQzNsQixLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUMsQ0FBQzQyQixTQUFTLENBQUMsQ0FBQztBQUN6RDtBQUNBLFNBQVNRLGtCQUFrQkEsQ0FBQzluQixNQUFNLEVBQUU7RUFDaEMsT0FBT0EsTUFBTTtBQUNqQjtBQUNBLFNBQVNrb0IsS0FBS0EsQ0FBQy95QixPQUFPLEVBQUVnekIsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRTtFQUMxQyxJQUFJanpCLE9BQU8sR0FBR3ViLFNBQVMsQ0FBQyxDQUFDO0lBQ3JCcGIsR0FBRyxHQUFHTCxTQUFTLENBQUMsQ0FBQyxDQUFDaUYsR0FBRyxDQUFDa3VCLE1BQU0sRUFBRUYsS0FBSyxDQUFDO0VBQ3hDLE9BQU8veUIsT0FBTyxDQUFDZ3pCLEtBQUssQ0FBQyxDQUFDN3lCLEdBQUcsRUFBRUosT0FBTyxDQUFDO0FBQ3ZDO0FBQ0EsU0FBU216QixjQUFjQSxDQUFDbnpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUVDLEtBQUssRUFBRTtFQUMzQyxJQUFJNXpCLFFBQVEsQ0FBQ1csT0FBTyxDQUFDLEVBQUU7SUFDbkJnekIsS0FBSyxHQUFHaHpCLE9BQU87SUFDZkEsT0FBTyxHQUFHLEtBQUssQ0FBQztFQUNwQjtFQUNBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFFO0VBQ3ZCLElBQUlnekIsS0FBSyxJQUFJLElBQUksRUFBRTtJQUNmLE9BQU9ELEtBQUssQ0FBQy95QixPQUFPLEVBQUVnekIsS0FBSyxFQUFFQyxLQUFLLEVBQUUsT0FBTyxDQUFDO0VBQ2hEO0VBQ0EsSUFBSXZ6QixDQUFDO0lBQ0QwekIsR0FBRyxHQUFHLEVBQUU7RUFDWixLQUFLMXpCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxFQUFFLEVBQUVBLENBQUMsRUFBRSxFQUFFO0lBQ3JCMHpCLEdBQUcsQ0FBQzF6QixDQUFDLENBQUMsR0FBR3F6QixLQUFLLENBQUMveUIsT0FBTyxFQUFFTixDQUFDLEVBQUV1ekIsS0FBSyxFQUFFLE9BQU8sQ0FBQztFQUM5QztFQUNBLE9BQU9HLEdBQUc7QUFDZDtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsWUFBWSxFQUFFdHpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUVDLEtBQUssRUFBRTtFQUMzRCxJQUFJLE9BQU9LLFlBQVksS0FBSyxTQUFTLEVBQUU7SUFDbkMsSUFBSWowQixRQUFRLENBQUNXLE9BQU8sQ0FBQyxFQUFFO01BQ25CZ3pCLEtBQUssR0FBR2h6QixPQUFPO01BQ2ZBLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDcEI7SUFDQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBRTtFQUMzQixDQUFDLE1BQU07SUFDSEEsT0FBTyxHQUFHc3pCLFlBQVk7SUFDdEJOLEtBQUssR0FBR2h6QixPQUFPO0lBQ2ZzekIsWUFBWSxHQUFHLEtBQUs7SUFDcEIsSUFBSWowQixRQUFRLENBQUNXLE9BQU8sQ0FBQyxFQUFFO01BQ25CZ3pCLEtBQUssR0FBR2h6QixPQUFPO01BQ2ZBLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDcEI7SUFDQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBRTtFQUMzQjtFQUNBLElBQUlDLE9BQU8sR0FBR3ViLFNBQVMsQ0FBQyxDQUFDO0lBQ3JCK1gsS0FBSyxHQUFHRCxZQUFZLEdBQUdyekIsT0FBTyxDQUFDa1YsS0FBSyxDQUFDbEIsR0FBRyxHQUFHLENBQUM7SUFDNUN2VSxDQUFDO0lBQ0QwekIsR0FBRyxHQUFHLEVBQUU7RUFDWixJQUFJSixLQUFLLElBQUksSUFBSSxFQUFFO0lBQ2YsT0FBT0QsS0FBSyxDQUFDL3lCLE9BQU8sRUFBRSxDQUFDZ3pCLEtBQUssR0FBR08sS0FBSyxJQUFJLENBQUMsRUFBRU4sS0FBSyxFQUFFLEtBQUssQ0FBQztFQUM1RDtFQUNBLEtBQUt2ekIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7SUFDcEIwekIsR0FBRyxDQUFDMXpCLENBQUMsQ0FBQyxHQUFHcXpCLEtBQUssQ0FBQy95QixPQUFPLEVBQUUsQ0FBQ04sQ0FBQyxHQUFHNnpCLEtBQUssSUFBSSxDQUFDLEVBQUVOLEtBQUssRUFBRSxLQUFLLENBQUM7RUFDMUQ7RUFDQSxPQUFPRyxHQUFHO0FBQ2Q7QUFDQSxTQUFTSSxVQUFVQSxDQUFDeHpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUU7RUFDaEMsT0FBT0csY0FBYyxDQUFDbnpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUUsUUFBUSxDQUFDO0FBQ25EO0FBQ0EsU0FBU1MsZUFBZUEsQ0FBQ3p6QixPQUFPLEVBQUVnekIsS0FBSyxFQUFFO0VBQ3JDLE9BQU9HLGNBQWMsQ0FBQ256QixPQUFPLEVBQUVnekIsS0FBSyxFQUFFLGFBQWEsQ0FBQztBQUN4RDtBQUNBLFNBQVNVLFlBQVlBLENBQUNKLFlBQVksRUFBRXR6QixPQUFPLEVBQUVnekIsS0FBSyxFQUFFO0VBQ2hELE9BQU9LLGdCQUFnQixDQUFDQyxZQUFZLEVBQUV0ekIsT0FBTyxFQUFFZ3pCLEtBQUssRUFBRSxVQUFVLENBQUM7QUFDckU7QUFDQSxTQUFTVyxpQkFBaUJBLENBQUNMLFlBQVksRUFBRXR6QixPQUFPLEVBQUVnekIsS0FBSyxFQUFFO0VBQ3JELE9BQU9LLGdCQUFnQixDQUFDQyxZQUFZLEVBQUV0ekIsT0FBTyxFQUFFZ3pCLEtBQUssRUFBRSxlQUFlLENBQUM7QUFDMUU7QUFDQSxTQUFTWSxlQUFlQSxDQUFDTixZQUFZLEVBQUV0ekIsT0FBTyxFQUFFZ3pCLEtBQUssRUFBRTtFQUNuRCxPQUFPSyxnQkFBZ0IsQ0FBQ0MsWUFBWSxFQUFFdHpCLE9BQU8sRUFBRWd6QixLQUFLLEVBQUUsYUFBYSxDQUFDO0FBQ3hFO0FBQ0EsU0FBU2xzQixHQUFHQSxDQUFBLEVBQUc7RUFDWCxJQUFJeVUsSUFBSSxHQUFHLElBQUksQ0FBQ3FKLEtBQUs7RUFDckIsSUFBSSxDQUFDRixhQUFhLEdBQUdvUCxPQUFPLENBQUMsSUFBSSxDQUFDcFAsYUFBYSxDQUFDO0VBQ2hELElBQUksQ0FBQ0MsS0FBSyxHQUFHbVAsT0FBTyxDQUFDLElBQUksQ0FBQ25QLEtBQUssQ0FBQztFQUNoQyxJQUFJLENBQUNwVCxPQUFPLEdBQUd1aUIsT0FBTyxDQUFDLElBQUksQ0FBQ3ZpQixPQUFPLENBQUM7RUFDcENnSyxJQUFJLENBQUN5TSxZQUFZLEdBQUc4TCxPQUFPLENBQUN2WSxJQUFJLENBQUN5TSxZQUFZLENBQUM7RUFDOUN6TSxJQUFJLENBQUN6QyxPQUFPLEdBQUdnYixPQUFPLENBQUN2WSxJQUFJLENBQUN6QyxPQUFPLENBQUM7RUFDcEN5QyxJQUFJLENBQUMxQyxPQUFPLEdBQUdpYixPQUFPLENBQUN2WSxJQUFJLENBQUMxQyxPQUFPLENBQUM7RUFDcEMwQyxJQUFJLENBQUM1QyxLQUFLLEdBQUdtYixPQUFPLENBQUN2WSxJQUFJLENBQUM1QyxLQUFLLENBQUM7RUFDaEM0QyxJQUFJLENBQUMzSyxNQUFNLEdBQUdrakIsT0FBTyxDQUFDdlksSUFBSSxDQUFDM0ssTUFBTSxDQUFDO0VBQ2xDMkssSUFBSSxDQUFDa1MsS0FBSyxHQUFHcUcsT0FBTyxDQUFDdlksSUFBSSxDQUFDa1MsS0FBSyxDQUFDO0VBQ2hDLE9BQU8sSUFBSTtBQUNmO0FBQ0EsU0FBU3NHLGFBQWFBLENBQUMvUCxRQUFRLEVBQUVybEIsS0FBSyxFQUFFekIsS0FBSyxFQUFFd3JCLFNBQVMsRUFBRTtFQUN0RCxJQUFJdkYsS0FBSyxHQUFHVyxjQUFjLENBQUNubEIsS0FBSyxFQUFFekIsS0FBSyxDQUFDO0VBQ3hDOG1CLFFBQVEsQ0FBQ1UsYUFBYSxJQUFJZ0UsU0FBUyxHQUFHdkYsS0FBSyxDQUFDdUIsYUFBYTtFQUN6RFYsUUFBUSxDQUFDVyxLQUFLLElBQUkrRCxTQUFTLEdBQUd2RixLQUFLLENBQUN3QixLQUFLO0VBQ3pDWCxRQUFRLENBQUN6UyxPQUFPLElBQUltWCxTQUFTLEdBQUd2RixLQUFLLENBQUM1UixPQUFPO0VBQzdDLE9BQU95UyxRQUFRLENBQUNhLE9BQU8sQ0FBQyxDQUFDO0FBQzdCO0FBQ0EsU0FBU21QLEtBQUtBLENBQUNyMUIsS0FBSyxFQUFFekIsS0FBSyxFQUFFO0VBQ3pCLE9BQU82MkIsYUFBYSxDQUFDLElBQUksRUFBRXAxQixLQUFLLEVBQUV6QixLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQy9DO0FBQ0EsU0FBUysyQixVQUFVQSxDQUFDdDFCLEtBQUssRUFBRXpCLEtBQUssRUFBRTtFQUM5QixPQUFPNjJCLGFBQWEsQ0FBQyxJQUFJLEVBQUVwMUIsS0FBSyxFQUFFekIsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hEO0FBQ0EsU0FBU2czQixPQUFPQSxDQUFDenRCLE1BQU0sRUFBRTtFQUNyQixJQUFJQSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ1osT0FBT0ksSUFBSSxDQUFDNEYsS0FBSyxDQUFDaEcsTUFBTSxDQUFDO0VBQzdCLENBQUMsTUFBTTtJQUNILE9BQU9JLElBQUksQ0FBQzJGLElBQUksQ0FBQy9GLE1BQU0sQ0FBQztFQUM1QjtBQUNKO0FBQ0EsU0FBUzB0QixNQUFNQSxDQUFBLEVBQUc7RUFDZCxJQUFJMVAsYUFBYSxHQUFHLElBQUksQ0FBQ0MsYUFBYTtJQUNsQ0gsS0FBSyxHQUFHLElBQUksQ0FBQ0ksS0FBSztJQUNsQlAsT0FBTyxHQUFHLElBQUksQ0FBQzdTLE9BQU87SUFDdEJnSyxJQUFJLEdBQUcsSUFBSSxDQUFDcUosS0FBSztJQUNqQkosUUFBUTtJQUNSekssUUFBUTtJQUNSRCxNQUFNO0lBQ05tSyxNQUFNO0lBQ05tUSxjQUFjO0VBQ2xCLElBQ0ksRUFDSzNQLGFBQWEsSUFBSSxDQUFDLElBQUlGLEtBQUssSUFBSSxDQUFDLElBQUlILE9BQU8sSUFBSSxDQUFDLElBQ2hESyxhQUFhLElBQUksQ0FBQyxJQUFJRixLQUFLLElBQUksQ0FBQyxJQUFJSCxPQUFPLElBQUksQ0FBRSxDQUNyRCxFQUNIO0lBQ0VLLGFBQWEsSUFBSXlQLE9BQU8sQ0FBQ0csWUFBWSxDQUFDalEsT0FBTyxDQUFDLEdBQUdHLEtBQUssQ0FBQyxHQUFHLEtBQUs7SUFDL0RBLEtBQUssR0FBRyxDQUFDO0lBQ1RILE9BQU8sR0FBRyxDQUFDO0VBQ2Y7RUFDQTdJLElBQUksQ0FBQ3lNLFlBQVksR0FBR3ZELGFBQWEsR0FBRyxHQUFHO0VBQ3ZDRCxRQUFRLEdBQUdqWSxRQUFRLENBQUNrWSxhQUFhLEdBQUcsR0FBRyxDQUFDO0VBQ3hDbEosSUFBSSxDQUFDekMsT0FBTyxHQUFHMEwsUUFBUSxHQUFHLEVBQUU7RUFDNUJ6SyxRQUFRLEdBQUd4TixRQUFRLENBQUNpWSxRQUFRLEdBQUcsRUFBRSxDQUFDO0VBQ2xDakosSUFBSSxDQUFDMUMsT0FBTyxHQUFHa0IsUUFBUSxHQUFHLEVBQUU7RUFDNUJELE1BQU0sR0FBR3ZOLFFBQVEsQ0FBQ3dOLFFBQVEsR0FBRyxFQUFFLENBQUM7RUFDaEN3QixJQUFJLENBQUM1QyxLQUFLLEdBQUdtQixNQUFNLEdBQUcsRUFBRTtFQUN4QnlLLEtBQUssSUFBSWhZLFFBQVEsQ0FBQ3VOLE1BQU0sR0FBRyxFQUFFLENBQUM7RUFDOUJzYSxjQUFjLEdBQUc3bkIsUUFBUSxDQUFDK25CLFlBQVksQ0FBQy9QLEtBQUssQ0FBQyxDQUFDO0VBQzlDSCxPQUFPLElBQUlnUSxjQUFjO0VBQ3pCN1AsS0FBSyxJQUFJMlAsT0FBTyxDQUFDRyxZQUFZLENBQUNELGNBQWMsQ0FBQyxDQUFDO0VBQzlDblEsTUFBTSxHQUFHMVgsUUFBUSxDQUFDNlgsT0FBTyxHQUFHLEVBQUUsQ0FBQztFQUMvQkEsT0FBTyxJQUFJLEVBQUU7RUFDYjdJLElBQUksQ0FBQzJXLElBQUksR0FBRzNOLEtBQUs7RUFDakJoSixJQUFJLENBQUMzSyxNQUFNLEdBQUd3VCxPQUFPO0VBQ3JCN0ksSUFBSSxDQUFDa1MsS0FBSyxHQUFHeEosTUFBTTtFQUNuQixPQUFPLElBQUk7QUFDZjtBQUNBLFNBQVNxUSxZQUFZQSxDQUFDL1AsS0FBSyxFQUFFO0VBQ3pCLE9BQVFBLEtBQUssR0FBRyxJQUFJLEdBQUksTUFBTTtBQUNsQztBQUNBLFNBQVM4UCxZQUFZQSxDQUFDalEsT0FBTyxFQUFFO0VBQzNCLE9BQVFBLE9BQU8sR0FBRyxNQUFNLEdBQUksSUFBSTtBQUNwQztBQUNBLFNBQVNtUSxFQUFFQSxDQUFDOW9CLEtBQUssRUFBRTtFQUNmLElBQUksQ0FBQyxJQUFJLENBQUM1SixPQUFPLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLE9BQU9hLEdBQUc7RUFDZDtFQUNBLElBQUk2aEIsS0FBSztJQUNMSCxPQUFPO0lBQ1BLLGFBQWEsR0FBRyxJQUFJLENBQUNDLGFBQWE7RUFDdENqWixLQUFLLEdBQUdELGNBQWMsQ0FBQ0MsS0FBSyxDQUFDO0VBQzdCLElBQUlBLEtBQUssS0FBSyxPQUFPLElBQUlBLEtBQUssS0FBSyxTQUFTLElBQUlBLEtBQUssS0FBSyxNQUFNLEVBQUU7SUFDOUQ4WSxLQUFLLEdBQUcsSUFBSSxDQUFDSSxLQUFLLEdBQUdGLGFBQWEsR0FBRyxLQUFLO0lBQzFDTCxPQUFPLEdBQUcsSUFBSSxDQUFDN1MsT0FBTyxHQUFHK2lCLFlBQVksQ0FBQy9QLEtBQUssQ0FBQztJQUM1QyxRQUFROVksS0FBSztNQUNULEtBQUssT0FBTztRQUNSLE9BQU8yWSxPQUFPO01BQ2xCLEtBQUssU0FBUztRQUNWLE9BQU9BLE9BQU8sR0FBRyxDQUFDO01BQ3RCLEtBQUssTUFBTTtRQUNQLE9BQU9BLE9BQU8sR0FBRyxFQUFFO0lBQzNCO0VBQ0osQ0FBQyxNQUFNO0lBQ0hHLEtBQUssR0FBRyxJQUFJLENBQUNJLEtBQUssR0FBRzlkLElBQUksQ0FBQ21lLEtBQUssQ0FBQ3FQLFlBQVksQ0FBQyxJQUFJLENBQUM5aUIsT0FBTyxDQUFDLENBQUM7SUFDM0QsUUFBUTlGLEtBQUs7TUFDVCxLQUFLLE1BQU07UUFDUCxPQUFPOFksS0FBSyxHQUFHLENBQUMsR0FBR0UsYUFBYSxHQUFHLE1BQU07TUFDN0MsS0FBSyxLQUFLO1FBQ04sT0FBT0YsS0FBSyxHQUFHRSxhQUFhLEdBQUcsS0FBSztNQUN4QyxLQUFLLE1BQU07UUFDUCxPQUFPRixLQUFLLEdBQUcsRUFBRSxHQUFHRSxhQUFhLEdBQUcsSUFBSTtNQUM1QyxLQUFLLFFBQVE7UUFDVCxPQUFPRixLQUFLLEdBQUcsSUFBSSxHQUFHRSxhQUFhLEdBQUcsR0FBRztNQUM3QyxLQUFLLFFBQVE7UUFDVCxPQUFPRixLQUFLLEdBQUcsS0FBSyxHQUFHRSxhQUFhLEdBQUcsR0FBRztNQUM5QyxLQUFLLGFBQWE7UUFDZCxPQUFPNWQsSUFBSSxDQUFDNEYsS0FBSyxDQUFDOFgsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHRSxhQUFhO01BQ3BEO1FBQ0ksTUFBTSxJQUFJanBCLEtBQUssQ0FBQyxlQUFlLEdBQUdpUSxLQUFLLENBQUM7SUFDaEQ7RUFDSjtBQUNKO0FBQ0EsU0FBUytvQixTQUFTQSxDQUFBLEVBQUc7RUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQzN5QixPQUFPLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLE9BQU9hLEdBQUc7RUFDZDtFQUNBLE9BQ0ksSUFBSSxDQUFDZ2lCLGFBQWEsR0FDbEIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsS0FBSyxHQUNqQixJQUFJLENBQUNwVCxPQUFPLEdBQUcsRUFBRSxHQUFJLE1BQU0sR0FDNUI3RSxLQUFLLENBQUMsSUFBSSxDQUFDNkUsT0FBTyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU87QUFFMUM7QUFDQSxTQUFTa2pCLE1BQU1BLENBQUNDLEtBQUssRUFBRTtFQUNuQixPQUFPLFlBQVk7SUFDZixPQUFPLElBQUksQ0FBQ0gsRUFBRSxDQUFDRyxLQUFLLENBQUM7RUFDekIsQ0FBQztBQUNMO0FBQ0EsU0FBU1UsT0FBT0EsQ0FBQSxFQUFHO0VBQ2YsT0FBT3RSLGNBQWMsQ0FBQyxJQUFJLENBQUM7QUFDL0I7QUFDQSxTQUFTdVIsS0FBS0EsQ0FBQzVwQixLQUFLLEVBQUU7RUFDbEJBLEtBQUssR0FBR0QsY0FBYyxDQUFDQyxLQUFLLENBQUM7RUFDN0IsT0FBTyxJQUFJLENBQUM1SixPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzRKLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcvSSxHQUFHO0FBQ3JEO0FBQ0EsU0FBUzR5QixVQUFVQSxDQUFDajVCLElBQUksRUFBRTtFQUN0QixPQUFPLFlBQVk7SUFDZixPQUFPLElBQUksQ0FBQ3dGLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDK2lCLEtBQUssQ0FBQ3ZvQixJQUFJLENBQUMsR0FBR3FHLEdBQUc7RUFDbEQsQ0FBQztBQUNMO0FBQ0EsU0FBU212QixLQUFLQSxDQUFBLEVBQUc7RUFDYixPQUFPdGxCLFFBQVEsQ0FBQyxJQUFJLENBQUMybEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEM7QUFDQSxTQUFTc0QsaUJBQWlCQSxDQUFDM3FCLE1BQU0sRUFBRXBFLE1BQU0sRUFBRW1FLGFBQWEsRUFBRUUsUUFBUSxFQUFFN0ssT0FBTyxFQUFFO0VBQ3pFLE9BQU9BLE9BQU8sQ0FBQzBLLFlBQVksQ0FBQ2xFLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDbUUsYUFBYSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsQ0FBQztBQUMvRTtBQUNBLFNBQVMycUIsY0FBY0EsQ0FBQ0MsY0FBYyxFQUFFOXFCLGFBQWEsRUFBRStxQixXQUFXLEVBQUUxMUIsT0FBTyxFQUFFO0VBQ3pFLElBQUkrakIsUUFBUSxHQUFHRixjQUFjLENBQUM0UixjQUFjLENBQUMsQ0FBQzV1QixHQUFHLENBQUMsQ0FBQztJQUMvQzBkLFFBQVEsR0FBR1EsS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDeGEsUUFBUSxHQUFHaUwsS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDemEsTUFBTSxHQUFHa0wsS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDaFEsS0FBSyxHQUFHUyxLQUFLLENBQUNoQixRQUFRLENBQUN1USxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0JuUSxPQUFPLEdBQUdZLEtBQUssQ0FBQ2hCLFFBQVEsQ0FBQ3VRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQ2xRLE1BQU0sR0FBR1csS0FBSyxDQUFDaEIsUUFBUSxDQUFDdVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDdFEsTUFBTSxHQUFHZSxLQUFLLENBQUNoQixRQUFRLENBQUN1USxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaENuNUIsQ0FBQyxHQUNJb3BCLFFBQVEsSUFBSW1SLFdBQVcsQ0FBQzVyQixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUV5YSxRQUFRLENBQUMsSUFDN0NBLFFBQVEsR0FBR21SLFdBQVcsQ0FBQ3Y0QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUVvbkIsUUFBUSxDQUFFLElBQzdDekssUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUN2QkEsUUFBUSxHQUFHNGIsV0FBVyxDQUFDcDBCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRXdZLFFBQVEsQ0FBRSxJQUM3Q0QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUNyQkEsTUFBTSxHQUFHNmIsV0FBVyxDQUFDMXJCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTZQLE1BQU0sQ0FBRSxJQUN6Q3lLLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFDcEJBLEtBQUssR0FBR29SLFdBQVcsQ0FBQ3hyQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUVvYSxLQUFLLENBQUU7RUFDaEQsSUFBSW9SLFdBQVcsQ0FBQ3RyQixDQUFDLElBQUksSUFBSSxFQUFFO0lBQ3ZCalAsQ0FBQyxHQUNHQSxDQUFDLElBQ0FpcEIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxJQUNyQkEsTUFBTSxHQUFHc1IsV0FBVyxDQUFDdHJCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRWdhLE1BQU0sQ0FBRTtFQUNsRDtFQUNBanBCLENBQUMsR0FBR0EsQ0FBQyxJQUNBZ3BCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFDdEJBLE9BQU8sR0FBR3VSLFdBQVcsQ0FBQ3ByQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU2WixPQUFPLENBQUUsSUFDM0NILE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLElBQUksRUFBRUEsTUFBTSxDQUFDO0VBQzVDN29CLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBR3dQLGFBQWE7RUFDcEJ4UCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQ3M2QixjQUFjLEdBQUcsQ0FBQztFQUMxQnQ2QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc2RSxPQUFPO0VBQ2QsT0FBT3UxQixpQkFBaUIsQ0FBQ2w2QixLQUFLLENBQUMsSUFBSSxFQUFFRixDQUFDLENBQUM7QUFDM0M7QUFDQSxTQUFTdzZCLDBCQUEwQkEsQ0FBQ0MsZ0JBQWdCLEVBQUU7RUFDbEQsSUFBSUEsZ0JBQWdCLEtBQUssS0FBSyxDQUFDLEVBQUU7SUFDN0IsT0FBTzdRLEtBQUs7RUFDaEI7RUFDQSxJQUFJLE9BQU82USxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7SUFDeEM3USxLQUFLLEdBQUc2USxnQkFBZ0I7SUFDeEIsT0FBTyxJQUFJO0VBQ2Y7RUFDQSxPQUFPLEtBQUs7QUFDaEI7QUFDQSxTQUFTQywyQkFBMkJBLENBQUNDLFNBQVMsRUFBRUMsS0FBSyxFQUFFO0VBQ25ELElBQUlULFVBQVUsQ0FBQ1EsU0FBUyxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7SUFDbEMsT0FBTyxLQUFLO0VBQ2hCO0VBQ0EsSUFBSUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO0lBQ2xCLE9BQU9ULFVBQVUsQ0FBQ1EsU0FBUyxDQUFDO0VBQ2hDO0VBQ0FSLFVBQVUsQ0FBQ1EsU0FBUyxDQUFDLEdBQUdDLEtBQUs7RUFDN0IsSUFBSUQsU0FBUyxLQUFLLEdBQUcsRUFBRTtJQUNuQlIsVUFBVSxDQUFDeHJCLEVBQUUsR0FBR2lzQixLQUFLLEdBQUcsQ0FBQztFQUM3QjtFQUNBLE9BQU8sSUFBSTtBQUNmO0FBQ0EsU0FBU3pKLFFBQVFBLENBQUMwSixhQUFhLEVBQUVDLGFBQWEsRUFBRTtFQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDcjBCLE9BQU8sQ0FBQyxDQUFDLEVBQUU7SUFDakIsT0FBTyxJQUFJLENBQUNnRyxVQUFVLENBQUMsQ0FBQyxDQUFDUyxXQUFXLENBQUMsQ0FBQztFQUMxQztFQUNBLElBQUk2dEIsVUFBVSxHQUFHLEtBQUs7SUFDbEJDLEVBQUUsR0FBR2IsVUFBVTtJQUNmdDFCLE9BQU87SUFDUHFHLE1BQU07RUFDVixJQUFJMUosT0FBQSxDQUFPcTVCLGFBQWEsTUFBSyxRQUFRLEVBQUU7SUFDbkNDLGFBQWEsR0FBR0QsYUFBYTtJQUM3QkEsYUFBYSxHQUFHLEtBQUs7RUFDekI7RUFDQSxJQUFJLE9BQU9BLGFBQWEsS0FBSyxTQUFTLEVBQUU7SUFDcENFLFVBQVUsR0FBR0YsYUFBYTtFQUM5QjtFQUNBLElBQUlyNUIsT0FBQSxDQUFPczVCLGFBQWEsTUFBSyxRQUFRLEVBQUU7SUFDbkNFLEVBQUUsR0FBR2w4QixNQUFNLENBQUNtOEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFZCxVQUFVLEVBQUVXLGFBQWEsQ0FBQztJQUNqRCxJQUFJQSxhQUFhLENBQUM5NEIsQ0FBQyxJQUFJLElBQUksSUFBSTg0QixhQUFhLENBQUNuc0IsRUFBRSxJQUFJLElBQUksRUFBRTtNQUNyRHFzQixFQUFFLENBQUNyc0IsRUFBRSxHQUFHbXNCLGFBQWEsQ0FBQzk0QixDQUFDLEdBQUcsQ0FBQztJQUMvQjtFQUNKO0VBQ0E2QyxPQUFPLEdBQUcsSUFBSSxDQUFDNEgsVUFBVSxDQUFDLENBQUM7RUFDM0J2QixNQUFNLEdBQUdtdkIsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDVSxVQUFVLEVBQUVDLEVBQUUsRUFBRW4yQixPQUFPLENBQUM7RUFDdkQsSUFBSWsyQixVQUFVLEVBQUU7SUFDWjd2QixNQUFNLEdBQUdyRyxPQUFPLENBQUMrSyxVQUFVLENBQUMsQ0FBQyxJQUFJLEVBQUUxRSxNQUFNLENBQUM7RUFDOUM7RUFDQSxPQUFPckcsT0FBTyxDQUFDcXNCLFVBQVUsQ0FBQ2htQixNQUFNLENBQUM7QUFDckM7QUFDQSxTQUFTaXdCLElBQUlBLENBQUN2N0IsQ0FBQyxFQUFFO0VBQ2IsT0FBTyxDQUFDQSxDQUFDLEdBQUcsQ0FBQyxLQUFLQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQ0EsQ0FBQztBQUNsQztBQUNBLFNBQVN3N0IsYUFBYUEsQ0FBQSxFQUFHO0VBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMzMEIsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUNqQixPQUFPLElBQUksQ0FBQ2dHLFVBQVUsQ0FBQyxDQUFDLENBQUNTLFdBQVcsQ0FBQyxDQUFDO0VBQzFDO0VBQ0EsSUFBSWtjLFFBQVEsR0FBRzhSLEtBQUssQ0FBQyxJQUFJLENBQUM1UixhQUFhLENBQUMsR0FBRyxHQUFHO0lBQzFDSCxLQUFLLEdBQUcrUixLQUFLLENBQUMsSUFBSSxDQUFDM1IsS0FBSyxDQUFDO0lBQ3pCUCxPQUFPLEdBQUdrUyxLQUFLLENBQUMsSUFBSSxDQUFDL2tCLE9BQU8sQ0FBQztJQUM3QndJLFFBQVE7SUFDUkQsTUFBTTtJQUNObUssTUFBTTtJQUNON21CLENBQUM7SUFDRHE1QixLQUFLLEdBQUcsSUFBSSxDQUFDN0IsU0FBUyxDQUFDLENBQUM7SUFDeEI4QixTQUFTO0lBQ1RDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxPQUFPO0VBQ1gsSUFBSSxDQUFDSixLQUFLLEVBQUU7SUFDUixPQUFPLEtBQUs7RUFDaEI7RUFDQTFjLFFBQVEsR0FBR3hOLFFBQVEsQ0FBQ2lZLFFBQVEsR0FBRyxFQUFFLENBQUM7RUFDbEMxSyxNQUFNLEdBQUd2TixRQUFRLENBQUN3TixRQUFRLEdBQUcsRUFBRSxDQUFDO0VBQ2hDeUssUUFBUSxJQUFJLEVBQUU7RUFDZHpLLFFBQVEsSUFBSSxFQUFFO0VBQ2RrSyxNQUFNLEdBQUcxWCxRQUFRLENBQUM2WCxPQUFPLEdBQUcsRUFBRSxDQUFDO0VBQy9CQSxPQUFPLElBQUksRUFBRTtFQUNiaG5CLENBQUMsR0FBR29uQixRQUFRLEdBQUdBLFFBQVEsQ0FBQ3NTLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzd1QixPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUU7RUFDN0R5dUIsU0FBUyxHQUFHRCxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0VBQ2hDRSxNQUFNLEdBQUdKLElBQUksQ0FBQyxJQUFJLENBQUNobEIsT0FBTyxDQUFDLEtBQUtnbEIsSUFBSSxDQUFDRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtFQUN0REcsUUFBUSxHQUFHTCxJQUFJLENBQUMsSUFBSSxDQUFDNVIsS0FBSyxDQUFDLEtBQUs0UixJQUFJLENBQUNFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0VBQ3RESSxPQUFPLEdBQUdOLElBQUksQ0FBQyxJQUFJLENBQUM3UixhQUFhLENBQUMsS0FBSzZSLElBQUksQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7RUFDN0QsT0FDSUMsU0FBUyxHQUNULEdBQUcsSUFDRnpTLE1BQU0sR0FBRzBTLE1BQU0sR0FBRzFTLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQ3BDRyxPQUFPLEdBQUd1UyxNQUFNLEdBQUd2UyxPQUFPLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUN0Q0csS0FBSyxHQUFHcVMsUUFBUSxHQUFHclMsS0FBSyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFDcEN6SyxNQUFNLElBQUlDLFFBQVEsSUFBSXlLLFFBQVEsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQzFDMUssTUFBTSxHQUFHK2MsT0FBTyxHQUFHL2MsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFDckNDLFFBQVEsR0FBRzhjLE9BQU8sR0FBRzljLFFBQVEsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQ3pDeUssUUFBUSxHQUFHcVMsT0FBTyxHQUFHejVCLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBRTNDO0FBQ0EsSUFBSWtCLFlBQVksRUFDWm1ELElBQUksRUFDSmtCLGdCQUFnQixFQUNoQkMsZ0JBQWdCLEVBQ2hCZ0MsWUFBWSxFQUNaZSxJQUFJLEVBQ0pDLGVBQWUsRUFDZndCLGdCQUFnQixFQUNoQkMscUJBQXFCLEVBQ3JCQyxlQUFlLEVBQ2ZDLG9CQUFvQixFQUNwQnFCLHFCQUFxQixFQUNyQlcsa0JBQWtCLEVBQ2xCRSxjQUFjLEVBQ2RDLDZCQUE2QixFQUM3QkUsbUJBQW1CLEVBQ25Cc0IsT0FBTyxFQUNQWSxVQUFVLEVBQ1YwQixNQUFNLEVBQ05DLE1BQU0sRUFDTkMsTUFBTSxFQUNOQyxNQUFNLEVBQ05DLE1BQU0sRUFDTkMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsYUFBYSxFQUNiQyxXQUFXLEVBQ1hDLFdBQVcsRUFDWEMsZ0JBQWdCLEVBQ2hCQyxjQUFjLEVBQ2RDLFNBQVMsRUFDVEMsT0FBTyxFQUNQYyxNQUFNLEVBQ05RLElBQUksRUFDSkMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLElBQUksRUFDSkMsTUFBTSxFQUNOQyxNQUFNLEVBQ05DLFdBQVcsRUFDWEMsSUFBSSxFQUNKQyxPQUFPLEVBQ1BDLE9BQU8sRUFDUFEsbUJBQW1CLEVBQ25CRSx3QkFBd0IsRUFDeEJDLGdCQUFnQixFQUNoQkMsdUJBQXVCLEVBQ3ZCQyxrQkFBa0IsRUFDbEJpQyxVQUFVLEVBQ1Y4QixpQkFBaUIsRUFDakJrQixxQkFBcUIsRUFDckJDLDBCQUEwQixFQUMxQkMsd0JBQXdCLEVBQ3hCQyxvQkFBb0IsRUFDcEJDLHlCQUF5QixFQUN6QkMsdUJBQXVCLEVBQ3ZCZ0QsMEJBQTBCLEVBQzFCQyxVQUFVLEVBQ1ZLLFVBQVUsRUFDVkcsT0FBTyxFQUNQQyxjQUFjLEVBQ2RDLFlBQVksRUFDWjhCLGdCQUFnQixFQUNoQkMsYUFBYSxFQUNiQyxPQUFPLEVBQ1BDLFFBQVEsRUFDUkMsUUFBUSxFQUNSQyxlQUFlLEVBQ2ZyYixPQUFPLEVBQ1BzYixVQUFVLEVBQ1Z3RyxZQUFZLEVBQ1pFLFlBQVksRUFDWnRELEdBQUcsRUFDSHlELFFBQVEsRUFDUnFDLFdBQVcsRUFDWGdDLFdBQVcsRUFDWEMsUUFBUSxFQUNSclMsR0FBRyxFQUNIeVIsUUFBUSxFQUNSMEYsSUFBSSxFQUNKQyxhQUFhLEVBQ2JDLGFBQWEsRUFDYkMsV0FBVyxFQUNYQyxnQkFBZ0IsRUFDaEJnRSxnQkFBZ0IsRUFDaEJFLFlBQVksRUFDWkMsWUFBWSxFQUNaQyxLQUFLLEVBQ0xDLGlCQUFpQixFQUNqQkksS0FBSyxFQUNMb0IsT0FBTyxFQUNQa0IsT0FBTyxFQUNQYSxjQUFjLEVBQ2RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxPQUFPLEVBQ1BDLE1BQU0sRUFDTkMsT0FBTyxFQUNQQyxRQUFRLEVBQ1JDLFVBQVUsRUFDVkMsT0FBTyxFQUNQbk4sWUFBWSxFQUNabFAsT0FBTyxFQUNQRCxPQUFPLEVBQ1BGLEtBQUssRUFDTHVaLElBQUksRUFDSnRoQixNQUFNLEVBQ042YyxLQUFLLEVBQ0x6SSxLQUFLLEVBQ0x1USxVQUFVLEVBQ1ZlLEtBQUssRUFDTFMsT0FBTyxFQUNQajVCLGNBQWM7QUFDbEIsSUFBSTY1QixXQUFXLEdBQUdqOEIsS0FBSyxDQUFDO0VBQ3BCLG9DQUFvQyxXQUFBazhCLCtCQUFBLEVBQUc7SUFDbkMsSUFBSWg1QixLQUFLLENBQUMvRCxTQUFTLENBQUM0RyxJQUFJLEVBQUU7TUFDdEJBLElBQUksR0FBRzdDLEtBQUssQ0FBQy9ELFNBQVMsQ0FBQzRHLElBQUk7SUFDL0IsQ0FBQyxNQUFNO01BQ0hBLElBQUksR0FBRyxTQUFBQSxLQUFVQyxHQUFHLEVBQUU7UUFDbEIsSUFBSUMsQ0FBQyxHQUFHekgsTUFBTSxDQUFDLElBQUksQ0FBQztVQUNoQjBILEdBQUcsR0FBR0QsQ0FBQyxDQUFDekMsTUFBTSxLQUFLLENBQUM7VUFDcEJRLENBQUM7UUFDTCxLQUFLQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdrQyxHQUFHLEVBQUVsQyxDQUFDLEVBQUUsRUFBRTtVQUN0QixJQUFJQSxDQUFDLElBQUlpQyxDQUFDLElBQUlELEdBQUcsQ0FBQ3ZFLElBQUksQ0FBQyxJQUFJLEVBQUV3RSxDQUFDLENBQUNqQyxDQUFDLENBQUMsRUFBRUEsQ0FBQyxFQUFFaUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEMsT0FBTyxJQUFJO1VBQ2Y7UUFDSjtRQUNBLE9BQU8sS0FBSztNQUNoQixDQUFDO0lBQ0w7SUFDQWdCLGdCQUFnQixHQUFHcEUsS0FBSyxDQUFDb0UsZ0JBQWdCLEdBQUcsRUFBRTtJQUM5Q0MsZ0JBQWdCLEdBQUcsS0FBSztJQUN4QmdDLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDakJyRyxLQUFLLENBQUMwRiwyQkFBMkIsR0FBRyxLQUFLO0lBQ3pDMUYsS0FBSyxDQUFDOEYsa0JBQWtCLEdBQUcsSUFBSTtJQUMvQixJQUFJbkssTUFBTSxDQUFDeUwsSUFBSSxFQUFFO01BQ2JBLElBQUksR0FBR3pMLE1BQU0sQ0FBQ3lMLElBQUk7SUFDdEIsQ0FBQyxNQUFNO01BQ0hBLElBQUksR0FBRyxTQUFBQSxLQUFVMUcsR0FBRyxFQUFFO1FBQ2xCLElBQUlTLENBQUM7VUFDRDlELEdBQUcsR0FBRyxFQUFFO1FBQ1osS0FBSzhELENBQUMsSUFBSVQsR0FBRyxFQUFFO1VBQ1gsSUFBSUYsVUFBVSxDQUFDRSxHQUFHLEVBQUVTLENBQUMsQ0FBQyxFQUFFO1lBQ3BCOUQsR0FBRyxDQUFDZ0UsSUFBSSxDQUFDRixDQUFDLENBQUM7VUFDZjtRQUNKO1FBQ0EsT0FBTzlELEdBQUc7TUFDZCxDQUFDO0lBQ0w7SUFDQWdLLGVBQWUsR0FBRztNQUNkQyxPQUFPLEVBQUUsZUFBZTtNQUN4QkMsT0FBTyxFQUFFLGtCQUFrQjtNQUMzQkMsUUFBUSxFQUFFLGNBQWM7TUFDeEJDLE9BQU8sRUFBRSxtQkFBbUI7TUFDNUJDLFFBQVEsRUFBRSxxQkFBcUI7TUFDL0JDLFFBQVEsRUFBRTtJQUNkLENBQUM7SUFDRGtCLGdCQUFnQixHQUNaLHdNQUF3TTtJQUM1TUMscUJBQXFCLEdBQUcsNENBQTRDO0lBQ3BFQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCQyxvQkFBb0IsR0FBRyxDQUFDLENBQUM7SUFDekJxQixxQkFBcUIsR0FBRztNQUNwQkMsR0FBRyxFQUFFLFdBQVc7TUFDaEJDLEVBQUUsRUFBRSxRQUFRO01BQ1pDLENBQUMsRUFBRSxZQUFZO01BQ2ZDLEVBQUUsRUFBRSxjQUFjO01BQ2xCQyxHQUFHLEVBQUUscUJBQXFCO01BQzFCQyxJQUFJLEVBQUU7SUFDVixDQUFDO0lBQ0RLLGtCQUFrQixHQUFHLGNBQWM7SUFDbkNFLGNBQWMsR0FBRyxJQUFJO0lBQ3JCQyw2QkFBNkIsR0FBRyxTQUFTO0lBQ3pDRSxtQkFBbUIsR0FBRztNQUNsQkMsTUFBTSxFQUFFLE9BQU87TUFDZkMsSUFBSSxFQUFFLFFBQVE7TUFDZDFNLENBQUMsRUFBRSxlQUFlO01BQ2xCMk0sRUFBRSxFQUFFLFlBQVk7TUFDaEJ4SSxDQUFDLEVBQUUsVUFBVTtNQUNieUksRUFBRSxFQUFFLFlBQVk7TUFDaEJDLENBQUMsRUFBRSxTQUFTO01BQ1pDLEVBQUUsRUFBRSxVQUFVO01BQ2RDLENBQUMsRUFBRSxPQUFPO01BQ1ZDLEVBQUUsRUFBRSxTQUFTO01BQ2JDLENBQUMsRUFBRSxRQUFRO01BQ1hDLEVBQUUsRUFBRSxVQUFVO01BQ2RDLENBQUMsRUFBRSxTQUFTO01BQ1pDLEVBQUUsRUFBRSxXQUFXO01BQ2ZDLENBQUMsRUFBRSxRQUFRO01BQ1hDLEVBQUUsRUFBRTtJQUNSLENBQUM7SUFDRFEsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNaWSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ2YwQixNQUFNLEdBQUcsSUFBSTtJQUNiQyxNQUFNLEdBQUcsTUFBTTtJQUNmQyxNQUFNLEdBQUcsT0FBTztJQUNoQkMsTUFBTSxHQUFHLE9BQU87SUFDaEJDLE1BQU0sR0FBRyxZQUFZO0lBQ3JCQyxTQUFTLEdBQUcsT0FBTztJQUNuQkMsU0FBUyxHQUFHLFdBQVc7SUFDdkJDLFNBQVMsR0FBRyxlQUFlO0lBQzNCQyxTQUFTLEdBQUcsU0FBUztJQUNyQkMsU0FBUyxHQUFHLFNBQVM7SUFDckJDLFNBQVMsR0FBRyxjQUFjO0lBQzFCQyxhQUFhLEdBQUcsS0FBSztJQUNyQkMsV0FBVyxHQUFHLFVBQVU7SUFDeEJDLFdBQVcsR0FBRyxvQkFBb0I7SUFDbENDLGdCQUFnQixHQUFHLHlCQUF5QjtJQUM1Q0MsY0FBYyxHQUFHLHNCQUFzQjtJQUN2Q0MsU0FBUyxHQUNMLHVKQUF1SjtJQUMzSkMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNaYyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ1hRLElBQUksR0FBRyxDQUFDO0lBQ1JDLEtBQUssR0FBRyxDQUFDO0lBQ1RDLElBQUksR0FBRyxDQUFDO0lBQ1JDLElBQUksR0FBRyxDQUFDO0lBQ1JDLE1BQU0sR0FBRyxDQUFDO0lBQ1ZDLE1BQU0sR0FBRyxDQUFDO0lBQ1ZDLFdBQVcsR0FBRyxDQUFDO0lBQ2ZDLElBQUksR0FBRyxDQUFDO0lBQ1JDLE9BQU8sR0FBRyxDQUFDO0lBQ1gsSUFBSTNSLEtBQUssQ0FBQy9ELFNBQVMsQ0FBQzJWLE9BQU8sRUFBRTtNQUN6QkEsT0FBTyxHQUFHNVIsS0FBSyxDQUFDL0QsU0FBUyxDQUFDMlYsT0FBTztJQUNyQyxDQUFDLE1BQU07TUFDSEEsT0FBTyxHQUFHLFNBQUFBLFFBQVVDLENBQUMsRUFBRTtRQUNuQixJQUFJL1EsQ0FBQztRQUNMLEtBQUtBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNSLE1BQU0sRUFBRSxFQUFFUSxDQUFDLEVBQUU7VUFDOUIsSUFBSSxJQUFJLENBQUNBLENBQUMsQ0FBQyxLQUFLK1EsQ0FBQyxFQUFFO1lBQ2YsT0FBTy9RLENBQUM7VUFDWjtRQUNKO1FBQ0EsT0FBTyxDQUFDLENBQUM7TUFDYixDQUFDO0lBQ0w7SUFDQThILGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVk7TUFDN0MsT0FBTyxJQUFJLENBQUN5RixLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDM0IsQ0FBQyxDQUFDO0lBQ0Z6RixjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVXhILE9BQU8sRUFBRTtNQUMzQyxPQUFPLElBQUksQ0FBQzZILFVBQVUsQ0FBQyxDQUFDLENBQUM4SSxXQUFXLENBQUMsSUFBSSxFQUFFM1EsT0FBTyxDQUFDO0lBQ3ZELENBQUMsQ0FBQztJQUNGd0gsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVV4SCxPQUFPLEVBQUU7TUFDNUMsT0FBTyxJQUFJLENBQUM2SCxVQUFVLENBQUMsQ0FBQyxDQUFDK0ksTUFBTSxDQUFDLElBQUksRUFBRTVRLE9BQU8sQ0FBQztJQUNsRCxDQUFDLENBQUM7SUFDRm1MLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQzFCWSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUMzQjJDLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztJQUM3QmEsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7SUFDdENpQixhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVVHLFFBQVEsRUFBRTVPLE9BQU8sRUFBRTtNQUM5QyxPQUFPQSxPQUFPLENBQUM0USxnQkFBZ0IsQ0FBQ2hDLFFBQVEsQ0FBQztJQUM3QyxDQUFDLENBQUM7SUFDRkgsYUFBYSxDQUFDLE1BQU0sRUFBRSxVQUFVRyxRQUFRLEVBQUU1TyxPQUFPLEVBQUU7TUFDL0MsT0FBT0EsT0FBTyxDQUFDNlEsV0FBVyxDQUFDakMsUUFBUSxDQUFDO0lBQ3hDLENBQUMsQ0FBQztJQUNGVyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtNQUMvQ0EsS0FBSyxDQUFDNkgsS0FBSyxDQUFDLEdBQUd0RCxLQUFLLENBQUMvTixLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ25DLENBQUMsQ0FBQztJQUNGNlEsYUFBYSxDQUFDLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU2RCxNQUFNLEVBQUU7TUFDbkUsSUFBSXdGLEtBQUssR0FBR3JKLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDcU4sV0FBVyxDQUNsQ3BTLEtBQUssRUFDTDhJLE1BQU0sRUFDTjdELE1BQU0sQ0FBQ3RCLE9BQ1gsQ0FBQztNQUNELElBQUkySyxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ2Y5RSxLQUFLLENBQUM2SCxLQUFLLENBQUMsR0FBRy9DLEtBQUs7TUFDeEIsQ0FBQyxNQUFNO1FBQ0gzTCxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQy9DLFlBQVksR0FBR2xDLEtBQUs7TUFDaEQ7SUFDSixDQUFDLENBQUM7SUFDRnFTLG1CQUFtQixHQUNmLHVGQUF1RixDQUFDQyxLQUFLLENBQ3pGLEdBQ0osQ0FBQztJQUNMQyx3QkFBd0IsR0FDcEIsaURBQWlELENBQUNELEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDaEVFLGdCQUFnQixHQUFHLCtCQUErQjtJQUNsREMsdUJBQXVCLEdBQUc1QyxTQUFTO0lBQ25DNkMsa0JBQWtCLEdBQUc3QyxTQUFTO0lBQzlCaEgsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7TUFDbEMsSUFBSWlELENBQUMsR0FBRyxJQUFJLENBQUM2QixJQUFJLENBQUMsQ0FBQztNQUNuQixPQUFPN0IsQ0FBQyxJQUFJLElBQUksR0FBR2pFLFFBQVEsQ0FBQ2lFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdBLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0lBQ0ZqRCxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO01BQ3hDLE9BQU8sSUFBSSxDQUFDOEUsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHO0lBQzVCLENBQUMsQ0FBQztJQUNGOUUsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDO0lBQ3pDQSxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUM7SUFDMUNBLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUM7SUFDakQyRCxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUN6QlksZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDMUIyQyxhQUFhLENBQUMsR0FBRyxFQUFFTixXQUFXLENBQUM7SUFDL0JNLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO0lBQ3RDaUIsYUFBYSxDQUFDLE1BQU0sRUFBRVQsU0FBUyxFQUFFTixNQUFNLENBQUM7SUFDeENlLGFBQWEsQ0FBQyxPQUFPLEVBQUVSLFNBQVMsRUFBRU4sTUFBTSxDQUFDO0lBQ3pDYyxhQUFhLENBQUMsUUFBUSxFQUFFUixTQUFTLEVBQUVOLE1BQU0sQ0FBQztJQUMxQzRCLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRU8sSUFBSSxDQUFDO0lBQ3hDUCxhQUFhLENBQUMsTUFBTSxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUU7TUFDMUNBLEtBQUssQ0FBQzRILElBQUksQ0FBQyxHQUNQcFIsS0FBSyxDQUFDTyxNQUFNLEtBQUssQ0FBQyxHQUNaWCxLQUFLLENBQUM0VSxpQkFBaUIsQ0FBQ3hVLEtBQUssQ0FBQyxHQUM5QitOLEtBQUssQ0FBQy9OLEtBQUssQ0FBQztJQUMxQixDQUFDLENBQUM7SUFDRjZRLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtNQUN4Q0EsS0FBSyxDQUFDNEgsSUFBSSxDQUFDLEdBQUd4UixLQUFLLENBQUM0VSxpQkFBaUIsQ0FBQ3hVLEtBQUssQ0FBQztJQUNoRCxDQUFDLENBQUM7SUFDRjZRLGFBQWEsQ0FBQyxHQUFHLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtNQUN2Q0EsS0FBSyxDQUFDNEgsSUFBSSxDQUFDLEdBQUdxRCxRQUFRLENBQUN6VSxLQUFLLEVBQUUsRUFBRSxDQUFDO0lBQ3JDLENBQUMsQ0FBQztJQUNGSixLQUFLLENBQUM0VSxpQkFBaUIsR0FBRyxVQUFVeFUsS0FBSyxFQUFFO01BQ3ZDLE9BQU8rTixLQUFLLENBQUMvTixLQUFLLENBQUMsSUFBSStOLEtBQUssQ0FBQy9OLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQzFELENBQUM7SUFDRDJVLFVBQVUsR0FBR3hHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDO0lBQ3pDdEYsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDO0lBQzVDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUM7SUFDL0MyRCxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUN6QkEsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUM7SUFDNUJZLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzFCQSxlQUFlLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUM3QjJDLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztJQUM3QmEsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7SUFDdENpQixhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7SUFDN0JhLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO0lBQ3RDaUMsaUJBQWlCLENBQ2IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFDdEIsVUFBVS9RLEtBQUssRUFBRTRWLElBQUksRUFBRTNRLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtNQUNuQzhNLElBQUksQ0FBQzlNLE1BQU0sQ0FBQ04sTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHdUYsS0FBSyxDQUFDL04sS0FBSyxDQUFDO0lBQzVDLENBQ0osQ0FBQztJQUNEeVcsaUJBQWlCLEdBQUc7TUFDaEJuQixHQUFHLEVBQUUsQ0FBQztNQUVOQyxHQUFHLEVBQUU7SUFFVCxDQUFDO0lBQ0QxTSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQ25DQSxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVXhILE9BQU8sRUFBRTtNQUMxQyxPQUFPLElBQUksQ0FBQzZILFVBQVUsQ0FBQyxDQUFDLENBQUM2TixXQUFXLENBQUMsSUFBSSxFQUFFMVYsT0FBTyxDQUFDO0lBQ3ZELENBQUMsQ0FBQztJQUNGd0gsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVV4SCxPQUFPLEVBQUU7TUFDM0MsT0FBTyxJQUFJLENBQUM2SCxVQUFVLENBQUMsQ0FBQyxDQUFDOE4sYUFBYSxDQUFDLElBQUksRUFBRTNWLE9BQU8sQ0FBQztJQUN6RCxDQUFDLENBQUM7SUFDRndILGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVeEgsT0FBTyxFQUFFO01BQzVDLE9BQU8sSUFBSSxDQUFDNkgsVUFBVSxDQUFDLENBQUMsQ0FBQytOLFFBQVEsQ0FBQyxJQUFJLEVBQUU1VixPQUFPLENBQUM7SUFDcEQsQ0FBQyxDQUFDO0lBQ0Z3SCxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO0lBQ3BDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxDQUFDO0lBQ3ZDMkQsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7SUFDeEJBLFlBQVksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDO0lBQzVCQSxZQUFZLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQztJQUMvQlksZUFBZSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7SUFDMUJBLGVBQWUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO0lBQzlCQSxlQUFlLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztJQUNqQzJDLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztJQUM3QmEsYUFBYSxDQUFDLEdBQUcsRUFBRWIsU0FBUyxDQUFDO0lBQzdCYSxhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7SUFDN0JhLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVUcsUUFBUSxFQUFFNU8sT0FBTyxFQUFFO01BQzdDLE9BQU9BLE9BQU8sQ0FBQzRWLGdCQUFnQixDQUFDaEgsUUFBUSxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUNGSCxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVVHLFFBQVEsRUFBRTVPLE9BQU8sRUFBRTtNQUM5QyxPQUFPQSxPQUFPLENBQUM2VixrQkFBa0IsQ0FBQ2pILFFBQVEsQ0FBQztJQUMvQyxDQUFDLENBQUM7SUFDRkgsYUFBYSxDQUFDLE1BQU0sRUFBRSxVQUFVRyxRQUFRLEVBQUU1TyxPQUFPLEVBQUU7TUFDL0MsT0FBT0EsT0FBTyxDQUFDOFYsYUFBYSxDQUFDbEgsUUFBUSxDQUFDO0lBQzFDLENBQUMsQ0FBQztJQUNGYSxpQkFBaUIsQ0FDYixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQ3JCLFVBQVUvUSxLQUFLLEVBQUU0VixJQUFJLEVBQUUzUSxNQUFNLEVBQUU2RCxNQUFNLEVBQUU7TUFDbkMsSUFBSStNLE9BQU8sR0FBRzVRLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDc1MsYUFBYSxDQUN0Q3JYLEtBQUssRUFDTDhJLE1BQU0sRUFDTjdELE1BQU0sQ0FBQ3RCLE9BQ1gsQ0FBQztNQUNELElBQUlrUyxPQUFPLElBQUksSUFBSSxFQUFFO1FBQ2pCRCxJQUFJLENBQUNwSyxDQUFDLEdBQUdxSyxPQUFPO01BQ3BCLENBQUMsTUFBTTtRQUNIbFQsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUN2QixjQUFjLEdBQUcxRCxLQUFLO01BQ2xEO0lBQ0osQ0FDSixDQUFDO0lBQ0QrUSxpQkFBaUIsQ0FDYixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ2YsVUFBVS9RLEtBQUssRUFBRTRWLElBQUksRUFBRTNRLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtNQUNuQzhNLElBQUksQ0FBQzlNLE1BQU0sQ0FBQyxHQUFHaUYsS0FBSyxDQUFDL04sS0FBSyxDQUFDO0lBQy9CLENBQ0osQ0FBQztJQUNEMlgscUJBQXFCLEdBQ2pCLDBEQUEwRCxDQUFDckYsS0FBSyxDQUM1RCxHQUNKLENBQUM7SUFDTHNGLDBCQUEwQixHQUFHLDZCQUE2QixDQUFDdEYsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUNyRXVGLHdCQUF3QixHQUFHLHNCQUFzQixDQUFDdkYsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUM1RHdGLG9CQUFvQixHQUFHakksU0FBUztJQUNoQ2tJLHlCQUF5QixHQUFHbEksU0FBUztJQUNyQ21JLHVCQUF1QixHQUFHbkksU0FBUztJQUNuQ2hILGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQztJQUN6Q0EsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVrUixPQUFPLENBQUM7SUFDMUNsUixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRW9SLE9BQU8sQ0FBQztJQUMxQ3BSLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO01BQ3BDLE9BQU8sRUFBRSxHQUFHa1IsT0FBTyxDQUFDcGQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHa0wsUUFBUSxDQUFDLElBQUksQ0FBQ3FTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQztJQUNGclIsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7TUFDdEMsT0FDSSxFQUFFLEdBQ0ZrUixPQUFPLENBQUNwZCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQ25Ca0wsUUFBUSxDQUFDLElBQUksQ0FBQ3FTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQzNCclMsUUFBUSxDQUFDLElBQUksQ0FBQ3NTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRW5DLENBQUMsQ0FBQztJQUNGdFIsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7TUFDcEMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDbVIsS0FBSyxDQUFDLENBQUMsR0FBR25TLFFBQVEsQ0FBQyxJQUFJLENBQUNxUyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUM7SUFDRnJSLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO01BQ3RDLE9BQ0ksRUFBRSxHQUNGLElBQUksQ0FBQ21SLEtBQUssQ0FBQyxDQUFDLEdBQ1puUyxRQUFRLENBQUMsSUFBSSxDQUFDcVMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FDM0JyUyxRQUFRLENBQUMsSUFBSSxDQUFDc1MsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbkMsQ0FBQyxDQUFDO0lBQ0YzWCxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQztJQUNuQkEsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUM7SUFDcEJnSyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUN6QlksZUFBZSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7SUFDM0IyQyxhQUFhLENBQUMsR0FBRyxFQUFFc0ssYUFBYSxDQUFDO0lBQ2pDdEssYUFBYSxDQUFDLEdBQUcsRUFBRXNLLGFBQWEsQ0FBQztJQUNqQ3RLLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztJQUM3QmEsYUFBYSxDQUFDLEdBQUcsRUFBRWIsU0FBUyxDQUFDO0lBQzdCYSxhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7SUFDN0JhLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO0lBQ3RDaUIsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7SUFDdENpQixhQUFhLENBQUMsSUFBSSxFQUFFYixTQUFTLEVBQUVKLE1BQU0sQ0FBQztJQUN0Q2lCLGFBQWEsQ0FBQyxLQUFLLEVBQUVaLFNBQVMsQ0FBQztJQUMvQlksYUFBYSxDQUFDLE9BQU8sRUFBRVgsU0FBUyxDQUFDO0lBQ2pDVyxhQUFhLENBQUMsS0FBSyxFQUFFWixTQUFTLENBQUM7SUFDL0JZLGFBQWEsQ0FBQyxPQUFPLEVBQUVYLFNBQVMsQ0FBQztJQUNqQ3lCLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRVUsSUFBSSxDQUFDO0lBQ2hDVixhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTtNQUN2RCxJQUFJc1YsTUFBTSxHQUFHeE0sS0FBSyxDQUFDL04sS0FBSyxDQUFDO01BQ3pCd0osS0FBSyxDQUFDK0gsSUFBSSxDQUFDLEdBQUdnSixNQUFNLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBR0EsTUFBTTtJQUM1QyxDQUFDLENBQUM7SUFDRjFKLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFdkUsTUFBTSxFQUFFO01BQ3REQSxNQUFNLENBQUN1VixLQUFLLEdBQUd2VixNQUFNLENBQUNGLE9BQU8sQ0FBQzBWLElBQUksQ0FBQ3phLEtBQUssQ0FBQztNQUN6Q2lGLE1BQU0sQ0FBQ3lWLFNBQVMsR0FBRzFhLEtBQUs7SUFDNUIsQ0FBQyxDQUFDO0lBQ0Y2USxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTtNQUN2RHVFLEtBQUssQ0FBQytILElBQUksQ0FBQyxHQUFHeEQsS0FBSyxDQUFDL04sS0FBSyxDQUFDO01BQzFCMkMsZUFBZSxDQUFDc0MsTUFBTSxDQUFDLENBQUNyQixPQUFPLEdBQUcsSUFBSTtJQUMxQyxDQUFDLENBQUM7SUFDRmlOLGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTtNQUNqRCxJQUFJMFYsR0FBRyxHQUFHM2EsS0FBSyxDQUFDTyxNQUFNLEdBQUcsQ0FBQztNQUMxQmlKLEtBQUssQ0FBQytILElBQUksQ0FBQyxHQUFHeEQsS0FBSyxDQUFDL04sS0FBSyxDQUFDd0ksTUFBTSxDQUFDLENBQUMsRUFBRW1TLEdBQUcsQ0FBQyxDQUFDO01BQ3pDblIsS0FBSyxDQUFDZ0ksTUFBTSxDQUFDLEdBQUd6RCxLQUFLLENBQUMvTixLQUFLLENBQUN3SSxNQUFNLENBQUNtUyxHQUFHLENBQUMsQ0FBQztNQUN4Q2hZLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDckIsT0FBTyxHQUFHLElBQUk7SUFDMUMsQ0FBQyxDQUFDO0lBQ0ZpTixhQUFhLENBQUMsT0FBTyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7TUFDbkQsSUFBSTJWLElBQUksR0FBRzVhLEtBQUssQ0FBQ08sTUFBTSxHQUFHLENBQUM7UUFDdkJzYSxJQUFJLEdBQUc3YSxLQUFLLENBQUNPLE1BQU0sR0FBRyxDQUFDO01BQzNCaUosS0FBSyxDQUFDK0gsSUFBSSxDQUFDLEdBQUd4RCxLQUFLLENBQUMvTixLQUFLLENBQUN3SSxNQUFNLENBQUMsQ0FBQyxFQUFFb1MsSUFBSSxDQUFDLENBQUM7TUFDMUNwUixLQUFLLENBQUNnSSxNQUFNLENBQUMsR0FBR3pELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3dJLE1BQU0sQ0FBQ29TLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztNQUM1Q3BSLEtBQUssQ0FBQ2lJLE1BQU0sQ0FBQyxHQUFHMUQsS0FBSyxDQUFDL04sS0FBSyxDQUFDd0ksTUFBTSxDQUFDcVMsSUFBSSxDQUFDLENBQUM7TUFDekNsWSxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ3JCLE9BQU8sR0FBRyxJQUFJO0lBQzFDLENBQUMsQ0FBQztJQUNGaU4sYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFdkUsTUFBTSxFQUFFO01BQ2pELElBQUkwVixHQUFHLEdBQUczYSxLQUFLLENBQUNPLE1BQU0sR0FBRyxDQUFDO01BQzFCaUosS0FBSyxDQUFDK0gsSUFBSSxDQUFDLEdBQUd4RCxLQUFLLENBQUMvTixLQUFLLENBQUN3SSxNQUFNLENBQUMsQ0FBQyxFQUFFbVMsR0FBRyxDQUFDLENBQUM7TUFDekNuUixLQUFLLENBQUNnSSxNQUFNLENBQUMsR0FBR3pELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3dJLE1BQU0sQ0FBQ21TLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUNGOUosYUFBYSxDQUFDLE9BQU8sRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFdkUsTUFBTSxFQUFFO01BQ25ELElBQUkyVixJQUFJLEdBQUc1YSxLQUFLLENBQUNPLE1BQU0sR0FBRyxDQUFDO1FBQ3ZCc2EsSUFBSSxHQUFHN2EsS0FBSyxDQUFDTyxNQUFNLEdBQUcsQ0FBQztNQUMzQmlKLEtBQUssQ0FBQytILElBQUksQ0FBQyxHQUFHeEQsS0FBSyxDQUFDL04sS0FBSyxDQUFDd0ksTUFBTSxDQUFDLENBQUMsRUFBRW9TLElBQUksQ0FBQyxDQUFDO01BQzFDcFIsS0FBSyxDQUFDZ0ksTUFBTSxDQUFDLEdBQUd6RCxLQUFLLENBQUMvTixLQUFLLENBQUN3SSxNQUFNLENBQUNvUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDNUNwUixLQUFLLENBQUNpSSxNQUFNLENBQUMsR0FBRzFELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3dJLE1BQU0sQ0FBQ3FTLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUNGRywwQkFBMEIsR0FBRyxlQUFlO0lBQzVDQyxVQUFVLEdBQUc5TSxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQztJQUN0Q21OLFVBQVUsR0FBRztNQUNUOVQsUUFBUSxFQUFFUCxlQUFlO01BQ3pCNkMsY0FBYyxFQUFFRyxxQkFBcUI7TUFDckNOLFdBQVcsRUFBRWlCLGtCQUFrQjtNQUMvQnpCLE9BQU8sRUFBRTJCLGNBQWM7TUFDdkJ5USxzQkFBc0IsRUFBRXhRLDZCQUE2QjtNQUNyRGlCLFlBQVksRUFBRWYsbUJBQW1CO01BQ2pDZ0gsTUFBTSxFQUFFSSxtQkFBbUI7TUFDM0JMLFdBQVcsRUFBRU8sd0JBQXdCO01BQ3JDcUQsSUFBSSxFQUFFYSxpQkFBaUI7TUFDdkJRLFFBQVEsRUFBRVUscUJBQXFCO01BQy9CWixXQUFXLEVBQUVjLHdCQUF3QjtNQUNyQ2IsYUFBYSxFQUFFWSwwQkFBMEI7TUFDekM0RCxhQUFhLEVBQUVSO0lBQ25CLENBQUM7SUFDRFMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNaQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ25CK0IsZ0JBQWdCLEdBQ1osZ0pBQWdKO0lBQ3BKQyxhQUFhLEdBQ1QsNElBQTRJO0lBQ2hKQyxPQUFPLEdBQUcsdUJBQXVCO0lBQ2pDQyxRQUFRLEdBQUcsQ0FDUCxDQUFDLGNBQWMsRUFBRSxxQkFBcUIsQ0FBQyxFQUN2QyxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxFQUNqQyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUNsQyxDQUFDLFlBQVksRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQ3BDLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxFQUMzQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLEVBQ2hDLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxFQUM1QixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsRUFDckIsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLEVBQzdCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsRUFDbkMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQ3BCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFDMUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUMzQjtJQUNEQyxRQUFRLEdBQUcsQ0FDUCxDQUFDLGVBQWUsRUFBRSxxQkFBcUIsQ0FBQyxFQUN4QyxDQUFDLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQyxFQUN2QyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxFQUM5QixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsRUFDdEIsQ0FBQyxhQUFhLEVBQUUsbUJBQW1CLENBQUMsRUFDcEMsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsRUFDbkMsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLEVBQzFCLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUNwQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FDakI7SUFDREMsZUFBZSxHQUFHLG9CQUFvQjtJQUN0Q3JiLE9BQU8sR0FDSCx5TEFBeUw7SUFDN0xzYixVQUFVLEdBQUc7TUFDVEMsRUFBRSxFQUFFLENBQUM7TUFDTEMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDWkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDWkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDWkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDWkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDWkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDWkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7TUFDWkMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHO0lBQ2QsQ0FBQztJQUNEN2UsS0FBSyxDQUFDaWhCLHVCQUF1QixHQUFHcmIsU0FBUyxDQUNyQywrUkFBK1IsRUFDL1IsVUFBVVAsTUFBTSxFQUFFO01BQ2RBLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBbUIsSUFBSTVDLElBQUksQ0FDaENxRSxNQUFNLENBQUNSLEVBQUUsSUFBSVEsTUFBTSxDQUFDNmIsT0FBTyxHQUFHLE1BQU0sR0FBRyxFQUFFLENBQzdDLENBQUM7SUFDTCxDQUNKLENBQUM7SUFDRGxoQixLQUFLLENBQUM0aUIsUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDO0lBQy9CNWlCLEtBQUssQ0FBQzZpQixRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUM7SUFDL0I4QixZQUFZLEdBQUcvZSxTQUFTLENBQ3BCLG9HQUFvRyxFQUNwRyxZQUFZO01BQ1IsSUFBSWdmLEtBQUssR0FBR2xDLFdBQVcsQ0FBQzNsQixLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7TUFDOUMsSUFBSSxJQUFJLENBQUNzRyxPQUFPLENBQUMsQ0FBQyxJQUFJc2hCLEtBQUssQ0FBQ3RoQixPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ25DLE9BQU9zaEIsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUdBLEtBQUs7TUFDdEMsQ0FBQyxNQUFNO1FBQ0gsT0FBTzFnQixhQUFhLENBQUMsQ0FBQztNQUMxQjtJQUNKLENBQ0osQ0FBQztJQUNEMmdCLFlBQVksR0FBR2pmLFNBQVMsQ0FDcEIsb0dBQW9HLEVBQ3BHLFlBQVk7TUFDUixJQUFJZ2YsS0FBSyxHQUFHbEMsV0FBVyxDQUFDM2xCLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztNQUM5QyxJQUFJLElBQUksQ0FBQ3NHLE9BQU8sQ0FBQyxDQUFDLElBQUlzaEIsS0FBSyxDQUFDdGhCLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDbkMsT0FBT3NoQixLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBR0EsS0FBSztNQUN0QyxDQUFDLE1BQU07UUFDSCxPQUFPMWdCLGFBQWEsQ0FBQyxDQUFDO01BQzFCO0lBQ0osQ0FDSixDQUFDO0lBQ0RxZCxHQUFHLEdBQUcsU0FBQUEsSUFBQSxFQUFZO01BQ2QsT0FBT3ZnQixJQUFJLENBQUN1Z0IsR0FBRyxHQUFHdmdCLElBQUksQ0FBQ3VnQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQWtCLElBQUl2Z0IsSUFBSSxDQUFDLENBQUU7SUFDaEUsQ0FBQztJQUNEZ2tCLFFBQVEsR0FBRyxDQUNQLE1BQU0sRUFDTixTQUFTLEVBQ1QsT0FBTyxFQUNQLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLFFBQVEsRUFDUixRQUFRLEVBQ1IsYUFBYSxDQUNoQjtJQUNEZ0MsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDaEJBLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO0lBQ2hCN1csYUFBYSxDQUFDLEdBQUcsRUFBRUosZ0JBQWdCLENBQUM7SUFDcENJLGFBQWEsQ0FBQyxJQUFJLEVBQUVKLGdCQUFnQixDQUFDO0lBQ3JDa0IsYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7TUFDdkRBLE1BQU0sQ0FBQzZiLE9BQU8sR0FBRyxJQUFJO01BQ3JCN2IsTUFBTSxDQUFDTCxJQUFJLEdBQUdvaUIsZ0JBQWdCLENBQUNyWCxnQkFBZ0IsRUFBRTNQLEtBQUssQ0FBQztJQUMzRCxDQUFDLENBQUM7SUFDRmluQixXQUFXLEdBQUcsaUJBQWlCO0lBQy9Ccm5CLEtBQUssQ0FBQ3NGLFlBQVksR0FBRyxZQUFZLENBQUMsQ0FBQztJQUNuQytqQixXQUFXLEdBQUcsdURBQXVEO0lBQ3JFQyxRQUFRLEdBQ0oscUtBQXFLO0lBQ3pLL0QsY0FBYyxDQUFDbm9CLEVBQUUsR0FBR29vQixRQUFRLENBQUNscEIsU0FBUztJQUN0Q2lwQixjQUFjLENBQUNxRSxPQUFPLEdBQUd0RSxlQUFlO0lBQ3hDck8sR0FBRyxHQUFHaVQsV0FBVyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7SUFDM0J4QixRQUFRLEdBQUd3QixXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDO0lBQ3RDbHFCLEtBQUssQ0FBQ210QixhQUFhLEdBQUcsc0JBQXNCO0lBQzVDbnRCLEtBQUssQ0FBQ290QixnQkFBZ0IsR0FBRyx3QkFBd0I7SUFDakRnQixJQUFJLEdBQUd4b0IsU0FBUyxDQUNaLGlKQUFpSixFQUNqSixVQUFVbEgsR0FBRyxFQUFFO01BQ1gsSUFBSUEsR0FBRyxLQUFLLEtBQUssQ0FBQyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDNEssVUFBVSxDQUFDLENBQUM7TUFDNUIsQ0FBQyxNQUFNO1FBQ0gsT0FBTyxJQUFJLENBQUMrakIsTUFBTSxDQUFDM3VCLEdBQUcsQ0FBQztNQUMzQjtJQUNKLENBQ0osQ0FBQztJQUNEMnZCLGFBQWEsR0FBRyxHQUFHO0lBQ25CQyxhQUFhLEdBQUcsRUFBRSxHQUFHRCxhQUFhO0lBQ2xDRSxXQUFXLEdBQUcsRUFBRSxHQUFHRCxhQUFhO0lBQ2hDRSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBR0QsV0FBVztJQUN0RHRsQixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO0lBQ3BDQSxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO0lBQ3JDQSxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO0lBQ3RDQSxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO0lBQ3ZDQSxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDO0lBQzFDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUM7SUFDOUNBLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQztJQUM1Q0EsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO0lBQzdDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUM7SUFDOUNrSCxhQUFhLENBQUMsR0FBRyxFQUFFcWYsWUFBWSxDQUFDO0lBQ2hDcmYsYUFBYSxDQUFDLElBQUksRUFBRXFmLFlBQVksQ0FBQztJQUNqQ3JmLGFBQWEsQ0FBQyxLQUFLLEVBQUVxZixZQUFZLENBQUM7SUFDbENyZixhQUFhLENBQUMsTUFBTSxFQUFFc2YsWUFBWSxDQUFDO0lBQ25DdGYsYUFBYSxDQUFDLE9BQU8sRUFBRXVmLGNBQWMsQ0FBQztJQUN0Q3plLGFBQWEsQ0FDVCxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDbkMsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtNQUNwQyxJQUFJdkcsR0FBRyxHQUFHMEMsTUFBTSxDQUFDRixPQUFPLENBQUN3cUIsU0FBUyxDQUM5QnZ2QixLQUFLLEVBQ0w4SSxNQUFNLEVBQ043RCxNQUFNLENBQUN0QixPQUNYLENBQUM7TUFDRCxJQUFJcEIsR0FBRyxFQUFFO1FBQ0xJLGVBQWUsQ0FBQ3NDLE1BQU0sQ0FBQyxDQUFDMUMsR0FBRyxHQUFHQSxHQUFHO01BQ3JDLENBQUMsTUFBTTtRQUNISSxlQUFlLENBQUNzQyxNQUFNLENBQUMsQ0FBQ2hELFVBQVUsR0FBR2pDLEtBQUs7TUFDOUM7SUFDSixDQUNKLENBQUM7SUFDRCtQLGFBQWEsQ0FBQyxHQUFHLEVBQUVQLGFBQWEsQ0FBQztJQUNqQ08sYUFBYSxDQUFDLElBQUksRUFBRVAsYUFBYSxDQUFDO0lBQ2xDTyxhQUFhLENBQUMsS0FBSyxFQUFFUCxhQUFhLENBQUM7SUFDbkNPLGFBQWEsQ0FBQyxNQUFNLEVBQUVQLGFBQWEsQ0FBQztJQUNwQ08sYUFBYSxDQUFDLElBQUksRUFBRXlmLG1CQUFtQixDQUFDO0lBQ3hDM2UsYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUVPLElBQUksQ0FBQztJQUMvQ1AsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRXZFLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtNQUMxRCxJQUFJTyxLQUFLO01BQ1QsSUFBSXBFLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDMHFCLG9CQUFvQixFQUFFO1FBQ3JDcG1CLEtBQUssR0FBR3JKLEtBQUssQ0FBQ3FKLEtBQUssQ0FBQ3BFLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDMHFCLG9CQUFvQixDQUFDO01BQzVEO01BQ0EsSUFBSXhxQixNQUFNLENBQUNGLE9BQU8sQ0FBQzJxQixtQkFBbUIsRUFBRTtRQUNwQ2xtQixLQUFLLENBQUM0SCxJQUFJLENBQUMsR0FBR25NLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDMnFCLG1CQUFtQixDQUFDMXZCLEtBQUssRUFBRXFKLEtBQUssQ0FBQztNQUNsRSxDQUFDLE1BQU07UUFDSEcsS0FBSyxDQUFDNEgsSUFBSSxDQUFDLEdBQUdxRCxRQUFRLENBQUN6VSxLQUFLLEVBQUUsRUFBRSxDQUFDO01BQ3JDO0lBQ0osQ0FBQyxDQUFDO0lBQ0Y2SSxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO01BQ3hDLE9BQU8sSUFBSSxDQUFDa1osUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHO0lBQ2hDLENBQUMsQ0FBQztJQUNGbFosY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWTtNQUN4QyxPQUFPLElBQUksQ0FBQ3dvQixXQUFXLENBQUMsQ0FBQyxHQUFHLEdBQUc7SUFDbkMsQ0FBQyxDQUFDO0lBQ0ZDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUM7SUFDMUNBLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7SUFDM0NBLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUM7SUFDN0NBLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7SUFDOUM5a0IsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7SUFDOUJBLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO0lBQ2pDWSxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUM5QkEsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDakMyQyxhQUFhLENBQUMsR0FBRyxFQUFFTixXQUFXLENBQUM7SUFDL0JNLGFBQWEsQ0FBQyxHQUFHLEVBQUVOLFdBQVcsQ0FBQztJQUMvQk0sYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7SUFDdENpQixhQUFhLENBQUMsSUFBSSxFQUFFYixTQUFTLEVBQUVKLE1BQU0sQ0FBQztJQUN0Q2lCLGFBQWEsQ0FBQyxNQUFNLEVBQUVULFNBQVMsRUFBRU4sTUFBTSxDQUFDO0lBQ3hDZSxhQUFhLENBQUMsTUFBTSxFQUFFVCxTQUFTLEVBQUVOLE1BQU0sQ0FBQztJQUN4Q2UsYUFBYSxDQUFDLE9BQU8sRUFBRVIsU0FBUyxFQUFFTixNQUFNLENBQUM7SUFDekNjLGFBQWEsQ0FBQyxPQUFPLEVBQUVSLFNBQVMsRUFBRU4sTUFBTSxDQUFDO0lBQ3pDOEIsaUJBQWlCLENBQ2IsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDbEMsVUFBVS9RLEtBQUssRUFBRTRWLElBQUksRUFBRTNRLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtNQUNuQzhNLElBQUksQ0FBQzlNLE1BQU0sQ0FBQ04sTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHdUYsS0FBSyxDQUFDL04sS0FBSyxDQUFDO0lBQzVDLENBQ0osQ0FBQztJQUNEK1EsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsVUFBVS9RLEtBQUssRUFBRTRWLElBQUksRUFBRTNRLE1BQU0sRUFBRTZELE1BQU0sRUFBRTtNQUNuRThNLElBQUksQ0FBQzlNLE1BQU0sQ0FBQyxHQUFHbEosS0FBSyxDQUFDNFUsaUJBQWlCLENBQUN4VSxLQUFLLENBQUM7SUFDakQsQ0FBQyxDQUFDO0lBQ0Y2SSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDO0lBQ3ZDMkQsWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUM7SUFDNUJZLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzdCMkMsYUFBYSxDQUFDLEdBQUcsRUFBRWxCLE1BQU0sQ0FBQztJQUMxQmdDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsVUFBVTdRLEtBQUssRUFBRXdKLEtBQUssRUFBRTtNQUN2Q0EsS0FBSyxDQUFDNkgsS0FBSyxDQUFDLEdBQUcsQ0FBQ3RELEtBQUssQ0FBQy9OLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3pDLENBQUMsQ0FBQztJQUNGNkksY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDO0lBQzVDMkQsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDekJZLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzFCMkMsYUFBYSxDQUFDLEdBQUcsRUFBRWIsU0FBUyxDQUFDO0lBQzdCYSxhQUFhLENBQUMsSUFBSSxFQUFFYixTQUFTLEVBQUVKLE1BQU0sQ0FBQztJQUN0Q2lCLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVUcsUUFBUSxFQUFFNU8sT0FBTyxFQUFFO01BQzdDLE9BQU80TyxRQUFRLEdBQ1Q1TyxPQUFPLENBQUNtRix1QkFBdUIsSUFBSW5GLE9BQU8sQ0FBQ3FGLGFBQWEsR0FDeERyRixPQUFPLENBQUNpRiw4QkFBOEI7SUFDaEQsQ0FBQyxDQUFDO0lBQ0ZzSyxhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUVTLElBQUksQ0FBQztJQUNoQ1QsYUFBYSxDQUFDLElBQUksRUFBRSxVQUFVN1EsS0FBSyxFQUFFd0osS0FBSyxFQUFFO01BQ3hDQSxLQUFLLENBQUM4SCxJQUFJLENBQUMsR0FBR3ZELEtBQUssQ0FBQy9OLEtBQUssQ0FBQ3FKLEtBQUssQ0FBQzZGLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQztJQUNGa2pCLGdCQUFnQixHQUFHamtCLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO0lBQzNDdEYsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDO0lBQ3ZEMkQsWUFBWSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUM7SUFDaENZLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQy9CMkMsYUFBYSxDQUFDLEtBQUssRUFBRVYsU0FBUyxDQUFDO0lBQy9CVSxhQUFhLENBQUMsTUFBTSxFQUFFaEIsTUFBTSxDQUFDO0lBQzdCOEIsYUFBYSxDQUFDLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7TUFDM0RBLE1BQU0sQ0FBQzRjLFVBQVUsR0FBRzlULEtBQUssQ0FBQy9OLEtBQUssQ0FBQztJQUNwQyxDQUFDLENBQUM7SUFDRjZJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQztJQUMzQzJELFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQzNCWSxlQUFlLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztJQUM3QjJDLGFBQWEsQ0FBQyxHQUFHLEVBQUViLFNBQVMsQ0FBQztJQUM3QmEsYUFBYSxDQUFDLElBQUksRUFBRWIsU0FBUyxFQUFFSixNQUFNLENBQUM7SUFDdEMrQixhQUFhLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUVXLE1BQU0sQ0FBQztJQUNsQzhnQixZQUFZLEdBQUdua0IsVUFBVSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7SUFDM0N0RixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUM7SUFDM0MyRCxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztJQUMzQlksZUFBZSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7SUFDN0IyQyxhQUFhLENBQUMsR0FBRyxFQUFFYixTQUFTLENBQUM7SUFDN0JhLGFBQWEsQ0FBQyxJQUFJLEVBQUViLFNBQVMsRUFBRUosTUFBTSxDQUFDO0lBQ3RDK0IsYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFWSxNQUFNLENBQUM7SUFDbEM4Z0IsWUFBWSxHQUFHcGtCLFVBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0lBQzNDdEYsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7TUFDbEMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDb2IsV0FBVyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0lBQ0ZwYixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO01BQ3hDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQ29iLFdBQVcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3RDLENBQUMsQ0FBQztJQUNGcGIsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYSxDQUFDO0lBQy9DQSxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO01BQzFDLE9BQU8sSUFBSSxDQUFDb2IsV0FBVyxDQUFDLENBQUMsR0FBRyxFQUFFO0lBQ2xDLENBQUMsQ0FBQztJQUNGcGIsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWTtNQUMzQyxPQUFPLElBQUksQ0FBQ29iLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRztJQUNuQyxDQUFDLENBQUM7SUFDRnBiLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7TUFDNUMsT0FBTyxJQUFJLENBQUNvYixXQUFXLENBQUMsQ0FBQyxHQUFHLEdBQUc7SUFDbkMsQ0FBQyxDQUFDO0lBQ0ZwYixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZO01BQzdDLE9BQU8sSUFBSSxDQUFDb2IsV0FBVyxDQUFDLENBQUMsR0FBRyxHQUFHO0lBQ25DLENBQUMsQ0FBQztJQUNGcGIsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWTtNQUM5QyxPQUFPLElBQUksQ0FBQ29iLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRztJQUNuQyxDQUFDLENBQUM7SUFDRnBiLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVk7TUFDL0MsT0FBTyxJQUFJLENBQUNvYixXQUFXLENBQUMsQ0FBQyxHQUFHLEdBQUc7SUFDbkMsQ0FBQyxDQUFDO0lBQ0Z6WCxZQUFZLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQztJQUNqQ1ksZUFBZSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7SUFDbEMyQyxhQUFhLENBQUMsR0FBRyxFQUFFVixTQUFTLEVBQUVSLE1BQU0sQ0FBQztJQUNyQ2tCLGFBQWEsQ0FBQyxJQUFJLEVBQUVWLFNBQVMsRUFBRVAsTUFBTSxDQUFDO0lBQ3RDaUIsYUFBYSxDQUFDLEtBQUssRUFBRVYsU0FBUyxFQUFFTixNQUFNLENBQUM7SUFDdkMsS0FBS3lqQixLQUFLLEdBQUcsTUFBTSxFQUFFQSxLQUFLLENBQUNqeUIsTUFBTSxJQUFJLENBQUMsRUFBRWl5QixLQUFLLElBQUksR0FBRyxFQUFFO01BQ2xEemlCLGFBQWEsQ0FBQ3lpQixLQUFLLEVBQUVoakIsYUFBYSxDQUFDO0lBQ3ZDO0lBQ0EsS0FBS2dqQixLQUFLLEdBQUcsR0FBRyxFQUFFQSxLQUFLLENBQUNqeUIsTUFBTSxJQUFJLENBQUMsRUFBRWl5QixLQUFLLElBQUksR0FBRyxFQUFFO01BQy9DM2hCLGFBQWEsQ0FBQzJoQixLQUFLLEVBQUVFLE9BQU8sQ0FBQztJQUNqQztJQUNBRCxpQkFBaUIsR0FBR3RrQixVQUFVLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQztJQUNyRHRGLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUM7SUFDckNBLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUM7SUFDdENncUIsS0FBSyxHQUFHN3RCLE1BQU0sQ0FBQzlJLFNBQVM7SUFDeEIyMkIsS0FBSyxDQUFDaGMsR0FBRyxHQUFHQSxHQUFHO0lBQ2ZnYyxLQUFLLENBQUNyckIsUUFBUSxHQUFHOGpCLFVBQVU7SUFDM0J1SCxLQUFLLENBQUNyTCxLQUFLLEdBQUdBLEtBQUs7SUFDbkJxTCxLQUFLLENBQUN4SCxJQUFJLEdBQUdBLElBQUk7SUFDakJ3SCxLQUFLLENBQUMvRyxLQUFLLEdBQUdBLEtBQUs7SUFDbkIrRyxLQUFLLENBQUNqSCxNQUFNLEdBQUdBLE1BQU07SUFDckJpSCxLQUFLLENBQUMvMEIsSUFBSSxHQUFHQSxJQUFJO0lBQ2pCKzBCLEtBQUssQ0FBQ2hGLE9BQU8sR0FBR0EsT0FBTztJQUN2QmdGLEtBQUssQ0FBQ2gxQixFQUFFLEdBQUdBLEVBQUU7SUFDYmcxQixLQUFLLENBQUMvRSxLQUFLLEdBQUdBLEtBQUs7SUFDbkIrRSxLQUFLLENBQUNyMkIsR0FBRyxHQUFHaVMsU0FBUztJQUNyQm9rQixLQUFLLENBQUMzRCxTQUFTLEdBQUdBLFNBQVM7SUFDM0IyRCxLQUFLLENBQUNqSixPQUFPLEdBQUdBLE9BQU87SUFDdkJpSixLQUFLLENBQUNoSixRQUFRLEdBQUdBLFFBQVE7SUFDekJnSixLQUFLLENBQUM5RyxTQUFTLEdBQUdBLFNBQVM7SUFDM0I4RyxLQUFLLENBQUMxRyxNQUFNLEdBQUdBLE1BQU07SUFDckIwRyxLQUFLLENBQUN4RyxhQUFhLEdBQUdBLGFBQWE7SUFDbkN3RyxLQUFLLENBQUN2RyxjQUFjLEdBQUdBLGNBQWM7SUFDckN1RyxLQUFLLENBQUMzdkIsT0FBTyxHQUFHOHJCLFNBQVM7SUFDekI2RCxLQUFLLENBQUM3RSxJQUFJLEdBQUdBLElBQUk7SUFDakI2RSxLQUFLLENBQUM1RixNQUFNLEdBQUdBLE1BQU07SUFDckI0RixLQUFLLENBQUMzcEIsVUFBVSxHQUFHQSxVQUFVO0lBQzdCMnBCLEtBQUssQ0FBQ3RxQixHQUFHLEdBQUdrYyxZQUFZO0lBQ3hCb08sS0FBSyxDQUFDamYsR0FBRyxHQUFHMlEsWUFBWTtJQUN4QnNPLEtBQUssQ0FBQzVELFlBQVksR0FBR0EsWUFBWTtJQUNqQzRELEtBQUssQ0FBQ3hzQixHQUFHLEdBQUdxSSxTQUFTO0lBQ3JCbWtCLEtBQUssQ0FBQ25ILE9BQU8sR0FBR0EsT0FBTztJQUN2Qm1ILEtBQUssQ0FBQ3ZLLFFBQVEsR0FBR0EsUUFBUTtJQUN6QnVLLEtBQUssQ0FBQ2hLLE9BQU8sR0FBR0EsT0FBTztJQUN2QmdLLEtBQUssQ0FBQ2hFLFFBQVEsR0FBR0EsUUFBUTtJQUN6QmdFLEtBQUssQ0FBQ3pGLE1BQU0sR0FBR0EsTUFBTTtJQUNyQnlGLEtBQUssQ0FBQzNGLFdBQVcsR0FBR0EsV0FBVztJQUMvQjJGLEtBQUssQ0FBQ3hGLE9BQU8sR0FBR0EsT0FBTztJQUN2QixJQUFJLE9BQU95RixNQUFNLEtBQUssV0FBVyxJQUFJQSxNQUFNLE9BQUksSUFBSSxJQUFJLEVBQUU7TUFDckRELEtBQUssQ0FBQ0MsTUFBTSxPQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxHQUFHLFlBQVk7UUFDMUQsT0FBTyxTQUFTLEdBQUcsSUFBSSxDQUFDbEgsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHO01BQzFDLENBQUM7SUFDTDtJQUNBaUgsS0FBSyxDQUFDOUQsTUFBTSxHQUFHQSxNQUFNO0lBQ3JCOEQsS0FBSyxDQUFDM3lCLFFBQVEsR0FBR0EsUUFBUTtJQUN6QjJ5QixLQUFLLENBQUNqRSxJQUFJLEdBQUdBLElBQUk7SUFDakJpRSxLQUFLLENBQUMxeEIsT0FBTyxHQUFHQSxPQUFPO0lBQ3ZCMHhCLEtBQUssQ0FBQzFELFlBQVksR0FBR0EsWUFBWTtJQUNqQzBELEtBQUssQ0FBQzNDLE9BQU8sR0FBR0ksVUFBVTtJQUMxQnVDLEtBQUssQ0FBQ0UsU0FBUyxHQUFHeEMsWUFBWTtJQUM5QnNDLEtBQUssQ0FBQ0csT0FBTyxHQUFHeEMsVUFBVTtJQUMxQnFDLEtBQUssQ0FBQ0ksT0FBTyxHQUFHeEMsVUFBVTtJQUMxQm9DLEtBQUssQ0FBQ2xsQixJQUFJLEdBQUdnSCxVQUFVO0lBQ3ZCa2UsS0FBSyxDQUFDbmxCLFVBQVUsR0FBR2tILGFBQWE7SUFDaENpZSxLQUFLLENBQUM5USxRQUFRLEdBQUd5UCxjQUFjO0lBQy9CcUIsS0FBSyxDQUFDeEIsV0FBVyxHQUFHSyxpQkFBaUI7SUFDckNtQixLQUFLLENBQUNyTixPQUFPLEdBQUdxTixLQUFLLENBQUN0TixRQUFRLEdBQUc0TSxhQUFhO0lBQzlDVSxLQUFLLENBQUN2a0IsS0FBSyxHQUFHdUYsV0FBVztJQUN6QmdmLEtBQUssQ0FBQ3JrQixXQUFXLEdBQUdzRixjQUFjO0lBQ2xDK2UsS0FBSyxDQUFDamQsSUFBSSxHQUFHaWQsS0FBSyxDQUFDSyxLQUFLLEdBQUd0YyxVQUFVO0lBQ3JDaWMsS0FBSyxDQUFDbE4sT0FBTyxHQUFHa04sS0FBSyxDQUFDTSxRQUFRLEdBQUdyYyxhQUFhO0lBQzlDK2IsS0FBSyxDQUFDeGMsV0FBVyxHQUFHd2IsY0FBYztJQUNsQ2dCLEtBQUssQ0FBQ08sZUFBZSxHQUFHckIsa0JBQWtCO0lBQzFDYyxLQUFLLENBQUNRLGNBQWMsR0FBRzFCLGlCQUFpQjtJQUN4Q2tCLEtBQUssQ0FBQ1MscUJBQXFCLEdBQUcxQix3QkFBd0I7SUFDdERpQixLQUFLLENBQUN0a0IsSUFBSSxHQUFHNmpCLGdCQUFnQjtJQUM3QlMsS0FBSyxDQUFDMWEsR0FBRyxHQUFHMGEsS0FBSyxDQUFDVSxJQUFJLEdBQUd2YSxlQUFlO0lBQ3hDNlosS0FBSyxDQUFDaGQsT0FBTyxHQUFHcUQscUJBQXFCO0lBQ3JDMlosS0FBSyxDQUFDbEUsVUFBVSxHQUFHeFYsa0JBQWtCO0lBQ3JDMFosS0FBSyxDQUFDN2MsU0FBUyxHQUFHcWMsZUFBZTtJQUNqQ1EsS0FBSyxDQUFDN1AsSUFBSSxHQUFHNlAsS0FBSyxDQUFDN1ksS0FBSyxHQUFHaUIsVUFBVTtJQUNyQzRYLEtBQUssQ0FBQzlPLE1BQU0sR0FBRzhPLEtBQUssQ0FBQzNZLE9BQU8sR0FBR29ZLFlBQVk7SUFDM0NPLEtBQUssQ0FBQzdPLE1BQU0sR0FBRzZPLEtBQUssQ0FBQzFZLE9BQU8sR0FBR29ZLFlBQVk7SUFDM0NNLEtBQUssQ0FBQzVPLFdBQVcsR0FBRzRPLEtBQUssQ0FBQ3hKLFlBQVksR0FBR29KLGlCQUFpQjtJQUMxREksS0FBSyxDQUFDOUwsU0FBUyxHQUFHYyxZQUFZO0lBQzlCZ0wsS0FBSyxDQUFDcHhCLEdBQUcsR0FBRzJtQixjQUFjO0lBQzFCeUssS0FBSyxDQUFDbkwsS0FBSyxHQUFHVyxnQkFBZ0I7SUFDOUJ3SyxLQUFLLENBQUNXLFNBQVMsR0FBR2pMLHVCQUF1QjtJQUN6Q3NLLEtBQUssQ0FBQ3BLLG9CQUFvQixHQUFHQSxvQkFBb0I7SUFDakRvSyxLQUFLLENBQUNZLEtBQUssR0FBRy9LLG9CQUFvQjtJQUNsQ21LLEtBQUssQ0FBQy9KLE9BQU8sR0FBR0EsT0FBTztJQUN2QitKLEtBQUssQ0FBQzlKLFdBQVcsR0FBR0EsV0FBVztJQUMvQjhKLEtBQUssQ0FBQzdKLEtBQUssR0FBR0EsS0FBSztJQUNuQjZKLEtBQUssQ0FBQ3ZPLEtBQUssR0FBRzBFLEtBQUs7SUFDbkI2SixLQUFLLENBQUNhLFFBQVEsR0FBR2YsV0FBVztJQUM1QkUsS0FBSyxDQUFDYyxRQUFRLEdBQUdmLFdBQVc7SUFDNUJDLEtBQUssQ0FBQ2UsS0FBSyxHQUFHcHVCLFNBQVMsQ0FDbkIsaURBQWlELEVBQ2pENHNCLGdCQUNKLENBQUM7SUFDRFMsS0FBSyxDQUFDNWdCLE1BQU0sR0FBR3pNLFNBQVMsQ0FDcEIsa0RBQWtELEVBQ2xEcU8sV0FDSixDQUFDO0lBQ0RnZixLQUFLLENBQUMvRCxLQUFLLEdBQUd0cEIsU0FBUyxDQUNuQixnREFBZ0QsRUFDaERtUCxVQUNKLENBQUM7SUFDRGtlLEtBQUssQ0FBQ3ZGLElBQUksR0FBRzluQixTQUFTLENBQ2xCLDBHQUEwRyxFQUMxRzJpQixVQUNKLENBQUM7SUFDRDBLLEtBQUssQ0FBQ2dCLFlBQVksR0FBR3J1QixTQUFTLENBQzFCLHlHQUF5RyxFQUN6R21qQiwyQkFDSixDQUFDO0lBQ0RzTCxPQUFPLEdBQUdsdEIsTUFBTSxDQUFDN0ssU0FBUztJQUMxQiszQixPQUFPLENBQUN6c0IsUUFBUSxHQUFHQSxRQUFRO0lBQzNCeXNCLE9BQU8sQ0FBQ25xQixjQUFjLEdBQUdBLGNBQWM7SUFDdkNtcUIsT0FBTyxDQUFDdHFCLFdBQVcsR0FBR0EsV0FBVztJQUNqQ3NxQixPQUFPLENBQUM5cUIsT0FBTyxHQUFHQSxPQUFPO0lBQ3pCOHFCLE9BQU8sQ0FBQzdQLFFBQVEsR0FBRzRQLGtCQUFrQjtJQUNyQ0MsT0FBTyxDQUFDdEcsVUFBVSxHQUFHcUcsa0JBQWtCO0lBQ3ZDQyxPQUFPLENBQUNqb0IsWUFBWSxHQUFHQSxZQUFZO0lBQ25DaW9CLE9BQU8sQ0FBQzVuQixVQUFVLEdBQUdBLFVBQVU7SUFDL0I0bkIsT0FBTyxDQUFDNXRCLEdBQUcsR0FBR0EsR0FBRztJQUNqQjR0QixPQUFPLENBQUNyRSxJQUFJLEdBQUdELFVBQVU7SUFDekJzRSxPQUFPLENBQUMxRSxTQUFTLEdBQUdVLGVBQWU7SUFDbkNnRSxPQUFPLENBQUNsUixlQUFlLEdBQUdxTixxQkFBcUI7SUFDL0M2RCxPQUFPLENBQUNuRCxhQUFhLEdBQUdBLGFBQWE7SUFDckNtRCxPQUFPLENBQUN2RCxhQUFhLEdBQUdBLGFBQWE7SUFDckN1RCxPQUFPLENBQUNqRCxlQUFlLEdBQUdBLGVBQWU7SUFDekNpRCxPQUFPLENBQUNoaUIsTUFBTSxHQUFHVSxZQUFZO0lBQzdCc2hCLE9BQU8sQ0FBQ2ppQixXQUFXLEdBQUdjLGlCQUFpQjtJQUN2Q21oQixPQUFPLENBQUM3aEIsV0FBVyxHQUFHb0IsaUJBQWlCO0lBQ3ZDeWdCLE9BQU8sQ0FBQzloQixXQUFXLEdBQUdBLFdBQVc7SUFDakM4aEIsT0FBTyxDQUFDL2hCLGdCQUFnQixHQUFHQSxnQkFBZ0I7SUFDM0MraEIsT0FBTyxDQUFDcmUsSUFBSSxHQUFHVyxVQUFVO0lBQ3pCMGQsT0FBTyxDQUFDQyxjQUFjLEdBQUd2ZCxvQkFBb0I7SUFDN0NzZCxPQUFPLENBQUNFLGNBQWMsR0FBR3pkLG9CQUFvQjtJQUM3Q3VkLE9BQU8sQ0FBQ2hkLFFBQVEsR0FBR2dCLGNBQWM7SUFDakNnYyxPQUFPLENBQUNsZCxXQUFXLEdBQUd1QixpQkFBaUI7SUFDdkMyYixPQUFPLENBQUNqZCxhQUFhLEdBQUdvQixtQkFBbUI7SUFDM0M2YixPQUFPLENBQUM1YyxhQUFhLEdBQUd3QixtQkFBbUI7SUFDM0NvYixPQUFPLENBQUM3YyxhQUFhLEdBQUdBLGFBQWE7SUFDckM2YyxPQUFPLENBQUM5YyxrQkFBa0IsR0FBR0Esa0JBQWtCO0lBQy9DOGMsT0FBTyxDQUFDL2MsZ0JBQWdCLEdBQUdBLGdCQUFnQjtJQUMzQytjLE9BQU8sQ0FBQ3haLElBQUksR0FBR0ssVUFBVTtJQUN6Qm1aLE9BQU8sQ0FBQ3p4QixRQUFRLEdBQUcwWSxjQUFjO0lBQ2pDd0Isa0JBQWtCLENBQUMsSUFBSSxFQUFFO01BQ3JCa1QsSUFBSSxFQUFFLENBQ0Y7UUFDSUUsS0FBSyxFQUFFLFlBQVk7UUFDbkJDLEtBQUssRUFBRUMsUUFBUTtRQUNmcEosTUFBTSxFQUFFLENBQUM7UUFDVGxwQixJQUFJLEVBQUUsYUFBYTtRQUNuQnl5QixNQUFNLEVBQUUsSUFBSTtRQUNacFQsSUFBSSxFQUFFO01BQ1YsQ0FBQyxFQUNEO1FBQ0krUyxLQUFLLEVBQUUsWUFBWTtRQUNuQkMsS0FBSyxFQUFFLENBQUNDLFFBQVE7UUFDaEJwSixNQUFNLEVBQUUsQ0FBQztRQUNUbHBCLElBQUksRUFBRSxlQUFlO1FBQ3JCeXlCLE1BQU0sRUFBRSxJQUFJO1FBQ1pwVCxJQUFJLEVBQUU7TUFDVixDQUFDLENBQ0o7TUFDRHhCLHNCQUFzQixFQUFFLHNCQUFzQjtNQUM5Q3BTLE9BQU8sRUFBRSxTQUFBQSxRQUFVckIsTUFBTSxFQUFFO1FBQ3ZCLElBQUlwTCxDQUFDLEdBQUdvTCxNQUFNLEdBQUcsRUFBRTtVQUNmSCxNQUFNLEdBQ0ZvRyxLQUFLLENBQUVqRyxNQUFNLEdBQUcsR0FBRyxHQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FDMUIsSUFBSSxHQUNKcEwsQ0FBQyxLQUFLLENBQUMsR0FDUCxJQUFJLEdBQ0pBLENBQUMsS0FBSyxDQUFDLEdBQ1AsSUFBSSxHQUNKQSxDQUFDLEtBQUssQ0FBQyxHQUNQLElBQUksR0FDSixJQUFJO1FBQ2xCLE9BQU9vTCxNQUFNLEdBQUdILE1BQU07TUFDMUI7SUFDSixDQUFDLENBQUM7SUFDRi9ILEtBQUssQ0FBQ291QixJQUFJLEdBQUd4b0IsU0FBUyxDQUNsQix1REFBdUQsRUFDdkRrWCxrQkFDSixDQUFDO0lBQ0Q5YyxLQUFLLENBQUNzMUIsUUFBUSxHQUFHMXZCLFNBQVMsQ0FDdEIsK0RBQStELEVBQy9EcVgsU0FDSixDQUFDO0lBQ0RzWSxPQUFPLEdBQUdqdEIsSUFBSSxDQUFDQyxHQUFHO0lBQ2xCNnRCLGNBQWMsR0FBR0YsTUFBTSxDQUFDLElBQUksQ0FBQztJQUM3QkcsU0FBUyxHQUFHSCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ3ZCSSxTQUFTLEdBQUdKLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDdkJLLE9BQU8sR0FBR0wsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNyQk0sTUFBTSxHQUFHTixNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ3BCTyxPQUFPLEdBQUdQLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDckJRLFFBQVEsR0FBR1IsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUN0QlMsVUFBVSxHQUFHVCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ3hCVSxPQUFPLEdBQUdWLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDckJ6TSxZQUFZLEdBQUdzTixVQUFVLENBQUMsY0FBYyxDQUFDO0lBQ3pDeGMsT0FBTyxHQUFHd2MsVUFBVSxDQUFDLFNBQVMsQ0FBQztJQUMvQnpjLE9BQU8sR0FBR3ljLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDL0IzYyxLQUFLLEdBQUcyYyxVQUFVLENBQUMsT0FBTyxDQUFDO0lBQzNCcEQsSUFBSSxHQUFHb0QsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUN6QjFrQixNQUFNLEdBQUcwa0IsVUFBVSxDQUFDLFFBQVEsQ0FBQztJQUM3QjdILEtBQUssR0FBRzZILFVBQVUsQ0FBQyxPQUFPLENBQUM7SUFDM0J0USxLQUFLLEdBQUduZSxJQUFJLENBQUNtZSxLQUFLO0lBQ2xCdVEsVUFBVSxHQUFHO01BQ1R4ckIsRUFBRSxFQUFFLEVBQUU7TUFFTjNNLENBQUMsRUFBRSxFQUFFO01BRUxtRSxDQUFDLEVBQUUsRUFBRTtNQUVMMEksQ0FBQyxFQUFFLEVBQUU7TUFFTEUsQ0FBQyxFQUFFLEVBQUU7TUFFTEUsQ0FBQyxFQUFFLElBQUk7TUFFUEUsQ0FBQyxFQUFFO0lBRVAsQ0FBQztJQUNEK3JCLEtBQUssR0FBR3p2QixJQUFJLENBQUNDLEdBQUc7SUFDaEJpd0IsT0FBTyxHQUFHaFQsUUFBUSxDQUFDbHBCLFNBQVM7SUFDNUJrOEIsT0FBTyxDQUFDbDFCLE9BQU8sR0FBRytoQixTQUFTO0lBQzNCbVQsT0FBTyxDQUFDandCLEdBQUcsR0FBR0EsR0FBRztJQUNqQml3QixPQUFPLENBQUN2aEIsR0FBRyxHQUFHd2UsS0FBSztJQUNuQitDLE9BQU8sQ0FBQzlQLFFBQVEsR0FBR2dOLFVBQVU7SUFDN0I4QyxPQUFPLENBQUN4QyxFQUFFLEdBQUdBLEVBQUU7SUFDZndDLE9BQU8sQ0FBQ3BDLGNBQWMsR0FBR0EsY0FBYztJQUN2Q29DLE9BQU8sQ0FBQ25DLFNBQVMsR0FBR0EsU0FBUztJQUM3Qm1DLE9BQU8sQ0FBQ2xDLFNBQVMsR0FBR0EsU0FBUztJQUM3QmtDLE9BQU8sQ0FBQ2pDLE9BQU8sR0FBR0EsT0FBTztJQUN6QmlDLE9BQU8sQ0FBQ2hDLE1BQU0sR0FBR0EsTUFBTTtJQUN2QmdDLE9BQU8sQ0FBQy9CLE9BQU8sR0FBR0EsT0FBTztJQUN6QitCLE9BQU8sQ0FBQzlCLFFBQVEsR0FBR0EsUUFBUTtJQUMzQjhCLE9BQU8sQ0FBQzdCLFVBQVUsR0FBR0EsVUFBVTtJQUMvQjZCLE9BQU8sQ0FBQzVCLE9BQU8sR0FBR0EsT0FBTztJQUN6QjRCLE9BQU8sQ0FBQ2ozQixPQUFPLEdBQUcwMEIsU0FBUztJQUMzQnVDLE9BQU8sQ0FBQ2xTLE9BQU8sR0FBR3NQLE1BQU07SUFDeEI0QyxPQUFPLENBQUM1USxLQUFLLEdBQUdpUCxPQUFPO0lBQ3ZCMkIsT0FBTyxDQUFDNTdCLEdBQUcsR0FBR2s2QixLQUFLO0lBQ25CMEIsT0FBTyxDQUFDL08sWUFBWSxHQUFHQSxZQUFZO0lBQ25DK08sT0FBTyxDQUFDamUsT0FBTyxHQUFHQSxPQUFPO0lBQ3pCaWUsT0FBTyxDQUFDbGUsT0FBTyxHQUFHQSxPQUFPO0lBQ3pCa2UsT0FBTyxDQUFDcGUsS0FBSyxHQUFHQSxLQUFLO0lBQ3JCb2UsT0FBTyxDQUFDN0UsSUFBSSxHQUFHQSxJQUFJO0lBQ25CNkUsT0FBTyxDQUFDbEYsS0FBSyxHQUFHQSxLQUFLO0lBQ3JCa0YsT0FBTyxDQUFDbm1CLE1BQU0sR0FBR0EsTUFBTTtJQUN2Qm1tQixPQUFPLENBQUN0SixLQUFLLEdBQUdBLEtBQUs7SUFDckJzSixPQUFPLENBQUN4SyxRQUFRLEdBQUdBLFFBQVE7SUFDM0J3SyxPQUFPLENBQUNsTCxXQUFXLEdBQUcySyxhQUFhO0lBQ25DTyxPQUFPLENBQUNsNEIsUUFBUSxHQUFHMjNCLGFBQWE7SUFDaENPLE9BQU8sQ0FBQ3JKLE1BQU0sR0FBRzhJLGFBQWE7SUFDOUJPLE9BQU8sQ0FBQ25MLE1BQU0sR0FBR0EsTUFBTTtJQUN2Qm1MLE9BQU8sQ0FBQ2x2QixVQUFVLEdBQUdBLFVBQVU7SUFDL0JrdkIsT0FBTyxDQUFDQyxXQUFXLEdBQUc3eUIsU0FBUyxDQUMzQixxRkFBcUYsRUFDckZxeUIsYUFDSixDQUFDO0lBQ0RPLE9BQU8sQ0FBQ3BLLElBQUksR0FBR0EsSUFBSTtJQUNuQm5sQixjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDO0lBQ2pDQSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDO0lBQ3BDa0gsYUFBYSxDQUFDLEdBQUcsRUFBRU4sV0FBVyxDQUFDO0lBQy9CTSxhQUFhLENBQUMsR0FBRyxFQUFFSCxjQUFjLENBQUM7SUFDbENpQixhQUFhLENBQUMsR0FBRyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7TUFDL0NBLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBRyxJQUFJNUMsSUFBSSxDQUFDb2tCLFVBQVUsQ0FBQ2hsQixLQUFLLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDakQsQ0FBQyxDQUFDO0lBQ0Y2USxhQUFhLENBQUMsR0FBRyxFQUFFLFVBQVU3USxLQUFLLEVBQUV3SixLQUFLLEVBQUV2RSxNQUFNLEVBQUU7TUFDL0NBLE1BQU0sQ0FBQ3pCLEVBQUUsR0FBRyxJQUFJNUMsSUFBSSxDQUFDbU4sS0FBSyxDQUFDL04sS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDO0lBQ0ZKLEtBQUssQ0FBQzA0QixPQUFPLEdBQUcsUUFBUTtJQUN4Qno0QixlQUFlLENBQUN5aUIsV0FBVyxDQUFDO0lBQzVCMWlCLEtBQUssQ0FBQzVDLEVBQUUsR0FBRzYxQixLQUFLO0lBQ2hCanpCLEtBQUssQ0FBQ2dVLEdBQUcsR0FBR0EsR0FBRztJQUNmaFUsS0FBSyxDQUFDMkksR0FBRyxHQUFHQSxHQUFHO0lBQ2YzSSxLQUFLLENBQUN1aEIsR0FBRyxHQUFHQSxHQUFHO0lBQ2Z2aEIsS0FBSyxDQUFDNkIsR0FBRyxHQUFHTCxTQUFTO0lBQ3JCeEIsS0FBSyxDQUFDZ3ZCLElBQUksR0FBR2tGLFVBQVU7SUFDdkJsMEIsS0FBSyxDQUFDcVMsTUFBTSxHQUFHNGlCLFVBQVU7SUFDekJqMUIsS0FBSyxDQUFDZSxNQUFNLEdBQUdBLE1BQU07SUFDckJmLEtBQUssQ0FBQ3F0QixNQUFNLEdBQUd2USxrQkFBa0I7SUFDakM5YyxLQUFLLENBQUM0cEIsT0FBTyxHQUFHMWxCLGFBQWE7SUFDN0JsRSxLQUFLLENBQUN5bEIsUUFBUSxHQUFHRixjQUFjO0lBQy9CdmxCLEtBQUssQ0FBQ3VGLFFBQVEsR0FBR0EsUUFBUTtJQUN6QnZGLEtBQUssQ0FBQ3FYLFFBQVEsR0FBRzhkLFlBQVk7SUFDN0JuMUIsS0FBSyxDQUFDNHpCLFNBQVMsR0FBR08sWUFBWTtJQUM5Qm4wQixLQUFLLENBQUNzSixVQUFVLEdBQUcyVCxTQUFTO0lBQzVCamQsS0FBSyxDQUFDdW1CLFVBQVUsR0FBR0EsVUFBVTtJQUM3QnZtQixLQUFLLENBQUNvUyxXQUFXLEdBQUc4aUIsZUFBZTtJQUNuQ2wxQixLQUFLLENBQUNtWCxXQUFXLEdBQUdrZSxlQUFlO0lBQ25DcjFCLEtBQUssQ0FBQ2tkLFlBQVksR0FBR0EsWUFBWTtJQUNqQ2xkLEtBQUssQ0FBQ3NkLFlBQVksR0FBR0EsWUFBWTtJQUNqQ3RkLEtBQUssQ0FBQzZiLE9BQU8sR0FBRzJCLFdBQVc7SUFDM0J4ZCxLQUFLLENBQUNvWCxhQUFhLEdBQUdnZSxpQkFBaUI7SUFDdkNwMUIsS0FBSyxDQUFDaU4sY0FBYyxHQUFHQSxjQUFjO0lBQ3JDak4sS0FBSyxDQUFDMjRCLG9CQUFvQixHQUFHdEIsMEJBQTBCO0lBQ3ZEcjNCLEtBQUssQ0FBQzQ0QixxQkFBcUIsR0FBR3JCLDJCQUEyQjtJQUN6RHYzQixLQUFLLENBQUMrckIsY0FBYyxHQUFHUixpQkFBaUI7SUFDeEN2ckIsS0FBSyxDQUFDMUQsU0FBUyxHQUFHMjJCLEtBQUs7SUFDdkJqekIsS0FBSyxDQUFDNjRCLFNBQVMsR0FBRztNQUNkQyxjQUFjLEVBQUUsa0JBQWtCO01BRWxDQyxzQkFBc0IsRUFBRSxxQkFBcUI7TUFFN0NDLGlCQUFpQixFQUFFLHlCQUF5QjtNQUU1Q3RuQixJQUFJLEVBQUUsWUFBWTtNQUVsQnVuQixJQUFJLEVBQUUsT0FBTztNQUViQyxZQUFZLEVBQUUsVUFBVTtNQUV4QkMsT0FBTyxFQUFFLGNBQWM7TUFFdkJwbkIsSUFBSSxFQUFFLFlBQVk7TUFFbEJOLEtBQUssRUFBRTtJQUVYLENBQUM7SUFDRGxTLGNBQWMsR0FBR1MsS0FBSztFQUMxQjtBQUNKLENBQUMsQ0FBQztBQUVGLElBQUlzNUIsY0FBYyxHQUFHLENBQUMsQ0FBQztBQUN2QjM3QixRQUFRLENBQUMyN0IsY0FBYyxFQUFFO0VBQ3JCLFdBQVMsU0FBQUMsU0FBQTtJQUFBLE9BQU1ELGNBQWM7RUFBQTtBQUNqQyxDQUFDLENBQUM7QUFFRixJQUFJRSxvQkFBb0IsR0FBR2o4QixVQUFVLENBQUM7RUFDbEMsR0FBRyxXQUFBazhCLEVBQUN2OEIsT0FBTyxFQUFFdzhCLE9BQU8sRUFBRTtJQUNsQjtJQUFDLENBQUMsVUFBVUMsSUFBSSxFQUFFaDZCLE9BQU8sRUFBRTtNQUN2QixJQUFJLE9BQU9DLE1BQU0sS0FBSyxVQUFVLElBQUlBLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFO1FBQzVDRCxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVRSxNQUFNLEVBQUU7VUFDakM2NUIsSUFBSSxDQUFDNzVCLE1BQU0sR0FBR0gsT0FBTyxDQUFDRyxNQUFNLENBQUM7VUFDN0IsT0FBTzY1QixJQUFJLENBQUM3NUIsTUFBTTtRQUN0QixDQUFDLENBQUM7TUFDTixDQUFDLE1BQU0sSUFBSXpCLE9BQUEsQ0FBT25CLE9BQU8sTUFBSyxRQUFRLEVBQUU7UUFDcEN3OEIsT0FBTyxDQUFDeDhCLE9BQU8sR0FBR3lDLE9BQU8sRUFDcEJKLGNBQWMsQ0FBQyxDQUFDLEVBQUVELFlBQVksQ0FBQ2c2QixjQUFjLENBQUMsQ0FDbkQsQ0FBQztNQUNMLENBQUMsTUFBTTtRQUNISyxJQUFJLENBQUM3NUIsTUFBTSxHQUFHSCxPQUFPLENBQUNnNkIsSUFBSSxDQUFDNzVCLE1BQU0sQ0FBQztNQUN0QztJQUNKLENBQUMsRUFBRTVDLE9BQU8sRUFBRSxVQUFVNEMsTUFBTSxFQUFFO01BQzFCLElBQUlBLE1BQU0sSUFBSSxJQUFJLEVBQUU7UUFDaEIsTUFBTSxJQUFJN0MsS0FBSyxDQUFDLG9CQUFvQixDQUFDO01BQ3pDO01BQ0EsSUFBSTZDLE1BQU0sR0FBR1AsY0FBYyxDQUFDTyxNQUFNLENBQUM7TUFDbkMsSUFBSTg1QixTQUFTLEdBQUc7UUFDWkMsYUFBYSxFQUFFLENBQ1gsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFDckQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFDdEQsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVB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