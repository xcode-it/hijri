{"version":3,"file":"index.js","sources":["../hijri-src/index.js","../hijri-src/utils/constants.js","../hijri-src/utils/helpers.js"],"sourcesContent":["// hijri.js\n// author: Ahmed Sulaimani\n// This is a modified version of moment-jalaali by Behrang Noruzi Niya and extends Suhail Alkowaileet's work on moment-hijri.js lib\n// license: MIT\n\n'use strict'\n\n/************************************\n    Expose Moment Hijri\n************************************/\n\n// import moment from 'moment'\n\nimport { ummalqura } from './utils/constants'\nimport {\n    extend,\n    leftZeroFill,\n    isArray,\n    normalizeUnits,\n    setDate,\n    objectCreate,\n    getPrototypeOf\n} from './utils/helpers'\n;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['moment'], function (moment) {\n            root = factory(moment)\n            return factory(moment)\n        })\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('moment'))\n    } else {\n        root.moment = factory(root.moment)\n    }\n})(null, function (moment) {\n    if (moment == null) {\n        throw new Error('Cannot find moment')\n    }\n\n    var formattingTokens =\n            /(\\[[^\\[]*\\])|(\\\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        parseTokenOneOrTwoDigits = /\\d\\d?/,\n        parseTokenOneToThreeDigits = /\\d{1,3}/,\n        parseTokenThreeDigits = /\\d{3}/,\n        parseTokenFourDigits = /\\d{1,4}/,\n        parseTokenSixDigits = /[+\\-]?\\d{1,6}/,\n        parseTokenWord =\n            /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.?)|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i,\n        parseTokenT = /T/i,\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/,\n        unitAliases = {\n            hd: 'idate',\n            hm: 'imonth',\n            hy: 'iyear'\n        },\n        formatFunctions = {},\n        ordinalizeTokens = 'DDD w M D'.split(' '),\n        paddedTokens = 'M D w'.split(' '),\n        formatTokenFunctions = {\n            iM: function () {\n                return this.iMonth() + 1\n            },\n            iMMM: function (format) {\n                return this.localeData().iMonthsShort(this, format)\n            },\n            iMMMM: function (format) {\n                return this.localeData().iMonths(this, format)\n            },\n            iD: function () {\n                return this.iDate()\n            },\n            iDDD: function () {\n                return this.iDayOfYear()\n            },\n            iw: function () {\n                return this.iWeek()\n            },\n            iYY: function () {\n                return leftZeroFill(this.iYear() % 100, 2)\n            },\n            iYYYY: function () {\n                return leftZeroFill(this.iYear(), 4)\n            },\n            iYYYYY: function () {\n                return leftZeroFill(this.iYear(), 5)\n            },\n            igg: function () {\n                return leftZeroFill(this.iWeekYear() % 100, 2)\n            },\n            igggg: function () {\n                return this.iWeekYear()\n            },\n            iggggg: function () {\n                return leftZeroFill(this.iWeekYear(), 5)\n            }\n        },\n        i\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count)\n        }\n    }\n\n    function ordinalizeToken(func, period) {\n        return function (a) {\n            return this.localeData().ordinal(func.call(this, a), period)\n        }\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop()\n        formatTokenFunctions['i' + i + 'o'] = ordinalizeToken(\n            formatTokenFunctions['i' + i],\n            i\n        )\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop()\n        formatTokenFunctions['i' + i + i] = padToken(\n            formatTokenFunctions['i' + i],\n            2\n        )\n    }\n    formatTokenFunctions.iDDDD = padToken(formatTokenFunctions.iDDD, 3)\n    /************************************\n          Languages\n      ************************************/\n    extend(getPrototypeOf(moment.localeData()), {\n        _iMonths: [\n            'Muharram',\n            'Safar',\n            \"Rabi' al-Awwal\",\n            \"Rabi' al-Thani\",\n            'Jumada al-Ula',\n            'Jumada al-Alkhirah',\n            'Rajab',\n            'Sha’ban',\n            'Ramadhan',\n            'Shawwal',\n            'Thul-Qi’dah',\n            'Thul-Hijjah'\n        ],\n        iMonths: function (m) {\n            return this._iMonths[m.iMonth()]\n        },\n\n        _iMonthsShort: [\n            'Muh',\n            'Saf',\n            'Rab-I',\n            'Rab-II',\n            'Jum-I',\n            'Jum-II',\n            'Raj',\n            'Sha',\n            'Ram',\n            'Shw',\n            'Dhu-Q',\n            'Dhu-H'\n        ],\n        iMonthsShort: function (m) {\n            return this._iMonthsShort[m.iMonth()]\n        },\n\n        iMonthsParse: function (monthName) {\n            var i, mom, regex\n            if (!this._iMonthsParse) this._iMonthsParse = []\n            for (i = 0; i < 12; i += 1) {\n                // Make the regex if we don't have it already.\n                if (!this._iMonthsParse[i]) {\n                    mom = hMoment([2000, (2 + i) % 12, 25])\n                    regex =\n                        '^' +\n                        this.iMonths(mom, '') +\n                        '$|^' +\n                        this.iMonthsShort(mom, '') +\n                        '$'\n                    this._iMonthsParse[i] = new RegExp(\n                        regex.replace('.', ''),\n                        'i'\n                    )\n                }\n                // Test the regex.\n                if (this._iMonthsParse[i].test(monthName)) return i\n            }\n        }\n    })\n    const iMonthNames = {\n        iMonths:\n            'محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأولى_جمادى الآخرة_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split(\n                '_'\n            ),\n        iMonthsShort:\n            'محرم_صفر_ربيع ١_ربيع ٢_جمادى ١_جمادى ٢_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split(\n                '_'\n            )\n    }\n\n    // Default to the momentjs 2.12+ API\n    if (typeof moment.updateLocale === 'function') {\n        moment.updateLocale('ar-sa', iMonthNames)\n    } else {\n        var oldLocale = moment.locale()\n        moment.defineLocale('ar-sa', iMonthNames)\n        moment.locale(oldLocale)\n    }\n\n    /************************************\n          Formatting\n      ************************************/\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            length = array.length,\n            i\n\n        for (i = 0; i < length; i += 1)\n            if (formatTokenFunctions[array[i]])\n                array[i] = formatTokenFunctions[array[i]]\n\n        return function (mom) {\n            var output = ''\n            for (i = 0; i < length; i += 1)\n                output +=\n                    array[i] instanceof Function\n                        ? '[' + array[i].call(mom, format) + ']'\n                        : array[i]\n            return output\n        }\n    }\n\n    /************************************\n          Parsing\n      ************************************/\n\n    function getParseRegexForToken(token, config) {\n        switch (token) {\n            case 'iDDDD':\n                return parseTokenThreeDigits\n            case 'iYYYY':\n                return parseTokenFourDigits\n            case 'iYYYYY':\n                return parseTokenSixDigits\n            case 'iDDD':\n                return parseTokenOneToThreeDigits\n            case 'iMMM':\n            case 'iMMMM':\n                return parseTokenWord\n            case 'iMM':\n            case 'iDD':\n            case 'iYY':\n            case 'iM':\n            case 'iD':\n                return parseTokenOneOrTwoDigits\n            case 'DDDD':\n                return parseTokenThreeDigits\n            case 'YYYY':\n                return parseTokenFourDigits\n            case 'YYYYY':\n                return parseTokenSixDigits\n            case 'S':\n            case 'SS':\n            case 'SSS':\n            case 'DDD':\n                return parseTokenOneToThreeDigits\n            case 'MMM':\n            case 'MMMM':\n            case 'dd':\n            case 'ddd':\n            case 'dddd':\n                return parseTokenWord\n            case 'a':\n            case 'A':\n                return moment.localeData(config._l)._meridiemParse\n            case 'X':\n                return parseTokenTimestampMs\n            case 'Z':\n            case 'ZZ':\n                return parseTokenTimezone\n            case 'T':\n                return parseTokenT\n            case 'MM':\n            case 'DD':\n            case 'YY':\n            case 'HH':\n            case 'hh':\n            case 'mm':\n            case 'ss':\n            case 'M':\n            case 'D':\n            case 'd':\n            case 'H':\n            case 'h':\n            case 'm':\n            case 's':\n                return parseTokenOneOrTwoDigits\n            default:\n                return new RegExp(token.replace('\\\\', ''))\n        }\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        var a,\n            datePartArray = config._a\n\n        switch (token) {\n            case 'iM':\n            case 'iMM':\n                datePartArray[1] = input == null ? 0 : ~~input - 1\n                break\n            case 'iMMM':\n            case 'iMMMM':\n                a = moment.localeData(config._l).iMonthsParse(input)\n                if (a != null) datePartArray[1] = a\n                else config._isValid = false\n                break\n            case 'iD':\n            case 'iDD':\n            case 'iDDD':\n            case 'iDDDD':\n                if (input != null) datePartArray[2] = ~~input\n                break\n            case 'iYY':\n                datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400)\n                break\n            case 'iYYYY':\n            case 'iYYYYY':\n                datePartArray[0] = ~~input\n        }\n        if (input == null) config._isValid = false\n    }\n\n    function dateFromArray(config) {\n        var g,\n            h,\n            hy = config._a[0],\n            hm = config._a[1],\n            hd = config._a[2]\n\n        if (hy == null && hm == null && hd == null) return [0, 0, 1]\n        hy = hy || 0\n        hm = hm || 0\n        hd = hd || 1\n        if (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm)) config._isValid = false\n        g = toGregorian(hy, hm, hd)\n        h = toHijri(g.gy, g.gm, g.gd)\n        config._hDiff = 0\n        if (~~h.hy !== hy) config._hDiff += 1\n        if (~~h.hm !== hm) config._hDiff += 1\n        if (~~h.hd !== hd) config._hDiff += 1\n        return [g.gy, g.gm, g.gd]\n    }\n\n    function makeDateFromStringAndFormat(config) {\n        var tokens = config._f.match(formattingTokens),\n            string = config._i,\n            len = tokens.length,\n            i,\n            token,\n            parsedInput\n\n        config._a = []\n\n        for (i = 0; i < len; i += 1) {\n            token = tokens[i]\n            parsedInput = (getParseRegexForToken(token, config).exec(string) ||\n                [])[0]\n            if (parsedInput)\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                )\n            if (formatTokenFunctions[token])\n                addTimeToArrayFromToken(token, parsedInput, config)\n        }\n        if (string) config._il = string\n\n        return dateFromArray(config)\n    }\n\n    function makeDateFromStringAndArray(config, utc) {\n        var len = config._f.length,\n            i,\n            format,\n            tempMoment,\n            bestMoment,\n            currentScore,\n            scoreToBeat\n\n        if (len === 0) {\n            return makeMoment(new Date(NaN))\n        }\n\n        for (i = 0; i < len; i += 1) {\n            format = config._f[i]\n            currentScore = 0\n            tempMoment = makeMoment(config._i, format, config._l, utc)\n\n            if (!tempMoment.isValid()) continue\n\n            currentScore += tempMoment._hDiff\n            if (tempMoment._il) currentScore += tempMoment._il.length\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore\n                bestMoment = tempMoment\n            }\n        }\n\n        return bestMoment\n    }\n\n    function removeParsedTokens(config) {\n        var string = config._i,\n            input = '',\n            format = '',\n            array = config._f.match(formattingTokens),\n            len = array.length,\n            i,\n            match,\n            parsed\n\n        for (i = 0; i < len; i += 1) {\n            match = array[i]\n            parsed = (getParseRegexForToken(match, config).exec(string) ||\n                [])[0]\n            if (parsed)\n                string = string.slice(string.indexOf(parsed) + parsed.length)\n            if (!(formatTokenFunctions[match] instanceof Function)) {\n                format += match\n                if (parsed) input += parsed\n            }\n        }\n        config._i = input\n        config._f = format\n    }\n\n    /************************************\n          Week of Year\n      ************************************/\n\n    function iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n            adjustedMoment\n\n        if (daysToDayOfWeek > end) {\n            daysToDayOfWeek -= 7\n        }\n        if (daysToDayOfWeek < end - 7) {\n            daysToDayOfWeek += 7\n        }\n        adjustedMoment = hMoment(mom).add(daysToDayOfWeek, 'd')\n        return {\n            week: Math.ceil(adjustedMoment.iDayOfYear() / 7),\n            year: adjustedMoment.iYear()\n        }\n    }\n\n    /************************************\n          Top Level Functions\n      ************************************/\n\n    function makeMoment(input, format, lang, utc) {\n        var config = { _i: input, _f: format, _l: lang },\n            date,\n            m,\n            hm\n        if (format) {\n            if (isArray(format)) {\n                return makeDateFromStringAndArray(config, utc)\n            } else {\n                date = makeDateFromStringAndFormat(config)\n                removeParsedTokens(config)\n                format = 'YYYY-MM-DD-' + config._f\n                input =\n                    leftZeroFill(date[0], 4) +\n                    '-' +\n                    leftZeroFill(date[1] + 1, 2) +\n                    '-' +\n                    leftZeroFill(date[2], 2) +\n                    '-' +\n                    config._i\n            }\n        }\n        if (utc) m = moment.utc(input, format, lang)\n        else m = moment(input, format, lang)\n        if (config._isValid === false) m._isValid = false\n        m._hDiff = config._hDiff || 0\n        hm = objectCreate(hMoment.fn)\n        extend(hm, m)\n        return hm\n    }\n\n    function hMoment(input, format, lang) {\n        return makeMoment(input, format, lang, false)\n    }\n\n    extend(hMoment, moment)\n    hMoment.fn = objectCreate(moment.fn)\n\n    hMoment.utc = function (input, format, lang) {\n        return makeMoment(input, format, lang, true)\n    }\n\n    /************************************\n          hMoment Prototype\n      ************************************/\n\n    hMoment.fn.format = function (format) {\n        var i,\n            replace,\n            me = this\n\n        if (format) {\n            i = 5\n            replace = function (input) {\n                return me.localeData().longDateFormat(input) || input\n            }\n            while (i > 0 && localFormattingTokens.test(format)) {\n                i -= 1\n                format = format.replace(localFormattingTokens, replace)\n            }\n            if (!formatFunctions[format]) {\n                formatFunctions[format] = makeFormatFunction(format)\n            }\n            format = formatFunctions[format](this)\n        }\n        return moment.fn.format.call(this, format)\n    }\n\n    hMoment.fn.iYear = function (input) {\n        var lastDay, h, g\n        if (typeof input === 'number') {\n            h = toHijri(this.year(), this.month(), this.date())\n            lastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm))\n            g = toGregorian(input, h.hm, lastDay)\n            setDate(this, g.gy, g.gm, g.gd)\n            //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n            if (\n                this.month() !== g.gm ||\n                this.date() !== g.gd ||\n                this.year() !== g.gy\n            ) {\n                setDate(this, g.gy, g.gm, g.gd)\n            }\n            moment.updateOffset(this)\n            return this\n        } else {\n            return toHijri(this.year(), this.month(), this.date()).hy\n        }\n    }\n\n    hMoment.fn.iMonth = function (input) {\n        var lastDay, h, g\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = this.localeData().iMonthsParse(input)\n                if (input >= 0) {\n                    input -= 1\n                } else {\n                    return this\n                }\n            }\n            h = toHijri(this.year(), this.month(), this.date())\n            lastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input))\n            this.iYear(h.hy + div(input, 12))\n            input = mod(input, 12)\n            if (input < 0) {\n                input += 12\n                this.iYear(this.iYear() - 1)\n            }\n            g = toGregorian(this.iYear(), input, lastDay)\n            setDate(this, g.gy, g.gm, g.gd)\n            //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n            if (\n                this.month() !== g.gm ||\n                this.date() !== g.gd ||\n                this.year() !== g.gy\n            ) {\n                setDate(this, g.gy, g.gm, g.gd)\n            }\n            moment.updateOffset(this)\n            return this\n        } else {\n            return toHijri(this.year(), this.month(), this.date()).hm\n        }\n    }\n\n    hMoment.fn.iDate = function (input) {\n        var h, g\n        if (typeof input === 'number') {\n            h = toHijri(this.year(), this.month(), this.date())\n            g = toGregorian(h.hy, h.hm, input)\n            setDate(this, g.gy, g.gm, g.gd)\n            //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n            if (\n                this.month() !== g.gm ||\n                this.date() !== g.gd ||\n                this.year() !== g.gy\n            ) {\n                setDate(this, g.gy, g.gm, g.gd)\n            }\n            moment.updateOffset(this)\n            return this\n        } else {\n            return toHijri(this.year(), this.month(), this.date()).hd\n        }\n    }\n\n    hMoment.fn.iDayOfYear = function (input) {\n        var dayOfYear =\n            Math.round(\n                (hMoment(this).startOf('day') -\n                    hMoment(this).startOf('iYear')) /\n                    864e5\n            ) + 1\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd')\n    }\n\n    hMoment.fn.iDaysInMonth = function () {\n        return parseInt(hMoment(this).endOf('iMonth').format('iDD'))\n    }\n\n    hMoment.fn.iWeek = function (input) {\n        var week = iWeekOfYear(\n            this,\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        ).week\n        return input == null ? week : this.add((input - week) * 7, 'd')\n    }\n\n    hMoment.fn.iWeekYear = function (input) {\n        var year = iWeekOfYear(\n            this,\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        ).year\n        return input == null ? year : this.add(input - year, 'y')\n    }\n\n    hMoment.fn.add = function (val, units) {\n        var temp\n        if (units !== null && !isNaN(+units)) {\n            temp = val\n            val = units\n            units = temp\n        }\n        units = normalizeUnits(units)\n        if (units === 'iyear') {\n            this.iYear(this.iYear() + val)\n        } else if (units === 'imonth') {\n            this.iMonth(this.iMonth() + val)\n        } else if (units === 'idate') {\n            this.iDate(this.iDate() + val)\n        } else {\n            moment.fn.add.call(this, val, units)\n        }\n        return this\n    }\n\n    hMoment.fn.subtract = function (val, units) {\n        var temp\n        if (units !== null && !isNaN(+units)) {\n            temp = val\n            val = units\n            units = temp\n        }\n        units = normalizeUnits(units)\n        if (units === 'iyear') {\n            this.iYear(this.iYear() - val)\n        } else if (units === 'imonth') {\n            this.iMonth(this.iMonth() - val)\n        } else if (units === 'idate') {\n            this.iDate(this.iDate() - val)\n        } else {\n            moment.fn.subtract.call(this, val, units)\n        }\n        return this\n    }\n\n    hMoment.fn.startOf = function (units) {\n        units = normalizeUnits(units)\n        if (units === 'iyear' || units === 'imonth') {\n            if (units === 'iyear') {\n                this.iMonth(0)\n            }\n            this.iDate(1)\n            this.hours(0)\n            this.minutes(0)\n            this.seconds(0)\n            this.milliseconds(0)\n            return this\n        } else {\n            return moment.fn.startOf.call(this, units)\n        }\n    }\n\n    hMoment.fn.endOf = function (units) {\n        units = normalizeUnits(units)\n        if (units === undefined || units === 'milisecond') {\n            return this\n        }\n        return this.startOf(units)\n            .add(1, units === 'isoweek' ? 'week' : units)\n            .subtract(1, 'milliseconds')\n    }\n\n    hMoment.fn.clone = function () {\n        return hMoment(this)\n    }\n\n    hMoment.fn.iYears = hMoment.fn.iYear\n    hMoment.fn.iMonths = hMoment.fn.iMonth\n    hMoment.fn.iDates = hMoment.fn.iDate\n    hMoment.fn.iWeeks = hMoment.fn.iWeek\n\n    /************************************\n          hMoment Statics\n      ************************************/\n\n    hMoment.iDaysInMonth = function (year, month) {\n        var i = getNewMoonMJDNIndex(year, month + 1),\n            daysInMonth =\n                ummalqura.ummalquraData[i] - ummalqura.ummalquraData[i - 1]\n        return daysInMonth\n    }\n\n    function toHijri(gy, gm, gd) {\n        var h = d2h(g2d(gy, gm + 1, gd))\n        h.hm -= 1\n        return h\n    }\n\n    function toGregorian(hy, hm, hd) {\n        var g = d2g(h2d(hy, hm + 1, hd))\n        g.gm -= 1\n        return g\n    }\n\n    hMoment.iConvert = {\n        toHijri: toHijri,\n        toGregorian: toGregorian\n    }\n\n    return hMoment\n\n    /************************************\n          Hijri Conversion\n      ************************************/\n\n    /*\n        Utility helper functions.\n      */\n\n    function div(a, b) {\n        return ~~(a / b)\n    }\n\n    function mod(a, b) {\n        return a - ~~(a / b) * b\n    }\n\n    /*\n        Converts a date of the Hijri calendar to the Julian Day number.\n\n        @param hy Hijri year (1356 to 1500)\n        @param hm Hijri month (1 to 12)\n        @param hd Hijri day (1 to 29/30)\n        @return Julian Day number\n      */\n\n    function h2d(hy, hm, hd) {\n        var i = getNewMoonMJDNIndex(hy, hm),\n            mjdn = hd + ummalqura.ummalquraData[i - 1] - 1,\n            jdn = mjdn + 2400000\n        return jdn\n    }\n\n    /*\n        Converts the Julian Day number to a date in the Hijri calendar.\n\n        @param jdn Julian Day number\n        @return\n          hy: Hijri year (1356 to 1500)\n          hm: Hijri month (1 to 12)\n          hd: Hijri day (1 to 29/30)\n      */\n\n    function d2h(jdn) {\n        var mjdn = jdn - 2400000,\n            i = getNewMoonMJDNIndexByJDN(mjdn),\n            totalMonths = i + 16260,\n            cYears = Math.floor((totalMonths - 1) / 12),\n            hy = cYears + 1,\n            hm = totalMonths - 12 * cYears,\n            hd = mjdn - ummalqura.ummalquraData[i - 1] + 1\n\n        return {\n            hy: hy,\n            hm: hm,\n            hd: hd\n        }\n    }\n\n    /*\n        Calculates the Julian Day number from Gregorian or Julian\n        calendar dates. This integer number corresponds to the noon of\n        the date (i.e. 12 hours of Universal Time).\n        The procedure was tested to be good since 1 March, -100100 (of both\n        calendars) up to a few million years into the future.\n\n        @param gy Calendar year (years BC numbered 0, -1, -2, ...)\n        @param gm Calendar month (1 to 12)\n        @param gd Calendar day of the month (1 to 28/29/30/31)\n        @return Julian Day number\n      */\n\n    function g2d(gy, gm, gd) {\n        var d =\n            div((gy + div(gm - 8, 6) + 100100) * 1461, 4) +\n            div(153 * mod(gm + 9, 12) + 2, 5) +\n            gd -\n            34840408\n        d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752\n        return d\n    }\n\n    /*\n        Calculates Gregorian and Julian calendar dates from the Julian Day number\n        (hdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n        calendars) to some millions years ahead of the present.\n\n        @param jdn Julian Day number\n        @return\n          gy: Calendar year (years BC numbered 0, -1, -2, ...)\n          gm: Calendar month (1 to 12)\n          gd: Calendar day of the month M (1 to 28/29/30/31)\n      */\n\n    function d2g(jdn) {\n        var j, i, gd, gm, gy\n        j = 4 * jdn + 139361631\n        j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908\n        i = div(mod(j, 1461), 4) * 5 + 308\n        gd = div(mod(i, 153), 5) + 1\n        gm = mod(div(i, 153), 12) + 1\n        gy = div(j, 1461) - 100100 + div(8 - gm, 6)\n        return {\n            gy: gy,\n            gm: gm,\n            gd: gd\n        }\n    }\n\n    /*\n        Returns the index of the modified Julian day number of the new moon\n        by the given year and month\n\n        @param hy: Hijri year (1356 to 1500)\n        @param hm: Hijri month (1 to 12)\n        @return\n            i: the index of the new moon in modified Julian day number.\n      */\n    function getNewMoonMJDNIndex(hy, hm) {\n        var cYears = hy - 1,\n            totalMonths = cYears * 12 + 1 + (hm - 1),\n            i = totalMonths - 16260\n        return i\n    }\n\n    /*\n        Returns the nearest new moon\n\n        @param jdn Julian Day number\n        @return\n          i: the index of a modified Julian day number.\n      */\n    function getNewMoonMJDNIndexByJDN(mjdn) {\n        for (var i = 0; i < ummalqura.ummalquraData.length; i = i + 1) {\n            if (ummalqura.ummalquraData[i] > mjdn) return i\n        }\n    }\n\n    // return iMonthNames\n})\n\n// export default require_moment_hijri()\n\n// export default test\n","/************************************\n      Constants\n  ************************************/\n\nexport const ummalqura = {\n    ummalquraData: [\n        28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872,\n        28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,\n        29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463,\n        29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,\n        29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053,\n        30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,\n        30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644,\n        30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,\n        30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234,\n        31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,\n        31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825,\n        31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,\n        32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416,\n        32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,\n        32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006,\n        33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,\n        33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598,\n        33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,\n        33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187,\n        34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,\n        34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778,\n        34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,\n        35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370,\n        35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,\n        35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960,\n        35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,\n        36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551,\n        36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,\n        36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141,\n        37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,\n        37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731,\n        37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,\n        38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322,\n        38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,\n        38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912,\n        38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,\n        39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503,\n        39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,\n        39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094,\n        40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,\n        40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685,\n        40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,\n        41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275,\n        41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,\n        41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865,\n        41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,\n        42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456,\n        42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,\n        42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046,\n        43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,\n        43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637,\n        43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,\n        43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228,\n        44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,\n        44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818,\n        44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,\n        45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409,\n        45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,\n        45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999,\n        46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,\n        46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590,\n        46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,\n        46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181,\n        47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,\n        47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771,\n        47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,\n        48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362,\n        48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,\n        48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952,\n        48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,\n        49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543,\n        49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,\n        49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133,\n        50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,\n        50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724,\n        50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,\n        51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315,\n        51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,\n        51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906,\n        51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,\n        52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497,\n        52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,\n        52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087,\n        53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,\n        53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678,\n        53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,\n        54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268,\n        54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,\n        54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859,\n        54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,\n        55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450,\n        55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,\n        55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040,\n        56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,\n        56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631,\n        56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,\n        56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221,\n        57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,\n        57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813,\n        57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,\n        58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402,\n        58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,\n        58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994,\n        59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,\n        59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584,\n        59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,\n        59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174,\n        60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,\n        60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765,\n        60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,\n        61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356,\n        61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,\n        61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947,\n        61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,\n        62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537,\n        62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,\n        62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128,\n        63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,\n        63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718,\n        63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,\n        64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309,\n        64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,\n        64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899,\n        64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,\n        65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490,\n        65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,\n        65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081,\n        66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,\n        66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671,\n        66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,\n        66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262,\n        67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,\n        67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852,\n        67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,\n        68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443,\n        68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,\n        68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034,\n        69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,\n        69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624,\n        69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,\n        69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215,\n        70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,\n        70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805,\n        70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,\n        71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397,\n        71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,\n        71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986,\n        72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,\n        72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577,\n        72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,\n        72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168,\n        73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,\n        73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758,\n        73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,\n        74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349,\n        74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,\n        74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940,\n        74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,\n        75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531,\n        75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,\n        75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121,\n        76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,\n        76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712,\n        76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,\n        77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302,\n        77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,\n        77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893,\n        77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,\n        78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483,\n        78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,\n        78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074,\n        79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,\n        79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665,\n        79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,\n        79990\n    ]\n}\n","/************************************\n      Helpers\n  ************************************/\n\nexport function extend(a, b) {\n    var key\n    for (key in b) if (b.hasOwnProperty(key)) a[key] = b[key]\n    return a\n}\n\nexport function leftZeroFill(number, targetLength) {\n    var output = number + ''\n    while (output.length < targetLength) output = '0' + output\n    return output\n}\n\nexport function isArray(input) {\n    return Object.prototype.toString.call(input) === '[object Array]'\n}\n\nexport function normalizeUnits(units) {\n    return units\n        ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1')\n        : units\n}\n\nexport function setDate(moment, year, month, date) {\n    var utc = moment._isUTC ? 'UTC' : ''\n    moment._d['set' + utc + 'FullYear'](year)\n    moment._d['set' + utc + 'Month'](month)\n    moment._d['set' + utc + 'Date'](date)\n}\n\nexport function objectCreate(parent) {\n    function F() {}\n    F.prototype = parent\n    return new F()\n}\n\nexport function getPrototypeOf(object) {\n    if (Object.getPrototypeOf) return Object.getPrototypeOf(object)\n    else if (''.__proto__)\n        // jshint ignore:line\n        return object.__proto__ // jshint ignore:line\n    else return object.constructor.prototype\n}\n"],"names":["root","factory","ummalqura","extend","a","b","key","hasOwnProperty","leftZeroFill","number","targetLength","output","length","normalizeUnits","units","unitAliases","toLowerCase","replace","setDate","moment","year","month","date","utc","_isUTC","_d","objectCreate","parent","F","prototype","Error","i","object","formattingTokens","localFormattingTokens","parseTokenOneOrTwoDigits","parseTokenOneToThreeDigits","parseTokenThreeDigits","parseTokenFourDigits","parseTokenSixDigits","parseTokenWord","parseTokenTimezone","parseTokenT","parseTokenTimestampMs","formatFunctions","ordinalizeTokens","split","paddedTokens","formatTokenFunctions","iM","iMonth","iMMM","format","localeData","iMonthsShort","this","iMMMM","iMonths","iD","iDate","iDDD","iDayOfYear","iw","iWeek","iYY","iYear","iYYYY","iYYYYY","igg","iWeekYear","igggg","iggggg","padToken","func","count","call","ordinalizeToken","period","ordinal","pop","iDDDD","Object","getPrototypeOf","__proto__","constructor","_iMonths","m","_iMonthsShort","iMonthsParse","monthName","mom","regex","_iMonthsParse","hMoment","RegExp","test","iMonthNames","updateLocale","oldLocale","locale","defineLocale","getParseRegexForToken","token","config","_l","_meridiemParse","addTimeToArrayFromToken","input","datePartArray","_a","_isValid","iWeekOfYear","firstDayOfWeek","firstDayOfWeekOfYear","adjustedMoment","end","daysToDayOfWeek","day","add","week","Math","ceil","makeMoment","lang","hm","_i","_f","toString","isArray","tempMoment","bestMoment","currentScore","scoreToBeat","len","Date","NaN","isValid","_hDiff","_il","makeDateFromStringAndArray","parsedInput","tokens","match","string","exec","slice","indexOf","g","h","hy","hd","iDaysInMonth","toHijri","toGregorian","gy","gm","gd","dateFromArray","makeDateFromStringAndFormat","parsed","array","Function","removeParsedTokens","fn","jdn","mjdn","getNewMoonMJDNIndexByJDN","totalMonths","cYears","floor","d2h","div","mod","g2d","j","d2g","getNewMoonMJDNIndex","h2d","me","longDateFormat","makeFormatFunction","lastDay","min","updateOffset","dayOfYear","round","startOf","parseInt","endOf","_week","dow","doy","val","temp","isNaN","subtract","hours","minutes","seconds","milliseconds","undefined","clone","iYears","iDates","iWeeks","iConvert","define","amd","exports","module","require"],"mappings":"iBAuBYA,EAAMC,ECnBLC,EACM,CACX,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC/D,gBChLQC,EAAOC,EAAGC,GACtB,IAAIC,EACJ,IAAKA,KAAOD,EAAOA,EAAEE,eAAeD,KAAMF,EAAEE,GAAOD,EAAEC,IACrD,OAAOF,WAGKI,EAAaC,EAAQC,GAEjC,IADA,IAAIC,EAASF,EAAS,GACfE,EAAOC,OAASF,GAAcC,EAAS,IAAMA,EACpD,OAAOA,WAOKE,EAAeC,GAC3B,OAAOA,EACDC,YAAYD,IAAUA,EAAME,cAAcC,QAAQ,QAAS,MAC3DH,WAGMI,EAAQC,EAAQC,EAAMC,EAAOC,GACzC,IAAIC,EAAMJ,EAAOK,OAAS,MAAQ,GAClCL,EAAOM,GAAG,MAAQF,EAAM,YAAYH,GACpCD,EAAOM,GAAG,MAAQF,EAAM,SAASF,GACjCF,EAAOM,GAAG,MAAQF,EAAM,QAAQD,YAGpBI,EAAaC,GACzB,SAASC,KAET,OADAA,EAAEC,UAAYF,MACHC,EFbH5B,EAWT,KAXeC,EAWT,SAAUkB,GACf,GAAc,MAAVA,EACA,UAAUW,MAAM,sBAGpB,IA2DIC,EE3DuBC,EFAvBC,EACI,4NACJC,EAAwB,6CACxBC,EAA2B,QAC3BC,EAA6B,UAC7BC,EAAwB,QACxBC,EAAuB,UACvBC,EAAsB,gBACtBC,EACI,wHACJC,EAAqB,sBACrBC,EAAc,KACdC,EAAwB,yBAMxBC,EAAkB,GAClBC,EAAmB,YAAYC,MAAM,KACrCC,EAAe,QAAQD,MAAM,KAC7BE,EAAuB,CACnBC,GAAI,WACA,YAAYC,SAAW,GAE3BC,KAAM,SAAUC,GACZ,YAAYC,aAAaC,aAAaC,KAAMH,IAEhDI,MAAO,SAAUJ,GACb,YAAYC,aAAaI,QAAQF,KAAMH,IAE3CM,GAAI,WACA,YAAYC,SAEhBC,KAAM,WACF,YAAYC,cAEhBC,GAAI,WACA,YAAYC,SAEhBC,IAAK,WACD,OAAOxD,EAAa+C,KAAKU,QAAU,IAAK,IAE5CC,MAAO,WACH,OAAO1D,EAAa+C,KAAKU,QAAS,IAEtCE,OAAQ,WACJ,OAAO3D,EAAa+C,KAAKU,QAAS,IAEtCG,IAAK,WACD,OAAO5D,EAAa+C,KAAKc,YAAc,IAAK,IAEhDC,MAAO,WACH,YAAYD,aAEhBE,OAAQ,WACJ,OAAO/D,EAAa+C,KAAKc,YAAa,KAKlD,SAASG,EAASC,EAAMC,GACpB,gBAAiBtE,GACb,OAAOI,EAAaiE,EAAKE,KAAKpB,KAAMnD,GAAIsE,IAIhD,SAASE,EAAgBH,EAAMI,GAC3B,gBAAiBzE,GACb,YAAYiD,aAAayB,QAAQL,EAAKE,KAAKpB,KAAMnD,GAAIyE,IAI7D,KAAOhC,EAAiBjC,QACpBmB,EAAIc,EAAiBkC,MACrB/B,EAAqB,IAAMjB,EAAI,KAAO6C,EAClC5B,EAAqB,IAAMjB,GAC3BA,GAGR,KAAOgB,EAAanC,QAChBmB,EAAIgB,EAAagC,MACjB/B,EAAqB,IAAMjB,EAAIA,GAAKyC,EAChCxB,EAAqB,IAAMjB,GAC3B,GAGRiB,EAAqBgC,MAAQR,EAASxB,EAAqBY,KAAM,GAIjEzD,GE3F2B6B,EF2FLb,EAAOkC,aE1FzB4B,OAAOC,eAAuBD,OAAOC,eAAelD,GAC/C,GAAGmD,UAEDnD,EAAOmD,UACNnD,EAAOoD,YAAYvD,WFsFa,CACxCwD,SAAU,CACN,WACA,QACA,iBACA,iBACA,gBACA,qBACA,QACA,UACA,WACA,UACA,cACA,eAEJ5B,QAAS,SAAU6B,GACf,YAAYD,SAASC,EAAEpC,WAG3BqC,cAAe,CACX,MACA,MACA,QACA,SACA,QACA,SACA,MACA,MACA,MACA,MACA,QACA,SAEJjC,aAAc,SAAUgC,GACpB,YAAYC,cAAcD,EAAEpC,WAGhCsC,aAAc,SAAUC,GACpB,IAAI1D,EAAG2D,EAAKC,EAEZ,IADKpC,KAAKqC,gBAAerC,KAAKqC,cAAgB,IACzC7D,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAgBrB,GAdKwB,KAAKqC,cAAc7D,KACpB2D,EAAMG,EAAQ,CAAC,KAAO,EAAI9D,GAAK,GAAI,KACnC4D,EACI,IACApC,KAAKE,QAAQiC,EAAK,IAClB,MACAnC,KAAKD,aAAaoC,EAAK,IACvB,IACJnC,KAAKqC,cAAc7D,GAAK,IAAI+D,OACxBH,EAAM1E,QAAQ,IAAK,IACnB,MAIJsC,KAAKqC,cAAc7D,GAAGgE,KAAKN,GAAY,OAAO1D,KAI9D,IAAMiE,EAAc,CAChBvC,QACI,oGAAoGX,MAChG,KAERQ,aACI,iFAAiFR,MAC7E,MAKZ,GAAmC,mBAAxB3B,EAAO8E,aACd9E,EAAO8E,aAAa,QAASD,OAC1B,CACH,IAAIE,EAAY/E,EAAOgF,SACvBhF,EAAOiF,aAAa,QAASJ,GAC7B7E,EAAOgF,OAAOD,GA+BlB,SAASG,EAAsBC,EAAOC,GAClC,OAAQD,GACJ,IAAK,QACD,OAAOjE,EACX,IAAK,QACD,OAAOC,EACX,IAAK,SACD,OAAOC,EACX,IAAK,OACD,OAAOH,EACX,IAAK,OACL,IAAK,QACD,OAAOI,EACX,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,KACL,IAAK,KACD,OAAOL,EACX,IAAK,OACD,OAAOE,EACX,IAAK,OACD,OAAOC,EACX,IAAK,QACD,OAAOC,EACX,IAAK,IACL,IAAK,KACL,IAAK,MACL,IAAK,MACD,OAAOH,EACX,IAAK,MACL,IAAK,OACL,IAAK,KACL,IAAK,MACL,IAAK,OACD,OAAOI,EACX,IAAK,IACL,IAAK,IACD,OAAOrB,EAAOkC,WAAWkD,EAAOC,IAAIC,eACxC,IAAK,IACD,OAAO9D,EACX,IAAK,IACL,IAAK,KACD,OAAOF,EACX,IAAK,IACD,OAAOC,EACX,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,OAAOP,EACX,QACI,WAAW2D,OAAOQ,EAAMrF,QAAQ,KAAM,MAIlD,SAASyF,EAAwBJ,EAAOK,EAAOJ,GAC3C,IAAInG,EACAwG,EAAgBL,EAAOM,GAE3B,OAAQP,GACJ,IAAK,KACL,IAAK,MACDM,EAAc,GAAc,MAATD,EAAgB,IAAMA,EAAQ,EACjD,MACJ,IAAK,OACL,IAAK,QAEQ,OADTvG,EAAIe,EAAOkC,WAAWkD,EAAOC,IAAIhB,aAAamB,IAC/BC,EAAc,GAAKxG,EAC7BmG,EAAOO,UAAW,EACvB,MACJ,IAAK,KACL,IAAK,MACL,IAAK,OACL,IAAK,QACY,MAATH,IAAeC,EAAc,KAAOD,GACxC,MACJ,IAAK,MACDC,EAAc,KAAOD,KAAWA,EAAQ,GAAK,KAAO,MACpD,MACJ,IAAK,QACL,IAAK,SACDC,EAAc,KAAOD,EAEhB,MAATA,IAAeJ,EAAOO,UAAW,GA8GzC,SAASC,EAAYrB,EAAKsB,EAAgBC,GACtC,IAEIC,EAFAC,EAAMF,EAAuBD,EAC7BI,EAAkBH,EAAuBvB,EAAI2B,MAUjD,OAPID,EAAkBD,IAClBC,GAAmB,GAEnBA,EAAkBD,EAAM,IACxBC,GAAmB,GAEvBF,EAAiBrB,EAAQH,GAAK4B,IAAIF,EAAiB,KAC5C,CACHG,KAAMC,KAAKC,KAAKP,EAAerD,aAAe,GAC9CzC,KAAM8F,EAAejD,SAQ7B,SAASyD,EAAWf,EAAOvD,EAAQuE,EAAMpG,GACrC,IACID,EACAgE,EACAsC,EAHArB,EAAS,CAAEsB,GAAIlB,EAAOmB,GAAI1E,EAAQoD,GAAImB,GAI1C,GAAIvE,EAAQ,CACR,GEtcZ,SAAwBuD,GACpB,MAAiD,mBAA1C1B,OAAOpD,UAAUkG,SAASpD,KAAKgC,GFqc1BqB,CAAQ5E,GACR,OAzFZ,SAAoCmD,EAAQhF,GACxC,IACIQ,EAEAkG,EACAC,EACAC,EACAC,EANAC,EAAM9B,EAAOuB,GAAGlH,OAQpB,GAAY,IAARyH,EACA,OAAOX,EAAW,IAAIY,KAAKC,MAG/B,IAAKxG,EAAI,EAAGA,EAAIsG,EAAKtG,GAAK,EAEtBoG,EAAe,GACfF,EAAaP,EAAWnB,EAAOsB,GAFtBtB,EAAOuB,GAAG/F,GAEwBwE,EAAOC,GAAIjF,IAEtCiH,YAEhBL,GAAgBF,EAAWQ,OACvBR,EAAWS,MAAKP,GAAgBF,EAAWS,IAAI9H,SAChC,MAAfwH,GAAuBD,EAAeC,KACtCA,EAAcD,EACdD,EAAaD,IAIrB,OAAOC,EA6DQS,CAA2BpC,EAAQhF,GAE1CD,EArHZ,SAAqCiF,GACjC,IAGIxE,EACAuE,EACAsC,EALAC,EAAStC,EAAOuB,GAAGgB,MAAM7G,GACzB8G,EAASxC,EAAOsB,GAChBQ,EAAMQ,EAAOjI,OAOjB,IAFA2F,EAAOM,GAAK,GAEP9E,EAAI,EAAGA,EAAIsG,EAAKtG,GAAK,GAEtB6G,GAAevC,EADfC,EAAQuC,EAAO9G,GAC6BwE,GAAQyC,KAAKD,IACrD,IAAI,MAEJA,EAASA,EAAOE,MACZF,EAAOG,QAAQN,GAAeA,EAAYhI,SAE9CoC,EAAqBsD,IACrBI,EAAwBJ,EAAOsC,EAAarC,GAIpD,OAFIwC,IAAQxC,EAAOmC,IAAMK,GA1C7B,SAAuBxC,GACnB,IAAI4C,EACAC,EACAC,EAAK9C,EAAOM,GAAG,GACfe,EAAKrB,EAAOM,GAAG,GACfyC,EAAK/C,EAAOM,GAAG,GAEnB,OAAU,MAANwC,GAAoB,MAANzB,GAAoB,MAAN0B,EAAmB,CAAC,EAAG,EAAG,IAC1DD,EAAKA,GAAM,EACXzB,EAAKA,GAAM,IACX0B,EAAKA,GAAM,GACF,GAAKA,EAAKzD,EAAQ0D,aAAaF,EAAIzB,MAAKrB,EAAOO,UAAW,GAEnEsC,EAAII,GADJL,EAAIM,EAAYJ,EAAIzB,EAAI0B,IACVI,GAAIP,EAAEQ,GAAIR,EAAES,IAC1BrD,EAAOkC,OAAS,IACVW,EAAEC,KAAOA,IAAI9C,EAAOkC,QAAU,KAC9BW,EAAExB,KAAOA,IAAIrB,EAAOkC,QAAU,KAC9BW,EAAEE,KAAOA,IAAI/C,EAAOkC,QAAU,GAC7B,CAACU,EAAEO,GAAIP,EAAEQ,GAAIR,EAAES,KA0BfC,CAActD,GA8FNuD,CAA4BvD,GA5D/C,SAA4BA,GACxB,IAKIxE,EACA+G,EACAiB,EAPAhB,EAASxC,EAAOsB,GAChBlB,EAAQ,GACRvD,EAAS,GACT4G,EAAQzD,EAAOuB,GAAGgB,MAAM7G,GACxBoG,EAAM2B,EAAMpJ,OAKhB,IAAKmB,EAAI,EAAGA,EAAIsG,EAAKtG,GAAK,GAEtBgI,GAAU1D,EADVyC,EAAQkB,EAAMjI,GACyBwE,GAAQyC,KAAKD,IAChD,IAAI,MAEJA,EAASA,EAAOE,MAAMF,EAAOG,QAAQa,GAAUA,EAAOnJ,SACpDoC,EAAqB8F,aAAkBmB,WACzC7G,GAAU0F,EACNiB,IAAQpD,GAASoD,IAG7BxD,EAAOsB,GAAKlB,EACZJ,EAAOuB,GAAK1E,EAuCJ8G,CAAmB3D,GACnBnD,EAAS,cAAgBmD,EAAOuB,GAChCnB,EACInG,EAAac,EAAK,GAAI,GACtB,IACAd,EAAac,EAAK,GAAK,EAAG,GAC1B,IACAd,EAAac,EAAK,GAAI,GACtB,IACAiF,EAAOsB,GASnB,OANSvC,EAAL/D,EAASJ,EAAOI,IAAIoF,EAAOvD,EAAQuE,GAC9BxG,EAAOwF,EAAOvD,EAAQuE,IACP,IAApBpB,EAAOO,WAAoBxB,EAAEwB,UAAW,GAC5CxB,EAAEmD,OAASlC,EAAOkC,QAAU,EAE5BtI,EADAyH,EAAKlG,EAAamE,EAAQsE,IACf7E,GACJsC,EAGX,SAAS/B,EAAQc,EAAOvD,EAAQuE,GAC5B,OAAOD,EAAWf,EAAOvD,EAAQuE,GAAM,GA0O3C,SAAS6B,EAAQE,EAAIC,EAAIC,GACrB,IAAIR,EA4DR,SAAagB,GACT,IAAIC,EAAOD,EAAM,KACbrI,EAuFR,SAAkCsI,GAC9B,IAAK,IAAItI,EAAI,EAAGA,EAAI7B,EAAwBU,OAAQmB,GAAQ,EACxD,GAAI7B,EAAwB6B,GAAKsI,EAAM,OAAOtI,EAzF1CuI,CAAyBD,GAC7BE,EAAcxI,EAAI,MAClByI,EAAShD,KAAKiD,OAAOF,EAAc,GAAK,IAK5C,MAAO,CACHlB,GALKmB,EAAS,EAMd5C,GALK2C,EAAc,GAAKC,EAMxBlB,GALKe,EAAOnK,EAAwB6B,EAAI,GAAK,GAnEzC2I,CAyFZ,SAAahB,EAAIC,EAAIC,GAOjB,OALIe,EAAqC,MAAhCjB,EAAKiB,EAAIhB,EAAK,EAAG,GAAK,QAAgB,GAC3CgB,EAAI,IAAMC,EAAIjB,EAAK,EAAG,IAAM,EAAG,GAC/BC,EACA,SACIe,EAA6C,EAAzCA,EAAIjB,EAAK,OAASiB,EAAIhB,EAAK,EAAG,GAAI,KAAU,GAAK,IA/FjDkB,CAAInB,EAAIC,EAAK,EAAGC,IAE5B,OADAR,EAAExB,IAAM,EACDwB,EAGX,SAASK,EAAYJ,EAAIzB,EAAI0B,GACzB,IAAIH,EAyGR,SAAaiB,GACT,IAAIU,EAAG/I,EAAG6H,EAAID,EAOd,OALAmB,GADAA,EAAI,EAAIV,EAAM,WACyC,EAA/CO,EAAuC,EAAnCA,EAAI,EAAIP,EAAM,UAAW,QAAa,GAAS,KAC3DrI,EAA2B,EAAvB4I,EAAIC,EAAIE,EAAG,MAAO,GAAS,IAC/BlB,EAAKe,EAAIC,EAAI7I,EAAG,KAAM,GAAK,EAC3B4H,EAAKiB,EAAID,EAAI5I,EAAG,KAAM,IAAM,EAErB,CACH2H,GAFCiB,EAAIG,EAAG,MAAQ,OAASH,EAAI,EAAIhB,EAAI,GAGrCA,GAAIA,EACJC,GAAIA,GApHAmB,CAqCZ,SAAa1B,EAAIzB,EAAI0B,GACjB,IAAIvH,EAAIiJ,EAAoB3B,EAAIzB,GAGhC,OAFW0B,EAAKpJ,EAAwB6B,EAAI,GAAK,EAChC,KAxCLkJ,CAAI5B,EAAIzB,EAAK,EAAG0B,IAE5B,OADAH,EAAEQ,IAAM,EACDR,EAQX,OAxPAhJ,EAAO0F,EAAS1E,GAChB0E,EAAQsE,GAAKzI,EAAaP,EAAOgJ,IAEjCtE,EAAQtE,IAAM,SAAUoF,EAAOvD,EAAQuE,GACnC,OAAOD,EAAWf,EAAOvD,EAAQuE,GAAM,IAO3C9B,EAAQsE,GAAG/G,OAAS,SAAUA,GAC1B,IAAIrB,EACAd,EACAiK,EAAK3H,KAET,GAAIH,EAAQ,CAKR,IAJArB,EAAI,EACJd,EAAU,SAAU0F,GAChB,OAAOuE,EAAG7H,aAAa8H,eAAexE,IAAUA,GAE7C5E,EAAI,GAAKG,EAAsB6D,KAAK3C,IACvCrB,GAAK,EACLqB,EAASA,EAAOnC,QAAQiB,EAAuBjB,GAE9C2B,EAAgBQ,KACjBR,EAAgBQ,GAvT5B,SAA4BA,GACxB,IAEIrB,EAFAiI,EAAQ5G,EAAO0F,MAAM7G,GACrBrB,EAASoJ,EAAMpJ,OAGnB,IAAKmB,EAAI,EAAGA,EAAInB,EAAQmB,GAAK,EACrBiB,EAAqBgH,EAAMjI,MAC3BiI,EAAMjI,GAAKiB,EAAqBgH,EAAMjI,KAE9C,gBAAiB2D,GACb,IAAI/E,EAAS,GACb,IAAKoB,EAAI,EAAGA,EAAInB,EAAQmB,GAAK,EACzBpB,GACIqJ,EAAMjI,aAAckI,SACd,IAAMD,EAAMjI,GAAG4C,KAAKe,EAAKtC,GAAU,IACnC4G,EAAMjI,GACpB,OAAOpB,GAuSuByK,CAAmBhI,IAEjDA,EAASR,EAAgBQ,GAAQG,MAErC,OAAOpC,EAAOgJ,GAAG/G,OAAOuB,KAAKpB,KAAMH,IAGvCyC,EAAQsE,GAAGlG,MAAQ,SAAU0C,GACzB,IAAI0E,EAASjC,EAAGD,EAChB,MAAqB,iBAAVxC,GACPyC,EAAII,EAAQjG,KAAKnC,OAAQmC,KAAKlC,QAASkC,KAAKjC,QAC5C+J,EAAU7D,KAAK8D,IAAIlC,EAAEE,GAAIzD,EAAQ0D,aAAa5C,EAAOyC,EAAExB,KAEvD1G,EAAQqC,MADR4F,EAAIM,EAAY9C,EAAOyC,EAAExB,GAAIyD,IACb3B,GAAIP,EAAEQ,GAAIR,EAAES,IAGxBrG,KAAKlC,UAAY8H,EAAEQ,IACnBpG,KAAKjC,SAAW6H,EAAES,IAClBrG,KAAKnC,SAAW+H,EAAEO,IAElBxI,EAAQqC,KAAM4F,EAAEO,GAAIP,EAAEQ,GAAIR,EAAES,IAEhCzI,EAAOoK,aAAahI,YAGbiG,EAAQjG,KAAKnC,OAAQmC,KAAKlC,QAASkC,KAAKjC,QAAQ+H,IAI/DxD,EAAQsE,GAAGjH,OAAS,SAAUyD,GAC1B,IAAI0E,EAASjC,EAAGD,EAChB,GAAa,MAATxC,EAAe,CACf,GAAqB,iBAAVA,EAAoB,CAE3B,MADAA,EAAQpD,KAAKF,aAAamC,aAAamB,KAC1B,GAGT,YAFAA,GAAS,EAwBjB,OAnBAyC,EAAII,EAAQjG,KAAKnC,OAAQmC,KAAKlC,QAASkC,KAAKjC,QAC5C+J,EAAU7D,KAAK8D,IAAIlC,EAAEE,GAAIzD,EAAQ0D,aAAaH,EAAEC,GAAI1C,IACpDpD,KAAKU,MAAMmF,EAAEC,GAAKsB,EAAIhE,EAAO,MAC7BA,EAAQiE,EAAIjE,EAAO,KACP,IACRA,GAAS,GACTpD,KAAKU,MAAMV,KAAKU,QAAU,IAG9B/C,EAAQqC,MADR4F,EAAIM,EAAYlG,KAAKU,QAAS0C,EAAO0E,IACrB3B,GAAIP,EAAEQ,GAAIR,EAAES,IAGxBrG,KAAKlC,UAAY8H,EAAEQ,IACnBpG,KAAKjC,SAAW6H,EAAES,IAClBrG,KAAKnC,SAAW+H,EAAEO,IAElBxI,EAAQqC,KAAM4F,EAAEO,GAAIP,EAAEQ,GAAIR,EAAES,IAEhCzI,EAAOoK,aAAahI,WAGpB,OAAOiG,EAAQjG,KAAKnC,OAAQmC,KAAKlC,QAASkC,KAAKjC,QAAQsG,IAI/D/B,EAAQsE,GAAGxG,MAAQ,SAAUgD,GACzB,IAAIyC,EAAGD,EACP,MAAqB,iBAAVxC,GAGPzF,EAAQqC,MADR4F,EAAIM,GADJL,EAAII,EAAQjG,KAAKnC,OAAQmC,KAAKlC,QAASkC,KAAKjC,SAC1B+H,GAAID,EAAExB,GAAIjB,IACZ+C,GAAIP,EAAEQ,GAAIR,EAAES,IAGxBrG,KAAKlC,UAAY8H,EAAEQ,IACnBpG,KAAKjC,SAAW6H,EAAES,IAClBrG,KAAKnC,SAAW+H,EAAEO,IAElBxI,EAAQqC,KAAM4F,EAAEO,GAAIP,EAAEQ,GAAIR,EAAES,IAEhCzI,EAAOoK,aAAahI,YAGbiG,EAAQjG,KAAKnC,OAAQmC,KAAKlC,QAASkC,KAAKjC,QAAQgI,IAI/DzD,EAAQsE,GAAGtG,WAAa,SAAU8C,GAC9B,IAAI6E,EACAhE,KAAKiE,OACA5F,EAAQtC,MAAMmI,QAAQ,OACnB7F,EAAQtC,MAAMmI,QAAQ,UACtB,OACJ,EACR,OAAgB,MAAT/E,EAAgB6E,EAAYjI,KAAK+D,IAAIX,EAAQ6E,EAAW,MAGnE3F,EAAQsE,GAAGZ,aAAe,WACtB,OAAOoC,SAAS9F,EAAQtC,MAAMqI,MAAM,UAAUxI,OAAO,SAGzDyC,EAAQsE,GAAGpG,MAAQ,SAAU4C,GACzB,IAAIY,EAAOR,EACPxD,KACAA,KAAKF,aAAawI,MAAMC,IACxBvI,KAAKF,aAAawI,MAAME,KAC1BxE,KACF,OAAgB,MAATZ,EAAgBY,EAAOhE,KAAK+D,IAAqB,GAAhBX,EAAQY,GAAW,MAG/D1B,EAAQsE,GAAG9F,UAAY,SAAUsC,GAC7B,IAAIvF,EAAO2F,EACPxD,KACAA,KAAKF,aAAawI,MAAMC,IACxBvI,KAAKF,aAAawI,MAAME,KAC1B3K,KACF,OAAgB,MAATuF,EAAgBvF,EAAOmC,KAAK+D,IAAIX,EAAQvF,EAAM,MAGzDyE,EAAQsE,GAAG7C,IAAM,SAAU0E,EAAKlL,GAC5B,IAAImL,EAgBJ,OAfc,OAAVnL,GAAmBoL,OAAOpL,KAC1BmL,EAAOD,EACPA,EAAMlL,EACNA,EAAQmL,GAGE,WADdnL,EAAQD,EAAeC,IAEnByC,KAAKU,MAAMV,KAAKU,QAAU+H,GACT,WAAVlL,EACPyC,KAAKL,OAAOK,KAAKL,SAAW8I,GACX,UAAVlL,EACPyC,KAAKI,MAAMJ,KAAKI,QAAUqI,GAE1B7K,EAAOgJ,GAAG7C,IAAI3C,KAAKpB,KAAMyI,EAAKlL,SAKtC+E,EAAQsE,GAAGgC,SAAW,SAAUH,EAAKlL,GACjC,IAAImL,EAgBJ,OAfc,OAAVnL,GAAmBoL,OAAOpL,KAC1BmL,EAAOD,EACPA,EAAMlL,EACNA,EAAQmL,GAGE,WADdnL,EAAQD,EAAeC,IAEnByC,KAAKU,MAAMV,KAAKU,QAAU+H,GACT,WAAVlL,EACPyC,KAAKL,OAAOK,KAAKL,SAAW8I,GACX,UAAVlL,EACPyC,KAAKI,MAAMJ,KAAKI,QAAUqI,GAE1B7K,EAAOgJ,GAAGgC,SAASxH,KAAKpB,KAAMyI,EAAKlL,SAK3C+E,EAAQsE,GAAGuB,QAAU,SAAU5K,GAE3B,MAAc,WADdA,EAAQD,EAAeC,KACY,WAAVA,GACP,UAAVA,GACAyC,KAAKL,OAAO,GAEhBK,KAAKI,MAAM,GACXJ,KAAK6I,MAAM,GACX7I,KAAK8I,QAAQ,GACb9I,KAAK+I,QAAQ,GACb/I,KAAKgJ,aAAa,SAGXpL,EAAOgJ,GAAGuB,QAAQ/G,KAAKpB,KAAMzC,IAI5C+E,EAAQsE,GAAGyB,MAAQ,SAAU9K,GAEzB,YAAc0L,KADd1L,EAAQD,EAAeC,KACc,eAAVA,YAGf4K,QAAQ5K,GACfwG,IAAI,EAAa,YAAVxG,EAAsB,OAASA,GACtCqL,SAAS,EAAG,iBAGrBtG,EAAQsE,GAAGsC,MAAQ,WACf,OAAO5G,EAAQtC,OAGnBsC,EAAQsE,GAAGuC,OAAS7G,EAAQsE,GAAGlG,MAC/B4B,EAAQsE,GAAG1G,QAAUoC,EAAQsE,GAAGjH,OAChC2C,EAAQsE,GAAGwC,OAAS9G,EAAQsE,GAAGxG,MAC/BkC,EAAQsE,GAAGyC,OAAS/G,EAAQsE,GAAGpG,MAM/B8B,EAAQ0D,aAAe,SAAUnI,EAAMC,GACnC,IAAIU,EAAIiJ,EAAoB5J,EAAMC,EAAQ,GAG1C,OADQnB,EAAwB6B,GAAK7B,EAAwB6B,EAAI,IAgBrE8D,EAAQgH,SAAW,CACfrD,QAASA,EACTC,YAAaA,GAGV5D,EAUP,SAAS8E,EAAIvK,EAAGC,GACZ,SAAUD,EAAIC,GAGlB,SAASuK,EAAIxK,EAAGC,GACZ,OAAOD,KAAOA,EAAIC,GAAKA,EAwG3B,SAAS2K,EAAoB3B,EAAIzB,GAI7B,OAF2B,IADdyB,EAAK,GACc,GAAKzB,EAAK,GACpB,QA70BJ,mBAAXkF,QAAyBA,OAAOC,IACvCD,OAAO,CAAC,UAAW,SAAU3L,GAEzB,OADAnB,EAAOC,EAAQkB,GACRlB,EAAQkB,KAEO,iBAAZ6L,QACdC,OAAOD,QAAU/M,EAAQiN,QAAQ,WAEjClN,EAAKmB,OAASlB,EAAQD,EAAKmB"}